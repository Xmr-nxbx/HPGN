public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_vcenter); }
public virtual void AddAll(BlockT> src) { if (src.size == { int srcDirIdx = 0; for (;(src.directoryirectory[srcDirIdx], 0, BLOCK_SIZE); if (src.tailBlkIdx != 0)addAll(src..tailBlock (src.taillkIdx != 0)add(srcililBlock,,,Block 0, src.tailBlkIdx)); } }
public void void WriteByte(byte b) { if (upto == blockSize) { if (currentBlock != null) { AddBlock(currentBlock); } currentBlock = new byte[blockSize]]; } } current } }
public virtual ObjectId GetObjectId() { return @objectId; }
public virtual DeleteDomainEntryResponse DeleteDomainEntry(DeleteDomainEntryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDomainEntryRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDomainEntryResponseUnmarshaller.Instance; return Invoke<DeleteDomainsResponse>(request, options); }
public override RamBytesUsed() { return ((termOffsets } }
public string GetFullMessage() { byte[] raw = buffer; int msgB = RawParseUtils.tagMessage(raw, 0); if (msgB < 0) { return ""; return " """; } return } }
public POIFSFileSystem() { this(true); _header. =BATCount; _header. =B =ArrayAT int[] { BATBlock bb = BATBlockEmptyBATBlock(bBlockSize, false)BlockBlock; bb.OurBlockIndex(1); _bat_block.Add(bbb); SetNextBlock(0,0, POIFSConstants.END_OF_CHAIN) SetNextBlock((1, POIFSConstants.FAT_SECTOR_BLOCK) _property_table.setStartBlock(0); }
public void void init(int address) { = pool.buffers[address >> ByteBlockPool.BYTE_BLOCK_SHIFT]; Debug.Assert upto =.Address & ByteBlockPool.BYTE_BLOCK_MASK; offset0 = address; Debug.Assert(upto < @object.Length; }
public virtual SubmodulemoduleAddCommand SetPath(string path) { this.path = path; return this; }
public virtual ListIngestionsResponse ListIngestions(ListIngestionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListIngestionsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListIngestionsResponseUnmarshaller.Instance; return Invoke<ListIngestionsResponse>(request, options); }
public QueryParserTokenManager(CharCharStream stream, int lexState) { this(st =); SwitchTo(lexState); }
public virtual GetShardIteratorResponse GetShardIterator(GetShardIteratorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =ShShardIteratorRequestMarshaller.Instance; options.ResponseUnmarshaller = GetShardIteratorResponseUnmarshaller.Instance; return Invoke<GetShardIteratorResponse>(request, options); }
public ModifyStrategyRequest(): base(" Modify { { ModifyStrategy { { { { { {Strategy { { {paviisegis", "2016-1 Protocol = ProtocolType.HTTPS; Method = MethodType.POST }
public override bool Ready() { lock (@lock) { if (in == null) { throw new java. } try { return bytes.has =() || in..available() > } catch (IOException e) { return false; } } }
public EscherOptRecord GetOptRecord() { return _optRecord; }
public override int read(byte[] buffer, int offset, int length) length) { lock (this) { if (buffer == null) { throw new System.ArgumentNullException("buffer == null"); } java.util.Arrays.checkOffsetAnd; if (length == 0) 0) { if (length == 0) 0) 0) 0) { return } int copylen = count - pos < length ? count - pos : length; for (int i = 0; i < copylen; i++) { buffer[offset + i] = (byte) this.buffer.charAt(pos + i); for } pos += copylen; } return copylenlenlen; }
public OpenNLPSentenceBreakIterator(NLPSentenceDetectorOp sentenceOp) { this.sentenceOp = sentenceOp; }
public virtual void print(String str) { write(str != null ? str : }
public NotImplementedFunctionException(string functionName, NotImplementedException cause) {unctionName, =ause); this.functionName = functionName; }
public virtual V next() { return basenextEntryEntry.Value(); }
public override read readBytes(byte[] b, int offset, int len, bool useBuffer) { int available = bufferLength - bufferPosition; iflenlen <= available) { iflen =>0) in(buffer, bufferPosition, b, offset, len); bufferPosition+ =len; } else { ifavailavailable > 0) { System.Array.Copy(buffer, bufferPosition, b, offset, available); offset += available; len -= available; bufferPosition += available; } if (useBuffer && len <bufferSize) { refill(); if(bufferLength<len) { System.Array.Copy(buffer, 0, b, offset, bufferLength); throw new EOFException("read past E EOF: " + this); } } else { System.Array.Copy(buffer, 0, b, offset, len); bufferPosition=len; } } } } } }after > length())throw } } } } } }
public virtual TagQueueResponse  tag(TagQueueRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =TagTagQueueRequestMarshaller.Instance; options.ResponseUnmarshaller = TagQueueResponseUnmarshaller.Instance; return Invoke<TagQueueResponse>(request, options); }
public virtual void remove() { throw new System.NotSupportedException(); }
public virtual CacheSubnetGroupResponse CCacheSubnetGroup(ModifyCacheSubnetGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyCacheSubnetGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyCacheSubnetGroupResponseUnmarshaller.Instance; return Invoke<ModifyCacheSubnetGroupResponse>(request, options); }
public virtual void SetParams(String parparams) { boolsetParams(s(params); language = country = variant = ""; stringTokenizer st = new StringTokenizer(paramparams, ","); if (st.MoreTokens())language = st.nextTokenToken(); return (st.has } }
public virtual DeleteDocumentationVersionResponse DeleteDocumentationVersion(DeleteDocumentationVersionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDocumentationVersionRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDocumentationVersionResponseUnmarshaller.Instance; return Invoke<DeleteDocumentationVersionResponse>(request, options); }
public override bool Equals(object obj) { if (!(obj is FacetLabel)) { return false; } FacetLabel other = (FacetLabel) obj; if (length != other.length) { return false; } for (int i = length - 1; i >= 0; i--) { if (!coms[i].Equals(other.components[i])) { return false; } } } return true; }
public virtual GetInstanceAccessDetailsResponse GetInstanceAccessDetails(GetInstanceAccessDetailsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =InstanceInstanceAccessDetailsRequestMarshaller.Instance; options.ResponseUnmarshaller = executeGetInstanceAccessDetailsResponseUnmarshaller.Instance; return Invoke<GetInstanceAccessDetailsResponse>(request, options); }
public HSSFPolygon CreatePolygon(HSSFChildAnchor anchor) { HSSFPolygon shape = new HSSFPolygon(this, anchor); shape.Parent(this); shape.Anchor(an anchor); shapes.Add(shape); onCreateCreate(shape); return shape; }
public string GetSheetName(int sheetIndex) { return GetBoundSheetRec(sheetIndex).getSheetname(); }
public virtual GetDashboardResponse GetDashboard(GetDashboardRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =DashboardDashboardRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDashboardResponseUnmarshaller.Instance; return Invoke<GetDashboardResponse>(request, options); }
public virtual AssociateSigninDelegateGroupsWithAccountResponse AssociateSigninDelegateGroupsWithAccount(AssociateSignAssociateinDelegateGroupsWithAccountRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =AssociateSigninDelegateGroupsWithAccountRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateSigninDelegateGroupsWithAccountResponseUnmarshaller.Instance; return Invoke<AssociateSigninDelegateGroupsWithAccountResponse>(request, options); }
public void AddMultipleBlanks(MulBlankRecord mbr) { for (int j = 0; j < mbr.getNumColumns(); j++) { BlankRecord br = new BlankRecord(); br.Column = short; br.Row =br.Row; br.XFIndex(mbbr.XFAt(j)); insertCellCell(br); } }
public static string quote(string(string string) { StringBuilder sb = new StringBuilder(); sb.Append("\\Q"); int apos = 0; int k; while ((k = @.indexOf("\\E", apos)) >= 0) { sb.Append(string ((int)(("); Apos = k + 2; } return.Append(string.Substring(apos))String\\E").toString(); } }
public override java.nio.ByteBuffer putInt(int value) { throw new java.nio.ReadOnlyBufferException(); }
public ArrayPtg Read[][] values2d) { int nColumns = values2d[0].Length; int nRows = values2d.Length; _nColumns = (short) nColumns; _nRows = (short) nRows; Object[] vv = new Object[_nColumns * _nRows]; for (int r =; r <nRows; r++) { Object[] rowData = values2d[r]; for (int c =; vv[getValueIndex(c, r)] = rowData[c]; } } _arrayValues = vv; _reserved0Int = 0; _reserved1Short = 0; _reserved2Byte = 0; _reserved2Byte = = = = 0; }
public virtual GetIceServerConfigResponse GetIceServerConfig(GetIceServerConfigRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =IIceServerConfigRequestMarshaller.Instance; options.ResponseUnmarshaller = GetIceServerConfigResponseUnmarshaller.Instance; return Invoke<GetIceServerConfigResponse>(request, options); }
public virtual string ToString() { var sb = new StringBuilder( StringBuilder(64; sb.Append( =Type().Type(). + " ["; }
public override string ToString(string field) { return "ToChildBlockJoinQuery ("+parentQuery.toString()+")"; }
public virtual void incRef() { refCount.inAndGet(); }
public virtual UpdateConfigurationSetSendingEnabledResponse UpdateConfigurationSetSendingEnabled(UpdateConfigurationSetSendingEnabledRequest { var options = new InvokeOptions(); options.RequestMarshaller =ConfigurationSetConfigurationSetSendingEnabledRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateConfigurationSetSendingEnabledResponseUnmarshaller.Instance; return Invoke<UpdateConfigurationSetSendingEnabledResponse>(request, options); }
public int Get GetNextXBATChainOffset() { return GetXBATEntriesPerBlock() * LittleEndianConsts.INT_SIZE; }
public void multiplyByPowerOfTen(int pow10) { TenPower tp = TenPower.getInstance(Math.abs(pow10)); if (pow10 < 0) { mulShift(tp._divisor, tp._divisorShift); } else { mulShift(tp._multiplicand, tp._multiplierShift); } } }
public override string ToString() { StringBuilder b = new StringBuilder(); int          l = length(); b.Append(File.se for (int i = 0; i < l; i++) { b.Append(getComponent(i)); if (i < l - 1) { b.Append(File.se } } return b.ToString(); }
public InstanceProfileCredentialsProvider withFetcher(ECSMetadataServiceCredentialsFetcher fetetcher) { this.fetcher = fetcher; this.fetcher.setNameroleleName; return this; return }
public virtual void SetProgressMonitor(ProgressMonitor pm) { progressMonitor = pm; }
public virtual void Reset() { if (!first()) { ptr = 0; if (!eof())parseEntry(); } }
public E previous() { if (iterator.previousIndex() >= start) { return iterator.previous(); } throw new NoSuchElementException(); }
public virtual string GetNewPrefix() { return this.newPrefix; }
public int int indexOfValue(int value) { for (int i = 0; i < mSize; i++)if (mValues[i] == value)returnreturn i return -1; }
public virtualCharsRef> uniqueeStems(char word[], int length) { IList<CharsRef> stems = stem(word, length); if (stems.Count < 2) { return stems; } java.util.ArraySets = new CharArraySet(8, dictionary.ignoreCase); IList<CharsRef> deduped = new List<>(); foreach (CharsRef s : stems) { if } } } } } return } }
public virtual GetGatewayResponsesResponse GetGatewayResponses(GetGatewayResponsesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =GatewayGatewayResponsesRequestMarshaller.Instance; options.ResponseUnmarshaller = GetGatewayResponsesResponseUnmarshaller.Instance; return Invoke<GetGatewayResponsesResponse>(request, options); }
public virtual void SetPosition(long pos) { currentBlockIndex = (int) (pos >> blockBits); currentBlock = blocks[currentBlockIndex]; currentBlockUpto = (int) (pos & blockMask); }
public virtual long skip(long n) { int s = (int)Math.min(availableable(), Math.max(0, n)); ptr += s; return s; }
public BootstrapActionDetail(BootstrapActionConfig bootstrapActionConfig) { _BootstrapActionConfig(bootstrapActionConfig); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_row); out1.WriteShort(field_2_col); out1.WriteShort(field_3_flags); out1.WriteShort(field_4_shapeid); out1.WriteShort(field_6_author.Length)()); out1.WriteByte(field_5_hasMultibyte ? 0x01 : 0x00); if (field_5_hasMultibyte) { StringUtil.PutUnicodeLE(field_6_author, out1); } else { StringUtil.PutCompressedUnicode(field_6_author, out1); } if (field_7_padding != null) {field_7_padding.intValue()); } } } }
public virtual int lastIndexOf(string string) { return lastIndexOf(), count); }
public virtual bool Add(E @object) { return addLastImpl(object)); }
public void unsetSection(string(Stringctionction, string subsection) { ConfigSnapshot src, res; do src = state.(); res } while }
public virtual Get GetTagName() { return tagName; }
public virtual void AddSubRecord(int index, SubRecord element) { subrecords.Add(index, element); }
public override bool remove(object o) { lock (mutex) { return delegate().remove(o); } }
public override Object Create(TokenStreamaph return new DoubleMetaphoneFilter(input, maxCodeLength, inject); }
public virtual long length() { return inCoreLength(); }
public virtual void SetValue(bool newValue) { value = newValue; }
public Pair(ContentSource oldSource, ContentSource newSource) { this.oldSource = oldSource; this.newSource = newSource; }
public virtual int Get i)) { var (count = i) { throw. InvalidOperation i; return entries[i]; }
public CreateRepoRequest(): base("cr", "2016-06-07", "CreateRepo", "cr", { "openAPI") UriPattern = "/repos"); Method = MethodType.PUT); }
public virtual bool IsDeltaBaseAsOffset() { return deltaBaseAsOffset; }
public void void remove() { if (expectedModCount == list.modCount) { if (lastLink != null) { LLink.E next = lastLink.next; LLink.T> previous =vious lastLink..vious; next.previous = previous; previous.next = next; if (lastLink == link) { pos--; } link = previousvious; lastLink = null; expectedModCount++Count; list.size--; list.modCount++; } else { throw } } } } else throw } } }
public virtual MergeShardsResponse MergeShards(MergeShardsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =MergeMergeShardsRequestMarshaller.Instance; options.ResponseUnmarshaller = MergeShard mResponseUnmarshallerResponseUnmarshaller.Instance; return Invoke<MergeShards options); }
public virtual AllocateHostedConnectionResponse AocateHostedConnection(AllocateHostedConnectionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =AlAllocateHostedConnectionRequestMarshaller.Instance; options.ResponseUnmarshaller = AllocateHostedConnectionResponseUnmarshaller.Instance; return Invoke<AllocateHostedConnectionResponse>(request, options); }
public virtual int GetBeginIndex() { return start; }
public static WeightedTerm[] GetTerms(Query query) { return GetTerms(query,false); }
public override java.nio.ByteBuffer compact() { throw new java.nio.ReadOnlyBufferException(); }
public override void Decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) { for (int i = 0; i < iterations; ++i) { long byte0 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = byte0)((block; >> >>; >>; long byte1 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = ((byte0 & 3) << 4) | (byte1byte 4); long byte2 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = ((byte1 & 15) << 2) | (bytebytebyte 6 6); values[valuesOffset++] = byte2 & & 63; values[valuesOffset++] = byte2 & 63333; } }
public override string GetHumanishName() { string s = GetPath(); if ("/".Equals(s) || "" if (s == null) throw new bool(); buffer.Append(" elements; if ("file".Equals(scheme) || LOCAL_FILE.matcher(s).es()) elements = s.split("[\" + FileparatorChar + "/]")"); elseelements = s.splits.Length +"); if (elements.Length == 0) { elseelementss[s[elements.length -; if if return result; }
public virtual DescribeNotebookInstanceLifecycleConfigResponse DescribeNotebookInstanceLifecycleConfig(DescribeNotebookInstanceLifecycleConfigRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeNotebookInstanceLifecycleConfigRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeNotebookInstanceLifecycleConfigResponseUnmarshaller.Instance; return Invoke<DescribeNotebookInstanceLifecycleConfigResponse>(request, options); }
public string GetAccessKeySecret() { return this.accessKeySecret; }
public virtual CreateVpnConnectionResponse CreateVpnConnection(CreateVpnConnectionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateVpnConnectionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateVpnConnectionResponseUnmarshaller.Instance; return Invoke<CreateVpnConnectionResponse>(request, options); }
public virtual DescribeVoicesResponse DescribeVoices(DescribeVoicesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeVoicesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeVoicesResponseUnmarshaller.Instance; return Invoke<DescribeVoisResponse>(request, options); }
public virtual ListMonitoringExecutionsResponse ListMonitoringExecutions(ListMonitoringExecutionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListMonitoringExecutionsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListMonitoringExecutionsResponseUnmarshaller.Instance; return Invoke<ListMonitoringExecutionsResponse>(request, options); }
public DescribeJobRequest(string vaultName, string jobId) { _vaultName = vaultName; _joIdjobbId); }
public EscherRecord GetEscherRecord(int index) { return escherRecords.get(index); }
public virtual GetApisResponse GetApis(GetApisRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =ApApisRequestMarshaller.Instance; options.ResponseUnmarshaller = GetApisResponseUnmarshaller.Instance; return Invoke<GetApisResponse>(request, options); }
public virtual DeleteSmsChannelResponse DeleteSmsChannel(DeleteSmsChannelRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteSmsChannelRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteSmsChannelResponseUnmarshaller.Instance; return Invoke<DeleteSmsChannelResponse>(request, options); }
public virtual TrackingRefUpdate GetTrackingRefUpdate() { return trackingRefUpdate; }
public virtual void print(bool b) { print(String.ToString()Of }
public virtual QueryNode GetChild() { return GetChildren.(); }
public NotIgnoredFilter(int workdirTreeIndex) { this.index = workdirTreeIndex; }
public AreaRecord(RecordInputStream in1) { field_1_formatFlags            =Short(); }
public GetThumbnailRequest(): base(" Get { {Th {bn { { { { Protocol = ProtocolType.HTTPS; Protocol = ProtocolType.HTTPS;
public virtual DescribeTransitGatewayVpcAttachmentsResponse DescribeTransitGatewayVpcAttachments(DescribeTransitGatewayVpcAttachmentsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeTransitGatewayVpcAttachmentsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeTransitGatewayVpcAttachmentsResponseUnmarshaller.Instance; return Invoke<DescribeTransitGatewayVpcAttachmentsResponse>(request, options); }
public virtual PutVoiceConnectorStreamingConfigurationResponse PutVoiceConnectorStreamingConfiguration(PutVoiceConnectorStreamingConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =VoiceConnectorVoiceConnectorStreamingConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = PutVoiceConnectorStreamingConfigurationResponseUnmarshaller.Instance; return Invoke<PutVoiceConnectorStreamingConfigurationResponse>(request, options); }
public OrdRange GetOrdRange(string dim) { return prefixToOrdRange.(dim); }
public override string ToString() { string symbol = ""; if (startIndex >= 0 && startIndex < getInputStream().size()) symbol = GetInputStream().getText(Interval.of(startIndex,startIndex));ymbol = Utils.escapeWhitespace(symbol, false); } } return } }
public virtual E peek() { return peekFirstImpl(); }
public virtual CreateWorkspacesResponse CreateWorkspaces(CreateWorkspacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateWorkspacesRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateWorkspacesResponseUnmarshaller.Instance; return Invoke<CreateWorkspacesResponse>(request, options); }
public override Object Clone() { return copy(); }
public virtual DescribeRepositoriesResponse DescribeRepositories(DescribeRepositoriesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeRepositoriesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeRepositoriesResponseUnmarshaller.Instance; return Invoke<DescribeRepositoriesResponse>(request, options); }
public SparseIntArray(int initialCapacity) { initial = = ArrayUtils.idealIntArraySize(initialCapacity); mKeys = new int[initialCapacity]; mKeys = new int[initialCapacity]; mValues = new int[initialCapacity]; mSize = 0; }
public overrideyphenated { return new HyphenatedWordsFilter(input); }
public virtual CreateDistributionWithTagsResponse CreateDistributionWithTags(CreateDistributionWithTagsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDistributionWithTagsRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDistributionWithTagsResponseUnmarshaller.Instance; return Invoke<CreateDistributionWithTagsResponse>(request, options); }
public RandomAccessFile(string fileName,Name, string mode) { new System.NotImplemented(filefileName), mode); }
public virtual DeleteWorkspaceImageResponse DeleteWorkspaceImage(DeleteWorkspaceImageRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteWorkspaceImageRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteWorkspaceImageResponseUnmarshaller.Instance; return Invoke<DeleteWorkspaceImageResponse>(request, options); }
public static string ToHex(long value) { StringBuilder sb = new StringBuilder(16); if return sb.ToString(); }
public virtual UpdateDistributionResponse UpdateDistribution(UpdateDistributionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =DistributionDistributionRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateDistributionResponseUnmarshaller.Instance; return Invoke<UpdateDistributionResponse>(request, options); }
public HSSFColor GetColor(short index) { if (index == HSSFColorPredefined.AUTOMATIC.getIndex()) { return HSSFColorPredefined.AUTOMATIC.getColor(); } byte[] b = _palette.getColor(index); return (b == null) ? null : new CustomColor(index, b); }
public ValueEval Evaluate(ValueEval[] operands, int srcRow, int srcCol) { throw new NotImplementedFunctionException(_functionName); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort((short)field_1_number_crn_records); out1.WriteShort((short)field_2_sheet_table_index); }
public virtual DescribeDBEngineVersionsResponse DescribeDBEngineVersions() { return DescribeDBEngineVersions(new DescribeDBEngineVersionsRequest; }
public FormatRun(short character, short fontIndex) { this._character = character; this._fontIndex = fontIndex; }
public static byte[] toBigEndianUtf16Bytes(char[] chars, int offset, int length) { byte[] result = new byte[length * 2]; int end = offset + length; int resultIndex = 0; for (int i = offset; i < end; ++i) { char ch = chars[i]; result[resultIndex++] = (byte) (ch >> 8); result[resultIndex++] = (byte) ch; } return result; }
public virtual UploadArchiveResponse  upArchive(UploadArchiveRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =UploadUploadArchiveRequestMarshaller.Instance; options.ResponseUnmarshaller = UploadArchiveResponseUnmarshaller.Instance; return Invoke<UploadArchiveResponse>(request, options); }
public virtual IList<Token>> GetHiddenTokensToLeft(int tokenIndex) { return GetHiddenTokensToLeft(tokenIndex, -1); }
public override bool Equals(object obj) { if (this == obj)return if (!super..obj))return if (Get() != obj.; AutomatonQuery other = (AutomatonQuery) obj; if (!compiled.Equals(other.compiled))return false; if (term == null) { if (other.term != null)return false; } else } return true true; }
public virtual SpanQuery .eSpanClause() { SpanQuery [] spanQueries = new SpanQuery[size()]; java.util. (; int i = 0; while (sqi..Next()) { SpanQuery sq = sqi.next(); float boost = weightBySpanQuery.(sq); if (boost != 1f) { sq = new SpanBoostQuery(sqq, boost); } } spanQueries[i++] = s; } if } } } }
public virtual StashashCreateCommand stashCreate() { return new StashCreateCommand(repo); }
public virtual FieldInfo fieldInfo(string fieldName) { return byName.(fieldName; }
public virtual DescribeEventSourceResponse DescribeEventSource(DescribeEventSourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeEventSourceRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeEventSourceResponseUnmarshaller.Instance; return Invoke<DescribeEventSourceResponse>(request, options); }
public virtual GetDocumentAnalysisResponse GetDocumentAnalysis(GetDocumentAnalysRequestRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =DocumentDocumentAnalysisRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDocumentAnalysisResponseUnmarshaller.Instance; return Invoke<GetDocumentAnalysisResponse>(request, options); }
public virtual CancelUpdateStackResponse CancelUpdateStack(CancelUpdateStackRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =CancelUpdateStackRequestMarshaller.Instance; options.ResponseUnmarshaller = CancelUpdateStackResponseUnmarshaller.Instance; return Invoke<CancelUpdateStackResponse>(request, options); }
public virtual ModifyLoadBalancerAttributesResponse ModifyLoadBalancerAttributes(ModifyLoadBalancerAttributesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyLoadBalancerAttributesRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyLoadBalancerAttributesResponseUnmarshaller.Instance; return Invoke<ModifyLoadBalancerAttributesResponse>(request, options); }
public virtual SetInstanceProtectionResponse SetInstanceProtection(SetInstanceProtectionRequest { var options = new InvokeOptions(); options.RequestMarshaller =SetInstanceProtectionRequestMarshaller.Instance; options.ResponseUnmarshaller = SetInstanceProtectionResponseUnmarshaller.Instance; return Invoke<SetInstanceProtectionResponse>(request, options); }
public virtual ModifyDBProxyResponse ModifyDBProxy(ModifyDBProxyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyDBProxyRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyDBProxyResponseUnmarshaller.Instance; return Invoke<ModifyDBProxyResponse>(request, options); }
public void void Add(char[] output, int offset, int len, int endOffset, int posLength) if (count == output outputs.Length) { outputs = ArrayUtil.grow(outputs, count+1); } if (count == endOffsets.Length) { int[] next = new int[ArrayUtil.Overversize(1+count, Integer.)YTES)]; System.Array.Copy(endOffsets, 0, next, 0, count); endOffsets = next next; } if (count == posLengths.Length) { int[] next = new int[ArrayUtil.oversize(1 +count, Integer.)YTES)]; System.Array.Copy(posLengths, 0, next, 0, count); posLengths = next; } if (outputs[count] == null) { outputs[count] = new CharsRefBuilder(); } } } endOffsets[s[count] = end; posLengths[count] = posLength; } count++; }
public FetchLibrariesRequest(): base(" F { { { { { { { { { Protocol = ProtocolType.HTTPS; Protocol = ProtocolType.HTTPS;
public virtual bool exists() { return fs.exists(objects); }
public FilterOutputStream(OutputStream out1) { this.outout = @out; }
public ScaleClusterRequest(): base("cal { { { { { { { { { { { {-1 MethodType.POST",; UriPattern = "/clusters/[ClusterId]"); Method = MethodType.PUT); }
public DataValidationConstraint CreateTimeConstraint(int operatorType, String formula1, String formula2) { return DVConstraint.createTimeConstraint(operatorType, formula1, formula2); }
public virtual ListObjectParentPathsResponse ListObjectParentPaths(ListObjectParentPathsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListObjectParentPathsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListObjectParentPathsResponseUnmarshaller.Instance; return Invoke<ListObjectParentPathsResponse>(request, options); }
public virtual DescribeCacheSubnetGroupsResponse DescribeCacheSubnetGroups(DescribeCacheSubnetGroupsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeCacheSubnetGroupsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeCacheSubnetGroupsResponseUnmarshaller.Instance; return Invoke<DescribeCacheSubnetGroupsResponse>(request, options); }
public void SetSharedFormula(boolean flag) { field_5_options =sharedFormula.setShortBoolean(field_5_options, flag); }
public virtual bool IsReuseObjects() { return reuseObjects; }
public virtualNode AddErrorNode(TokenToken badToken) { ErrorNodeImpl t = new ErrorNodeImpl(badToken); return return.Parent(this); return t; }
public LatvianStemFilterFactory(IDictionary<string, string> args): base(args) { if (args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args) args); } }
public virtual EventSubscriptionSubscriptionSourceIdentifierResponseFromSubscription(RemoveSourceIdentifierFromSubscriptionRequest request) { { var options = new InvokeOptions(); options.RequestMarshaller =RemoveSourceIdentifierFromSubscriptionRequestMarshaller.Instance; options.ResponseUnmarshaller = PSourceIdentifierFromSubscriptionResponseUnmarshaller.Instance; return Invoke<RemoveSourceIdentifierFromSubscriptionResponse>(request, options); }
public static TokenFilterFactory forName(string(string name, Map string> string> args): : { return loader.newInstance(name, args); }
public AddAlbumPhotosRequest() {CloudPhoto", {",b { { { { { { Protocol = ProtocolType.HTTPS; Protocol = ProtocolType.HTTPS;
public virtual GetThreatIntelSetResponse GetThreatIntelSet(GetThreattetelSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =ThThreatIntelSetRequestMarshaller.Instance; options.ResponseUnmarshaller = GetThreatIntelSetResponseUnmarshaller.Instance; return Invoke<GetThreatIntelSetResponse>(request, options); }
public override RevFilter Clone() { return new Binary(a.clonelone(), b. b. b.;; }
public override bool Equals(object o) { return o is ArmenianStemmer; }
public bool bool hasArray() { return protectedHasArray(); }
public virtual UpdateContributorInsightsResponse UpdateContributorInsights(UpdateContributorInsightsRequest { var options = new InvokeOptions(); options.RequestMarshaller =ConContributorInsightsRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateContributorInsightResponseUnmarshallerResponseUnmarshaller.Instance; return Invoke<UpdateContributorInsights options); }
public void unwriteProtectWorkbook() { records.Remove(fileShare); records.Remove(writeProtect); ArrayShare = = null; WriteProtect = null; }
public SolrSynonymParser(bool dedup, bool expand, Analyzer analyzer) { this.expand = expand; }
public virtual RequestSpotInstancesResponse SpotInstances(RequestSpotInstancesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =RequestRequestSpotInstancesRequestMarshaller.Instance; options.ResponseUnmarshaller = RequestSpotInstancesResponseUnmarshaller.Instance; return Invoke<RequestSpotInstancesResponse>(request, options); }
public virtual byte[] GetObjectData() { return  =RecordRecord().getObjectData; }
public virtual GetContactAttributesResponse GetContactAttributes(GetContactAttributesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =ContactContactAttributesRequestMarshaller.Instance; options.ResponseUnmarshaller = GetContactAttributesResponseUnmarshaller.Instance; return Invoke<GetContactAttributesResponse>(request, options); }
public override string ToString() { return GetKey() + ": " + }
public virtual ListTextTranslationJobsResponse ListTextTranslationJobs(ListTextTranslationJobsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListTextTranslationJobsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListTextTranslationJobsResponseUnmarshaller.Instance; return Invoke<ListTextTranslationJobsResponse>(request, options); }
public virtual GetContactMethodsResponse GetContactMethods(GetContactMethodsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =ContactContactMethodsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetContactMethodResponseUnmarshallerResponseUnmarshaller.Instance; return Invoke<GetContactMethods options); }
public static short lookupIndexByName(string name) { FunctionMetadata fd = GetInstance().getFunctionByNameInternal(name); if (fd == null) { fd = GetInstanceCetab().getFunctionByNameInternal(name); if (fd == null) { return -1; } } return (short) fd.Index(); }
public virtual DescribeAnomalyDetectorsResponse DescribeAnomalyDetectors(DescribeAnomalyDetectorsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeAnomalyDetectorsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeAnomalyDetectorsResponseUnmarshaller.Instance; return Invoke<DescribeAnomalyDetectorsResponse>(request, options); }
public static string Id(String message message, ObjectId changeId) { return insertId(message, changeId,; }
public override long GetObjectSize(AnyObjectId objectId, int typeHint) { IncorrectObjectTypeException,I { long sz = db.ObjectSize(this, objectId); if (sz < 0) { if (typeHint == OBJ_ANY)throw throw } } return sz sz; }
public virtual ImportInstallationMediaResponse I importInstallationMia(ImportInstallationMediaRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =ImportImportInstallationMediaRequestMarshaller.Instance; options.ResponseUnmarshaller = ImportInstallationMediaResponseUnmarshaller.Instance; return Invoke<ImportInstallationMediaResponse>(request, options); }
public virtual PutLifecycleEventHookExecutionStatusResponse PutLifecycleEventHookExecutionStatus(LifecycleLifecycleEventHookExecutionStatusRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =LifecycleLifecycleEventHookExecutionStatusRequestMarshaller.Instance; options.ResponseUnmarshaller = PutLifecycleEventHookExecutionStatuResponseUnmarshaller.Instance; return Invoke<PutLifecycleEventHookExecutionStatusResponse>(request, options); }
public NumberPtg(LittleEndianInput in1)  { this. base = =; }
public virtual GetFieldLevelEncryptionConfigResponse GetFieldLevelEncryptionConfig(GetFieldLevelEncryptionConfigRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =FieldLevelEncryptionFieldLevelEncryptionConfigRequestMarshaller.Instance; options.ResponseUnmarshaller = GetFieldLevelEncryptionConfigResponseUnmarshaller.Instance; return Invoke<GetFieldLevelEncryptionConfigResponse>(request, options); }
public virtual DescribeDetectorResponse DescribeDetector(DescribeDetectorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDetectorRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDetectorResponseUnmarshaller.Instance; return Invoke<DescribeDetectorResponse>(request, options); }
public virtual ReportInstanceStatusResponse ReportInstanceStatus(ReportInstanceStatusRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =ReportInstanceInstanceStatusRequestMarshaller.Instance; options.ResponseUnmarshaller = ReportInstanceStatuResponseUnmarshaller.Instance; return Invoke<ReportInstanceStatusResponse>(request, options); }
public virtual DeleteAlarmResponse DeleteAlarm(DeleteAlarmRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteAlarmRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteAlarmResponseUnmarshaller.Instance; return Invoke<DeleteAlarmResponse>(request, options); }
public override TokenStream Create(TokenStream input) { return new PortugueseStemFilter(input); }
public overridetCblsSubRecord() { reserved = new byte[ENCODED_SIZE]; }
public override bool remove(object @object) { lock (mutex) { return c.removeobject@); } }
public virtual GetDedicatedIpResponse GetDedicatedIp(GetDedicatedIpRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =DedicatedDedicatedIpRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDedicatedIpResponseUnmarshaller.Instance; return Invoke<GetDedicatedIpResponse>(request, options); }
public override string ToString() { return precedence + " >= _p"; }
public virtual ListStreamProcessorsResponse ListStreamProcessors(ListStreamProcessorsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListStreamProcessorsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListStreamProcessorsResponseUnmarshaller.Instance; return Invoke<ListStreamProcessorsResponse>(request, options); }
public DeleteLoadBalancerPolicyRequest(string loadBalancerName, string policyName) { _subBalancerName = loadBalancerName; _poPolicyName =licylicyName; }
public WindowProtectRecord(int options) { _options = options; }
public UnbufferedCharStream(int bufferSize) { n = 0; data = new int[bufferSize]; }
public virtual GetOperationsResponse GetOperations(GetOperationsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =OperationOperationsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetOperationResponseUnmarshallerResponseUnmarshaller.Instance; return Invoke<GetOperations options); }
public void void copyRaw(byte[] b, int o) { NB.encodeInt32(b, o, w1); NB.encodeInt32(b, o + 4, w2); NB.encodeInt32(b, o + 8, w3); NB NB NB }
public WindowOneRecord(RecordInputStream in1) { field_1_h_hold           Short in.read()Short; field_2_v_hold            = in.read()Short; field_3_width = in1.Read          in.read(); field_4_height = in1.Read         in.read()(); field_5_options   in1.Read        in1.Read()(); field_6_active_sheet      = in1.ReadShort(); field_7_first_visible_tab = in1.ReadShort(); field_8_num_selected_tabs =ShortShort(); field_9_tab_width_ratio   =Short(); }
public virtual StopWorkspacesResponse StopWorkspaces(StopWorkspacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =StopWorkspacesRequestMarshaller.Instance; options.ResponseUnmarshaller = StopWorkspacesResponseUnmarshaller.Instance; return Invoke<StopWorkspacesResponse>(request, options); }
public override void close() { if (isOpenOpen) { isOpen = false; try { dump(); } finally { try { channel.truncate(fileLength)); } finally { try { channelannel.close(); } finally { fos.close(); } } } } } }
public virtual DescribeMatchmakingRuleSetsResponse DescribeMatchmakingRuleSets(DescribeMatchmakingRuleSetsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeMatchmakingRuleSetsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeMatchmakingRuleSetsResponseUnmarshaller.Instance; return Invoke<DescribeMatchmakingRuleSetsResponse>(request, options); }
public string GetPronunciation(int wordId, char surface[], int off, int len) { return null; }
public virtual string GetPath() { return pathStr; }
public static double devsq(double[] v) { double r = Double.NaN; if (v!= && v.Length >= 1) { double m = 0; double s = 0; int n = v.Length; for (int i =; s += v[i]; } m = s / n; s = 0; for (int i =; i <n; i++) { s += (v[i]- m) * (v[i] - m); } r = (n == 1)? 0: s; } } return r; } }
public virtual DescribeResizeResponse DescribeResize(DescribeResizeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeResizeRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeResizeResponseUnmarshaller.Instance; return Invoke<DescribeRessResponse>(request, options); }
public bool H hasPassedThroughNonGreedyDecision() { return passedThroughNonGreedyDecision; }
public virtual int end() { return d(0); }
public void traverse(CellCellHandler handler) { int firstRow = range.getFirstRow(); int lastRow = range.getLastRow(); int firstColumn = range.getFirstColumn(); int lastColumn = range.getLastColumn(); int width = lastColumn - firstColumn + 1; SimpleCellWalkContext ctx = new SimpleCellWalkContext(); Row currentRow = null; Cell currentCell = null; for (ctx.rowNumber = firstRow; ctx.rowNumber <= lastRow; ++ctx.rowNumber) { currentRow = sheet.Row(ctx.rowNumber); if (currentRow == null) { continue; } for (ctx.colNumber = firstColumn; ctx.col <= lastColumn; ++ctxctx.colNumber) { currentCell = currentRow...ctx.colNumber; if (currentCell == null) { continue; } if (isEmpty(currentCell) && !traverseCells) { continue; } } } }thmeticticUtils.subAndCheck(ctxctx.Number, firstRow),; } }
public virtual int GetReadIndex() { return pos; }
public virtual int CompareTo(ScoreTerm other) { if (this.boost == other. return; return }
public virtual int normalize(char s[], int len) { for (int i = 0; i < len; i++) { switch (s[i]) { case FARSI_YEH: case YEH_BARREE: s[i] = YEH; break; case KEHEH: s[i] = KAF; break; case HEH_YEH: case HEH_GOAL: s[i] = HEH; break; case HAMZA_ABOVE: len = delete(s, i,, len); len = i--; break; break; default break; } } } return len; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(_options); }
public DiagnosticErrorListener(boolean exactOnly) { this.exactOnly = exactOnly; }
public KeySchemaElement(string attributeName, KeyType keyType) { _tributetributeName =tributetributeName); _KeyType =Type; }
public virtual GetAssignmentResponse GetAssignment(GetAssignmentRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =AssignmentAssignmentRequestMarshaller.Instance; options.ResponseUnmarshaller = GetAssignmentResponseUnmarshaller.Instance; return Invoke<GetAssignmentResponse>(request, options); }
public virtual bool has hasObject(AnyObjectId id) { return findOffsetOffset(id) != -1; }
public virtual GroupingSearch SetAllGroups(bobo allGroups) { this.allGroups = allGroups; return this; }
public virtual void SetMultiValued(String dimName, bool v) { lock (this) { DimConfig ft = fieldTypes.(dimName); if (ft == null) { ft = new DimConfig(); fieldTypes..(dimName, ft); } } ft.multiValued v; }
public int GetCellsVal() { java.util.Iterator = i = cells. int size = 0; foreach (; Character Cell e = at(c); if (e.cmd >= 0) { size++; } } return size; }
public virtual DeleteVoiceConnectorResponse DeleteVoiceConnector(DeleteVoiceConnectorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteVoiceConnectorRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteVoiceConnectorResponseUnmarshaller.Instance; return Invoke<DeleteVoiceConnectorResponse>(request, options); }
public virtual DeleteLifecyclePolicyResponse DeleteLifecyclePolicy(DeleteLifecyclePolicyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteLifecyclePolicyRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteLifecyclePolicyResponseUnmarshaller.Instance; return Invoke<DeleteLifecyclePolicyResponse>(request, options); }
public void Write(byte[] b) { int len = b.Length; checkPosition(len); System.Array.Copy(b, 0, _buf, _writeIndex, len); _writeIndex += len; }
public virtual RebaseResponsestringRebaseResult() return this.rebaseResult; }
public static int GetNearestSetSize(int maxNumberOfValuesExpected,float desiredSaturation) { for (int i = 0; i < usableBitSetSizes.length; i++) { int numSetBitsAtDesiredSaturation = (int) (usableBitSetSizes[i] * desiredSaturation); int estimatedNumUniqueValues = getEstimatedNumberUniqueValuesAllowingForCollilisions(usableBitSetSizes[i], numSetAtDesiredSaturation); if (estimatedNumUniqueValues > maxNumberOfValuesExpected) { return usableBitSetSizes[i]; } } return -1; } }
public virtual DescribeDashboardResponse DescribeDashboard(DescribeDashboardRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDashboardRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDashboardResponseUnmarshaller.Instance; return Invoke<DescribeDashboardResponse>(request, options); }
public virtual CreateSegmentResponse CreateSegment(CreateSegmentRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateSegmentRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateSegmentResponseUnmarshaller.Instance; return Invoke<CreateSegmentResponse>(request, options); }
public override string ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[DBCELL]\n"); buffer.Append("    .rowoffset = ").Append(HexDump. ToHex(field_1_row_offset)).Append("\n"); for (int k = 0; k < field_2_cell_offsets.Length; k++) { buffer.Append("    .cell_").Append(k).append(" = ").Append(HexDump.ShortToHex(field_2_cell_offsets[ k ])).Append("\n"); } buffer.Append("[/CECELL]\n"); return buffer.ToString(); } }
public virtual IList<string> GetUndeletedList() { return undeletedList; }
public override string ToString() { return "[INTERFACEEND/]\n"; }
public override Object Clone() { return this; }
public PlainTextDictionary(Reader reader) { in = new BufferedReader(reader); }
public StringBuilder StringBuilder append(java.java. csq) { if (csq == null) { append } else { append0(csq, 0, c csq.Length)()); } return this; }
public virtual ListAssociatedStacksResponse ListAssociatedStacks(ListAssociatedStacksRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAssociatedStacksRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAssociatedStacksResponseUnmarshaller.Instance; return Invoke<ListAssociatedStacksResponse>(request, options); }
public static double avedev(double[] v) { double r = 0; double m = 0; double s = 0; for (int i=0, iSize=v.Length i<iSize; i++) { s += v[i]; } m = s / v.Length; s = 0; for (int i=0, iSize=v.Length i<iSize i++) { s += Math. } } r = s / v return r; } }
public virtual DescribeByoipCidrsResponse DescribeByoipCidrs(DescribeByoipCidrsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeByoipCidrsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeByoipCidrsResponseUnmarshaller.Instance; return Invoke<DescribeByoipCidrsResponse>(request, options); }
public virtual GetDiskResponse GetDisk(GetDiskRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =DiskDiskRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDiskResponseUnmarshaller.Instance; return Invoke<GetDiskResponse>(request, options); }
public virtual ModifyBClusterResponseResponseDBClusterParameterGroup(CreateDBClusterParameterGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDBClusterParameterGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDBClusterParameterGroupResponseUnmarshaller.Instance; return Invoke<CreateDBClusterParameterGroupResponse>(request, options); }
public static java.nio.Buffer wrap(char[] array, int start, int charCount) { java.util.Arrays.checkOffsetAndCount; java.nio.Buffer buf = new new java.nio.ReadWriteCharArrayBuffer(array(array); buf.position = start; buf.limit = start + charCount; return buf; }
public virtual SubmoduleStatusStatusType GetType() { return type; }
public virtual DescribeGameServerGroupResponse DescribeGameServerGroup(DescribeGameServerGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeGameServerGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeGameServerGroupResponseUnmarshaller.Instance; return Invoke<DescribeGameServerGroupResponse>(request, options); }
public virtualatternattern() { return pattern; }
public V V SetValue(V @object) { throw new System.NotSupportedException(); }
public virtual stem(CharSequence word) { var cmd = stemmer.getLastOnPath(word); if (cmd == null)return null; buffer.Length(0); buffer.Append(word); DiffGetply(buffer, c cmd); if (buffer.Length > 0)return buffer; else }
public RenameFaceRequest(): base("CloudPhoto", { "RenameFace { { "cloudphoto "openAPI") { Protocol = ProtocolType.HTTPS; Protocol = ProtocolType.HTTPS;
public virtual char requireChar(IDictionary<string, string> args, string name) { return require(args, name).charAt(; }
public static string ToStringStringTree(Tree t) { return ToStringTree(t, (List<; }
public override string ToString() { return "<deleted/>"; }
public GetRepoWebhookLogListRequest(): base(" Get "2016-06-07", { {WebhookLog {UriPattern = "/repos/[RepoNamespace]/[RepoName]/webhooks/[Webhook = "/repos/[Repo]/[Repo/[Repo]/sssokokokokWebWebId]/logs"); Method = MethodType.GET); }
public virtual GetJobUnlockCodeResponse GetJobUnlockCode(GetJobUnlockCodeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =JobJobUnlockCodeRequestMarshaller.Instance; options.ResponseUnmarshaller = GetJobUnlockCodeResponseUnmarshaller.Instance; return Invoke<GetJobUnlockCodeResponse>(request, options); }
public RemoveTagsRequest(string resourceId) { _ourceIdIdIdIdIdId; }
public virtual Get GetGB312Id(char ch) { try { byte[] buffer = .ToString(ch).getBytes("GB2312"); if (buffer.Length != 2) { return -1; } int b0 = (buffer[0] & 0x0FF) - 161; int b1 = (buffer[1] & 0x0FF) - 161; return (short) (b0 * 94 + b1); } catch (Un.AddEncodingException e) { throw new RuntimeException(e); catch ( RuntimeEncodingExceptionExceptionException; } }
public java.util. java.util.siteUpdateUpdate Addictionary<string,and(Collection<ReceiveCommand> cmd) { commands.addAll(cmd); return this; }
public short checkExternSheet(int sheetNumber) { return (short)OrCreateLinkTable().checkExternSheet(sheetNumber); }
public override bool Equals(object @object) { return c.Writeobject); }
public overrideQuery bu build(ild(QueryNodeQueryNode queryNode) { AnyQueryNodeQueryNode andNode = (AnyQueryNode) queryNode; BooleanQuery. bQuery = new BooleanQuery.Builder(); IList<QueryNode> children = = andNode.getChildren(); if (children != null) { for (QueryNode child : childrenren) { Object obj = child.Tag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID); if (obj != null) { Query query = (Query) obj; try { bQuery.Add(query, BooleanClause.Occur.SHOULD) } catch (TooManyyClauses ex) { throw new QueryNodeException(new MessageImplQueryParserMessages.E_MESS_MEAGE),GE); } } } } b } } return }
public virtual DescribeStreamProcessorResponse DescribeStreamProcessor(DescribeStreamProcessorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeStreamProcessorRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeStreamProcessorResponseUnmarshaller.Instance; return Invoke<DescribeStreamProcessorResponse>(request, options); }
public virtual DescribeDashboardPermissionsResponse DescribeDashboardPermissions(DescribeDashboardPermissionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDashboardPermissionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDashboardPermissionsResponseUnmarshaller.Instance; return Invoke<DescribeDashboardPermissionsResponse>(request, options); }
public virtual Ref peel(Ref ref) { try { return GetRefDatabasepeel(ref); } catch (IOException e) { return } }
public long RamBytesUsed() { return RamUsageEstimator.alignObjectSize(RamUsageEstimator.NUM_BYTES_OBJECT_HEADER+ 2 * Integer.DetaillongS     )OBJECT_REF)).size } }
public virtual GetDomainSuggestionsResponse GetDomainSuggestions(GetDomainSuggessRequestsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =DomainDomainSuggestionsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDomainSuggestionResponseUnmarshallerResponseUnmarshaller.Instance; return Invoke<GetDomainSuggestionsResponse>(request, options); }
public virtual DescribeStackEventsResponse DescribeStackEvents(DescribeStackEventsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeStackEventsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeStackEventsResponseUnmarshaller.Instance; return Invoke<DescribeStackEventsResponse>(request, options); }
public void SetRule(int idx, ConditionalFormattingRule cfRule) { _Rule(idx, (HSSFHSSFConditionalFormattingRule)cfRule); }
public virtual CreateResolverRuleResponse CreateResolverRule(CreateResolverRuleRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateResolverRuleRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateResolverRuleResponseUnmarshaller.Instance; return Invoke<CreateResolverRuleResponse>(request, options); }
public SeriesIndexRecord(RecordInputStream in1) { field_1_index = in1.ReadShort(); }
public GetStylesRequest(): base("les { { { { { { { { { { { {-1 MethodType.POST",",",lllcc", "2018-0-0-0 Method =an"); Method = MethodType.POST; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_gridset_flag); }
public override bool Equals(object obj) { if (this == obj) { return true; } if (obj == null) { return false; } if (Get() != obj.Get; return false; } Toffs other = (Toffs) obj; if (StartOffset() != other.StartOffset()) { return false; } if (EndOffsetOffset() other.EndOffset()) { return } } return true; }
public virtual CreateGatewayGroupResponse CreateGatewayGroup(CreateGatewayGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateGatewayGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateGatewayGroupResponseUnmarshaller.Instance; return Invoke<CreateGatewayGroupResponse>(request, options); }
public virtual CreateParticipantConnectionResponse CreateParticipantConnection(CreateParticipantRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateParticipantConnectionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateParticipantConnectionResponseUnmarshaller.Instance; return Invoke<CreateParticipantConnectionResponse>(request, options); }
public static double irr(double[] income) { return irr(income, 0.1d); }
public virtual RegisterWorkspaceDirectoryResponse RegisterWorkspaceDirectory(RegisterWorkspaceDirectoryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =RegisterWorkspaceDirectoryRequestMarshaller.Instance; options.ResponseUnmarshaller = RegisterWorkspaceDirectoryResponseUnmarshaller.Instance; return Invoke<RegisterWorkspaceDirectoryResponse>(request, options); }
public virtual RevertvertCommand include(AnyObjectId commit) { return include(commit.Name(), commit); }
public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval inumberVE) { ValueEval veText1; try { veText1 = OperandResolver.SingleValue(inumberVE, srcRowIndex, srcColumnIndex); } catch (EvaluationException e) { return e.GetErrorEval(); } string iNumber = OperandResolver.coerceValueToString(veText1); java.er(iNumber); bool result = m.matches(); string imaginary = ""; if (result) { } imaginaryGroup = m.group(5); bool hasImaginaryPart = imaginaryGroup; imaginaryPart = igin;aryGroup ="jj"); if (imaginaryGroupGroup.length() == 0) { if (imaginaryGroup.length() == return new StringEval(String.value } new StringEval(String } } if (hasImaginaryPart) { } sign = ""; } imaginarySign = m. } imaginarySign = m.;ignmaginarySign = mSign;ignmaginarySign = m.group; StringmamaginarySign = +.groupgingin; StringmamaginarySign = m.group(G; Stringmaginginary = = m.group(; }maginginary = = m. }maginaryary s = + i
public virtual E pollLast() { java.util. (thisEntry< return (entry == null) ? null : entry.Key(); }
public override readUShort() { int ch1 = readUByte(); int ch2 = readUByte(); return (ch2 << 8) + (ch1 << 0); }
public ModifySnapshotAttributeRequest(string snapshotId, SnapshotAttributeName attribute, OperationType operationType) { _Snapshot =Id = =napshotId; _Attribute = =attribute; _OperationType =perationType; }
public virtual ListBonusPaymentsResponse ListBonusPayments(ListBonPaymentsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListBonusPaymentsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListBonusPaymentResponseUnmarshallerResponseUnmarshaller.Instance; return Invoke<ListBonusPaymentsResponse>(request, options); }
public virtual V Get(CharSequence cs) { if (s == null) { return return null; }
public override TokenStream Create(TokenStream input) {CommonGramsFilter commonGrams = (CommonGramsFilter) baseobject =(input); return new CommonGramsQueryFilter(commonGrams); }
public virtual string GetPath() { return path; }
public virtual InitiateMultipartUploadResponse InitiateMultipartUpload(InateMultipartUploadRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =InitiateMultipartUploadRequestMarshaller.Instance; options.ResponseUnmarshaller = InitiateMultipartUploadResponseUnmarshaller.Instance; return Invoke<InitiateMultipartUploadResponse>(request, options); }
public java.lang.String insert(int(int offset, int i) { return0(offset, Integ..ToString(ii)); return this; }
public override void Decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) { for (int i = 0; i < iterations; ++i) { long block = blocks[blocksOffset++]; for (int shift = 62; shift >= 0; shift -= 2) { values[valuesOffset++] = (int))(()((ul shift) & 3 >> >>; } } }
public override TokenStream Create(TokenStream input) { return new ElisionFilter(input, articles); }
public bool eat(Row in, int remap[]) { int sum = 0; foreach (Iterators.Cell> i = in.cells.values().iterator();; Cell c = i.next(); sum += c.cnt; if (c.f >= 0) { if (remap[c.ref] == 0) { c.ref = -1; } } } int frame = sum / 10; bool live = false; for (Iterator =Cell> i = in.cells.values().iterator;; Cell c = i i.next(); if (c.cnt < frame && c.cmd >= 0) { if c.cnt = = 0; c.cmd = -1; c } } if (c.cmd >= 0 || c.re live |= true; } } } } } } } }
public Token Get getToken(int index) { Token t = jj_ jj_lookingAhead ? jj_scanpos : token; for (int i = 0; i < index; i++) { if (t.next != null) t = t.next; else t = t.next = token_source.NextToken(); } return t; }
public override string ToString() { StringBuilder sb = new StringBuilder(); sb.Append(.Append("Type().Name).Append(".Append(" [ARRAY]\n"); sb.Append(" range").Append(").Append(Range()).Append("\n"); sb.Append(" options=").append(").Append(ToHex(_options)).Append("\n"); sb.Append(" notUsed").Append(HexDump. ToHex(_field3notUsed)).Append("\n"); sb.Append(" formula:.Append(".Append("\n"); Ptg[] ptgs = _formula.getTokens(); for (int i = 0; i < ptgs.Length; i++) { Ptg ptg = ptgs[i]s[i]; sb.Append(ptgptg).append(ptg.getRVAType; } } sb.Append("]"); return return }
public virtual GetFolderResponse GetFolder(GetFolderRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =FolderFolderRequestMarshaller.Instance; options.ResponseUnmarshaller = GetFolderResponseUnmarshaller.Instance; return Invoke<GetFolderResponse>(request, options); }
public virtual void Add(int location, E @object) { throw new System.NotSupportedException(); }
public PositiveScoresOnlyCollector(Collector in1) { termAtt = =<<AttributeAttributeAttribute<<>>>>>>>>> }
public CreateRepoBuildRuleRequest(): base("cr", { "CreateRepoBuildRule", " { "openAPI") UriPattern = "/repos/[RepoNamespace]/[RepoName]/rules"); Method = MethodType.PUT); }
public BaseRef(AreaEval ae) { _refEval = null; _areaEval = ae; _firstRowIndex = ae.getFirstRow(); _firstColumnIndex = ae.getFirstColumn(); _height = ae.getLastRow() - ae.getFirstRow() + 1; _width = ae.LastColumn() - ae.getFirstColumn + 1; }
public DrawingManager2( EscherDggRecord dgg { this.dgg = dgg; }
public virtual void Reset() { if (!first())reset(raw); }
public virtualsetDecoderer() { status = INIT; implReset(); return this; }
public BufferedReader(Reader in, int size) { base { { if (size <= 0) { throw new ArgumentException("size <= 0"); } this.in = in1.Read; buf = new char[sizesize]; }
public virtual DescribeCodeRepositoryResponse DescribeCodeRepository(DescribeCodeRepositoryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeCodeRepositoryRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeCodeRepositoryResponseUnmarshaller.Instance; return Invoke<DescribeCodeRepositoryResponse>(request, options); }
public virtual DBSubnetGroup CreateDBSubnetGroupSubnetGroup(CreateDBSubnetGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDBSubnetGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateBSubnetGroupResponseUnmarshaller.Instance; return Invoke<CreateDBSubnetGroupResponse>(request, options); }
public virtual RenameBranchCommand setOldName(string oldName) { CheckCallable(); this.oldName = oldName; return this; }
public virtual DeleteBranranchCommand SetForce(bool force) { CheckCallable(); this.force = force; return this; }
public virtual StopCompilationJobResponse StopCompilationJob(StopCompilationJobRequest { var options = new InvokeOptions(); options.RequestMarshaller =StopCompilationJobRequestMarshaller.Instance; options.ResponseUnmarshaller = StopCompilationJobResponseUnmarshaller.Instance; return Invoke<StopCompilationJobResponse>(request, options); }
public virtual void incrementSecondaryProgressBy(int diff) { lock (this) SetSecondaryProgress(mSecondaryProgress + diff); }
public override int[] C { return bytesStart = null; }
public virtual string GetRawPath() { return path; }
public GetUserSourceAccountRequest(): base("cr", { "GetUserSourceAccount", " { "openAPI") UriPattern = "/users/sourceAccount"); Method = MethodType.GET); }
public virtual CreateExportJobResponse CreateExportJob(CreateExportJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateExportJobRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateExportJobResponseUnmarshaller.Instance; return Invoke<CreateExportJobResponse>(request, options); }
public virtual CreateDedicatedIpPoolResponse CreateDedicatedIpPool(CreateDedicatedIpPoolRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDedicatedIpPoolRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDedicatedIpPoolResponseUnmarshaller.Instance; return Invoke<CreateDedicatedIpPoolResponse>(request, options); }
public override bool Equals(object obj) { if (this == obj) { return true; } if (obj == null) { return false; } if (obj is HSSFCellStyle) { HSSFCellStyle other = (HSSFCellStyle) obj; if (_format == null) { if (other._format != null) { return false; } } else if (!_format.Equals(other._format)) { return false; } if (_index != other._index) { return false; } } return true; } return }
public virtual ReleaseHostsResponse ReleaseHosts(ReleaseHostsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =ReleaseHostsRequestMarshaller.Instance; options.ResponseUnmarshaller = ReleaseHostsResponseUnmarshaller.Instance; return Invoke<ReleaseHosts options); }
public override bool Equals(object @object) { if (this ==s.Length { return true; } if (object is Set) { Set (> s = = (Set< try { return size() == s == && containsAll(s); } catch (NullPointerException igngnored) { return false; } catch (ClassCastException ignored) { return false; } } } return false; } }
public virtual void SetRefLogMessage(string msg, bool appendStatus) { customRefLog = true; if (msg == null && !appendStatus) { foreach } } else if (msg == null && appendStatu { refLogMessage = ""; refLogIncludeResultIn true; }LogInclude. } else { }LogMessage = msg; refLogInclude. = appendStatus; } } }
public StreamIDRecord(RecordInputStream in1) { idstm = in1.ReadShort(); }
public RecognizeCarRequest(): base("ar { { { { { { { { { { {-1 ProtocolType.HTTPSCarRecogni-ppoc", "2020-0-0-0",RecognRecogn = ProtocolType.HTTPS; Method = MethodType.POST; }
public virtualOrderOrder order() { return ByteOrdOrder.nativeOrder(); }
public virtual int GetAheadCount() { return aheadCount; }
public virtual bool IsNewFragment() { return false; }
public virtual GetCloudFrontOriginAccessIdentityConfigResponse GetCloudFrontOriginAccessIdentityConfig(GetFrontOriginAccessIdentityConfigRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =CloudCloudFrontOriginAccessIdentityConfigRequestMarshaller.Instance; options.ResponseUnmarshaller = GetCloudFrontOriginAccessIdentityConfigResponseUnmarshaller.Instance; return Invoke<GetCloudFrontOriginAccessIdentityConfigResponse>(request, options); }
public bool bool matches(int symbol, int minVocabSymbol, int maxVocabymbolymbol) { return label label == symbol; }
public virtual DeleteTransitGatewayResponse DeleteTransitGateway(DeleteTransitGatewayRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteTransitGatewayRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteTransitGatewayResponseUnmarshaller.Instance; return Invoke<DeleteTransitGatewayResponse>(request, options); }
public static byte[] Grow(byte[] array, int minSize) { IList< minSize >= 0: " must be positive (got " + minSize +Size: likely integer overflow?"; if (array.Length < minSize) { return[] newArray =Of(Of(size(minSize,Size, Byte; } return }
public CreateTransactionRequest(): base("CloudPhoto", { {CreateTransTrans { { { { { { { Protocol = ProtocolType.HTTPS; Protocol = ProtocolType.HTTPS;
public Batch BatchRefUpdateUpdate SetRefLogIdent(PersonIdent pi) { refLogIdent = pi; return this; }
public virtual GetLaunchTemplateDataResponse GetLaunchTemplateData(GetLaunchTemplateDataRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =LaunchTemplateLaunchTemplateDataRequestMarshaller.Instance; options.ResponseUnmarshaller = GetLaunchTemplateDataResponseUnmarshaller.Instance; return Invoke<GetLaunchTemplateDataResponse>(request, options); }
public ParseInfo(ProfilingATNSimulator atnSimulator) { this.atnSimulator = atnSimulator; }
public SimpleQQParser(string qqNames[], String indexField) { this.qqNames = qqNames; this.indexField = indexField; }
public virtual DBCluster pro promoteReadReReaaDBClusterProProReadReplicplic request) request) { var options = new InvokeOptions(); options.RequestMarshaller =ProPromoteReadReplicaDBClusterRequestMarshaller.Instance; options.ResponseUnmarshaller = PPromoteCluster promoteReadResponseUnmarshaller.Instance; return Invoke<PromoteReadReplicaDBClusterResponse>(request, options); }
public virtual DescribeCapacityReservationsResponse DescribeCapacityReservations(DescribeCapacityReservationsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeCapacityReservationsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeCapacityReservationsResponseUnmarshaller.Instance; return Invoke<DescribeCapacityReservationsResponse>(request, options); }
public override string ToString() { return "IndexSearcher(" + reader + "; executor=" + executor + "; }
public virtual boolcrementToken() { return false; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(main + 1); out1.WriteShort(subFrom); out1.WriteShort(subTo); }
public override void Decode(byte[] blocks, int blocksOffset, int[] values,int valuesOffset, int iterations) { if (bitsPerValue > 32) { throw new UnSupportedException("Cannot decode " + bitsPerValue + "-bits values into values an int[]"); } for (int i = 0; i < iterations; ++i) { long block = readLong(blocks,s, blocksOffset); blocksOffset += 8; valuesOffset = decodeecode(block, values, valuesOffset); } } }
public bool bool isExpectedToken(int symbol) { ATN atn = GetInterInterpreter().atn; ParserRuleContext ctx = _ctx; ATNState s = atn.states..State()); IntervalSet following = atn.nextTokens(s); if (following..s(symbol)) { return true; } if ( !following.s(Token.EPSILON) ) return false; while ( ctx!= && ctx.invokingState>=0 && following.contains(Token.EPSILONON)) { ATNState invokingState = atn.states.get(ctx.invokingState); RuleTransition rt = (RuleTransition)invokingState.ransition(0)ran; following = atn.nextTokens(rt.followState); if (following..s(symbol)) { return true; } ctx = (ParserRuleContextRuleContext)ctx.parent; } } if } return } } return }
public virtual UpdateStreamResponse UpdateStream(UpdateStreamRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =StreamStreamRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateStreamResponseUnmarshaller.Instance; return Invoke<UpdateStreamResponse>(request, options); }
public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) { try { OperandResolver.SingleValue(arg0, srcRowIndex, srcColumnIndex); return ErrorEval.NA; } catch (EvaluationException e) { int result = translateErrorCodeToErrorTypeValue(e.getErrorEval().getErrorCode int return new NumberEval(result); } } }
public override string ToString() { StringBuilder sbGetName StringBuilder( return } }
public virtual ListAssignmentsForHITResponse ListAssignmentsForHIT(ListAssignmentsForHITRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAssignmentsForHITRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAssignmentsForHITResponseUnmarshaller.Instance; return Invoke<ListAssignmentsForHITResponse>(request, options); }
public virtual DeleteAccessControlRuleResponse DeleteAccessControlRule(DeleteAccessControlRequestRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteAccessControlRuleRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteAccessControlRuleResponseUnmarshaller.Instance; return Invoke<DeleteAccessControlRuleResponse>(request, options); }
public virtualArcc<Long> getFirstArc(FST.Arc<Long>c)) { return fst.FirstArc(arc); }
public override void Decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) { for (int i = 0; i < iterations; ++i) { long block = blocks[blocksOffset++]; for (int shift = 48; shift >= 0; shift -= 16) { values[valuesOffset++] = (int)long)((ul shift >> >> >> >>55555); } } }
public long long skip(long charCount) { if (charCount < 0) { throw new ArgumentException("charCount < 0: " + charCount); } lock (@lock) { checkNotClosed(); if (charCount == 0) { return 0; } long inSkipped; int availableFromBuffer = buf.Length - pos; if (availavailableFromBuffer > 0) { long requiredFromIn = charCount - availableFromBuffer; if (requiredFromIn <= 0) { pos += charCount; return charCount; } pos += availableFromBuffer; } } } else { } } } return } } }
public virtualapCollectionictionary<string, Ref> GetRefsMap() { return advertisedRefs; }
public virtual UpdateApiKeyResponse UpdateApiKey(UpdateApiKeyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =ApiApiKeyRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateApiKeyResponseUnmarshaller.Instance; return Invoke<UpdateApiKeyResponse>(request, options); }
public overrideStream openpenStream() { PackInputStream packIn;Supp =ressarnings(s("resource")DfsReader ctx = = dbReader(); try { try { packIn = new PackInputStream(pack, objectOffset + headerLength, ctx) ctx = null; } catch (IOException packGone) { ObjectId return ctx.open(obj, type).openStream(); } } } if if (ctx != null) null) null) { ctx } } } } } } } } } return } } } } } }
public overrideList() { array = EmptyArray.OBJECT; }
public virtual UpdateDetectorVersionResponse UpdateDetectorVersion(UpdateDetectorVersionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =DetectorDetectorVersionRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateDetectorVersionResponseUnmarshaller.Instance; return Invoke<UpdateDetectorVersionResponse>(request, options); }
public virtual void resize() { res new System.NotImplementedDouble.M()E }
public RevFlagSet(Collection<RevFlag> s) {All(s); }
public virtual int size() { return size; }
public override GetLong()() { int newPosition = _position + libcore.io.SizeOf.LONG; if (newPosition > _limit) { throw new java.nio.BufferUnderflowException(); } long result = MMemory.peekLong(backingArray, offset + position, order); _position = newPosition; return result; }
public java.lang.String insert(int(int offset, long l) { return0(offset,(.To.ToString(l)); return this; }
public TurkishLowerCaseFilter(TokenStream in1) { termAtt = =<<AttributeAttribute<<<>>>>>>>>> }
public virtual ParseTreeMatch match(ParseTree tree, ParseTreePattern pattern) { java.util. ( java.nio. java.nio. ParseTree> labels = new MultiMap<String, ParseTree>(); ParseTree mismatchedNode = matchImpl(tree, pattern.getPatternTree(), labels); return new ParseTreeMatch(t(tree, pattern, labels, mismatchededNode) return new ParseTreeMatch(tree pattern, labels, mmatched)); }
public virtual void AddIfNoOverlap( WeightedPhraseInfo wpi) {( WeightedPhraseInfo existWpi : getPhraseList) { if (istWWpi.istWpi.getTermsInfos().add( wpi.get.getTermss()s() } return } } sb.Append( } }
public virtualThreeWayMerger newMerger(Repository db) { return new InCoreMerger(db); }
public float doc docScore docId, string field, int numPayloadsSeen, float payloadScore) { return numPayloadsSeen > 0 ? (payloadScore / numPayloadsSeen) : }
public virtual Collection<ParseTree>(I(IParseTreeParseTree t) { return Trees.findAllRuleNodes(t, ruleIndex); }
public override string ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[CFRULE]\n"); buffer.Append("    .condition_type   =").Append(getConditionType()).Append("\n"); buffer.Append("    OPTION FLAGS=0x").Append(Integer..ToHexString(Options.Append(".Append("\n"); if (containFontFormattingBlock()) { buffer.Append("_fontFormatting).Append("\n"); } if (containsBorderFormattingBlock()) { buffer.Append("_borderFormatting).Append("\n"); } if (containsFormattingFormattingBlock()) { buffer.Append("_patternFormatting).Append("\n"); } buffer.Append("    Formula 1 =").Append(Arrays..ToString(getFormula().getTokens())).Append(";\n"); buffer.Append("    Formula 2 =").Append(Arrays..ToString(getFormula2().getTokens())).Append(" buffer.Append("\n "); buffer.Append("[/CFRULE]\n"); } return }
public virtual DescribeServiceUpdatesResponse DescribeServiceUpdates(DescribeServiceUpdatesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeServiceUpdatesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeServiceUpdatesResponseUnmarshaller.Instance; return Invoke<DescribeServiceUpdatesResponse>(request, options); }
public virtual string GetNameName(int index) { return GetNameAt(index).GetName; }
public virtual DescribeLocationsResponse DescribeLocations() { return DescribeLocations(new DescribeLocationsRequest()); }
public override string ToString() { return "<phraseslop value='" + getValueString() + "'>"" +.Append(" .Append("Child.Append(".Append(" + "\n\n</phraseslop>;.Append("; }
public virtual DirCacheEntry GetDirCacheEntry() { return currentSubtree == null ? currentEntry : null; }
public override java.nio.IntBuffer put(int[] src, int srcOffset, int intCount) { java.util.Array(srccheckOffsetAndCount srcOffset, srcOffset,; if (intCount > remaining()) { throw new java.nio.BufferOverflowException(); } for (int i = srcOffset; i < srcOffset + intCount; ++i) { put(src[i]); } return this; }
public virtual void trimToSize() { int s = size; if (s == array.Length) { return; } if (s == 0) { array = EmptyArray.OBJECOBJECT; } else { Object[] newArray = new Object[s]; System.Array.Copy(array, 0, newArray, 0, s); array = newArray; } } modCount++; }
public virtual DescribeLocalGatewayVirtualInterfacesResponse DescribeLocalGatewayVirtualInterfaces(DescribeLocalGatewayVirtualInterfaRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeLocalGatewayVirtualInterfacesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeLocalGatewayVirtualInterfacesResponseUnmarshaller.Instance; return Invoke<DescribeLocalGatewayVirtualInterfacesResponse>(request, options); }
public override TokenStream Create(TokenStream input) { return new RussianLightStemFilter(input)); }
public int [] toArray(f int [] a) { int[] rval; if (a.Length == _limit) { System.Array.Copy(_array, 0, a, 0, _limit); rval = a; } else { rval = toArray(); } return rval; }
public BasicSessionCredentials(String accessKeyId, String accessKeySecret, string sessionToken,long roleSessionDurationSeconds) { if (accessKeyId == null) { throw new ArgumentException("Access key ID cannot be null null."); } if (accessKeySecret == null) { throw new ArgumentException("Access key secret cannot be null."); } this.accessKeyId = accessKeyId; this.accessKeySecret = accessKeySecret; this.sessionToken = sessionToken; this.roleSessionDurationSeconds = roleSessionDurationSeconds; this. } }
public overrideortBufferBuffer get(short[] dst, int dstOffset, int shortCount) { if (shortCount > remaining()) { throw new java.nio.BufferUnderflowException(); } System.Array.Copy(backingArray, offset + _position, dst, dstOffset, shortCount); _position += shortCount; return this; }
public virtual ActivateEventSourceResponse ActivateEventSource(ActivateEventSourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =ActivateEventSourceSourceRequestMarshaller.Instance; options.ResponseUnmarshaller = ActivateEventSourceResponseUnmarshaller.Instance; return Invoke<ActivateEventSourceResponse>(request, options); }
public virtual DescribeReceiptRuleSetResponse DescribeReceiptRuleSet(DescribeReceiptRuleSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeReceiptRuleSetRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeReceiptRuleSetResponseUnmarshaller.Instance; return Invoke<DescribeReceiptRuleSetResponse>(request, options); }
public Filter(string name) { _Name =); }
public override java.nio.IntBuffer put(double c) { throw new java.nio.ReadOnlyBufferException(); }
public virtual CreateTrafficPolicyInstanceResponse CreateTrafficPolicyInstance(CreateTrafficPolicyInstanceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateTrafficPolicyInstanceRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateTrafficPolicyInstanceResponseUnmarshaller.Instance; return Invoke<CreateTrafficPolicyInstanceResponse>(request, options); }
public JapaneseIterationMarkCharFilter(Reader input, bool normalizeKanji, base bool normalizeKana)) { this.normalizeKanji = normalizeKanji; this.normalizeKana = normalizeizeKana; buffer.reset(input); }
public void WriteLong(long v) { writeInt((int)(v >>  0)); writeInt((int)(v >> 32)); }
public overrideResolver() { exports = new ConcurrentHashMap<>(); } }
public ValueEval GetRef3DEval(Ref3DPxg rptg) { SheetRangeEvaluator sre = CreateExternSheetRefEvaluator(rptg.getSheetName(), rptg.getLastSheetName(), rptg.ExternalWorkbookNumber; return new LazyRefEval(rptg.GetRow(), rptg.getColumn(),rere }
public virtual DeleteDatasetResponse DeleteDataset(DeleteDatasetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDatasetRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDatasetResponseUnmarshaller.Instance; return Invoke<DeleteDatasetResponse>(request, options); }
public virtual StartRelationalDatabaseResponse StartRelationalDatabase(StartRelationalDatabaseRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =StartRelationalDatabaseRequestMarshaller.Instance; options.ResponseUnmarshaller = StartRelationalDatabaseResponseUnmarshaller.Instance; return Invoke<StartRelationalDatabaseResponse>(request, options); }
public virtual DescribeReservedCacheNodesOfferingsResponse DescribeReservedCacheNodesOfferings() { return DescribeCacheNodesOfferings(new DescribeReservedCacheNodesOfferingsRequest; }
static public double pmtmt(double r, int nper, double pv, double fv int type) { return -r * (pv * Math.pow(1 + r, nper) + fv) / ((1 + + r*type) * (pow(11 +, nper) - - 1)); }
public virtual DescribeDocumentVersionsResponse DescribeDocumentVersions(DescribeDocumentVersionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDBDocumentVersionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDocumentVersionsResponseUnmarshaller.Instance; return Invoke<DescribeDocumentVersionsResponse>(request, options); }
public virtual ListPublishingDestinationsResponse ListPublishingDestinations(ListPublishingDestinationsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListPublishingDestinationsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListPublishingDestinationsResponseUnmarshaller.Instance; return Invoke<ListPublishingDestinationsResponse>(request, options); }
public DeleteAccountAliasRequest(string accountAlias) { _AccountAliAlias(accountAlias); }
public static long[] Grow(long[] array) { return Grow(array, 1 + array.Length); }
public override output outputToString(String(Object output) { if (!(output is List)) { return outputs..ToString((T) output); } else { List<T> outputList = (List<T>) output; StringBuilder b = new StringBuilder(); b.Append('['); for(int i =; if (i > 0) { b.Append(", "); } b.Append(outputs.outputToString(outputList } b.Append(']'); return } } }
public void notifyDeleteCell(Cell cell) { _bookEvaluator.ntiDeleteCell(new HSSFEvaluationCell((HSSFCell)cell))CellCell }
public StringBuilder StringBuilder replace(int start, int end, String str) { replace0(start, end, str); return this; }
public virtual SetIdentityPoolConfigurationResponse SetIdentityPoolConfiguration(SetIdentityPoolConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =SetIdentityPoolConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = SetIdentityPoolConfigurationResponseUnmarshaller.Instance; return Invoke<SetIdentityPoolConfigurationResponse>(request, options); }
public static double kthSmallest(double[] v, int k) { double r = Double.NaN; int index = k-1 if (v!= && v.Length > index && index >= 0) { Arrays. r = v[index]; } return r; }
public void void Set(int index, long value) { int o = index)(( >>; int b = index & 31; int shift = b << 1; blocks[o] = (blocks[o] & ~(3L << shift)) | (value << shift) }
public override string ToString() { if children = ==() || if.children() null'/>"; StringBuilder sb = new StringBuilder(); sb.Append("<. operation='and'>"); foreach (QueryNode child : { sb.Append("\n"); sb.Append(child.ToString()); return sb.Append(" } sb.Append("\nGet/=.>"); return sb.ToString(); }
public int sumTokenSizes(int fromIx, int toIx) { int result = 0; for (int i=fromIx; i<toIx; i++) { result += _ptgs[i].Size(); } return result; }
public virtual void SetReadonly(bool readonly) { if ( this.readonly && !readonly ) throw new IllegalStateException("can't ifalter =only IntervalSet"); this.readonly = readonly; this.readonly =onlylylyon; }
public void clearConsumingCell(FormulaCellCacheEntry cce) { if!_consumingCells.remove(cce)) { throw new InvalidOperationException("Specified formula cell is not consumed by this cell"); } }
public override IList<E>E> subList(int start, int end) { lock (mutex) { return new java.util.ynchronizedchronizedRandomAccessList<E>(list.subList(start, end),utex)); } }
public virtual FileHeader GetFileHeader() { return file; }
public virtual AttachLoadBalancersResponse AttachLoadBalancers(AttachLoadBalancersRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =AttachLoadBalancersRequestMarshaller.Instance; options.ResponseUnmarshaller = AttachLoadBalancerResponseUnmarshallerResponseUnmarshaller.Instance; return Invoke<AttachLoadBalancers options); }
public InitiateJobRequest(string accountId, string vaultName, JobParameters jobParameters) { _countcountId =countcountId; _VaultName = vaultName; _jParameterParameters(jobParameters); }
public override string ToString() { return "SPL"; }
public ReplaceableAttribute(string name, string value, Boolean replace) { _Name =); _valuevalue = =; _Replace(replace); }
public virtual Add(IndexableField field) field) { fields.Add(field); }
public virtual DeleteStackSetResponse DeleteStackSet(DeleteStackSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteStackSetRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteStackSetResponseUnmarshaller.Instance; return Invoke<DeleteStackSetResponse>(request, options); }
public GetRepoBuildRuleListRequest(): base("cr", "2016-06-07", {RepoBuildRuleList", " { "openAPI") "openAPI") UriPattern = "/repos/[RepoNamespace]/[RepoName]/rules"); Method = MethodType.GET; }
public SparseArray(int initialCapacity) { initial = = ArrayUtils.idealIntArraySize(initialCapacity); mKeys = new int[initialCapacity]; mKeys = newin[initialCapacity]; mValues = new Object[initialCapacity; mSize = 0; }
public java. NRequest(): base(" { { Invoke {Service { { { { { { { { { { { = newindustry; Protocol = MethodType.POST; }
public ListAlbumPhotosRequest() {CloudPhoto",AlAl { "openAPI") { "openAPI") Protocol = ProtocolType.HTTPS; Protocol = ProtocolType.HTTPS;
public virtual H hasPrevious() { return link != list.voidLink; }
public virtual DeleteHsmConfigurationResponse DeleteHsmConfiguration(DeleteHsmConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteHsmConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteHsmConfigurationResponseUnmarshaller.Instance; return Invoke<DeleteHsmConfigurationResponse>(request, options); }
public CreateLoadBalancerRequest(string loadBalancerName) { _subLoadBalancerName = loadBalancerName; }
public virtual string GetUserInfo() { return decode =(userInfo); }
public virtual TagAttendeeResponse  tagAttendee(TagAttendeeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =TagTagAttendeeRequestMarshaller.Instance; options.ResponseUnmarshaller = TagAttendeeResponseUnmarshaller.Instance; return Invoke<TagAttendeeResponse>(request, options); }
public virtual string GetRefName() { return name; }
public virtual SpanNearQuery build() { return new SpanNearQuery(clauses.toArray(new SpanQuery[clauses.size()]), slop, ordered); }
public virtual bool IsSubTotal(int rowIndex, int columnIndex) { return false; }
public virtual DescribeDBProxiesResponse DescribeDBDBProxies(DescribeDBProxiesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDBProxiesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDBProxiesResponseUnmarshaller.Instance; return Invoke<DescribeDBProxiesResponse>(request, options); }
public virtual GetVoiceConnectorProxyResponse GetVoiceConnectorProxy(GetVoiceConnectorProxyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =VoiceConnectorVoiceConnectorProxyRequestMarshaller.Instance; options.ResponseUnmarshaller = GetVoiceConnectorProxyResponseUnmarshaller.Instance; return Invoke<GetVoiceConnectorProxyResponse>(request, options); }
public WindowCacheConfig fromConfig(Config rc) { SetPackedGitUseStrongRefs(rc.getBoolean(CONFIG_CORE_SECTION,ONFIG_KEY_PACKED_GD_IT_USE_STRONGREFS,isPackedGitUseStrongRefs()s(); setPackedGitOpenFiles(rc.getInt(CFIG_RE_SECTIONCTION_, null,CONFIG_KEYACKD_GIT_IT_OPENFILES, getPackedOpenFiles())); SetPackedGitLimit(rc.getLong(CONFIG_CORE_SECTION, null,CONFIG_KEY_PACKED_GIT_LIMIT, getPackedGitLimit())); SetPackedGitWindowSize(rc.getInt(CONFIG_RE_SESECTION, null,CONFIG_KEYACKED_GIG SetPackedGitMMAPAP(rc.getBoolean(CONFIG_CORESECTION, null,CONFIG_KEY_PACKED_GIT_MMAP, is isPackedGitMMAP())); SetDeltaBaseCacheLimit(rc.getInt(CONFIG_CORE_SECTION, null,CONFIG_KEY_DELTA_BASE_CACHE_LIMIT, getDeltaBaseCacheLimit())); long maxMem = Runtime.getRuntime().maxMemory(); long sft = rc.getLong(CONFIG_CORE_SECTION, null,CONFIG__KEY_STREAM_FILE__SHO =LD,StreamStreamFileThreshold()); sft = Math.min(sft, maxMemMem / 4); } } } }
public static Date  GetJavaDate(double date) { return GetJavaDate(date, false, null, false); }
public virtual StartPersonTrackingResponse StartPersonTracking(StartPersonTrackingRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =StartPersonTrackingRequestMarshaller.Instance; options.ResponseUnmarshaller = StartPersonTrackingResponseUnmarshaller.Instance; return Invoke<StartPersonTrackingResponse>(request, options); }
public override int size() { return totalSize; }
public virtual GetRouteResponse GetRoute(GetRouteRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =RouteRouteRequestMarshaller.Instance; options.ResponseUnmarshaller = GetRouteResponseUnmarshaller.Instance; return Invoke<GetRouteResponse>(request, options); }
public virtual DeleteClusterResponse DeleteCluster(DeleteClusterRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteClusterRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteClusterResponseUnmarshaller.Instance; return Invoke<DeleteClusterResponse>(request, options); }
public override string ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[MMS]\n"); buffer.Append("    .addMenu        = ").Append(toHexString(AddMenuCount())).Append("\n\n"); buffer.Append("    .delMenu        = ").Append(er..ToHexString(DelMenuCount())).Append("\n")"); buffer.Append("[/MMS]\n"); return buffer.ToString(); return buffer.ToString(); }
public FileBasedConfig(Config base base, File cfgLocation, FS f { = = =); configFile = cfgLocation; this.fs = fs; this. this.hash = ObjectId.zeroId(); }
public int following(int po pos) { if (pos < text.BeginIndex() pos > text.getEndIndex()) throw new ArgumentException("offset out of bounds"); } else if (0 == sentenceStarts.Length) { text.Index(text.BeginIndex; return Done; } else if (pos >= sentenceStarts[sentenceStarts.Length - 1]) { text.Index(text.EndIndex; currentSentence = sentenceStarts.Length - 1; return Done; } else { currentSentence = (sentenceStarts.Length - 1) / 2; moveToSentenceAt(pos, 0, sentenceStarts.Length - 2); text m return return } }
public virtual UpdateParameterGroupResponse UpdateParameterGroup(UpdateParameterGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =ParameterGroupParameterGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateParameterGroupResponseUnmarshaller.Instance; return Invoke<UpdateParameterGroupResponse>(request, options); }
public override Object Clone() { return copy(); }
public static double calcDistanceFromErrPct(Shape shape, double distErrPct, SpatialContext ctx) { if (distErrrrPct < 0 || distErrPct > 0. { throw new System.ArgumentException("distErrPct " + distErrPct + " must be between [0 to 0.5]"); } if (distErrPct == 0 || shape instanceof Point) { return } Rectangle bbox = shape.BoundingBox(); Point ctr = bbox.GetCenter(); double y = (ctr.Y() >= ? bbox.getMaxY() b b bbox.MinY()); double diagonalDist = ctx.getDistCalc().distancectctr, bbox.getMaxX(), y); return return diagonalDist * distErrP; } }
public int int codePointAt(int index) { if (index < 0 || index >= count) { throw indexAndLength(index); } return }
public void void SetPasswordVerifier(int pVerifier) { this.passwordVerifier = passwordVerifier; }
public ListVaultsRequest(string accountId) { _countcountac =countIdId; }
public SquashashMessageFormatter() { dateFormatter = new GitDateFormatter(Format.DEFAULT); }
public GetVideoCoverRequest(): base(" Get "2017-07-11", { {ideoCo {", { "openAPI") Protocol = ProtocolType.HTTPS; Protocol = ProtocolType.HTTPS;
public int lastIndexOf(Object @object) @object) { int pos = size; java.util.Linked link = voidLinkLink.previous; if (object != null) { while (link != voidLink) { pos--; if (object.Equals(link.data)) { return pos; } link = link.previous; } } else { while (link != voidLink) { pos--; if (link.data == null) { return pos; } } link } } } return } }
public virtual DescribeSpotFleetRequestsResponse DescribeSpotFleetRequests(DescribeSpotFleetRequestsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeSpotFleetRequestsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeSpotFleetRequestsResponseUnmarshaller.Instance; return Invoke<DescribeSpotFleetRequestsResponse>(request, options); }
public virtual IndexFacesResponse IndexFaces(IndexFacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =IndexFacesRequestMarshaller.Instance; options.ResponseUnmarshaller = IndexFacesResponseUnmarshaller.Instance; return Invoke<IndexFacesResponse>(request, options); }
public virtualRuleBasedBreakIterator GetBreakIterator(int script) { switch(script) { case UScript.JAPANESE: return (RuleBasedBreakIterator)cjkBreakBreakIterator.c; case UScript.M if (myanmarAsWords) { return (RuleBasedBreakIterator)defaultBreakIterator.clone(). } else { return (RuleBasedBreakIterator)myanmarSyllableIteratorIterator.c } default return (RuleBasedBreakIterator)defaultBreakIterator.c); } } } }
public override string ToString() { StringBuilder b = new StringBuilder(); b.Append("[DCONREF]\n"); b.Append("    .f\n"); b.Append("        .firstrow   = ").Append(firstRow).Append("\n"); b.Append("        .lastrow    = ").Append(lastRow).Append("\n"); buffer.Append(".Append("        .firstcol   = ").Append(firstCol).Append("\n"); buffer.Append(".Append("        .lastcol    = ").Append(lastCol).Append("\n"); buffer.Append(".Append("    .cch            =.Append("charCount).Append("\n"); buffer.Append(".Append("    .stFile\n"); buffer.Append(".Append("        .h         .Append(" charType)).Append("\n"); buffer.Append(".Append("        .rgb       .Append(".ToString()      ")") ") ;.Append(".ToString()getReadablePath()).append("\n"); b.Append("[/DCONREF]\n")"); b.Append("[/DCONREF]; return b.ToString(); }
public virtual int GetPackedGitOpenFiles() { return packedGitOpenFiles; }
public override string ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[FEATURE HEADER]\n"); buffer.Append("[/FEATURE HEADER]\n"); return buffer.ToString(); }
public static byte[] GetToUnicodeLE(string string) { return _.GetBytes(UTF16LE)); }
public virtual IList< Get getFooterLines(string keyName) { lock (this) { return GetFooterLines(new FooterKey(keyName)); }
public virtual void refresh() { base new System.NotImplemented(); clearReferences(); }
public override float Get index) index) { checkIndex(index); return byteBuffer.getFloat(index * libcore.io.SizeOf.FLOAT); }
public virtual DeleteDetectorResponse DeleteDetector(DeleteDetectorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDetectorRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDetectorResponseUnmarshaller.Instance; return Invoke<DeleteDetectorResponse>(request, options); }
public virtual int[] Grow() { Debug.Assert( (Start != null; return bytesStart = ArrayUtil.grow(bytesStart, bytesStart.Length + 1); }
public virtual ListExclusionsResponse ListExclusions(ListExclusionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListExclusionsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListExclusionsResponseUnmarshaller.Instance; return Invoke<ListExclusionsResponse>(request, options); }
public static SpatialStrategy getSpatialStrategy(int roundNumber) { SpatialStrategy result = spatialStrategyCache.get(roundNumberNumber); if (result == null) { throw new InvalidOperationException("Strategy should have been init'ed by SpatialDocMaker by now"); } } return result result; }
public virtual DBCluster restoreDBClusterToPointInInTime(RestDBClusterToPointInIn request) request) { var options = new InvokeOptions(); options.RequestMarshaller = PoreDBClusterToPointInTimeRequestMarshaller.Instance; options.ResponseUnmarshaller = PoreCluster rPointInTimeResponseUnmarshaller.Instance; return Invoke<RestoreDBClusterToPointInTimeResponse>(request, options); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_categoryDataType); out1.WriteShort(field_2_valuesDataType); out1.WriteShort(field_3_numCategories); out1.WriteShort(field_4_numValues); out1.WriteShort(field_5_bubbleSeriesType); out1.WriteShort(field_6_numBubbleValues); }
public virtual PostAgentProfileResponse  postAgentProfile(PostententProfileRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =PoPostAgentProfileRequestMarshaller.Instance; options.ResponseUnmarshaller = PostAgentProfileResponseUnmarshaller.Instance; return Invoke<PostAgentProfileResponse>(request, options); }
public virtual ParseTreePattern compileParseTreePattern(string pattern, int patternRuleIndex) { if ( GetTokenStream()! { TokenSource tokenSource = = getTokenStream().getTokenSource(); if ( tokenSource is Lexer) { Lexer lexer = (Lexer)tokenSource; return compileParseTreePattern(pattern, patternRuleIndex, lexer); } } throw new NotSupportedException("Parser can't discover a lexer to use")") } } }
public virtual BacktrackDBClusterResponse BacktrackDBCluster(BacktrackDBClusterRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =BacktrackDBClusterRequestMarshaller.Instance; options.ResponseUnmarshaller = BacktrackDBClusterResponseUnmarshaller.Instance; return Invoke<BacktrackDBClusterResponse>(request, options); }
public virtual string GetName() { return strategyNameName; }
public void copyTo(byte[] b, int o) { formatHexByte(b, o + 0, w1); formatHexByte(b, o + 8, w2); formatHexByte(b, o + 16, w3); formatHexByte(b, o + 24, w4); formatHexByte(b, o + 32, w5); }
public static boolList  lineMap(byte[] buf, int ptr, int end) {List map = new Int List((end - ptr) / 36); map.fillTo(1, Integ..ININ_E); for (; } map } maps.Add(end); return map; }
public virtual Set<ObjectId> getAdditionalHaves() { return Collections.emptySet(); }
public override long RamBytesUsed() { lock (this) { long sizeInBytes = BASE_RAMstring>SED + fields.size() * * RamUsageEstimator.NUM_BYTES_OBJECT_ * * foreach } } } } return }
public override string ToXml(string tab) { StringBuilder builder = new StringBuilder(); IList<er tab.Append(".Append("").Append(").Append( RecordName.Append(".Append(">\n"); foreach (EscherRecord escherRecord : getEscherRecords { buffer.Append(er.Append(escherRecord.ToXml(tab + "\t")); } buffer.Append("[/er.ToString()tab.Append(".Append("").Append(/").Append( RecordName.Append(".Append(">\n"); buffer.Append("[/ build.ToString()toString()String(); return }
public override TokenStream Create(TokenStream input) { return new GalicianMinimalStemFilter(input); }
public override String ToString() { StringBuilder r = new StringBuilder(); r.Append("Commit"); r.Append("={\n"); r.Append("tree "); r.Append(treeId != null ? treeId.name() : "NOT_TT"); r.Append("\n"); for (ObjectId p : parentIds) { r.Append("parent "); r.Append(p.name; r.Append("\n"); } r.Append("author "); r.Append("author != null ? author.toString() : "NOT_SET"); r.Append("\n"); r.Append("committer "); r.Append("committer != null ? committer.toString() : "NOT_SET"); r.Append("\n"); r.Append("gpgSignature "); r.Append("gpgSignature != null ? gpgSignature.toString() : "NO; r.Append("gpgSignature;SET"); r.Append("\n"); if (encoding != null && !References.isSameObject(encod; if, UTFing_; r.Append("encoding "); r.Append("encoding.; r.Append("\n"); r r r r r
public IndicNormalizationFilterFactory(IDictionary<string, string> args): base(args) { if (args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args) args); } }
public virtual OptionGroup CreateOptionGroupGroup(CreateOptionGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateOptionGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateOptionGroupResponseUnmarshaller.Instance; return Invoke<CreateOptionGroupResponse>(request, options); }
public virtual AssociateMemberAccountResponse AssociateMemberAccount(AssociateMemberAccountRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =AssociateMemberAccountRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateMemberAccountResponseUnmarshaller.Instance; return Invoke<AssociateMemberAccountResponse>(request, options); }
public virtual void run() { doRefreshProgress(mId, mProgress, mFromUser, true); mRefreshProgressRunnable = this; }
public virtual SetTerminationProtectionResponse SetTerminationProtection(SetTerminationProtectionRequest { var options = new InvokeOptions(); options.RequestMarshaller =SetTerminationProtectionRequestMarshaller.Instance; options.ResponseUnmarshaller = SetTerminationProtectionResponseUnmarshaller.Instance; return Invoke<SetTerminationProtectionResponse>(request, options); }
public string GetErrorHeader(RecognitionException e) { int line = java.nio.ContainOffendingToken().getLine(); int charPositionInLine = java.nio..OffendingToken().getCharPositionInLine(); return "line "+line + +:"+=charPositionInLine; }
public overrideBufferBuffer asReadOnlyBuffer() { java.nio.ToByteBufferByteBufferAdapter buf = new Char CharToByteBufferAdapter(byteBuffer.asReadOnlyBuffer()); buf.limit = _limit; buf._position = _position; buf._mark = _; buf.byteBuffer.Buffer.order = byteBuffer.orderorder; return buf; }
public virtual StopSentimentDetectionJobResponse StopSentimentDetectionJob(StopSentimentDetectionJobRequest { var options = new InvokeOptions(); options.RequestMarshaller =StopSentimentDetectionJobRequestMarshaller.Instance; options.ResponseUnmarshaller = StopSentimentDetectionJobResponseUnmarshaller.Instance; return Invoke<StopSentimentDetectionJobResponse>(request, options); }
public virtual ObjectId DclassMap<ObjectId> GetNewObjectIds() { if (newObjectIds != null)return newObjectIds; return new ObjectIdSubclass.>(); }
public void clear()lear() { hash = hash(new byte[0]); base =lear(); }
public void Reset()() { lock (@lock) { checkNotClosed(); if (mark == -1) { throw new java. =Invalid _")"); } pos = _; } }
public RefErrorPtg(LittleEndianInput in1)  { field_1_reserved = in1.ReadInt(); }
public virtual SuspendGameServerGroupResponse SuspendGameServerGroup(SuspendGameServerGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =SuspendGameServerGameServerGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = SuspendGameServerGroupResponseUnmarshaller.Instance; return Invoke<SuspendGameServerGroupResponse>(request, options); }
public ValueEval Evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) { if (args.Length != 3) { return ErrorEval.VALUE_INVALID; } return Evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2]); }
public GetRepoRequest(): base("cr", { "GetRepo", "cr",cr", { "openAPI") UriPattern = "/repos/[RepoNamespace]/[RepoName]"); Method = MethodType.GET); }
public virtual void SetDate(Date date) { if (date != null) { SetDate(DateTools.dateToString(date, DateTools.Resolution.SECOND)); } else { this.date = null; } }
public override TokenStream Create(TokenStream input) { return new GermanMinimalStemFilter(input); }
public override object[] toArray() { return a System.NotImplementedException(); }
public void void Write(char[] buffer, int offset, int len) { java.util.Arrays.checkOffsetAndCount; lock (@lock) { expand(len); System.Array.Copy(buffer, offset, this.buf,, this.count, len); this.count += len; } }
public static RevFilter after(DateDate ts) { return after(tRevFilterTime); }
public DeleteGroupPolicyRequest(string groupName, string policyName) { _groupName = groupName; _poPolicyName =licylicyName; }
public virtual DeregisterTransitGatewayMulticastGroupMembersResponse DeregisterTransitGatewayMulticastGroupMembers(DeregisterTransitGatewayMulticastGroupMembersRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =DeregisterTransitGatewayMulticastMemberRequestMarshaller.Instance; options.ResponseUnmarshaller = DeregisterTransitGatewayMulticastGroupMemberResponseUnmarshallerResponseUnmarshaller.Instance; return Invoke<DeregisterTransitGatewayMulticastGroupMembersResponse>(request, options); }
public virtual BatchDeleteScheduledActionResponse BatchDeleteScheduledAction(BatchDeleteScheduledActionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =BatchDeleteScheduledActionRequestMarshaller.Instance; options.ResponseUnmarshaller = BatchDeleteScheduledActionResponseUnmarshaller.Instance; return Invoke<BatchDeleteScheduledActionResponse>(request, options); }
public virtual CreateAlgorithmResponse CreateAlgorithm(CreateAlgorithmRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateAlgorithmRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateAlgorithmResponseUnmarshaller.Instance; return Invoke<CreateAlgorithmResponse>(request, options); }
public int readUByte() { return ReadByte() & 0x00FF; }
public virtual void SetLength(int sz) { NB.encodeInt32(info, infoOffset + P_SIZE, sz); }
public virtual DescribeScalingProcessTypesResponse DescribeScalingProcessTypes() { return DescribeScalingProcessTypes(new DescribeScalingProcessTypesRequest()) }
public virtual ListResourceRecordSetsResponse ListResourceRecordSets(ListResourceRecordSetsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListResourceRecordSetsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListResourceRecordSetsResponseUnmarshaller.Instance; return Invoke<ListResourceRecordSetsResponse>(request, options); }
public override Token recoverInlineline(Parser recognizer)throw { = =matchException e = new InputMismatchException(recognizer); (; foreach (ParserRuleContext context = recognizer.GetContext() context != null; context = context.get contextParent; context.exception = e; } } throw new ParseCancellationException(e); }
public virtual SetTagsForResourceResponse SetTagsForResource(SetTagsForResourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =SetTagsForResourceRequestMarshaller.Instance; options.ResponseUnmarshaller = SetTagsForResourceResponseUnmarshaller.Instance; return Invoke<SetTagsForResourceResponse>(request, options); }
public ModifyStrategyRequest(): base(" Modify { { ModifyStrategyStrategy { { { Modify { Modify { { {ent =entCallCenter", -05", "Strategy", "CallCenter", =innerAPI") }
public virtual DescribeVpcEndpointServicesResponse DescribeVpcEndpointServices(DescribeVpcEndpointServicesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeVpcEndpointServicesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeVpcEndpointServicesResponseUnmarshaller.Instance; return Invoke<DescribeVpcEndpointServicesResponse>(request, options); }
public virtual EnableLoggingResponse EnableLogging(EnableLoggingRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =EnableLoggingRequestMarshaller.Instance; options.ResponseUnmarshaller = EnableLoggingResponseUnmarshaller.Instance; return Invoke<EnableLoggingResponse>(request, options); }
public virtual bool contains(object o) { return ConcurrentHash)) }
public SheetRangeIdentifier(string bookName, NameIdentifier firstSheetIdentifier NameIdentifier lastSheet IdentifierIdentifier) { this.m_(bo =okName, firstSheetIdentifier; _lastSheetIdentifier = lastSheetIdentifier; }
public DomainMetadataRequest(string domainName) { _DomainName = =omainName; }
public ParseException(Token currentTokenVal,int[][] expectedTokenSequencesVal, String[] tokenImageVal) {(new MessageImpl(QueryParserMessages.INVALID_SNT,,, initialise(currentTokenVal, expectedTokenSequencesVal, tokenImageVal))); this.currentToken = currentToken; this.expectedTokenSequencesces = expectedTokenSequencesVal; this.tokenImage = tokenImageVal; }
public FetchPhotosRequest(): base("CloudPhoto", { "FetchPhoto { { Protocol = ProtocolType.HTTPS; Protocol = ProtocolType.HTTPS;
public virtual PrintWriter writer() { return writer; }
public NGramTokenizerFactory(IDictionary<string, string> args): base(args) { minGramSize = GetInt(args, "minGramSize", NGramTokenizer.GramramIN_(args,NGRAMramGGram;DEFAULT_MIN_NGNGAM_SIZE;GramSize = GetInt(args, "maxGramSize", NGramTokenizer.DEFAULT_MAX_NGRAM_SIZE); } if (args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " " +; } }
public virtual bool IsDirectoryFileConflict() { return dfConflict != null; }
public IndonesianStemFilter(TokenStream input, bool stemDerivational) { this.stemDerivational = stemDerivational; }
public virtual CreateTrafficPolicyResponse CreateTrafficPolicy(CreateTrafficPolicyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateTrafficPolicyRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateTrafficPolicyResponseUnmarshaller.Instance; return Invoke<CreateTrafficPolicyResponse>(request, options); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteInt(fSD); out1.WriteInt(passwordVerifier); StringUtil.writeUnicodeString(out, title); out1.Write(securityDescriptor); }
public static double floor(double n, double s) { if (s =0 && n!=0) { return (.NaN; } else { return (n =0 || s==0) ? 0 : Math.floor(n/s) * s } } }
public ByteArrayDataOutput(byte[] bytes, int offset, int len) { Reset(bytes, offset, len); }
public static IList< DTree> GetChildren(Tree t) { IList<Tree> kids = new List<TreeTree>(); for (int i =; kids.Add(t.Child(i)); } return kids; }
public override void C { Hashtable. }
public RefreshAllRecord(bobo refreshAll) { this.( = =; _RefreshAll(refresh; }
public virtual DeleteNamedQueryResponse DeleteNamedQuery(DeleteNamedQueryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteNamedQueryRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteNamedQueryResponseUnmarshaller.Instance; return Invoke<DeleteNamedQueryResponse>(request, options); }
public GraphvizFormatter(ConnectionCosts costs) { this.costs = costs; this.bestPathMap = new HashMap<>(); sb.Append(formatHeader()); sb.Append("  =it [style=invis]\n"); sb.Append("EL + "\"]\n"); }
public CheckMultiagentRequest(): base("ent { { { { { { { { { { { {-1 ProtocolType.HTTPSMultiMultiMultiag- = ProtocolType.HTTPS; Method = MethodType.POST; }
public virtual ListUserProfilesResponse ListUserProfiles(ListUserProfilesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListUserProfilesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListUserProfilesResponseUnmarshaller.Instance; return Invoke<ListUserProfilesResponse>(request, options); }
public virtual CreateRelationalDatabaseFromSnapshotResponse CreateRelationalDatabaseFromSnapshot(CreateRelationalDatabaseFromSnapshotRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateRelationalDatabaseFromSnapshotRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateRelationalDatabaseFromSnapshotResponseUnmarshaller.Instance; return Invoke<CreateRelationalDatabaseFromSnapshotResponse>(request, options); }
public virtual StartTaskResponse StartTask(StartTaskRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =StartTaskRequestMarshaller.Instance; options.ResponseUnmarshaller = StartTaskResponseUnmarshaller.Instance; return Invoke<StartTaskResponse>(request, options); }
public virtual SetCollection<string GetIgnoreoredPaths() { return ignoredPaths; }
public FeatSmartTag(RecordInputStream in1) { data = System.NotImplementedRemainder(); }
public Change(ChangeAction action, ResourceRecordSet resourceRecordSet) { _Action(action =; _RecordRecordRecordSet(resourceRecordSet); }
public virtual DeleteImageResponse DeleteImage(DeleteImageRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteImageRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteImageResponseUnmarshaller.Instance; return Invoke<DeleteImageResponse>(request, options); }
public virtual CreateConfigurationSetResponse CreateConfigurationSet(CreateConfigurationSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateConfigurationSetRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateConfigurationSetResponseUnmarshaller.Instance; return Invoke<CreateConfigurationSetResponse>(request, options); }
public virtual java.util.Iterator<E> iterator() { object[] snapshot = elements; return new java.util.liwIterator<E>(snapshot, 0, snapshot.Length); }
public virtual void visitContainedRecords(RecordVisitor rv) { if (_recs.isEmpty()) { return; } rv.isitRecord(_bofRec); for (int i = 0; i < _recs.Count; i++) { RecordBase rb = _recs.get(i); if (rb is RecordAggregate) { ((RecordAggregate) rb).vvisitContainedRecords(rv); } else { rv.isitRecord((org.apache.poi. } } } rv.isitRecord(EOFRecord.instance); } }
public override string ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[FtCbls ]").Append("\n"); buffer.Append("  size     = ").Append( DataSize.Append(".Append("\n"); buffer.Append("  reserved = ").Append(HexDump.ToHex(reserved)).Append("\n")"); buffer.Append("FtCbls ]")")\n\n"); buffer.Append("[/FtCbls ]")\n; return buffer.ToString(); }
public static BATBlock CreateEmptyBATBlock(f POIFSBigBlock PSize bigBlockSize, bool isXBAT) { BATBlock block = new BATBlock(bigBlockSize); ifisXBAT) { int _entries_per_xbat_block = bigBlockSize.getXBSizeATEntriesPerBlock(); block._values[ _entries_per_xbat_block ] = POIFSConstants.END_OF_CHAIN; } return block; }
public virtual TagResourceResponse  tagResource(TagResourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =TagTagResourceRequestMarshaller.Instance; options.ResponseUnmarshaller = TagResourceResponseUnmarshaller.Instance; return Invoke<TagResourceResponse>(request, options); }
public virtual DeleteMailboxPermissionsResponse DeleteMailboxPermissions(DeleteMailboxPermissionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteMailboxPermissionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteMailboxPermissionsResponseUnmarshaller.Instance; return Invoke<DeleteMailboxPermissionsResponse>(request, options); }
public virtual ListDatasetGroupsResponse ListDatasetGroups(ListDatasetGroupsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListDatasetGroupsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListDatasetGroupsResponseUnmarshaller.Instance; return Invoke<ListDatasetGroupsResponse>(request, options); }
public virtual ResumeProcessesResponse  resumeProcesses(ResumeProcessesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =ResResumeProcessesRequestMarshaller.Instance; options.ResponseUnmarshaller = ResumeProcessesResponseUnmarshaller.Instance; return Invoke<ResumeProcessesResponse>(request, options); }
public virtual GetPersonTrackingResponse GetPersonTracking(GetPersonTrackingRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =PerPersonTrackingRequestMarshaller.Instance; options.ResponseUnmarshaller = GetPersonTrackingResponseUnmarshaller.Instance; return Invoke<GetPersonTrackingResponse>(request, options); }
public virtual string ToFormulaString(String[] operands) { if (pacepace.IsSet(_options)) { return operands[ 0 ]; } else if (optiIf.isSet(_options)) { return toFormulaString() + "(" + operands[0] + ")"; } else if (optiSkip.isSet(_options)) { return toFormulaString() + operands[0]; } else { return toFormulaString() + "(" + operands[0] + ")"; return } }
public virtual merge(T first, T second) { throw new System.NotSupportedException(); }
public override string ToString() { return this.message.GetKey() + ": " +; }
public XPath(Parser parser, String path) { this.parser = parser; this.path = path; elements = split(path); }
public CreateAccountAliasRequest(string accountAlias) { _AccountAliAlias(accountAlias); }
public override void Decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) { for (int j = 0; j < iterations; ++j) { byte block = blocks[blocksOffset++]; values[valuesOffset++] = ((int)((uint)uint) >> >> >> >> &; values[valuesOffset++] = ((int)((uint)block >> 6 & >> >>; values[valuesOffset++] = ((int)((uint)blockblock >> &) 1; values[valuesOffset++] = ((int)((uint)ulul >> >> &; values[valuesOffset++] = ((int)((uint)block >> 3 >>); values[valuesOffset++] = ((int)((uint)blockong 1 &; values[valuesOffset++] = ((int)((uint)ulul >> 1; values[valuesOffset++] = block & 1; values[valuesOffset++] = block & & & 1 1; } }
public virtual PushConnection openPush() { return new TcpPushConnection(); }
public static void strcpy(char[] dst, int di, char[] src, int si) { while (src[si] != 0) { dst[di++] = src[si++]; } dst[d = = = 0; }
public virtual K GetKey() { return mapEntry.Key(); }
public static int numNonnull(object[] data) { int n = 0; if ( data == null) return n; foreach (Object o in data) { if } return n; } }
public virtual void Add(int location, E @object) { if (location >= 0 && location <= size) { java.util.Linked link = = voidLink; if (location < (size / 2)) { for (int i = 0; i <= location; i++) { link = link.next; } } } else { for (int i = size; i > location; i--) { link = link.previous; } } LLink<E> previousvious = link..viousvious; java.util.Link<E><E>LinkLink = new Link(object<E>, previous, link); java.util.Link } pre } } } } } } } } } } throw } } } } }
public virtual DescribeDomainResponse DescribeDomain(DescribeDomainRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDomainRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDomainResponseUnmarshaller.Instance; return Invoke<DescribeDomainResponse>(request, options); }
public virtual void flush() { base =lush(); }
public PersianCharFilterFactory(IDictionary<string, string> args): base(args) { if (args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args) args); } }
public bool bool inToken() { if (used) { return false; } clearAttributes(); termAttribute.Append(value); offsetAttribute.Offset(0, length); used = true; return true; }
public static java.nio.FloatBuffer allocate(int capacity) { if (capacity < 0) 0) { throw new System.ArgumentException(); } return new java.nio.ReadWriteFloatArrayBuffer(capacity); }
public virtualddit after(Edit cut) { return new Edit(cut.endA, endAA, cut.endB } }
public virtual UpdateRuleVersionResponse UpdateRuleVersion(UpdateRuleVersionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =RuleRuleVersionRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateRuleVersionResponseUnmarshaller.Instance; return Invoke<UpdateRuleVersionResponse>(request, options); }
public virtual ListVoiceConnectorTerminationCredentialsResponse ListVoiceConnectorTerminationCredentials(ListVoiceConnectorTerminationCredentialsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListVoiceConnectorTerminationCredentialsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListVoiceConnectorTerminationCredentialsResponseUnmarshaller.Instance; return Invoke<ListVoiceConnectorTerminationCredentialsResponse>(request, options); }
public virtual GetDeploymentTargetResponse GetDeploymentTarget(GetDeploymentTargetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =DeploymentDeploymentTargetRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDeploymentTargetResponseUnmarshaller.Instance; return Invoke<GetDeploymentTargetResponse>(request, options); }
public void void SetNoChildReport() { letChildReport  = false; for (final PerfTask task : tasks) { if (task is TaskSequence) { ((TaskSequence)task).NoChildReport(); } } }
public E E Get location) { try { return a[location]; } catch (ArrayIndexOutOfBoundsBoundsException e) { throw java. } }
public virtual DescribeDataSetResponse DescribeDataSet(DescribeDataSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDataSetRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDataSetResponseUnmarshaller.Instance; return Invoke<DescribeDataSetResponse>(request, options); }
public SkipWorkTreeFilter(int treeIdx) { this.treeIdx = treeIdx; }
public virtual DescribeNetworkInterfacesResponse DescribeNetworkInterfaces() { return DescribeNetworkInterfacesces(new DescribeNetworkInterfacesRequest; }
public bool contains( Match row row, int col) { return _firstRow <= row && _lastRow >= row&& _firstColumn <= col && _lastColumn >= col; }
public override string ToString() { return new string(this()s); }
public virtual PatchType GetPatchType() { return patchType; }
public override java.util.IteratorKK> iterator() { return new KeyIterator(); }
public virtual CreateScriptResponse CreateScript(CreateScriptRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateScriptRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateScriptResponseUnmarshaller.Instance; return Invoke<CreateScriptResponse>(request, options); }
public override BytesRef next() { termUpto++; if (termUpto >= info.terms. return null; } else { info.term ((int)(( return br; } } }
public virtual string outputToToString(CharsRef output) { return output.ToString(); }
public virtual AssociateWebsiteAuthorizationProviderResponse AssociateWebsiteAuthorizationProvider(AssociateWebsiteAuthorizationProviderRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =AssociateWebsiteAuthorizationProviderRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateWebsiteAuthorizationProviderResponseUnmarshaller.Instance; return Invoke<AssociateWebsiteAuthorizationProviderResponse>(request, options); }
public virtual void unpop(RevCommit c) { Block b = head; if (b == null) { b = free.newBlock(); b.resetToMiddle(); b.Add(c); head = b; tail = b; return; } else if (b.anUnpop()) { b.unpop(c); return; } b = free.newBlock(); b.resetToEnd(); b.unpop(c)); b.next = head head; b.next = head head head; head head = b b b b; }
public EdgeNGramTokenizerFactory(IDictionary<string, string> args) {GramSize = GetInt(args, "minGramSize", EdgeNGramTokenGramramizer.DEFAULT_MIN_GRAM_SIZE); maxGramSize = GetInt(args, "maxGramSize", EdgeNGramTokenGramSizeMAX_GGRAM_SIZE_SIZE);izer.DEFAULT_MAX_GAM_SIZE; if (args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " " + args); } }
public ModifyDBParameterGroupRequest(string dBName, List<Parameter> parameters) { _db = = =BParameterGroupName; _dameterameters(pars); }
public virtual GetHostedZoneLimitResponse GetHostedZoneLimit(GetHostedZoneLimitRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =HostedZoneHostedZoneLimitRequestMarshaller.Instance; options.ResponseUnmarshaller = GetHostedZoneLimitResponseUnmarshaller.Instance; return Invoke<GetHostedZoneLimitResponse>(request, options); }
public void void Set(int index, long value) { int o = index)(( >> >>; >>; >>; >>; >>; >>; >>; int b = index & 63; int shift = b << 0; blocks[o] = (blocks[o] & ~(1L << shift)) | (value << shift) }
public override RevFilter Clone() { return new PatternSearch(pattern); }
public override string ToString() { return "spans(" + term term.toString() + ")@" +(doc == -1 ?START" : (doc == NO_MORE_DOCS) ? "ENDDOC": doc + " - " + (position == NO_MO_POSITIONS ? "ENDPOS" : positionS }
public virtual canAppendMatch() { foreach (Head head : heads) { if (head != LastHead.INSTANCE) { return true; } } return false; }
public virtual int lastIndexOf(string subString, int start) { lock (this) { return base.IndexIndexOf(sub; start); } }
public virtual DeleteNetworkAclEntryResponse DeleteNetworkAclEntry(DeleteNetworkAclEntryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteNetworkAclEntryRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteNetworkAclEntryResponseUnmarshaller.Instance; return Invoke<DeleteNetworkAclEntryResponse>(request, options); }
public virtual AssociateMemberToGroupResponse AssociateMemberToGroup(AssociateMemberToGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =AssociateMemberToGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateMemberToGroupResponseUnmarshaller.Instance; return Invoke<AssociateMemberToGroupResponse>(request, options); }
public static int committer(byte[] b, int ptr) { int sz = b.Length; if (ptr == 0)ptr += 46; if (ptr 0)ptr 4 4 4; while (ptr < sz && b[ptr] == 'p')ptrptr += 48; ptr (ptr < sz && && b[ptr] == ' 'a')ptrptr len if return } }
public virtual int GetLineNumber() { return row; }
public virtual SubmodulemoduleUpdateCommandCommand AddPath(string path) { path (path); return this; }
public virtual GetPushTemplateResponse GetPushTemplate(GetPushTemplateRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =PushPushTemplateRequestMarshaller.Instance; options.ResponseUnmarshaller = GetPushTemplateResponseUnmarshaller.Instance; return Invoke<GetPushTemplateResponse>(request, options); }
public virtual DescribeVaultResponse DescribeVault(DescribeVaultRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeVaultRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeVaultResponseUnmarshaller.Instance; return Invoke<DescribeVaultResponse>(request, options); }
public virtual DescribeVpcPeeringConnectionsResponse DescribeVpcPeeringConnections() { return DescribeVpcPeeringConnections(new DescribeVpcPeeringConnectionsRequest()); }
public override java.nio.ByteBuffer putLong(int index, long value) { throw new java.nio.ReadOnlyBufferException(); }
public virtual RegisterDeviceResponse RegisterDevice(RegisterDeviceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =RegisterRequestMarshaller.Instance; options.ResponseUnmarshaller = RegisterDeviceResponseUnmarshaller.Instance; return Invoke<ReDeviceDeviceResponse>(request, options); }
public static Format byId(int id) { for (Format format : Format.values()) { if (format.Id() == id) { return format; } } throw new ArgumentException(" format id: " + id); }
public virtual DeleteAppResponse DeleteApp(DeleteAppRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteAppRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteAppResponseUnmarshaller.Instance; return Invoke<DeleteAppResponse>(request, options); }
public virtual GetBaiduChannelResponse GetBaiduChannel(GetBaiduRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =BBaiduChannelRequestMarshaller.Instance; options.ResponseUnmarshaller = GetBaiduChannelResponseUnmarshaller.Instance; return Invoke<GetBaiduChannelResponse>(request, options); }
public virtual FST.BytesReader GetBytesReader() { return fst.GetBytesReader(); }
public static bool IsValidSchemeChar(int index, char c) { if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) { return true; } if (index > 0 && ((c >= '0' && c <= '9') || c == '+' || c == '-' || c == '.')) { return true; } return false; } }
public virtual ListAppliedSchemaArnsResponse ListAppliedSchemaArns(ListAppliedSchemasRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAppliedSchemaArnsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAppliedSchemaArnResponseUnmarshallerResponseUnmarshaller.Instance; return Invoke<ListAppliedSchemaArnsResponse>(request, options); }
public override name() { return this.name; }
public ValueEval Evaluate(ValueEval[] args, OperationEvaluationContext ec) { if (args.Length < 1) { return ErrorEval.VALUE_INVALID; } bool isA1style; string text; try { ValueEval ve = OperandResolver.GetSingleValue(args[0], ec.getRowIndex ec.getColumn(),Index()); text = OperandResolver.cocoerceValueToString(ve); switch (args.Length) { case 1: isA1style = true; break; case 2:A1style = EvaluateBooleanArg(args[1], ec); break; default: return ErrorEval.VALUE_INVALID; } } } catch (EvaluationException e) { return } } return EvaluateIndirect(ec, text, isA1style); } }
public virtual CompareToTo(int[] bs, int p) { int cmp; cmp = NB if (cmp != 0)return cmp; cmp = NB if (cmp != 0)return cmp; cmp = NB if (cmp != 0)return cmp; cmp = NB if (cmp != 0)return return return }
public void voidName(int index) { names.Remove(index); workbook.RemoveName(index); }
public GetQueueAttributesRequest(string queueUrl, List<string> attributeNames) { _eueeueUrl =quUrl); _atAttributeNames =attributeNames); }
public static bool[] copyOf(bool[] original, int newLength) { if (newLength < 0) { throw new java.util.lanativeArraySizeException(); } return copyOfRange(original, 0, newLength); }
public static void SetEnabled(bobo enabled) { ENABLED = enabled; }
public virtual DeleteLogPatternResponse DeleteLogPattern(DeleteLogPatternRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteLogPatternRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteLogPatternResponseUnmarshaller.Instance; return Invoke<DeleteLogPatternResponse>(request, options); }
public virtual bool contains(Contain[] text,, int off, int len) { return map.ContainsKey(text, off, len); }
public int GetFirstSheetIndexFromExternSheetIndex(int externSheetNumber) { return linkTable.getFirstInternalSheetIndexForExtIndex(externSheetNumber); }
public bool handles(string commandLine) { return command.Length + 1 < commandLine.Length&& commandandLine.charcommand.Length()) == ' '&& commandLine.startsWith(command); }
public static void register(MergeStrategy imp) { register(imp..(), imp); }
public override RamBytesUsed() { return BASE_RAMs.GetUSED + ((index!=)? index.._BytesUsed() = 0); }
public HostedZone(string id, String name, String callerReference) { _id =); _Name = =; _Caller =(callerReference); }
public virtual GetFindingsResponse GetFindings(GetFindingsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =FindFindingsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetFinding getResponseUnmarshaller.Instance; return Invoke<GetFindsResponse>(request, options); }
public virtual DescribeTopicsDetectionJobResponse DescribeTopicsDetectionJob(DescribeTopicsDetectionJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeTopicsDetectionJobRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeTopicsDetectionJobResponseUnmarshaller.Instance; return Invoke<DescribeTopicsDetectionJobResponse>(request, options); }
public bool pro proMatchMatch(ValueEval eval) { if(eval is NumericValueEval) { ifminimimumValue == null) { minimumValue = eval; } else { double currentValue = ((NumericValueEval)eval).getNumberValue; double oldValue = ((NumericValueEval)minimumValue).getNumberValue; if(currentValue < oldValue) { minimumValue = eval; } } } return true; } }
public override void Write(ILittleEndianOutput out1) { out1.WriteByte(sid + PtgClas; out1.WriteShort(field_1_len_ref_subexpression); }
public static void main(string[] args) { bool printTree = false; string path = null; for(int i =; i <args.Length; i++) { if (args[i].Equals("-printTree")) { printTree = true; } else { path = args[i]; } } if (args.Length != (printTree ? 2 : 1)) {out.println("\nUsage: java -classpath ... org.apTree] /path/to/taxononmy/index\n"); } } } Directory dir = FSDirectory.open(Path; TaxonomyReader r = new DirectoryTaxonomyReader(dir); printStats(rr, System.out,, printTree); printStats(r, System.outout,Tree; r } } }
public virtual void SetByteValue(byte value) { if (!(fieldssData is Byte)) { throw new System.ArgumentException("cannot change value type from " + fieldsData.GetType().SimpleName() + " to Byte"); } field }
public static int initialize() { return initialize(DEFAULT_SEED); }
public CachingDoubleValueSource(DoubleValuesSource source) { this.source = source; cache = new Hash.AddMap<>(); }
public AttributeDefinition(string attributeName, ScalarAttributeType attributeType) { _tributetributeName =tributetributeName); _AttributeType = =attributeType; }
public static string join(Collection<String> parts, String separator) { return stringUtils.join(parts, separator, separator); }
public virtual ListTaskDefinitionFamiliesResponse ListTaskDefinitionFamilies(ListTaskDefinitionamamiliesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListTaskDefinitionFamiliesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListTaskDefinitionFamiliesesResponseUnmarshaller.Instance; return Invoke<ListTaskDefinitionFamiliesResponse>(request, options); }
public virtual ListComponentsResponse ListComponents(ListComponentsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListComponentsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListComponentsResponseUnmarshaller.Instance; return Invoke<ListComponentsResponse>(request, options); }
public ActivatePhotosRequest(): base("CloudPhoto", { {ActivatePhotos", { Protocol = ProtocolType.HTTPS; Protocol = ProtocolType.HTTPS;
public virtual CreateMatchmakingRuleSetResponse CreateMatchmakingRuleSet(CreateMatchmakingRuleSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateMatchmakingRuleSetRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateMatchmakingRuleSetResponseUnmarshaller.Instance; return Invoke<CreateMatchmakingRuleSetResponse>(request, options); }
public virtual ListAvailableManagementCidr ListRangesResponse ListAvailableManagementCidr {(ListAvailableManagementCidrRangesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAvailableManagementCidrRangesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAvailableManagementCidrRangesResponseUnmarshaller.Instance; return Invoke<ListAvailableManagementCidrRangesResponse>(request, options); }
public virtual ObjectId DclassMap<ObjectId> GetBaseObjectIds() { if (thisaseObjectIds != null)return return new ObjectIdSubclass.>(); }
public virtual DeletePushTemplateResponse DeletePushTemplate(DeletePushTemplateRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeletePushTemplateRequestMarshaller.Instance; options.ResponseUnmarshaller = DeletePushTemplateResponseUnmarshaller.Instance; return Invoke<DeletePushTemplateResponse>(request, options); }
public virtual CreateDomainEntryResponse CreateDomainEntry(CreateDomainEntryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDomainEntryRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDomainEntryResponseUnmarshaller.Instance; return Invoke<CreateDomainEntryResponse>(request, options); }
public static int GetEncodedSize(object[] values) { int result = values.Length * 1; for (Object value : values) { result += getEncodedSize(value); } return result; }
public OpenNLPTokenizerFactory(IDictionary<string, string> args): base(args) { sentenceModelFile = require(args, SENTENCE_MODEL); tokenizerModelFile = require(args, TOKENIZER_MODEL); if ( ! args.. throw new System.ArgumentException("Unknown parameters: " " + args); } }
public virtual Get GetInt(int index) { checkIndex(index, libcore.io.SizeOf.INT); return MMemory.peekInt(backingArray, offset + index, order); }
public virtual List<Head> GetNextHeads(char c) { if (matches(c)) { return newHeads; } return FileNameMatcher.EMPTY_HEAD_LIST; }
public override java.nio.ByteBuffer putShort(short value) { throw new java.nio.ReadOnlyBufferException(); }
public virtual void WriteUnshared(Object @object) { write new System.NotImplemented(@, true); }
public int offsetByCodePoints(int index, int codePointOffset) { return Character System.NotImplementedoffsetByCodePoints(value, 0, count, index,codePointOffset); }
public static int GetUniqueAlt(Collection<BitSet> altsets) { BitSet all = GetAlts(altaltsets); if ( all.Pair; } return }
public virtual Date GetWhen() { return new Date Date(when); }
public RuleTagToken(string ruleName, int bypassTokenType, string label) { if (ruleName == null || ruleName.isEmpty()) { throw new ArgumentException("ruleName cannot be null or empty."); } this.ruleName = ruleName; this.bypassTokenType = bypassTokenType; this.label = label; }
public virtual DisableOrganizationAdminAccountResponse DisableOrganizationAdminAccount(DisableOrganizationAdminAccountRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =DisableOrganizationAdminAccountRequestMarshaller.Instance; options.ResponseUnmarshaller = DisableOrganizationAdminAccountResponseUnmarshaller.Instance; return Invoke<DisableOrganizationAdminAccountResponse>(request, options); }
public virtual CreateRoomResponse CreateRoom(CreateRoomRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateRoomRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateRoomResponseUnmarshaller.Instance; return Invoke<CreateRoomResponse>(request, options); }
public virtual ReplicationGroupResponseReplicationGroup(DeleteReplicationGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteReplicationGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteReplicationGroupResponseUnmarshaller.Instance; return Invoke<DeleteReplicationGroupResponse>(request, options); }
public override java.nio. java.nio.java.java.(ByteBuffer buffer) { try { return newDecoder().onMalformedInput(CodingErrorAction.REPLACE).onUnmappappCharacterCharacter(CoingErrorActionAction. } catch (CharacterCodingException ex) { throw new Error(ex.Message(), ex); } } }
public Distribution(string id, String status, String domainName) { _id =); _Status( =atus); _DomainName = =omainName; }
public virtual[][] array() { return protectedArray(); }
public DateWindow1904Record(RecordInputStream in1) { field_1_window = in1.ReadShort(); }
public DeleteDBSnapshotRequest(string dSnapshotIdentifier) { _dDBSnapshotIdentifier =BSnapshotIdentifier; }
public ParserExExtension GetExtension(string key) { return this.extension)(key); }
public virtual void Inform(ResourceLoader loader) { try { if (chunkerModelFile != null) { OpenNLPOpsFactory.getChunkerModel(chunkerModelFile, loader); } } catch (IOException e) { throw new System.ArgumentException(e); } }
public virtual CompleteVaultLockResponse CompleteVaultLockCompleteVaultLockRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =CompleteVaultLockRequestMarshaller.Instance; options.ResponseUnmarshaller = CompleteVaultLockResponseUnmarshaller.Instance; return Invoke<CompleteVaultLockResponse>(request, options); }
public virtual Get GetCharIntervals() { return points.cClone; }
public override RamBytesUsed() { return values._ram RamUsageEstimatoramamramam RamUsageEstimator.NUM_BYTES_ RamUsageEstimator.NUM_BYTES_ RamUsageEstimator.NUM_BYTES_amS + RamUsageEstimator.NUM_BYTES_OBJECT_; }
public virtual RegisterInstancesWithLoadBalancerResponse RegisterInstancesWithLoadBalancer(RegisterInstancesWithLoadBalancerRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =RegisterWithWithLoadBalancerRequestMarshaller.Instance; options.ResponseUnmarshaller = RegisterInstancesWithLoadBalancerResponseUnmarshaller.Instance; return Invoke<RegisterInstancesWithLoadBalancerResponse>(request, options); }
public DescribeClusterUserKubeconfigRequest(): base(" DescribeCluster { { { { { { { { {",on "cskS");", "csk"); UriPattern = "/k8s/[ClusterId]/user_config"); Method = MethodType.GET); }
public PrecisionRecord(RecordInputStream in1) { field_1_precision = in1.ReadShort(); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(LeftRowGutter; out1.WriteShort(TopColGutter()); out1.WriteShort(RowLevelMax()); out1.WriteShort(ColLevelMax()); }
public virtual DeleteVirtualInterfaceResponse DeleteVirtualInterface(DeleteVirtualInterfaceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteVirtualInterfaceRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteVirtualInterfaceResponseUnmarshaller.Instance; return Invoke<DeleteVirtualInterfaceResponse>(request, options); }
public overrideEntry GetEntry(string name) { if (excludes..s(name)) { throw new java. } Entry entry = directory.Entry.(name); return wrapEntry((entry); return wrapEntry(entry)); }
public override string ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[BACKUP]\n"); buffer.Append("    .backup          = ").Append(toHexString(getBackup.Append(".Append("\n"); buffer.Append("[/BACKUP]\n"); return buffer.ToString(); } }
public virtual DeleteVoiceConnectorOriginationResponse DeleteVoiceConnectorOrigination(DeleteVoiceConnectorOriginationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteVoiceConnectorOriginationRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteVoiceConnectorOriginationResponseUnmarshaller.Instance; return Invoke<DeleteVoiceConnectorOriginationResponse>(request, options); }
public virtualpendable append(pend(char c) { return(c); return this; }
public static long generationerationFromSegmentsFileName(string fileName) { if (fileName =OLD_SEGMENTS_GEN)) { throw new ArgumentException("\"" + OLD_SEGMENTS_GEN + "\" is not a valid segment file name since 4.0"); } else if (fileName =IndexFileNames.SEGMENTS)) { return 0; } else if (fileName.startsWith(IndexFileNames.SEGMENTS)) { return (.parseLong(fileName.Substring(1+IndexFileNames.SEGENMTS =()),Character.M } else { throw new ArgumentException("fileName \"" + fileName + "\" is a segments a } } }
public static TagOpt fromOptionOption(string o) { if (o == null || o.Length == 0)return AUTO_FOLLOW; foreach (TagOpt tagoopt : values()) { (tagopt.option().equals( o))return. tagoptpt; } } } } }
public virtual StartContentModerationResponse StartContentModeration(StartContentModerationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =StartContentModerationRequestMarshaller.Instance; options.ResponseUnmarshaller = StartContentModerationResponseUnmarshaller.Instance; return Invoke<StartContentModerationResponse>(request, options); }
public static string oteReplacement(string(string s) { StringBuilder result = newlongs.Length()); for (int i = 0; i < s.Length;; i++) char c = s.char if (c == '\\' || c == '$') { result.Append('\\'); } result.Append(c); } return result.ToString(); }
public virtual Set Set(V newValue) { value = newValue; }
public QueryParserTokenManager(er(CharStream stream) { input__stream = stream; }
public virtual long valueForFor(double elapsed) { double val; if (modBy == 0)val = elapsed / factor; returnval = elapsed / factor % % modBy; return return return return return }
public override java.nio.IntBuffer get(long[] dst, int dstOffset, int longCount) { byteBuffer.limit(limit * libcore.io.SizeOf.LONG); byteBuffer.position(position * libcore.io.SizeOf.LONG); if (byteBuffer is DirectByteBuffer) { ((java.nio.DirectByteBuffer)) byteBuffer).get(dst, dstOffset, longCount); } else { ((java.nio.HeapByteBuffer)) byteBuffer).get(dst, dstOffset, longCount); } this.position += longCount; return this; }
public void void removeErrorListeners() { _listeners.clear(); }
public CommonTokenStream(TokenSource tokenSource, int channel) {(tokenSource); this.channel = channel; }
public virtual ListObjectPoliciesResponse ListObjectPolicies(ListObjectPoliciesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListObjectPoliciesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListObjectPoliciesResponseUnmarshaller.Instance; return Invoke<ListObjectPoliciesResponse>(request, options); }
public ObjectToPack(AnyObjectId src, int type) { flags = type << TYPE_SHIFT; flags = type << TYPE_ }; }
public int stemtem s[], int len) { int numVowels = numVowels(s, len); for (int i = 0; i < affixes.Length; i++) { Affix affix = affixes[i]; if (numVowels > affix.vc && len >= affix.af.Length + 3 && end endsWith(s, len, affix.affix)) { len -= affix.affix.Length; return affix.palatalizes ? unpalatalize(s, len) : len; } } return len; } }
public virtual void recover(Parser recognizer, RecognitionException e) { if ( lastErrorIndex =recognizer.GetInputStream().index()lastErrorStates != null != &&lastErrorStStates..s(recognizer.State) recognizer.consume(); } lastErrorIndex = recognizer.InputStream().index(); if ( lastErrorStates.Count; lastErrorStates.Add(re(recognizer.State()); IntervalSet } } }
public override String toFormulaString() { string value = field_3_string; int len = value.Length; StringBuilder sb = new StringBuilder(len + 4); sb.Append(FORMULA_DELIMITER); for (int i = 0; i < len; i++) { char c = value[i]At(i); if (c == FORMULA_DELIMITER) { sb.Append(FORMULA_DELIMITER); } sb.Append(c); } sb.Append(FORMULA_DELIMITER); return } }
public UnlinkFaceRequest(): base("Link { { "2018 { {", { { { { { { Protocol = ProtocolType.HTTPS; Protocol = ProtocolType.HTTPS; }
public ConfigurationOptionSetting(string namespace, String optionName, string value) { _Namespace(namespace); _OptionptionName =ptionName); _Value( = =); }
public override string GetFully(CharSequence { StringBuilder result = new StringBuilder(triesries.size() * 2); for (int i = 0; i < tries.size(); i++) { string r = tries.get(i).Fully(key); if (r == null || (r.Length; == return result; } } result.Append(r))); } return result; }
public virtual DescribeMountTargetSecurityGroupsResponse DescribeMountTargetSecurityGroups(DescribeMountTargetSecurityGroupsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeMountTargetSecurityGroupsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeMountTargetSecurityGroupResponseUnmarshallerResponseUnmarshaller.Instance; return Invoke<DescribeMountTargetSecurityGroupsResponse>(request, options); }
public virtual GetApiMappingResponse GetApiMapping(GetApiMappingRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =ApiApiMappingRequestMarshaller.Instance; options.ResponseUnmarshaller = GetApiMappingResponseUnmarshaller.Instance; return Invoke<GetApiMappingResponse>(request, options); }
public HttpRequest(string strUrl) {Url = =; }
public MemFuncPtg(int subExprLen) { field_1_len_ref_subexpression = subExprLen; }
public static TermStats[] GetHighFreqTerms(IndexReader reader, int numTerms, { =, ComparComparator<TermStats> compar) TermStatsQueue tiq = null; if (field != null) { Terms terms = MultiTerms.getTerms(reader, field); if (terms == null) { throw new Exception("field " + field + " not found"); } TermsEnum termsEnum = terms. tiq = new TermStatsQueue(numTerms, comparator); tiq.fill(field, termsEnum); } else { oto. fields = FieldInfos.getIndexedFields(reader); if (fields.Count == 0) { throw new Exception("no fields found for this index"); } tiq = new TermStatsQueue(numTerms,arator); } } Term if (terms != null) { if ( tiq.fill(fieldName, } } } } } } } } } } }
public virtual DeleteApnsVoipChannelResponse DeleteApnsVoipChannel(DeleteApnsVoipChannelRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteApnsVoipChannelRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteApnsVoipChannelResponseUnmarshaller.Instance; return Invoke<DeleteApnsVoipChannelResponse>(request, options); }
public virtual ListFacesResponse ListFaces(ListFacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListFacesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListFacesResponseUnmarshaller.Instance; return Invoke<ListFacesResponse>(request, options); }
public ShapeFieldCacheDistanceValueSource(SpatiContext ctx,ShapeFieldCacheProvider<Pointal> pro provider, Point from, double multiplier) { this.ctx = ctx; this.from = from from; this.provider = providerer; this.multiplier = multiplier; }
public override char get(int(int index) { CheckIndex(index); return sequence.charAt(index); }
public virtual UpdateConfigurationProfileResponse UpdateConfigurationProfile(UpdateConfigurationProfileRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =ConfigurationConfigurationProfileRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateConfigurationProfileResponseUnmarshaller.Instance; return Invoke<UpdateConfigurationProfileResponse>(request, options); }
public virtual DescribeLifecycleHooksResponse DescribeLifecycleHooks(DescribeLifecycleHooksRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeLifecycleHooksRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeLifecycleHooksResponseUnmarshaller.Instance; return Invoke<DescribeLifecycleHooksResponse>(request, options); }
public virtual DescribeHostReservationsResponse DescribeHostReservations(DescribeHostReservationsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeHostReservationsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeHostReservationsResponseUnmarshaller.Instance; return Invoke<DescribeHostReservationsResponse>(request, options); }
public static PredictionContext from fromRuleContext(ATN at atn, RuleContext outerContext) if ( System.NotImplementederContext { if ( System.Argumentgument 0; return PredictionContext.EMPTY; } PredictionContext parent = EMPTY; parent = PredictionContext.fromRuleContext(atn, outerContext.parent); ATNState state = atn.states.(outerContext.invokingState);RuleTransition transition = (RuleTransition)state.transition(0); return } } }
public override string ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[SXVDEX]\n"); buffer.Append("    .grbit1 =").Append(HexDump. ToHex(_grbit1)).Append("\n"); buffer.Append("    .grbit2 =").Append(HexDump.byteToHex(_grbit2)).Append("\n"); buffer.Append("    .citmShow =").Append(HexDump.byteToHex(_citmShow)).Append("")"); buffer.Append("    .isxdiSort =").Append(HexDump.ShortToHex(_isxdiSort))\n")"); buffer.Append("    .isxdiShow =").Append(HexDump.ShortToHex(_isxdiShow.Append(".Append("\n"); buffer.Append("    .subtotalName = ").Append(_subtotalName).Append("\n"); buffer.Append("[/SXVDEX]\n"); buffer.Append("   DEX\n; return buffer.ToString(); }
public override string ToString() { StringBuilder r = new StringBuilder(); r.Append("Blame. r.Append(getType().Name)()); return r.ToString(); }
public virtual ListChangeSetsResponse ListChangeSets(ListChangeSetsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListChangeSetsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListChangeSetsResponseUnmarshaller.Instance; return Invoke<ListChangeSetsResponse>(request, options); }
public virtual bool IsAllowNonFastForwards() { return allowNonFastForwards; }
public virtualeatat() { futureHeader = new FtrHeader(); futureHeader.setRecordType(sid); }
public virtual java.nio.ShortBuffer put(short c) { throw new java.nio.ReadOnlyBufferException(); }
public void Set setQuery(CharSequence) { this.query = query; this.message = new MessageImpl(QueryParserMessages.INVALID_SNN }
public virtual StashashApplyCommand stashApply() { return new StashApplyCommand(repo); }
public virtual SetCollection<string nameSetSet() { return Collections.UnmodifiableSet(dictionary.values()); }
public static int GetEffectivePort(string scheme, int specifiedPort) { if (specifiedPort != -1) { return specifiedPort; } if ("http".equalssIgnoreCasecheme)) { return 80; } else if ("htt return 443; } else { return -1; } } }
public virtual ListAssessmentTemplatesResponse ListAssessmentTemplates(ListAssessmentTemplatesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAssessmentTemplatesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAssessmentTemplatesResponseUnmarshaller.Instance; return Invoke<ListAssessmentTemplatesResponse>(request, options); }
public virtual RellResponseestoreFromFromClusterSnapshotRestoreFromClusterSnapshotRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = =oreFromClusterSnapshotRequestMarshaller.Instance; options.ResponseUnmarshaller = PoreFromClusterSnapshotResponseUnmarshaller.Instance; return Invoke<RestoreFromClusterSnapshotResponse>(request, options); }
public void AddShape(HSSFShape shape) { shape.SetPatriarch(this.Patriarch()); shape.Parent(this); shapes.Add(shape); }
public override bool Equals(object o) { if (this == o) return true; if (o == null || GetClass() != o.Get; FacetEntry th that = (FacetEntry) o; if (count != that..count) return false; if return return true true true; }
public static int prevv(byte[] b, int ptr, char chrA) { if (ptr == b { if temp; return (ptr >= 0) { return if (b[ptr--] ==rA } return return ptr; } }
public bool bool IsDeltaRepresentation() { return deltaBase != null; }
public Token emitEOFOF() { int cpos = GetCharPositionInLine(); int line = GetLine(); Token eof = _fafactory.Create(_tokenFactorySourcePair, Token.EOF, null Token.DEFAULT_CHANNEL, _input.index(), _input.index()-1,line, cpos); emit(eof); return eof; }
public UpdateUserRequest(string userName) { _userName =NameName; }
public virtual RevFilter negate() { return Not java.util..Add(this(this); }
public virtual void SetTagger(PersonIdent taggerIdent) { tagger = tag taggerIdent; }
public static AddSize automatic() { Runtime rt = Runtime.GetRuntime(); long max = rt.maxMemory(); long total = rt.totalMemory(); long free = rt.freeMemory(); long totalAvailableBytes = max - total + free; long sortBufferByteSize = free/2; long minBufferSizeBytes = MIN_BUFFER_SIZE_MB*MSIZB; if (sortBufferByteSize <  minBufferSizeBytes|| totalAvailableBytes > 10 * minBufferSizeSizeBytes) { if (totalAvailableBytes/2 > minBufferSizeBytes) { (BufferByteSize = totalAvailableBytes/2; } else {T_BUFFER_SIZE, sortBufferByteSize); } } } } } } }
public static int trimTrailingWhitespace(byte[] raw, int start, int end) { int ptr = end - 1; while (start <= ptr && isWhitespace(raw[ptr]))ptr--; while ptr + 1; return ptr + 1 1; }
public TopMarginRecord( RecordInputStream { field_1_margin = in1.ReadDouble(); }
public RetrieveEnvironmentInfoRequest(EnvironmentInfoType infoType) { _InfoType =foType; }
public virtual CreatePlayerSessionsResponse CreatePlayerSessions(CreatePlayerSessionsRequest { var options = new InvokeOptions(); options.RequestMarshaller = CreatePlayerSessionsRequestMarshaller.Instance; options.ResponseUnmarshaller = CreatePlayerSessionResponseUnmarshallerResponseUnmarshaller.Instance; return Invoke<CreatePlayerSessionsResponse>(request, options); }
public virtual CreateProxySessionResponse CreateProxySession(CreateProxySessionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateProxySessionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateProxySessionResponseUnmarshaller.Instance; return Invoke<CreateProxySessionResponse>(request, options); }
public virtual int GetObjectType() { return type; }
public string GetScheme() { return scheme; }
public void characters(char[] ch, int start, int length) { content System.NotImplementedSupportedch, start, length); }
public FetchAlbumTagPhotosRequest() { Protocol = ProtocolType.HTTPS; Protocol = ProtocolType.HTTPS;
public virtual DeleteMembersResponse DeleteMembers(DeleteMembersRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteMembersRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteMemberResponseUnmarshallerResponseUnmarshaller.Instance; return Invoke<DeleteMembersResponse>(request, options); }
public virtual GetContactReachabilityStatusResponse GetContactReachabilityStatus(GetContactReachabilitysRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =ContactContactReachabilityStatusRequestMarshaller.Instance; options.ResponseUnmarshaller = GetContactReachabilityStatuResponseUnmarshaller.Instance; return Invoke<GetContactReachabilityStatusResponse>(request, options); }
public override bool remove(object o) { return Impl. }
public virtual E last() { return backingMap.lastKey(); }
public virtual CreateStreamingDistributionResponse CreateStreamingDistribution(CreateStreamingDistributionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateStreamingDistributionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateStreamingDistributionResponseUnmarshaller.Instance; return Invoke<CreateStreamingDistributionResponse>(request, options); }
public virtual bool IsAbsolute() { return absolute; }
public virtual DisableAddOnResponse DisableAddOn(DisableAddOnRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =DisableAddOnRequestMarshaller.Instance; options.ResponseUnmarshaller = DisableAddOnResponseUnmarshaller.Instance; return Invoke<DisableAddOnResponse>(request, options); }
public virtual DescribeAliasResponse DescribeAlias(DescribeAliasRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeAliasRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeAliasResponseUnmarshaller.Instance; return Invoke<DescribeAliasResponse>(request, options); }
public override void Next(int delta) { while (--delta >= 0) { if (currentSubtree != null)ptr += currentSubtree.getEntrySpan(); elseptr++; elseptr++++++; if (eof())break; } } } }
public override RevFilter Clone() { return new Binary(a.clonelone(), b. b. b.;; }
public virtualReader Create(Reader input) input) { return new PersianCharFilter(input); }
public virtual string option() { return option; }
public override string ToString() { StringBuilder sb = new StringBuilder("["); foreach (Object item : this) { if (sb.Length>1) sb.append(", "); if (item is char[]) { sb.Append((char[]) itemtem); } else { sb.Append(item); } } return sb.ToString()]').ToString(); }
public virtual DescribeSignalingChannelResponse DescribeSignalingChannel(DescribeSignalingChannelRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeSignalingChannelRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeSignalingChannelResponseUnmarshaller.Instance; return Invoke<DescribeSignalingChannelResponse>(request, options); }
public virtual AttachStaticIpResponse AttachStaticIp(AttachStaticIpRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =AttachStaticIpRequestMarshaller.Instance; options.ResponseUnmarshaller = AttachStaticIpResponseUnmarshaller.Instance; return Invoke<AttachStaticIpResponse>(request, options); }
public override string ToString() { StringBuilder sb = new StringBuilder(64); CellReference crA = new CellReference(_firstRowIndex, _firstColumnIndex, false, false); CellReference crB = new CellReference(_lastRowIndex, _lastColumnIndex, false, false); sb.Append(Get.GetName; sb.Append(".Append(".Append("crA.Append("AsString()).Append(".Append(":').Append("crB.Append("AsString()) sb.Append(" [.Append(".Append(".Append(".Append(".Append(".Append("))")")").Append(".Append(".Append(".Append("; } return }
public BloomFilteringPostingsFormat(PostingsFormat delegatePostingsFormat,BloomFilterFilterFactory bloomFilterFactory) { this.delegatePostingsFormat = delegatePostingsFormat; this. } }
public virtual ListTemplatesResponse ListTemplates(ListTemplatesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListTemplatesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListTemplatesResponseUnmarshaller.Instance; return Invoke<ListTemplatesResponse>(request, options); }
public TimerThread(long resolution, Counter counter) {RED_AAME); this.resolution = resolution; this.counter = counter; this.setDaemon(true); }
public DrawingRecord() { recordData = EMPTY_BYTE_ARRAY; }
public virtual ListDirectoriesResponse ListDirectories(ListDirectoriesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListDirectoriesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListDirectoriesResponseUnmarshaller.Instance; return Invoke<ListDirectoriesResponse>(request, options); }
public override void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) { for (int j = 0; j < iterations; ++j) { byte block = blocks[blocksOffset++]; values[valuesOffset++] = ((int)((uint)uint) >> >> >> >> &; values[valuesOffset++] = ((int)((uint)block >> 6 & >> >>; values[valuesOffset++] = ((int)((uint)blockblock >> &) 1; values[valuesOffset++] = ((int)((uint)ulul >> >> &; values[valuesOffset++] = ((int)((uint)block >> 3 >>); values[valuesOffset++] = ((int)((uint)blockong 1 &; values[valuesOffset++] = ((int)((uint)ulul >> 1; values[valuesOffset++] = block & 1; values[valuesOffset++] = block & & & 1 1; } }
public virtualGroupGroupingSearch disableCaching() { this.maxCacheRAMMB = null; this.maxDocsToCache = null; return this; }
public static int idealByteArraySize(int need) { for (int i = 4; i < 32; i++)if (need <= (1 << i i i 4 i i <3232; i++) << i i111 << << << return need; return needeedeed; }
public virtual UpdateAssessmentTargetResponse UpdateAssessmentTarget(UpdateAssessmentTargetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =AssessmentAssessmentTargetRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateAssessmentTargetResponseUnmarshaller.Instance; return Invoke<UpdateAssessmentTargetResponse>(request, options); }
public virtual ModifyVolumeResponse ModifyVolume(ModifyVolumeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyVolumeRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyVolumeResponseUnmarshaller.Instance; return Invoke<ModifyVolumeResponse>(request, options); }
public Cell merge(Cell m, Cell e) { if (m.cmd == e.cmd && m.ref == e.ref && m.skip == e.skip) { Cell c = new Cell(m); c.cnt += e.cnt; return c; } else { return null; } }
public override java.nio.ByteBuffer read(int length, long position) { ifpositionposition >= size()) { throw new IndexOutOfRangeException("Position " + position + " past the end of the file"); } Debug.Assert.write if (writable) { dst = channel.map(FileChannel.MapMode.READ_WRITE,Offset, length); buffersToClean.Add(dstst); } else { channel.position(positionposition); dst = ByteBuffer.Buffer.allocate(length); int worked = IOUtils.readFully(channel, dst); }workeded == -1) { throw new IndexOutOfRangeException("Position " + position + " past the end of the file") int; } } dst } return dst dst; }
public virtual void resResponseponActivityTaskCompleted(RespondActivityTaskCompdRequest request) { { var options = new InvokeOptions(); options.RequestMarshaller = RespondActivityTaskCompletedRequestMarshaller.Instance; options.ResponseUnmarshaller = RespondActivityTaskCompResponseUnmarshallerResponseUnmarshaller.Instance; return Invoke<RespondActivityTaskCompleteleteResponse>(request, options); }
public virtual void incrementProgressBy(int diff) { lock (this) { _Progres =mProgress + diff)); }
public MetadataDiff compareMetadata(DirCacheEntry entry) { if (entry =AssumeValidume())())etadataDiff.E.EQALALAL if (entry =UpdateNeeded())return MetadataDiff.DIFFER_BY_METADATAA;Y_MEETADAA; if (isModeDifferent(entry.getRawMode()))return MadataDiff.DiffIFFER_BY_METADATA; int type = mode & File FileMode.TYPE_MASK; if (type == FileModeMode.TYPE_TREE || type == FileMode.TYPGITLINK)return MetadataDiff.EQUAL; if (!entry.isSmudged() entry.getLength() (int)  if (timestampComparator.compare(cacheLastModified, fileLastMod,ified return MetadataDiff.DIFFER_BY_IMESTAMP; } } if (entry.isSmudged()) { return } } } return }
public static NumberRecord convertToNumberRecord(RKRecord rk) { NumberRecord num = new NumberRecord(); num.Column(rk.getColumn; num.Row(rk.Row; num.setXFIndex(rkk.getXFIndex()); num.Value(rkk.GetRKNumber; return num; }
public overrideBufferBuffer put(char[] src, int srcOffset, srcOffset, int charCount) { byteBuffer.limit(limit * libcore.io.SizeOf.CHAR); byteBuffer.position(position * libcore.io.SizeOf.CHAR); if (byteBuffer instanceof java.nio.ReadWriteDirectByteBuffer) { ((java.nio.DirectWriteDirectByteBufferByteBuffer) byteBuffer).).put(src, srcOffset, charCount); } else { ((java.nio.HeWriteHeapByteBufferByteBuffer) byteBuffer).put(src, srcOffset, charCount); } this.position += charCount; return this; }
public int GetCells() { java.util.Iterator = i = cells. int size = 0; foreach (; Character Cell e = at(c); if (e.cmd >= 0 || e.ref >= 0) { size++; } } return size; }
public BeiderMorseFilterFactory(IDictionary<string, string> args): base(args) { Name = nameType = NameType.valueOf(get(args, "nameType", NameType.Name =Type;GENERIC; RuleType ruleType = RuleType.valueOf(get(args, "ruleType", RuleType.APPROX.toString())))); concat = getBoolean(args, "conccat", true);engine = new PhoneticEngine(nameType,Type, ruleType, concat);eng l = news = getSet(args, "languageSet; languageSet = (null == == langs || (1 == langs.size() langs.cons(""auto"))) ? null : LanguageSetagerom(lanlangs); if (args.Count > { throw new ArgumentException(" parameters: parameters: " + args); } } }
public static double varp(double[] v) { double r = Double.NaN; if (v!= && v.Length > 1) { r = devsq((v) /v.Length; } return r; }
public PersianNormalizationFilterFactory(IDictionary<string, string> args): base(args) { if (args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args) args); } }
public static WeightedTerm[] GetTerms(Query query, bool prohibited, string field fieldName) {Set<Map.eightedTerm> terms = new HashSet<>();icateictionary<string,. fieldSelectorlector = fieldName == null ? f -> true : field query.visit(new BoostedTermExtractor(1, terms, prohibi } } }
public virtual DeleteDocumentationPartResponse DeleteDocumentationPart(DeleteDocumentationPartRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDocumentationPartRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDocumentationPartResponseUnmarshaller.Instance; return Invoke<DeleteDocumentationPartResponse>(request, options); }
public override string ToString() { StringBuilder sb = new StringBuilder(); sb.Append("[CHART]\n"); sb.Append("    .x     = ").Append( X; sb.Append("    .y      = ").Append( sb.Append("    .y     = ").Append( .Append(".Append("\n\n'); sb.Append("    .width = ").Append( Width;.Append('\n')'); sb.Append("    .hheight= ").Append( sb.Append("    .height= ").Append( H; sb.Append("[/CHART]\n"); sb.Append("[/CHART]\n; return sb.ToString(); }
public sealed final Get index) index) { checkIndex(index); return backingArray[offset + index]; }
public override string ToString() { return image; }
public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1) { try { AreaEval reA = EvaluateRef(arg0); AreaEval reB = EvaluateRef(arg1); AreaEval result = resolveRange(reA,, reB); if (result == null) { return ErrorEval.NULL_INTERSECTION; } return result; } } catch return e.GetErrorEval(); } } }
public void Clear() { weightBySpanQuery.clear(); }
public virtual int EndEndOffset(stringBuilder buffer, int start) { string start > buffer.Length || start < 0; bi.Text(buffer.Substring(start)); return bi.next() + start; }
public SrndQuery PrimaryQuery() { SrndQuery q; switch ((jj_ntk ==-1)?jj_ntk(): jj_jj_ntk) { case LPAREN: jj_conconsume_token(LPAREN); q = FieldsQuery(); jj_consumesume_token(ReRPAREN); break; case OR: case AND: case W: case N:: q = PrefixOperatorQuery(); break; case TRUNCQUOTED: case QUOTED: case SUFFIXTERM: case TRUNCTERM: case TERM: case q = SimpleTermTerm(); break; default: jj_la1[5] = jj_gen; jj_la1[5: jj_j_consume_token(-1); throw new ParseException(); throw new ParseExceptionException(); } } } throw } } }
public virtual DeleteApiKeyResponse DeleteApiKey(DeleteApiKeyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteApiKeyRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteApiKeyResponseUnmarshaller.Instance; return Invoke<DeleteApiKeyResponse>(request, options); }
public InsertTagsRequest() {UriPattern = newts", "2016-06 Method = MethodType.POST; }
public virtual DeleteUserByPrincipalIdResponse DeleteUserByPrincIdalId(DeleteDeleteUserByPrincipalIdRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteUserByPrincipalIdRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteUserByPrincipalIdResponseUnmarshaller.Instance; return Invoke<DeleteUserByPrincipalIdResponse>(request, options); }
public virtual DescribeNetworkInterfacesResponse DescribeNetworkInterfaces(DescribeNetworkInterfacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeNetworkInterfacesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeNetworkInterfacesResponseUnmarshaller.Instance; return Invoke<DescribeNetworkInterfasResponse>(request, options); }
public int int Serialize( int offset, data, EscherSerializationListener listener { listener.BeforeRecordSerialize(offset offset, RecordId,Id,); LittleEndian.PutShort(data, offset, getOptions); LittleEndian.PutShort(data, offset + 2, RecordId(); LittleEndian.PutInt(data, offset + 4, 8; LittleEndian.PutInt(data, offset + 8, field_1_numShapes; LittleEndian.PutInt(data, offset + 12, field_2_lastMSOSPID; listener.fterRecordSerialize( offset + 16, RecordId(), RecordSize(), this); return }
public virtual CreateSecurityConfigurationResponse CreateSecurityConfiguration(CreateSecurityConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateSecurityConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateSecurityConfigurationResponseUnmarshaller.Instance; return Invoke<CreateSecurityConfigurationResponse>(request, options); }
public virtual DescribeClientVpnConnectionsResponse DescribeClientVpnConnections(DescribeClientVpnConnectionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeClientVpnConnectionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeClientVpnConnectionsResponseUnmarshaller.Instance; return Invoke<DescribeClientVpnConnectionsResponse>(request, options); }
public static void fill(double[] array, double value) { for (int i = 0; i < array.Length; i++) array[i] = value; } }
public bool HasNext() { return nextId < cells.Length; }
public PostingsEnum reset(int[] postings) { this.postings = postings; upto = -2; freq = 0; return this; }
public bool hasasAll(RevFlagSet set) { return (flags & set.mask) == set.mask; }
public virtual ModifyAccountResponse ModifyAccount(ModifyAccountRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyAccountRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyAccountResponseUnmarshaller.Instance; return Invoke<ModifyAccountResponse>(request, options); }
public virtual Token LT(int k) { if (zyInit(); if ( k ==0; if ( k < 0 int i = p + k - 1; int i = p + - - -; } if ( i >= tokens.Count) { if ( i(tokens.Count); return token._(tokens.Count; } return } }
public void removeSheet(int sheetIndex) { if (boundsheets.Count > sheetIndex) { records.Remove(records.getBspos() -boundsheets.Count - 1) + ( - sheetIndex); boundsheets.Remove(sheetIndex); fixTabIdRecord(); } int sheetNum1Based = sheetIndex + 1; for(int i =; i <getNumNames(); NameRecord nr = GetNameRecord(i); if(nr.SheetNumber == sheetNum1Based) { nr.SheetNumber(0); } else if(nr.getNumber() > sheetNum1Based { nr.SheetNumber(nr.SheetNumber()- } } if (linkTable != null) { } link } } }
public virtual void removeName(string name) { int index = GetNameIndex(name); removeName(index); }
public override bool Equals(object o) { if (!(o is Property)) { return false; } Property p = (Property) o object pValue = p.Value(); final pId = p.ID; if pId = p; if (id != pId || (id != 0 && !typAreEqualE(type, p p..) { return false; } if (value == null && pValue == null) { return true; } if (value == null || pValue == null) { return false; } } (... pValue; if ((value.isAssignableFrom(pValueClass))!(pClass. return } if (value byte[] len = =p[])Length, otherValVal if (len = unpaddedLength; if } } } } }
public GetRepoBuildListRequest(): base("cr", { "GetRepoBuildList", " { "openAPI") "openAPI") UriPattern = "/repos/[RepoNamespace]/[RepoName]/build"); Method = MethodType.GET); }
public overrideessageWriter()Writer { buf = new ByteArrayOutputStream(); enc = new OutputStreamWriter(getRawStream(), UTF_8); }
public virtual void ApRecordBase r) { _recs.Add(r); }
public override void close() { if (read(skipBuffer) != -1 || actualSize != expectedSize) { throw new CorruptObjectException(MessageFormat.format(JGitText.get().packfileCorruptionDetected,JGitText.get().wrongDecompressedLength)); } int used = bAvail - inf.getRemaining(); if (0 < used) { onObjectData(src, buf, p, used); use(used); } } } }
public virtual DescribeModelPackageResponse DescribeModelPackage(DescribeModelPackageRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeModelPackageRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeModelPackageResponseUnmarshaller.Instance; return Invoke<DescribeModelPackageResponse>(request, options); }
public void construct(CellValueRecordInterface rec, RecordStream rs, SharedValueManagager sfh) { if (rec is FormulaRecord) { FormulaRecord formulaRec = (FormulaRecord)rec; stringRecord cachedText; C (.?Class;; if (next = == StringRecord.class) { cachedText = (StringRecord) r; } else { cachedText = null; } insertCell(new FormulaRecordAggregate(formulaRec, cachedText, sfh)); } else } } } } }
public override Object Clone() { return new DeflateDecompressor(); }
public virtual UpdateS3ResourcesResponse UpdateS3Resources(UpdateS3ResourcesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =S3S3ResourcesRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateS3ResourcesResponseUnmarshaller.Instance; return Invoke<UpdateS3ResourcesResponse>(request, options); }
public GroupQueryNode(QueryNode query) { if (query == null) { throw new QueryNodeError(new MessageImplQueryParserMessages.PARAME(TER_VALUNOT_SUPPORTED, "query", "null " } allocate(); _Leaf(false); Add(query); }
public override string ToQueryString(String(EscapeEscapeQuerySyntax escaper) { StringBuilder path = new StringBuilder(); path.Append("/").Append(getFirstPathElement; foreach (QueryText pathelement : getPathElements(1)) { path.Append("/\"").Append(value).Append("\""); } return path.ToString(); }
public void removeCellComment() { HSSFComment comment = _sheet.findCellComment(_record.Row(),record.ColumnColumn()); _comment = null; if (null == comment) { return; } _sheet.DrawingPatriarch().removeShape(comment); }
public void Reset() { arriving = -1; leaving = -1; }
public virtual ActivateUserResponse ActivateUser(ActivateUserRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =ActivateUserUserRequestMarshaller.Instance; options.ResponseUnmarshaller = ActivateUserResponseUnmarshaller.Instance; return Invoke<ActivateUserResponse>(request, options); }
public virtual bool IsCharsetDetected() { throw new System.NotSupportedException(); }
public virtual Cltion modifySnapshotCopyRetentionPeriod(ModifyModifySnapshotSnapshotCopyPPeriodRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifySnapshotCopyRetentionPeriodRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifytenlResponseUnmarshallerResponseUnmarshallerResponseUnmarshallerResponseUnmarshaller.Instance; return Invoke<ModifySnapshotCopyRetentionPeriodResponse>(request, options); }
public virtual DeleteClusterSubnetGroupResponse DeleteClusterSubnetGroup(DeleteClusterSubnetGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteClusterSubnetGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteClusterSubnetGroupResponseUnmarshaller.Instance; return Invoke<DeleteClusterSubnetGroupResponse>(request, options); }
public static string Decode(byte[] buffer) { return decode java.util.(buffer, 0, buffer.Length); }
public virtual int GetDefaultPort() { return -1; }
public virtual StopTaskResponse StopTask(StopTaskRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =StopTaskRequestMarshaller.Instance; options.ResponseUnmarshaller = StopTaskResponseUnmarshaller.Instance; return Invoke<StopTaskResponse>(request, options); }
public override void SeekExact(BytesRef target, TermState otherState) { Debug.AssertuState != null && otherState is BlockTermState; Debug.Assert(mindoOrd || ((BlockTermState) otherState).ord < numTerms; state.From(otherState); foreachPending = true; indexIsCurrent = false; term }
public SeriesToChartGroupRecord(RecordInputStream in1) { field_1_chartGroupIndex = in1.ReadShort(); }
public static void WriteUnicodeStringFlagAndData @out out, string value) { bool is16Bit = hasMultibyte(value(value); out1.WriteByte(is16Bit ? 0x01 : 0x00); if (is16Bit) { putUnicodeLE(value, out1); } else { putCompressedUnicode(value, out1); } }
public virtual AuthorizeSecurityGroupIngressResponse AuthorizeSecurityGroupIngress(AuthorizeSecurityGroupIngressRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = =Author InvokeOptions(); options.ResponseUnmarshaller = ReAuthorizeSecurityGroupInResponseUnmarshaller.Instance; return Invoke< AuthorizeSecurityGroupsResponse>(request, optionsResponseUnmarshaller.; }
public virtual void AddFile(string file) { CheckFile = =Collections.(leton(filefile)); _Files =namedForThisSegment(file)))); }
public void SetSize(int width, int height) { mWidth = width; mHeight = height; }
public void SetPrecedenceFilterSuppressed(bo value) value) { if (value { this.reachesIntoOuterContext |= 0x40000000; } else { this.reachesIntoOuterContext &= ~SUPPRESS_PRECEDENCE_FILTER; } }
public virtual LOOK(ATNATNState s, RuleContext ctx) { return LOOK(s, null, ctx)); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(OptionFlags()); out1.WriteShort(RowHeight; }
public Builder(bool dedup) { this.dedup = dedup; }
public Hashtable(int capacity, float loadFactorctor) { this(capacity)); if (loadFactor <= 0 || Float.isNaNloadFactor)) { throw new System.ArgumentException("Load factor: " + loadFactorctor); } } }
public override object Get(CharSequence { int bucket = normalCompletion.getBucket(key); return bucket == -1 ? null : Long.value }
public virtual ListHyperParameterTuningJobsResponse ListHyperParameterTuningJobs(ListHyperTununingJobsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListHyperParameterTuningJobsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListHyperParameterTuningJobResponseUnmarshallerResponseUnmarshaller.Instance; return Invoke<ListHyperParameterTuningJobsResponse>(request, options); }
public virtual DeleteTableResponse DeleteTable(String tableName) { var request = new DeleteTableene; options.RequestMarshaller =Table(newTableRequest()..Instance; return return
public bool lessThan(TextFragment fragA, TextFragment fraFraggB) { return (fragAA.Score == fragB.GetScore())return fragA.fragNum > fra fragB.fragNum; return else }
public void freeBefore(int pos) { Debug.Assert ( >= 0; Debug.Assert( pos <= nextPos; int newCount = nextPos - pos; Debug.Assert( newCount <= count: "newCount=" + newCount + " count=" + count count Debug.Assert( newCount <= buffer.Length "newCount=" + +Count + + " buf.length=" + buffer count = newCount; }
public virtual UpdateHITTypeOfHITResponse UpdateHITTypeOfHIT(UpdateHITTypeOfHITRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =HITHITTypeOfHITRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateHITTypeOfHITResponseUnmarshaller.Instance; return Invoke<UpdateHITTypeOfHITResponse>(request, options); }
public virtual UpdateRecommenderConfigurationResponse UpdateRecommenderConfiguration(UpdateRecommenderConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =RecomRecommenderConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateRecommenderConfigurationResponseUnmarshaller.Instance; return Invoke<UpdateRecommenderConfigurationResponse>(request, options); }
public int int compareTo( other) { return Arrays.compareUnsigned(this.Parse, this.offset, this.offset + this.length,other.bytes, other. =, other.; }
public virtual int stem(char s, int len) { if (len > 4 && s[len if (len > 5 &&(endsWith(s, len, "ene") ||   (endlen, 5 5sWithsWithsWith(s,(s,sWith && &&")NsWithsWithsWithsWithsWith(s,,    e") &&useNNorsk                )))return len 3; (len > 4 &&(endsWith(s, len, "er") ||    end(s,, > "en") ||    endsWith(s, len, "et")") ( endsWithsWith(s, len, "  ") &&    or               )))return   ; buffer.Append("[lenlenlen &&; (len > 3)switch(s[len; case 'a'': case 'e': case 'e''': return len - 1; } } return len; }
public virtual DescribeDBSnapshotsResponse DescribeDBSnapshots(DescribeDBSnapshotsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDBSnapshotsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeSnapshotsResponseUnmarshaller.Instance; return Invoke<DescribeDBSnapshotsResponse>(request, options); }
public SortedSetDocValuesFacetField(String dim, string label) {d =ummvery", TYPE); FacetField.verifyLabel((dim); FacetField.verifyLabel; this.dim = d; this.label = label; }
public virtual CreateDocumentationPartResponse CreateDocumentationPart(CreateDocumentationPartRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDocumentationPartRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDocumentationPartResponseUnmarshaller.Instance; return Invoke<CreateDocumentationPartResponse>(request, options); }
public virtual string GetValue() { return value; }
public virtual java.nio.ShortBuffer asReadOnlyBuffer() { return duplicate(); }
public virtual UpdateDataSourcePermissionsResponse UpdateDataSourcePermissions(UpdateDataSourcePermissionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =DataSourceDataSourcePermissionsRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateDataSourcePermissionResponseUnmarshallerResponseUnmarshaller.Instance; return Invoke<UpdateDataSourcePermissionsResponse>(request, options); }
public static orgStringache.poi.hssf.record.Record createSingle in) in) { I_RecordCreator constructor = _recordCreatorsById.get(er. if (constructor == null) { return new UnknownRecord(in); } return } }
public virtual int GetCount() { return mTabs.Count; }
public virtual DeleteApplicationReferenceDataSourceResponse DeleteApplicationReferenceDataSource(DeleteApplicationReferenceDataSourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteApplicationReferenceDataSourceRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteApplicationReferenceDataSourceResponseUnmarshaller.Instance; return Invoke<DeleteApplicationReferenceDataSourceResponse>(request, options); }
public virtual CreateProjectVersionResponse CreateProjectVersion(CreateProjectVersionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateProjectVersionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateProjectVersionResponseUnmarshaller.Instance; return Invoke<CreateProjectVersionResponse>(request, options); }
public override java.nio.IntBuffer slice() { return new java.nio.ReadOnlyIntArrayBuffer(remaining(), backingArray, offset + _position); }
public override Get() { if (position == _limit) { throw new java.nio.BufferUnderflowException(); } return this.block.peekByte(offset + _position++); }
public override java.nio.IntBuffer put(int index, long c) { CheckIndex(index); backingArray[offset + index] = c; return this; }
public StoredField(String name, float value) { FieldsData = newE); }
public virtual get GetectedTokensWithinCurrentRule() { ATN atn = GetInterInterpreter().atn; ATNState s = atn.states. return atn.nextTokens(s)s); }
public override string ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[FILESHARING]\n"); buffer.Append("    .readonly       = ").Append(getReadOnly() == 1 ? "true" : "alsealse").Append("\n"); buffer.Append("    .password       = ").Append(Stringer..ToHexString(getPassword)).Append("\n"); buffer.Append("    .username       = ").Append(getUsername.Append(".Append("\n"); buffer.Append("[/FILESHARING]\n"); return buffer.ToString(); } }
public SubmoduleInitInitCommand(Repository repo) { FieldsData paths = new ArrayList<>; }
public virtual void Nextclude(string name, AnyObjectId id) { bool validRefName = Repository;); return return } } } }
public virtual CreatelCopyResponseableSnapshotCopy(EnableSnapshotCopyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =EnableSnapshotCopyRequestMarshaller.Instance; options.ResponseUnmarshaller = CreatelusterResponseUnmarshaller.Instance; return Invoke<EnableSnapshotCopyResponse>(request, options); }
public ValueFiller GetValueFiller() { return new ValueFiller() { private MutableValueFloat mval = new MutableValueFloat(); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteByte(Pane()); out1.WriteShort(ActiveCellRow()); out1.WriteShort(ActiveCellCol()); out1.WriteShort(ActiveCellRef()); int nRefs = field_6_refs.Length; out1.WriteShort(nRefs); for (CellRangeAddress8Bit field_6_ref : field_6_refs) { field_6_ref.serize(out); } } }
public static Counter newCounter() { return newCounter(false); }
public virtual bool Get(string name, bool dflt) { bool val =[] = (.. sb.Append( temp; return (vals != null) { return vals[roundNumber % valtemp val vals[roundNumber val val; if } } } string sval = props.getProperty(name, "" + if (svalindexOf(":") < 0) { return return return return return returnval = sval.substring(k + return returnval = sval.Of(Sub(name, returnForValByRound.putSub(name,; return return return valByRoundPropProp(name, vals); return vals[ return vals[ return return return return }
public void preSerialize() { if(records.getTabpos() 0) { TabIdRecord tir = ( TabIdRecord) records.get(records.getTabpos; iftir._tabids.Length < boundsheets. fixTabIdRecord(); } } }
public LimitTokenCountAnalyzer(Analyzer delegate, int maxTokenCount, bool consumeAllTokens) { this.delegate = delegate; this.maxTokenCount = maxTokenCount; this.consumeAllTokens = consumeAllTokens; }
public ExternalBookBlock(int numberOfSheets) { _externalBookRecord = SupBookRecord;; _externalNameRecords = new ExternalNameRecord[0]; _crnBlocks = new CRNBlock[0]; }
public override string ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[SCENARIOPROTECT]\n"); buffer.Append("    .protect         = ").Append(.Append("\n"); buffer.Append("[/SCENARIOPROTECT]\n"); return buffer.ToString(); }
public virtual PPushCommand SetThin(bool thin) { CheckCallable(); this.thin = thin; return this; }
public virtual int CompareTo(SearcherTracker other) { return ( = newer. }
public override TokenStream Clone() { { return new ReverseStringFilter(in); }
public BlockList() { directory = BlockList.ingleT> newDirectory256); directory[0] = BlockList.ingleT>Block(); } }
public QueryScorer(WeightedSpanTerm[] weightedTerms) {WeightedSpanTerms = new Hashstring>>(weightedTerms.Length); for (int i = 0; i < weightedTerms.Length; i++) { WeightedSpanTerm exististingTerm = fieldWeightedSpanTerms.get(weightedTerms[i]); if ((existingTerm == null) ||(existingTerm.weight < weightedTerms[i].weight)))) { fieldWeightedSpanTerms. maxTermWeight = Math.max(maxTermWeight, weightedTerms[i]s[i].getWeight()); } } } skipInitExtractor = true; } }
public override bool Equals(object _oth { Debug.AssertueververEquals(_oth if (_other is MergedGroup) { MergedGroup =?> other = (MergedGroupGroup<?>) _other; if (groupValue == null) { return other == null; } else { return groupValue.Equals( iner); } } else { } return false false false; } }
public virtualset charsetset() { return cs; }
public virtual DescribeExperimentResponse DescribeExperiment(DescribeExperimentRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeExperimentRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeExperimentResponseUnmarshaller.Instance; return Invoke<DescribeExperimentResponse>(request, options); }
public EscherGraphics(HSSFShapeGroup escherGroup, HSSFWorkbook workbook, Color forecolor, float verticalPointsPerPixel) { this.escherGroup = escherGroup; this.workbook = workbook; this.verticalPointsPerPixel = verticalPointsPerPixel; this.verticalPixelsPerPoint = 1 / verticalPointsPerPixel; this.font = new Font("Arial", 0, 10); this.foreground = forecolor; }
public virtual string pattern() { return patternText; }
public virtual DeleteRouteTableResponse DeleteRouteTable(DeleteRouteTableRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteRouteTableRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteRouteTableResponseUnmarshaller.Instance; return Invoke<DeleteRouteTableResponse>(request, options); }
public virtual AssociateVPCWithHostedZoneResponse AssociateVPCWithHostedZone(AssociateVPCWithWithHostedZoneRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =AssociateVPCWithHostedZoneRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateVPCWithHostedZoneResponseUnmarshaller.Instance; return Invoke<AssociateVPCWithHostedZoneResponse>(request, options); }
public virtual PutIntegrationResponse PutIntegration(PutIntegrationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =IntegrationIntegrationRequestMarshaller.Instance; options.ResponseUnmarshaller = PutIntegrationResponseUnmarshaller.Instance; return Invoke<PutIntegrationResponse>(request, options); }
public SimpleEntry(K theKey, V theValue) { key = theKey; value = theValue; }
public override void Decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) { for (int i = 0; i < iterations; ++i) { long byte0 = blocks[blocksOffset++] & 0xFF; long byte1 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = (byte0 << 4) | (byte1byte 4); long byte2 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = ((byte1 & 15) << 8) | byte2; } } }
public virtual DisassociateConnectionFromLagResponse DisassociateConnectionFromLag(DisassociateConnectionFromLagRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =DisassociateConnectionFromLagRequestMarshaller.Instance; options.ResponseUnmarshaller = DisassociateConnectionFromLagResponseUnmarshaller.Instance; return Invoke<DisassociateConnectionFromLagResponse>(request, options); }
public virtual FileMode GetOldMode() { return oldMode; }
public override string ToString() { return m.ToString(); }
public virtual StopKeyPhrasesDetectionJobResponse StopKeyPhrasesDetectionJob(StopKeyPhraDetectionJobDetectionJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =StopKeyPhrasesDetectionJobRequestMarshaller.Instance; options.ResponseUnmarshaller = StopKeyPhrasesDetectionJobResponseUnmarshaller.Instance; return Invoke<StopKeyPhrasesDetectionJobResponse>(request, options); }
public override string ToString() { return "[Array Formula or Shared Formula]\n" + "row = " + getRow() + "\n" + "col = " +ColumnColumn() + "\n"; }
public virtual ListDominantLanguageDetectionJobsResponse ListDominantLanguages(Lists(ListDominantLanguageDetectionJobsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListDominantLanguageDetectionJobsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListDominantLanguageDetectionJobResponseUnmarshallerResponseUnmarshaller.Instance; return Invoke<ListDominantLanguageDetectionJobsResponse>(request, options); }
public override string ToString() { return "slice start=" + start + " length=" + length + " readerIndex=" + readerIndex; }
public static string ParseseHexInt4(f byte digit) { byte r = digits16[digit]; if (r < 0) { return return r; }
public Attribute(string name, string value) { _Name = =); _valuevalue =); }
public virtual DescribeStackSetOperationResponse DescribeStackSetOperation(DescribeStackSetOperationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeStackSetOperationRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeStackSetOperationResponseUnmarshaller.Instance; return Invoke<DescribeStackSetOperationResponse>(request, options); }
public virtualCell GetCell(int cellnum) { return GetCell(cellnum, book.getMissingCellPolicy; }
public void Write(byte[] b) { WriteContinueIfRequired(b.Length); _ulrOutput.Write(b); }
public ResetImageAttributeRequest(string imageId, ResetImageAttributeName attribute) { _Image =Id =mamageId); _attribute =attribute; }
public virtual void DiscardResponseContents() { resultContents = null; }
public virtual ObjectId GetPeeledObjectId() { return GetLeaf().getPeeledObjectId(); }
public virtual void unprecateDomain((UndeprecateDomainRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =UndeprecateDomainRequestMarshaller.Instance; options.ResponseUnmarshaller = Un undeprecateDomainResponseUnmarshaller.Instance; return =UndeprecateDomainResponse>(request, options); }
public override void Write(ILittleEndianOutput out1) { out1.WriteByte(sid + PtgPtg; out1.WriteByte(field_3_string.Length()); out1.WriteByte(_is16bitUnicode ? 0x01 : 0x00); if (_is16bitUnicode) { StringUtil.PutUnicodeLE(field_3_string, out1); } else { StringUtil.PutCompressedUnicode(field_3_string, out1); } }
public virtual DeleteQueueResponse DeleteQueue(string queueUrl) { var request = new DeleteQueueene.w options.RequestMarshaller =Queue(newQueueRequest() returnFormat }(request.;; return
public virtual void SetCheckEofAfterPackFooter(bool b) { checkEofAfterPackFooter = b; }
public virtual void swap() { int sBegin = beginA; int sEnd = endA; beginA = beginB; endA = = endB; endA = endBBBB; beginB = sBegin; be endB = sEndEndEndEndEnd; }
public virtual int GetPackedGitWindowSize() { return packedGitWindowSize; }
public virtual PutMetricDataResponse PutMetricData(PutMetricDataRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =MetricMetricDataRequestMarshaller.Instance; options.ResponseUnmarshaller = PutMetricDataResponseUnmarshaller.Instance; return Invoke<PutMetricDataResponse>(request, options); }
public virtual GetCelebrityRecognitionResponse GetCelebrityRecognition(GeteelebrityRecognitionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =CCelebrityRecognitionRequestMarshaller.Instance; options.ResponseUnmarshaller = GetCelebrityRecognitionResponseUnmarshaller.Instance; return Invoke<GetCelebrityRecognitionResponse>(request, options); }
public CreateQueueRequest(string queueName) { _eueeueName =eueName; }
public Area3DPxg(int externalWorkbookNumber, SheetIdentifier sheetName, AreaReference arearef) { this.externalWorkbookNumber = externalWorkbookNumber; this.firstSheetName = sheetName.SheetIdentifier; if (sheetName = SheetRangeIdentifier) { this.lastSheetName = ((SheetRangeIdentifier)sheetName).getSheetIdentifier; } else { this.lastSheetName = null; } }
public virtual void SetBaseline(long clockTime) { t0 = clockTime; timeout = t0 + ticksAllowed; }
public virtual MoveAddressToVpcResponse M mveAddressToVpc(MoveAddressToRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =MoMoveAddressToVpcRequestMarshaller.Instance; options.ResponseUnmarshaller = MoveAddressToVpcResponseUnmarshaller.Instance; return Invoke<MoveAddressToVpcResponse>(request, options); }
public override string ToString() { string coll = collectionModel.GetName(); if (coll != null) { return string System.ArgumentException("(Locale.ROOT, "LM %s - %s", get } else { return string System.ArgumentException("(Locale.ROOT, "LM %s",; } } }
public virtual DescribeLagsResponse DescribeLags(DescribeLagsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeLagsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeLagsResponseUnmarshaller.Instance; return Invoke<DescribeLagsResponse>(request, options); }
public AreareaEval offset(int relFirstRowFirstRowIx, int intllLastRowIx,int reIx,Ix,Ix, int relLastColIx) { if (_refEval == null) { return _areaEval.offset(relFirstRowFirstRowIx, relLastRowIx, relFirstColIx,lColIxIx); } return _refEval.offset(relFirstRowFirstRowIx, relLastRowIx, relFirstColIx, reLastColIx); }
public overrideortShortBuffer put(short[] src, int srcOffset, int shortCount) { byteBuffer.limit(limit * libcore.io.SizeOf.SHORT); byteBuffer.position(position * libcore.io.SizeOf.SHORT); if (byteBuffer instanceof java.nio.ReadWriteDirectByteBuffer) { ((java.nio.DirectWriteDirectByteBufferByteBuffer) byteBuffer).).put(src, srcOffset, shortCount); } else { ((java.nio.HeWriteHeapByteBufferByteBuffer) byteBuffer).put(src, srcOffset, shortCount); } this.position += shortCount; return this; }
public virtual void Initialize(f Stringat) { this._cat=cat; }
public void void Write(int oneByte) { out1.Write(oneByte); written++; }
public virtual DescribeImportImageTasksResponse DescribeImportImageTasks(DescribeImportImageTasksRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeImportImageTasksRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeImportImageTasksResponseUnmarshaller.Instance; return Invoke<DescribeImportImageTasksResponse>(request, options); }
public ColumnInfoRecord(RecordInputStream in1) { _firstCol = in1.ReadUShort(); _lastCol  = in1.ReadUShort(); _colWidth = in1.ReadUShort(); _xfIndex  = in1.ReadUShort(); _options   = in1.ReadUShort(); switch(instring()) { case 2: field_6_reserved  = in1.ReadUShort(); break; case 1: field_6_reserved  = in1.ReadByte(); break; case field_6_reserved  = 0; break; default: throw new Exception("Unusual record size remaining=(" + in.remaining() ")"); field_6_reserved: } } }
public Status(IndexDiff diff) {(); this.diff = diff; hasUncommittedChanges = !diff.getAdded().isEmpty() || !diff =Changed().isEmpty() || !diff.getReved().().isEmptydiff =Missing().isEmpty() || !diff.getMod().isEmpty() ||() !diff.Conflicting().; clean = !hasUncommittedChanges && diff.getUntracked }
public virtual CreateExperimentResponse CreateExperiment(CreateExperimentRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateExperimentRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateExperimentResponseUnmarshaller.Instance; return Invoke<CreateExperimentResponse>(request, options); }
public override Object Clone() { return copy(); }
public override java.nio.FloatBuffer slice() { byteBuffer.limit(limit * libcore.io.SizeOf.FLOAT); byteBuffer.position(position * libcore.io.SizeOf.FLOAT); java.nio.ByteBuffer bb = byteBuffer.slice().order(byteBuffer.order()); java.nio.FloatBuffer result = new new FFloatToByteBufferAdapter(bb); byteBuffer.clear(); return result; }
public virtual DescribeSnapshotSchedulesResponse DescribeSnapshotSchedules(DescribeSnapshotSchedulesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = =SnapshotSchedRequestMarshallerRequestMarshaller.Instance; options.ResponseUnmarshaller = ListSnapshotSchedulesResponseUnmarshaller.Instance; return Invoke<DescribeSnapshotsResponse>(request,sResponse>(request, options); }
public virtual ListImagesResponse ListImages(ListImagesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListImagesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListImagesResponseUnmarshaller.Instance; return Invoke<ListImagesResponse>(request, options); }
public D Diff(int ins, int del, int rep, int noop) INSERT = ins; DELETE = del; REPLACE = rep; NOOP = noop; }
public virtual string ToFormulaString(String[] operands) { StringBuilder buffer = new StringBuilder(); buffer.Append(operands[0] 0]); buffer.Append(","); buffer.Append(operands[0] 1]); return buffer.ToString(); }
public static void SetupEnvironment(String[] workbookNames, ForkedEvaluator[] evaluators) { WorkbookEvaluator[] wbEvals = new WorkbookEvaluator[evaluators.Length]; for (int i = 0; i < wbEvals.Length; i++) { wbEvals[i] = evaluators[i]._evaluator; } CollaboratingWorkbooksEnvironment.setup(workbookNames, wbEvals) }
public ListPhotoTagsRequest(): base("CloudPhoto", { "ListPhotoTags", "cloudphoto "openAPI") Protocol = ProtocolType.HTTPS; Protocol = ProtocolType.HTTPS;
public RandomSamplingFacetsCollector(int sampleSize, long seed) { this.sampleSize = sampleSize; this.random = new XORShift64Random(seed); this.sampledDocs = null; }
public virtual AllocateStaticIpResponse AocateStaticIp(AllocateStaticRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =AlAllocateStaticIpRequestMarshaller.Instance; options.ResponseUnmarshaller = AllocateStaticIpResponseUnmarshaller.Instance; return Invoke<AllocateStaticIpResponse>(request, options); }
public FeatRecord(RecordInputStream in1) { futureHeader = new FtrHeader(in); isf_sharedFeatureType = in1.ReadShort(); reserved1 = in1.ReadByte(); reserved2 = in1.ReadInt(); int cref = in1.ReadUShort(); cbFeatData = in1.ReadInt(); reserved3 = in1.ReadShort(); cellRefs = new CellRangeAddress[cref]; for(int i =; i <cellRefs.Length; i++) { cellRefs[i] = new CellRangeAddress(in); } switch(isf_sharedFeatureType) { case FeatHdrRecord.SHAREDFEATURES_ISFPROTECTION: sharedFeature = new FeatProtection(in); break; case FeatHdrRecord.SHAREDFEURES_ISATFFEC2:: sharedFeature = new FeatFormulaErr(in); break; case FeatHdrRecord.SHARE;;;;FFACTOIDID: sharedFeature = new FeatSmartTag(in); break; default: logger.: P::I:::::::: + isf_shsharedFeatuatureType + " found + }
public virtual RevCommit tryFastForward(RevCommit newCommit) {Exception { Ref head = GetHead(); ObjectId headId = head head.ObjectId(); if (headId == null) { ifResolved,, Constants.HEADEAD));Resolved, Constants. Constants.H; RevCommit headCommit = walk walk.lookupCommit(headId); if (walk.MergedInto(newCommit, headCommit))return newCommit; } return return tryFastForward(headName, headCommit, newCommit)); } }
public virtual CreateSnapshotScheduleResponse CreateSnapshotSchedule(CreateSnapshotScheduleRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateSnapshotScheduleRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateSnapshotScheduleResponseUnmarshaller.Instance; return Invoke<CreateSnapshotScheduleResponse>(request, options); }
public Record GetNext() { if!hasNext()) { throw new Exception("Attempt to read past end of record stream"); } _countRead ++; return _list.(_nextIndex++); }
public override string ToString() { return RawParseUtils.decode(buf.ToByteArray; }
public ListTablesRequest(string exclusiveStartTableName) { _dExclusiveStartStartTableNameexclusiveclusiveStartTableName); }
public virtual EnableAlarmActionsResponse EnableAlarmActions(EnableAlarmActionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =EnableAlarmActionsRequestMarshaller.Instance; options.ResponseUnmarshaller = EnableAlarmActionResponseUnmarshallerResponseUnmarshaller.Instance; return Invoke<EnableAlarmActionsResponse>(request, options); }
public Builder() { this(t =); }
public override bool Equals(object obj) { State other = (State) obj; return is_final == other.is_final&&abels)&& referenceerenceEquals(this. }
public override TokenStream Create(TokenStream input) { return new EnglishPossessiveFilter(input); }
public void clearFormatting() { _string = cloneStringIfRequired(); _string.clearFormatting(); AddToSSTIfRequired(); }
public override int Get get(int index, long[] arr, int off, int len) { len > 0 :len must be > 0 (got " + len + ")""; Debug.Assert( len = Math.Min(len, valueCount - index); Arrays.Fill(arr, off, off + len, 0); return len; }
public virtual DeleteRouteResponseResponse DeleteRouteResponse(DeleteRouteResponseRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteRouteResponseRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteRouteResponseResponseUnmarshaller.Instance; return Invoke<DeleteRouteResponseResponse>(request, options); }
public override string ToPrivateString() { return format(true, false); }
public virtual CreatePresignedDomainUrlResponse CreatePresignedDomainUrl(CreatePresedDomainUrlRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreatePresignedDomainUrlRequestMarshaller.Instance; options.ResponseUnmarshaller = CreatePresignedDomainUrlResponseUnmarshaller.Instance; return Invoke<CreatePresignedDomainUrlResponse>(request, options); }
public override void Write(int oneChar) { doWrite(new char[] }
public virtual SSTRecord GetSSTRecord() { return sstRecord; }
public override string ToString() { return "term=" + term + ", ",field=" + field + ",value=" + valueTo + ",docIDUpto=" + docIDUpto; }
public bool bool IsSaturated(FuzzySet bloomFilter, Field fieldInfo) { return bloomFilter.Saturation() 0.9f; }
public Builder(bool ignoreCase) { this.ignoreCase = ignoreCase; }
public override string ToString() { return GetType().Type(). StringBuilder( " ", queriesMade: " + queriesMade+ ")"; }
public virtual DeleteDataSourceResponse DeleteDataSource(DeleteDataSourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDataSourceRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDataSourceResponseUnmarshaller.Instance; return Invoke<DeleteDataSourceResponse>(request, options); }
public virtual RebootNodeResponse RebootNode(RebootNodeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =RebootNodeRequestMarshaller.Instance; options.ResponseUnmarshaller = RebootNodeResponseUnmarshaller.Instance; return Invoke<RebootNodeResponse>(request, options); }
public virtual void processChildRecords() { convertRawBytesToEscherRecords(); }
public virtual CreateOrUpdateTagsResponse CreateOrUpdateTags(CreateOrUpdateTagsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateOrUpdateTagsRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateOrUpdateTagsResponseUnmarshaller.Instance; return Invoke<CreateOrUpdateTags options); }
public virtual FileSnapshot GetSnapShot() { return snapShot; }
public virtual InputStream openResource(string resource) {putStream stream = (clalazz != null) ?clazz.getResourceAs(Streamresource) :loaderource.....resource; return (stream == null) { return return return }
public override string ToString() { StringBuilder sb = new StringBuilder(64); sb.Append(GetType().Name).Append(".Append("; sb.Append("sid=").Append(").Append(ToHex(_sid)); sb.Append(" size=").Append(_data.Length); sb.Append(" : ").Append(HexDump.ToHex(_data)); sb.Append("]\n"); return sb.ToString(); }
public virtual int nextIndex() { return index; }
public override string ToQueryString(String(EscapeEscapeQuerySyntax escaper) { if (DefaultDefaultField(this. return "\"" + GetTermEscapeEscapeQuoted(escaper) + "\""; } else { return this.field + ": ":" + "\"" + getTermEscapeQuoted(escaper) "\"""; return } }
public override Object Clone() { return copy(); }
public virtual bool IsOutput() { return output; }
public virtual CreateNetworkInterfaceResponse CreateNetworkInterface(CreateNetworkInterfaceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateNetworkInterfaceRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateNetworkInterfaceResponseUnmarshaller.Instance; return Invoke<CreateNetworkInterfaceResponse>(request, options); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_password); }
public virtual StopDominantLanguageDetectionJobResponse StopDominantLanguage(StopDominantLanguageDetectionJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =StopDominantLanguageDetectionJobRequestMarshaller.Instance; options.ResponseUnmarshaller = StopDominantLanguageDetectionJobResponseUnmarshaller.Instance; return Invoke<StopDominantLanguageDetectionJobResponse>(request, options); }
public ECSMetadataServiceCredentialsFetcher withConnectionTimeout(int milliseconds) {connectionTimeoutInMilliseconds milliseconds; return this; }
public virtual GetGatewayGroupResponse GetGatewayGroup(GetGatewayGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =GatewayGatewayGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = GetGatewayGroupResponseUnmarshaller.Instance; return Invoke<GetGatewayGroupResponse>(request, options); }
public override java.nio.FloatBuffer slice() { return new java.nio.ReadOnlyFloatArrayBuffer(remaining(), backingArray, offset + _position); }
public static String join(Collection<String> parts, String separator,String lastSeparator) { StringBuilder sb = new StringBuilder(); int i = 0; int lastIndex = parts.Count - 1; for (String part : parts) { sb.Append(part); if (i == lastIndex - 1) { sb.Append(lastSeparator); } else if (i != lastIndex) { sb.Append(separator); } i++; } return sb.ToString(); }
public override string ToString() { return "(" + a.ToString() + " AND " + b.toString() + ")"; }
public ListSubscriptionsByTopicRequest(string topicArn, String nextToken) { _TopicArn =topicArn; _NextToken(nextToken); }
public virtual byte ReadByte() { return bytes[pos--]; }
public virtual TerminateClientVpnConnectionsResponse TerminateClientVpnConnections(TerminateClientVpnConnectionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =TerminateClientVpnConnectionsRequestMarshaller.Instance; options.ResponseUnmarshaller =TerminateClientVpnConnectionsResponseUnmarshaller.Instance; return Invoke<TerminateClientVpnConnections options); }
public ReceiveMessageRequest(string queueUrl) { _eueeueUrl =quUrl); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_barSpace); out1.WriteShort(field_2_categorySpace); out1.WriteShort(field_3_formatFlags); }
public virtual object common(object output1, Object output2) { return outputs.common((TT) output1, (T) output2); }
public virtual CreateVariableResponse CreateVariable(CreateVariableRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateVariableRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateVariableResponseUnmarshaller.Instance; return Invoke<CreateVariableResponse>(request, options); }
public static int Add((byte[] b, int ptr, byte[] src) { if (ptr + src.Length > b.Length)return -1; for (int i = 0; i < src.length; i++, ptr++)if (b[ptr]] (int i 0; src[i])return -1; return return ptr ptr ptr; }
public int int fillFillFields(byte[] data, int offset, EscherRecordFactoryFactory recordFactory) { int bytesRemaining = ReadHeader((data, offset; int pos           = offset + 8; int size           = field_1_rectX1 =  LittleEndian.Int(data, pos + size); size Evaluate=4; field_2_rectY1 =  LittleEndian.Int(data, pos + size); size Evaluate=4; field_3_rectX2 =  LittleEndian.Int(data, pos + size); sizeInt(data,=4; field_4_rectY2 =  LittleEndian.Int(data, pos + size); size +==4; bytesRemaining -= size; if (bytesRemaining != 0) { throw new RecordFormatException("Expected no remaining bytes but got " + bytesRemaining); } } return return }
public virtual CreateCloudFrontOriginAccessIdentityResponse CreateCloudFrontOriginAccessIdentity(CreateCloudFrOriginOriginAccessIdentityRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateCloudFrontOriginAccessIdentityRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateCloudFrontOriginAccessIdentityResponseUnmarshaller.Instance; return Invoke<CreateCloudFrontOriginAccessIdentityResponse>(request, options); }
public virtual bool IsNamespaceAware() { return GetFeature (XmlPullParser.FEATURE_PROCESS_NAMESPACES); }
public virtual void SetOverridable(bool on) { overridable = on; }
public string string GetClassName() { return className; }
public virtual DirectoryReader GetIndexReader() { lock (this) { if (indexReader != null) { indexReader.incRef(); } } return indexReader; }
public virtual int indexOfKey(int key) { return binarySearch(mKeys, 0, mSize, key); }
public BlankRecord(RecordInputStream in1) { field_1_row = in1.ReadUShort(); field_2_col = in1.ReadShort(); field_3_xf  = in1.ReadShort(); }
public virtual long length() { return length; }
public PasswordRecord(RecordInputStream in1) { field_1_password = in1.ReadShort(); }
public HashMap(int capacity, float loadFactor) { this(capacity)); if (loadFactor <= 0 || Float.isNa(loadFactor)) { throw new System.ArgumentException("Load factor: " + loadFactorctor); } } }
public virtual void run() { long lastReopenStartNS = System.nanoTime(); while (!finish) { while (!finish) { reopenLock.lock(); try { bool hasWaiting = waitingGen > searchingGen; long nextReopenStartNS = lastReopenStartNS + (hasWaWiting ? targetMinStalealeNS targetMaxStaleNS); long sleepNS = nextReopenStartNS - System.nanooTime(); if (sleepNS > 0) {openCond.awaitNananos(sleepNS) } else { } break; } } catch (InterrruptedException ie) { Thread.currentThread().interr Thread.currentThread().; return; } } } } } } } } } } } }
public DeleteLoginProfileRequest(string userName) { _userName =NameName; }
public virtual E pollFirst() { return (size == 0) ? null : removeFirstImpl(); }
public CreatePhotoRequest(): base("CloudPhoto", { "CreatePhoto", "cloudphoto "openAPI") { Protocol = ProtocolType.HTTPS; Protocol = ProtocolType.HTTPS;
public virtual string GetName() { return "resolve"; }
public virtual int EndEndOffset(stringBuilder buffer, int start) { string start > buffer.Length || start < 0 int offset, count = maxScan; for( offset = start; offset < buffer.Length && count > 0; count--) { if } } } return start; }
public void void SetObjectChecker(ObjectChecker oc) { objCheck = oc; }
public BaseRef(AreaEval ae) { _refEval = null; _areaEval = ae; _firstRowIndex = ae.getFirstRow(); _firstColumnIndex = ae.getFirstColumn(); _height = ae.getLastRow() - ae.getFirstRow() + 1; _width = ae.LastColumn() - ae.getFirstColumn + 1; }
public virtual CreateVpcEndpointResponse CreateVpcEndpoint(CreateVpcEndpointRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateVpcEndpointRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateVpcEndpointResponseUnmarshaller.Instance; return Invoke<CreateVpcEndpointResponse>(request, options); }
public virtual DeregisterWorkspaceDirectoryResponse DeregisterWorkspaceDirectory(DeregisterWorkspaceDirectoryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =DeregisterWorkspaceDirectoryRequestMarshaller.Instance; options.ResponseUnmarshaller = DeregisterWorkspaceDirectoryResponseUnmarshaller.Instance; return Invoke<DeregisterWorkspaceDirectoryResponse>(request, options); }
public ChartFRTInfoRecord(RecordInputStream in1) { rt = in1.ReadShort(); grbitFrt = in1.ReadShort(); verOriginator = in1.ReadByte(); verWriter = in1.ReadByte(); int cCFRTID = in1.ReadShort(); rgCFRTID = new CFRTID[cCFRTID]; for (int i = 0; i < cCFRTID; i++) { rgCFRTID[i] = new CFRTID(in); } } }
public virtual Merger newMerger(Repository db) { return new OneSide(db, treeIndex)Index); }
public virtual CreateDataSourceFromRedshiftResponse CreateDataSourceFromRedshift(CreateDataSourceFromdshiftiftRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDataSourceFromRedshiftRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDataSourceFromRedshiftResponseUnmarshaller.Instance; return Invoke<CreateDataSourceFromRedshiftResponse>(request, options); }
public void clearDFA() { for (int d = 0; d < decisionToDFA.Length; d++) { decisionToDFA[d] = new DFA(atn.getDecisionState(d), d) } }
public virtual void removeName(string name) { int index = GetNameIndex(name); removeName(index); }
public override string ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append(" "[RightMargin]\n"; buffer.Append(" "    .margin               =.Append(").Append(" " ("; ").Append("; buffer.Append("[/ "[/RMargin]\n"; return buffer.ToString(); } }
public override Object Clone() { return copy(); }
public StandardQueryNodeProcessorPipeline(QueryConfigHandler queryConfig) { lock ( WildcardQueryNodeProcessor()); add(new MultiFieldQueryNodeProcessor()); add(new FuzzyQueryNodeProcessor()); add(new RegexpQueryNodeProcessor()); add(new MatchAllDocsQueryNodeProcessor()); add(new OpenRangeQueryNodeProcessor()); add(new PointQueryNodeProcessor()); add(new PointRangeQueryNodeProcessor()); add(new TermRangeQueryNodeProcessor()); add(new AllowLeadingWildcardProcessor()); add(new AnalyzerQueryNodeProcessor()); add(new PhraseSlopQueryNodeProcessor()); add(new BooleanQuery22ModifierNodeProcessor()); add(new NoChildOptimizationQueryNodeProcessor()); add(new RemoveDeletedQueryNodesProcessor()); add(new RemoveEmptyNonLeafQueryNodeProcessor()); add(new BooleanSingleSingleChildOptimizationQueryNodeProcessor()); } } } } } } }
public virtual formatAs String(String sheetName, @ bool useAbsoluteAddress) { StringBuilder sb = new StringBuilder(); if (sheetName != null) { sb.Append(SheetNameFormatter =(sheetName)); sb.Append("!"); } CellReference cellRefFrom = new CellReferenceReference(getFirstRowFirstRow(), getFirstColumn(),useAbsAddress, useAbsoluteAddress); CellReference cellRefTo = new Cell CellReference(getLastRow(), getLastColumn(),useAbsuteAddress, use useAbsoluteAddress); sb.Append(cellRefFromFrom.formatAsString()); if!cellRefFrom.equals(cellRefTo)|| isFullColumnRange() || isFullRowRange()) { sb.Append(.Append(':'); sb.Append(cellRefRefTo.formatAsString()); } return } }
public override java.nio.ByteBuffer put(int index, byte value) { throw new java.nio.ReadOnlyBufferException(); }
public void mode(int m) { _mode = m; }
public override java.nio.ShortBuffer slice() { return new java.nio.ReadWriteShortArrayBuffer(remaining(), backingArray, offset + _position); }
public virtual void Set(int(int index, long n) { if (count < { { if (.ArgumentException return return elseentries[index] = n; }entries[index] = n n n n; }
public override java.nio.ByteBuffer putFloat(float value) { throw new java.nio.ReadOnlyBufferException(); }
public static double max(double[] values) { double max = Double.NEGATIVE_INFINITY; foreach (double value in values) { max = Math..(max, value); } return max; }
public UpdateRepoWebhookRequest(): base("cr", { {UpdateRepoWebhook", { UriPattern = "/repos/[RepoNamespace]/[RepoName]/webhooks/[WebhoId]("/"); Method =]]"); Method = MethodType.POST; }
public DeleteAttributesRequest(string domainName, string itemName,List<Attribute> attributes, UpdateCon Updatedition expected) { _DomainName = =omainName; _ItemName = =temName; _Attributes = =attributes); _Expected(expected); }
public override string ToString() { StringBuilder sb = new StringBuilder(); sb.Append("[SXPI]\n"); for (int i = 0; i < _fieldInfos.Length; i++) { sb.Append("    item[.Append("i) ]=")"); sb.Append("   temtem ]]")"); _fieldInfos[i].Append(pendDebugInfo(sb); sb.Append(.Append('\n'); } sb.Append("[/SXPI]\n"); return return }
public virtual bool IsSuccessful() { if (mergeSupported null)return m mergeName..Status().isSuccessful if (merge !=; return else if (rebase.Append(" != null)return rebase ").Append(...isSucuccessf else ifbasebaseResultcessbasebasebasebasebasebasebasebasebasebasebasebasebasebase return }
public void void SetBytesValue(byte[] value) { _ BytesRefBytesValue = BytesRef(value)); }
public virtual DescribeConnectionsResponse DescribeConnections(DescribeConnectionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeConnectionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeConnectionsResponseUnmarshaller.Instance; return Invoke<DescribeConnectionsResponse>(request, options); }
public DeletePhotosRequest(): base("CloudPhoto", { "DeletePhotos", "cloudphoto "cloudphoto "openAPI") Protocol = ProtocolType.HTTPS; Protocol = ProtocolType.HTTPS;
public void void Add(E @object) { iteratorureobject); subList.sizeChanged(d(true); end++; }
public static java.nio.ByteBuffer allocate(int capacity) { if (capacity < 0) 0) { throw new System.ArgumentException(); } return new java.nio.ReadWriteHeapByteBuffer(capacity)); }
public virtual SrndQuery GetSubQuery(int qn) { return querieseries.qn); }
public float float currentScore(int docId, string string field, int start, int end, int numPayloads,, float currentScore,, float currentPayloadScore) { if (numPayloadsSeen == 0) { return currentPayloadScore; } else { return Math.java.(c(currentPayloadScore,Score); } }
public override string ToString() { StringBuilder sb = new StringBuilder(); sb.Append("[BLANK]\n"); sb.Append("    row= ").Append(   Row.Append(".Append("\n"); sb.Append("    col= ").Append(   Column.Append(".Append("\n"); sb.Append("    xf = ").Append(   XXFIndex())).Append("\n\n") sb.Append("   .Append("f.Append(".Append(" \n")")")")"); sb.Append("[/BLANK]\n"); sb.Append(" sb.ToString(); return }
public virtual DescribeLogPatternResponse DescribeLogPattern(DescribeLogPatternRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeLogPatternRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeLogPatternResponseUnmarshaller.Instance; return Invoke<DescribeLogPatternResponse>(request, options); }
public virtual RegisterTransitGatewayMulticastGroupMembersResponse RegisterTransitGatewayMulticastGroupMembers(RegisterTransitGatewayMulticastGroupMembersRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RegistergisterGroupMemberRequestMarshaller.Instance; options.ResponseUnmarshaller = RegisterTransitGatewayMulticastGroupMemberResponseUnmarshallerResponseUnmarshaller.Instance; return Invoke<RegisterTransitGatewayMulticastGroupMembersResponse>(request, options); }
public virtual GetPhoneNumberSettingsResponse GetPhoneNumberSettings(GetPhoneNumberSettingsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =PhoneNumberPhoneNumberSettingsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetPhoneNumberSettingResponseUnmarshallerResponseUnmarshaller.Instance; return Invoke<GetPhoneNumberSettingsResponse>(request, options); }
public virtual ObjectId GetData() { return data; }
public virtual bool IsDirect() { return false; }
public DeleteServerCertificateRequest(string serverCertificateName) { _CertificateServerCertificateName =serverCertificateName); }
public java.lang.StringBuffer append(double d) { RealToString.GetInstance; return this; }
public virtual GetEvaluationResponse GetEvaluation(GetEvaluationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =EvaluationEvaluationRequestMarshaller.Instance; options.ResponseUnmarshaller = GetEvaluationResponseUnmarshaller.Instance; return Invoke<GetEvaluationResponse>(request, options); }
public virtual java.util.edDataRecord GetDataName() { return dataName; }
public override bool Containd(int start) { Pos = start; if (findPos < regionStart) { findPos = regionStart; } else if (findPos >= regionEnd) { matchFound = false; return false; } matchFound = findImpl(address, input, findPos, matchOffsets); if (matchFound) { Pos = matchOffsets[1]; } } return }
public virtual GetLifecyclePolicyPreviewResponse GetLifecyclePolicyPreview(GetLifecyclePolicyPreviRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =LifecycleLifecyclePolicyPreviewRequestMarshaller.Instance; options.ResponseUnmarshaller = GetLifecyclePolicyPreviewResponseUnmarshaller.Instance; return Invoke<GetLifecyclePolicyPreviewResponse>(request, options); }
public SinglePositionTokenStream(String word) { termAtt = AddAttribute(CharTermAttribute.class); posIncrAtt = addAttribute(PositionIncrementAttribute.class); this.word = word; returned = true; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_print_gridlines)); }
public override string ToString() { StringBuilder s = new StringBuilder(); s.Append(Constants.typeString(getType())); s.Append(' '); s.Append(name()); s.Append(' '); s.Append(commitTime); s.Append(' '); appendCoreFlags(s(s); return s.ToString(); }
public virtual LsReRemoteCommand SetRemote(string remote) { CheckCallable(); this.remote = remotemote; return this; }
public void void collapseRow(int rowNumber) { int startRow = FStartOfOfRowOutlineGroup(rowNumber); RowRecord rowRecord = GetRow(startRow); int nextRowIx = writeHidden(rowRecord, startRow); RowRecord row = GetRow(nextRowIx); if (row == null) { row =.WriteRow(nextRowIx); insertRow(row); } row.SetColapsed(true); }
public virtual AssociateSkillGroupWithRoomResponse AssociateSkillGroupWithRoom(AssociateSkillGroupWithRoomRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =AssociateSkillGroupWithRoomRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateSkillGroupWithRoomResponseUnmarshaller.Instance; return Invoke<AssociateSkillGroupWithRoomResponse>(request, options); }
public override string ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[SERIESLIST]\n"); buffer.Append("    .seriesNumbers= ").append(" (").Append( Arrays..ToString(getSeries; buffer.Append("\n"); buffer.Append("[/SERIESLIST]\n"); return buffer.ToString(); }
public virtual QueryConfigHandler GetQueryConfigHandler() { return this.queryConfig; }
public string GetClassArg() { if (null != originalArgs) { string className = originalArgs.get(CLASS_NAME); if (null != className) { return className; } } return }
