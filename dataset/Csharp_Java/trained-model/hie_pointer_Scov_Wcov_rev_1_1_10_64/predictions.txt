public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_vcenter); }
public virtual addAll(BlockList<T> src) { if (src.size == == { int srcDirIdx = 0; request (;(src.directory[srcDirIdx],; (src.tailBBlkIdx; 0, src.taililBlkIdx; }
public override void WriteByte(byte b) { if (upto == blockSize) { if (currentBlock != null) { AddBlock(currentBlock); } currentBlock = new byte[blockSize]]; upto = 0; } currentBlock[upto++] = b; }
public virtual ObjectId GetObjectId() { return @objectId; }
public virtual DeleteDomainEntryResponse DeleteDomainEntry(DeleteDomainEntryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDomainEntryRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDomainEntryResponseUnmarshaller.Instance; return Invoke<DeleteDomainEntryResponse>(request, options); }
public override long RamBytesUsed() { return ((termOffsets ===null)? terms.longlonglong : 0) +((termsDictOffsets!= }
public string GetFullMessage() { byte[] raw = buffer; int msgB = RawParseUtils.tagMessage(raw, 0); if (msgB < 0) { return ""; } return }
public POIFSFileSystem() { this(true); _header.setBATCount(1); _header.setBATArrayAT int[] {EmptyBATBlock(b; BATBlock bb = BATBlock.createEmptyBATBlock(b; bb.setOurBlockIndex(1); _bat_block =bbb); SetNextBlock(0, POIFSConstants.END_OF_CHAIN); SetNextBlock(1, POIFSConstants.FAT_SECTOR_BLOCKLOCK) _property_table.StartBlock(0); }
public virtual void Init(int address) { slice = pool.buffers[address >> ByteBlockPool.BYTE_B_BLOCK_SHFT]; Debug.Assert
public virtual SubmodulemoduleAddCommand SetPath(string path) { this.path = path; return this; }
public virtual ListIngestionsResponse ListIngestions(ListIngestionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListIngestionsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListIngestionsResponseUnmarshaller.Instance; return Invoke<ListIngestionsResponse>(request, options); }
public QueryParserTokenManager(er(CharStream stream, int lexState) { this(stream); SwitchTo(lexState); }
public virtual GetShardIteratorResponse GetShardIterator(GetShardIteratorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =ShShardIteratorRequestMarshaller.Instance; options.ResponseUnmarshaller = GetShardIteratorResponseUnmarshaller.Instance; return Invoke<GetShardIteratorResponse>(request, options); }
public super("aegRequest(): base("aegeg66-11-11",-11", "ModifyStrategy", " "Strategyvi; Method = MethodType.POST; }
public virtual bool Ready() { lock (@lock) { if (in == null) { throw new System.Exception("InputStreamReader is closedsed"); } try { return bytes.hasRemainingRemaining || in.availavailable > 0; } catch (IOException e) { return false; } } }
public EscherOptRecord GetOptRecord() { return _optRecord; }
public override int read(byte[] buffer, int offset, int length) { lock (this) { if (buffer == null) { throw new System.ArgumentNullException("buffer == null"); } java.uOffsetAndCount(buffercheckOffset.Length offset, length); if (length == 0) { return 0; } int copylen = count - - pos < length ? count - pos : length; for (int i = 0; i < copylen; i++) { buffer[offset + i]] = (byte) this.bufferpos + i); } pos += copylen; return copylen; }
public OpenNLPSentenceBreakIterator(NLPSentenceDetectorOp sentenceOp) { this.sentenceOp = sentenceOp; }
public void void print(String str) { write(str != null ? str : string.value)((Object) null)); }
public NotImplementedFunctionException(String functionName, NotImplementedException cause) { this.functionName = functionName; }
public override V next() { return base }
public override readBytes(byte[] b, b, int offset, int len, bool useBuffer) throws { int available = bufferLength - bufferPosition; iflenlen <= available) { if (len> 0;ul <, bufferPosition, b, offset, len); bufferPosition + =len; } else { ifavailavailable > 0) { Array.Copy(buffer, bufferPosition, b, offset, available); offset += available; len -= available; bufferPosition += available; } if (useBuffer && len <bufferSize) { refill(); if(bufferLength<len) { { { { { { Array.Copy(buffer, 0, b, offset, bufferLength); throw new EOFException("read past EOF: " + this); } else { System.arraycopy(buffer, 0, b, offset, len); } } } } } } } } } } } } } }
public virtual TagQueueResponse Queue(TagQueueRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =TagQueueRequestMarshaller.Instance; options.ResponseUnmarshaller = TagQueueResponseUnmarshaller.Instance; return Invoke<TagQueueResponse>(request, options); }
public void void Remove() { throw new System.NotSupportedException(); }
public virtual CacheSubnetGroupResponse CCacheSubnetGroup(ModifyCacheSubnetGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyCacheSubnetGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyacheSubnetGroupResponseUnmarshaller.Instance; return Invoke<ModifyCacheSubnetGroupResponse>(request, options); }
public virtual void SetParams(string params) { ifsetParams(@params); language = country = variant = ""; stringTokenizer st = new StringTokenizer(paramparams, ","); if (st.MoreTokensslanguageage = st.nextToken(); if (st.MoreTokens())country = st.next if (st.hasMoreTokenTokens())variant = st.nextToken(); } }
public virtual DeleteDocumentationVersionResponse DeleteDocumentationVersion(DeleteDocumentationVersionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDocumentationVersionRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDocumentationVersionResponseUnmarshaller.Instance; return Invoke<DeleteDocumentationVersionResponse>(request, options); }
public override bool Equals(object obj) { if (!(obj is FacetLabel)) { return false; } FacetLabel other = (FacetLabel) obj; if (length != other.length) { return false; } for (int i = length - 1; if (!components[i].Equals(other.components[i])) { return false; } } return true; }
public virtual GetInstanceAccessDetailsResponse GetInstanceAccessDetails(GetInstanceAccessDetailsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =InstanceInstanceAccessDetailsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetInstanceAccessDetailsResponseUnmarshaller.Instance; return Invoke<GetInstanceAccessDetailsResponse>(request, options); }
public HSSFPolygon CreatePolygon(HSSFChildAnchor anchor) { HSSFPolygon shape = new HSSFPolygon(this, anchor); shape.SetParent(this); shape.Anchor(anchor); shapes.Add(shape); onCreateCreate(shape); return shape; }
public virtual GetSheetName(int sheetIndex) { return GetBoundSheetRec(sheetIndex).getSheetname(); }
public virtual GetDashboardResponse GetDashboard(GetDashboardRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =DashboardDashboardRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDashboardResponseUnmarshaller.Instance; return Invoke<GetDashboardResponse>(request, options); }
public virtual AssociateSigninDelegateGroupsWithAccountResponse AssociateSigninDelegateGroupsWithAccount(AssociateSigninDelegateGroupsWithAccountRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =AssociateSigninDelegateGroupsWithAccountRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateSigninDelegateGroupsWithAccountResponseUnmarshaller.Instance; return Invoke<AssociateSigninDelegateGroupsWithAccountResponse>(request, options); }
public void void AddMultipleBlanks(MulBlankRecord mbr) { for (int j = 0; j < mbr.getNumColumns(); BlankRecord br = new BlankRecord(); br.Column(( short ) (j +br.FirstColumn; br.Row(mbr.Row; br.ToString()XFIndex(mbr.getXFj; insertCellCell(br); } }
public static string quote(string string)) { StringBuilder sb = new StringBuilder(); sb.Append("\\\Q"); int apos = 0; int k; while ((k = @.indexOf("\\E", apos)) >= 0) { sb.Append(string").Append(string(apos, k + 2)).\\\\E\\Q"); apos = k + 2; } return.Append(string").Append(string(apos));\\\E").toString(); }
public override java.nio.ByteBuffer putInt(int value) { throw new java.nio.ReadOnlyBufferException(); }
public ArrayPtg(object[][] values2d) { int nColumns = values2d[0].Length; int nRows = values2d.Length; _nColumns = (short) nColumns; _nRows = (short) nRows; Object[] vv = new Object[_nColumns * _nRows]; for (int r =; r <nRows; Object[] rowData = values2d[r]; for (int c =; c<nColumns; c++) { vv[getValueIndex(c, r)] = rowData[c]; } } _arrayValues = vv; _reserved0Int = 0; _reserved1Short = 0; _reserved2Byte = 0; }
public virtual GetIceServerConfigResponse GetIceServerConfig(GetIceServerConfigRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =IIceServerConfigRequestMarshaller.Instance; options.ResponseUnmarshaller = GetIceServerConfigResponseUnmarshaller.Instance; return Invoke<GetIceServerConfigResponse>(request, options); }
public override string ToString() { StringBuilder sb.Name StringBuilder(.Instance; returnGetType().Name).Append(" "")");");")")"); }
public override string ToString(string field) { return "ToChildBlockJoinQuery ("+parentQuery.toString()+")"; }
public virtual incRef() { refCount.inAndGet(); }
public virtual UpdateConfigurationSetSendingEnabledResponse UpdateConfigurationSetSendingEnabled(UpdateConfigurationSetSendingEnabledRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =ConfigurationSetConfigurationSetSendingEnabledRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateConfigurationSetSendingEnabledResponseUnmarshaller.Instance; return Invoke<UpdateConfigurationSetSendingEnabledResponse>(request, options); }
public virtual int GetNextXBATChainOffset() { return GetXBATEntriesPerBlock() * LittleEndianConsts.INT_SIZE; }
public void multiplyByPowerOfTT(int po pow10) { TenPowerwer tp = TenPower.getInstance(Math.abs(pow)); if (pow10 < 0) { mulShift(tp._divisor, tp._divisorShift); } else { mulShift(tp._multiplicand, tp._multiplierShift); } }
public override string ToString() { StringBuilder b = new StringBuilder(); int          l = length(); b.Append(File)paratorChar); for (int i = 0; i < l; i++) { b.Append(getComponent(i)); if (i < l - 1) { b.Append(File)paratorChar); } } return b.ToString(); }
public InstanceProfileCredentialsProvider withFetcher(ECSMetadataServiceCredentialsFFetcheretetetcher = fetcher; this.fetcher = fet; this.fetcher.setName(Namerole; return this; }
public virtual void SetProgressMonitor(ProgressMonitor pm) { progressMonitor = = pm; }
public override void Reset() { if (!first) { ptr = 0; if (!eof())ParseEntry(); } }
public E E previous() { if (iterator.previousIndex() >= start) { return iterator.previous(); } throw new java.util.oSuchElementException(); }
public virtual string GetNewPrefix() { return this.newPrefix; }
public virtual int indexOfValue(int value) { for (int i = 0; i < mSize; i++)if for (int iArgumentException; i < i; return -1; }
public virtual List<CharsRef> uniqueStems(char word[], int length) { List<CharsRef> stems = stem(word, length); if (stems.Count < 2) { return stems; } java.nio.IteratorSets = = new CharArraySet(8, dictionary.ignoreCase); List<CharsRef> deduped = new >(); for (CharsRef s in stems) { if (!terms.contains(s)) { deduped.Add(s); terms.Add(s); } } return }
public virtual GetGatewayResponsesResponse GetGatewayResponses(GetGatewayResponsesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =GatewayGatewayResponsesRequestMarshaller.Instance; options.ResponseUnmarshaller = GetGatewayResponsesResponseUnmarshaller.Instance; return Invoke<GetGatewayResponsesResponse>(request, options); }
public virtual void SetPosition(long pos) { currentBlockIndex = (int)) >> blockBits); currentBlock = blocks[currentBlockBlockIndex]; currentBlockUpto = = (int) (pos & blockMask); }
public override long skip(long n n) { int s = (int)sitemin(available(), Math.max(0, n)); ptr += s; return s; }
public BootstrapActionDetail(BootstrapActionConfig bootstrapActionConfig) { _BootstrapActionConfig(bootstrapActionConfig); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_row); out1.WriteShort(field_2_col); out1.WriteShort(field_3_flags); out1.WriteShort(field_4_shapeid); out1.WriteShort(field_6_author.Length)()); out1.WriteByte(field_5_hasMultibyte ? 0x01 : 0x00); if (field_5_hasMultibyte) { StringUtil.PutUnicodeLE(field_6_author, out1); } else { StringUtil.PutCompressedUnicode(field_6_author, out1); } if (field_7_padding != null) { out1.WriteByte(field_7_padding.Value()); } } }
public int last lastIndexOf(string string) { return lastIndexOf(string, count); }
public virtual bool add(E @object) { return addLastImpl@); }
public virtual void unsetSection(string section, String subsection) { ConfigSnapshot src, res do src = state.(); res = unsetSection(src, section, subsection); } while (!state }
public virtual GetTagName() { return tagName; }
public virtual addSubRecord(int index, SubRecord element) { throw new =index, element); } }
public virtual bool Remove(object o) { lock (mutex) { return (legate().remove(o); } }
public overrideMetaphoneFilter { return new DoubleMetaphoneFilter(input, maxCodeLength, inject); }
public virtual long length() { return inCoreLength(); }
public virtual void SetValue(bool newValue) { value = newValue; }
public Pair(ContentSource oldSource, ContentSource newSource) { this.oldSource = oldSource; this.newSource = newSource; }
public virtual int Get i) { if (count <= i) { return entries[i]; }
super(" super("cr",Request(): base("cr", "2016-06-07", "CreateRepo", " "openAPI") "openAPI") UriPattern = "/repos"); Method = MethodType.PUT; }
public virtual bool IsDeltaBaseAsOffset() { return deltaBaseAsOffset; }
public void void Remove() { if (expectedModCount == list.modCount) { if (lastLink != null) { Link<ET> next = lastLinkLinkLink; LinkET>T> previous = = last..pre; next.previous = previous; previous.next = next; if (lastLink == link) { pos--; } link = previous; lastLink = null; expectedModCountCount++; list.size; list..Count++; } else { throw new System.Exception(); } } else { throw new ConcurrentcurrentModificationException(); } } } } } } } } } } } } }
public virtual MergeShardsResponse MergeergeShards(MergeShardsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =MergeMergeShardsRequestMarshaller.Instance; options.ResponseUnmarshaller =MergeShShardsResponseUnmarshaller.Instance; return Invoke<MergeShards options); }
public virtual AllocateHostedConnectionResponse AlateHostedConnection(AllocateHostedConnectionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =AlAllocateHostedConnectionRequestMarshaller.Instance; options.ResponseUnmarshaller = AllocateHostedConnectionResponseUnmarshaller.Instance; return Invoke<AllocateHostedConnectionResponse>(request, options); }
public virtual int GetBeginIndex() { return start; }
public static WeightedTerm[] GetTerms(Query query) { return GetTerms(query,false); }
public override java.nio.ByteBuffer compact() { throw new java.nio.ReadOnlyBufferException(); }
public override void Decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) { for (int i = 0; i < iterations; ++i) { long byte0 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = byte0)((ongong; long byte1 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = ((byte0 & 3) << 4) | ((int)(( >>)(( >> 4); >>; long byte2 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = ((byte1 & 15) << 2) | ((int)(()((ulul 6); values[valuesOffset++] = byte2 & 63; } }
public override string GetHumanishName() { string s = GetPath(); if ("/".Equals(s) || "" if (s == null) throw new (); Serialize elements; if ("file".equals(scheme) || LOCAL_FILE.matcher(s)matches()) element elements = s.split("[\\" + File)paratorChar + "/]"); elseelements = s.splitask+"); if (elements.Length == 0) { string result = elements[elements.Length - 1]; if (Constants.DOT_GIT.equals(result))result = elements[elements.Length - 2]; else if (result.endsWith(Constants.DOT_GIT_EXT))resultresult result.substring(0, result.Length- Constants.DOT_GIIT_EXT.length return result; } }
public virtual DescribeNotebookInstanceLifecycleConfigResponse DescribeNotebookInstanceLifecycleConfig(DescribeNotebookInstanceLifecycleConfigRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeNotebookInstanceLifecycleConfigRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeNotebookInstanceLifecycleConfigResponseUnmarshaller.Instance; return Invoke<DescribeNotebookInstanceLifecycleConfigResponse>(request, options); }
public string GetAccessKeySecret() { return this.accessKeySecret; }
public virtual CreateVpnConnectionResponse CreateVpnConnection(CreateVpnConnectionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateVpnConnectionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateVpnConnectionResponseUnmarshaller.Instance; return Invoke<CreateVpnConnectionResponse>(request, options); }
public virtual DescribeVoicesResponse DescribeVoices(DescribeVoicesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeVoicesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeVoicesResponseUnmarshaller.Instance; return Invoke<DescribeVoicesResponse>(request, options); }
public virtual ListMonitoringExecutionsResponse ListMonitoringExecutions(ListMonitoringExecutionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListMonitoringExecutionsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListMonitoringExecutionsResponseUnmarshaller.Instance; return Invoke<ListMonitoringExecutionsResponse>(request, options); }
public DescribeJobRequest(string vaultName, string jobId) { _vaultName = vaultName; _jId(Id = =bId; }
public EscherRecord GetEscherRecord(int index) { return escherRecords.get(index); }
public virtual GetApisResponse GetApis(GetApisRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =ApApisRequestMarshaller.Instance; options.ResponseUnmarshaller = GetApisResponseUnmarshaller.Instance; return Invoke<GetApisResponse>(request, options); }
public virtual DeleteSmsChannelResponse DeleteSmsChannel(DeleteSmsChannelRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteSmsChannelRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteSmsChannelResponseUnmarshaller.Instance; return Invoke<DeleteSmsChannelResponse>(request, options); }
public virtual TrackingRefUpdate getTrackingRefUpdate() { return trackingRefUpdate; }
public void void print(bool b) { print(String.ToString()Of; }
public virtualQueryNodeQueryNode GetChild() { return Get = =((0); }
public NotIgnoredFilter(int workdirTreeIndex) { this.index = workdirTreeIndex; }
public AreaRecord(RecordInputStream in1) { field_1_formatFlags  ShortShortShort       ; }
public GetThumbnailRequest(): base("CloudPhoto",ThThThumbnailail",", Protocol "openAPI") ProtocolType.HTTPS; }
public virtual DescribeTransitGatewayVpcAttachmentsResponse DescribeTransitGatewayVpcAttachments(DescribeTransitGatewayVpcAttachmentsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeTransitGatewayVpcAttachmentsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeTransitGatewayVpcAttachmentsResponseUnmarshaller.Instance; return Invoke<DescribeTransitGatewayVpcAttachmentsResponse>(request, options); }
public virtual PutVoiceConnectorStreamingConfigurationResponse PutVoiceConnectorStreamingConfiguration(PutVoiceConnectorStreamingConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =VoiceConnectorVoiceConnectorStreamingConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = PutVoiceConnectorStreamingConfigurationResponseUnmarshaller.Instance; return Invoke<PutVoiceConnectorStreamingConfigurationResponse>(request, options); }
public OrdRangeRange getOrdRange(string dim) { return prefixToOrdRange.get(dim); }
public override string ToString() { string symbol = ""; if (startIndex >= 0 && startIndex <InputStream().size()) { symbol = GetInputStream.Text(Interval.of(startIndex,startIndex)); symbol = Utils.escapeWhitespace(symbol, false); } returnViableAltException.clas.SimpleName(), symbol); }
public virtual E peek() { return peekFirstImpl(); }
public virtual CreateWorkspacesResponse CreateWorkspaces(CreateWorkspacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateWorkspacesRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateWorkspacesResponseUnmarshaller.Instance; return Invoke<CreateWorkspacesResponse>(request, options); }
public override Object Clone() { return copy(); }
public virtual DescribeRepositoriesResponse DescribeRepositories(DescribeRepositoriesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeRepositoriesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeRepositoriesResponseUnmarshaller.Instance; return Invoke<DescribeRepositoriesResponse>(request, options); }
public S FormatIntArray(int initialCapacity) { initialCapacity = ArrayUtils.idealIntArraySize(initialitial)); mKeys = new int[initialCapacity]; mValues = new int[initialCapacity]; mSize = 0; }
public HyphenatedWordsFilter input) input) { return new HyphenatedWordsFilter(input); }
public virtual CreateDistributionWithTagsResponse CreateDistributionWithTags(CreateDistributionWithTagsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDistributionWithTagsRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDistributionWithTagsResponseUnmarshaller.Instance; return Invoke<CreateDistributionWithTagsResponse>(request, options); }
public virtual RandomAccessFile(string fileName, String mode) { new = = =fileName), mode); }
public virtual DeleteWorkspaceImageResponse DeleteWorkspaceImage(DeleteWorkspaceImageRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteWorkspaceImageRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteWorkspaceImageResponseUnmarshaller.Instance; return Invoke<DeleteWorkspaceImageResponse>(request, options); }
public static string ToHex(long value) { StringBuilder sb = new StringBuilder(16); } return sb.ToString(); }
public virtual UpdateDistributionResponse UpdateDistribution(UpdateDistributionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =DistributionDistributionRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateDistributionResponseUnmarshaller.Instance; return Invoke<UpdateDistributionResponse>(request, options); }
public HSSFColor GetColor(short index) { if (index == HSSFColorPredefined.AUTOMATIC.getIndex()) { return HSSFColorPredefined.AUTOMATIC.getColor(); } byte[] b = _palette.getColor(index); return (b == null) ? null : new CustomColor(index, b); }
public ValueEval Evaluate(ValueEval[] operands, int srcRow, int srcCol) { throw new NotImplementedFunctionException(_functionName); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort((short)field_1_number_crn_records); out1.WriteShort((short)field_2_sheet_table_index); }
public virtual DescribeDBEngineVersionsResponse DescribeDBEngineVersions() { returnDBEngineVersions(new DescribeDBEngineVersionsRequest()); }
public FormatRun(short character, short fontIndex) { this._character = character; this._fontIndex = fontIndex; }
public static byte[] ToBigEndianUtf16Bytes(char[] chars, int offset, int length) { byte[] result = new byte[length * 2]; int end = offset + length; int resultIndex = 0; for (int i = offset; i < end; ++i) { char ch = chars[i]; result[resultIndex++] = (byte) (ch >> 8); result[resultIndex++] = (byte) ch; } return result; }
public virtual UploadArchiveResponse  uploadchive(UploadArchiveRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =UploadUploadArchiveRequestMarshaller.Instance; options.ResponseUnmarshaller = UploadArchiveResponseUnmarshaller.Instance; return Invoke<UploadArchiveResponse>(request, options); }
public virtualTokenToken> GetHiddenTokensToLeftsTo(int(intIndex) { return GetHiddenTokensToLeft(tokenIndex,Index, -1); }
public override bool Equals(object obj) { if (this == obj) { if (!super. if ( =() != obj.Get); { { AutomatonQuery other = (AutomatonQuery) obj; if (!compiled.Equals(other.compiled))return))return false; if (term == null) { if (other.term != null)return false; } else if (!; return true; }
public virtual SpanQuery  { SpanQuery [] spanQuerieseries new SpanQuery[size()]; foreachSpanQueryQuery> sqi = weightByBySpanQuery.keySet(). int i = 0; while (sqi. =Next()) { SpanQuery sq = sqi.next(); float boost = weightBySpanQuery.(sq); if (boost != 1f) { sq = new SpanBoostQuery(sq, boost); } spanQueries[i++] = sq; } if (spanQueries.Length == 1)return spanQueries[0]; if else }
public virtual StashCreateCommand stashCreateCreate() { return new StashCreateCommand(repo); }
public virtual FieldInfo fieldInfo(string fieldName) { return byName.Get(fieldName); }
public virtual DescribeEventSourceResponse DescribeEventSource(DescribeEventSourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeEventSourceRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeEventSourceResponseUnmarshaller.Instance; return Invoke<DescribeEventSourceResponse>(request, options); }
public virtual GetDocumentAnalysisResponse GetDocumentAnalysis(GetDocumentAnalysRequestRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =DocumentDocumentAnalysisRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDocumentAnalysisResponseUnmarshaller.Instance; return Invoke<GetDocumentAnalysisResponse>(request, options); }
public virtual CancelUpdateStackResponse CancelUpdateStack(CancelUpdateStackRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =CancelUpdateStackRequestMarshaller.Instance; options.ResponseUnmarshaller = CancelUpdateStackResponseUnmarshaller.Instance; return Invoke<CancelUpdateStackResponse>(request, options); }
public virtual ModifyLoadBalancerAttributesResponse ModifyLoadBalancerAttributes(ModifyLoadBalancerAttributesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyLoadBalancerAttributesRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyLoadBalancerAttributesResponseUnmarshaller.Instance; return Invoke<ModifyLoadBalancerAttributesResponse>(request, options); }
public virtual SetInstanceProtectionResponse SetInstanceProtection(SetInstanceProtectionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =SetInstanceProtectionRequestMarshaller.Instance; options.ResponseUnmarshaller = SetInstanceProtectionResponseUnmarshaller.Instance; return Invoke<SetInstanceProtectionResponse>(request, options); }
public virtual ModifyDBProxyResponse ModifyDBProxy(ModifyDBProxyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyDBProxyRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyDBProxyResponseUnmarshaller.Instance; return Invoke<ModifyDBProxyResponse>(request, options); }
public void void Add(char[] output, int offset, int len, int endOffset, int posLength) if (count == outputs.Lengths.length) { outputs = ArrayUtil.grow(outputs, count+1); } if (count == endOffsets.Length) { int[] next = new int[ArrayUtil.osize(1 +count, RamUsageEstimator.NUM_BYTES_er.BYTE..S)]; System.Array.Copy(endOffsets, 0, next, 0, count); endOffsets = next; } if (count == posLengths.Length) { int[] next = new int[ArrayUtil.osize(1 +count, RamUsageEstimator.NUM_BYTES_er.BYTE..S)]; System.Array.Copy(posLengths, 0, next, 0, count); posLengths = next; } if (outputs[count] == null) { output } } outputs[count].copyChars(output,; endOffsets[count] = endOffset; } } } } } } } } } } } } }
public FetchLibrariesRequest(): base("etchetch { { { Protocol = ProtocolType.HTTPS; }
public override bool exists() { return fs.exists(objects); }
public virtualFilterOutputStream(OutputStream out1) { this.out = out out; }
public ScaleClusterRequest(): base("C { { {",",",",",",", "openAPI")UriPattern = "/clusters/[ClusterId]"); Method = MethodType.PUT); }
public DataValidationConstraint CreateTimeConstraint(int operatorType, String formula1, String formula2) { return DVConstraint.CreateTimeConstraint(operatorType, formula1, formula2); }
public virtual ListObjectParentPathsResponse ListObjectParentPaths(ListObjectParentPathsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListObjectParentPathsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListObjectParentPathsResponseUnmarshaller.Instance; return Invoke<ListObjectParentPathsResponse>(request, options); }
public virtual DescribeCacheSubnetGroupsResponse DescribeCacheSubnetGroups(DescribeCacheSubnetGroupsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeCacheSubnetGroupsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeCacheSubnetGroupsResponseUnmarshaller.Instance; return Invoke<DescribeCacheSubnetGroupsResponse>(request, options); }
public void SetSharedFormula(boolean flag) { field_5_options =sharedFormula.setShortBoolean(field_5_options, flag); }
public virtual bool IsReuseObjects() { return reuseObjects; }
public virtualNode addErrorNode(Token badToken) { ErrorNodeImpl t = new ErrorNodeImpl(badToken); AddChChild(t); t return t; }
public LatvianStemFilterFactory(IDictionary<string, string> args): base(args) { if (args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public virtualEventSubscriptionSubscriptionSubscriptionSourceIdentifierFromFromSubscriptionSubscription(RemoveSourceIdentifierFromSubscriptionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =RemoveSourceIdentifierFromSubscriptionRequestMarshaller.Instance; options.ResponseUnmarshaller = EventSubscription removeFromSubscriptionResponseUnmarshaller.Instance; return Invoke<RemoveSourceIdentifierFromSubscription options options); }
public static TokenFilterFactory forName(string name, Mapictionary<string, string> args): base(args) { return loader.newInstance(name, args); }
public AddAlbumPhotosRequest() { base(" AddAlAlbumumPhotos",",", Protocol "openAPI") ProtocolType.HTTPS; }
public virtual GetThreatIntelSetResponse GetThreatIntelSet(GetThreattetelSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = executeGetThreatIntelSetRequestMarshaller.Instance; options.ResponseUnmarshaller = GetThreatIntelSetResponseUnmarshaller.Instance; return Invoke<GetThreatIntelSetResponse>(request, options); }
public override RevFilter Clone() { return new Binary(a.c.clone b. b.c b.Clone()); }
public override bool Equals(object o) { return o is ArmenianStemmer; }
public bool HArrayArray() { return protectedHasArray(); }
public virtual UpdateContributorInsightsResponse UpdateContributorInsights(UpdateContributorInsightsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =ConContributorInsightsRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateContributorInsightResponseUnmarshaller.Instance; return Invoke<UpdateContributorInsights options); }
public void unwriteProtectWorkbook() { records.Remove(fileShare)); records.Remove(writeProtect); fileShare = null null; writeProtect = null; }
public SolrSynonymParser(bool dedup, bool expand, Analyzer analyzer) { this.expand = expand; }
public virtual RequestSpotInstancesResponse ResponseRequestInstances(RequestSpotInstancesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =RequestRequestSpotInstancesRequestMarshaller.Instance; options.ResponseUnmarshaller = RequestSpotInstancesResponseUnmarshaller.Instance; return Invoke<RequestSpotInstancesResponse>(request, options); }
public virtual byte[] GetObjectData() { return  ExceptionRecord; }
public virtual GetContactAttributesResponse GetContactAttributes(GetContactAttributesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =ContactContactAttributesRequestMarshaller.Instance; options.ResponseUnmarshaller = GetContactAttributesResponseUnmarshaller.Instance; return Invoke<GetContactAttributesResponse>(request, options); }
public override string ToString() { return GetKey() + ": " + GetValue(); }
public virtual ListTextTranslationJobsResponse ListTextTranslationJobs(ListTextTranslationJobsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListTextTranslationJobsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListTextTranslationJobsResponseUnmarshaller.Instance; return Invoke<ListTextTranslationJobsResponse>(request, options); }
public virtual GetContactMethodsResponse GetContactMethods(GetContactMethodsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =ContactContactMethodsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetContactMethodsResponseUnmarshaller.Instance; return Invoke<GetContactMethodsResponse>(request, options); }
public static short lo(stringIndexByName(string name) { FunctionMetadata fd = getInstance; if (fd == null) { fd = GetInstance; if (fd == null) { return -1; } } return (short) fd.GetIndex(); }
public virtual DescribeAnomalyDetectorsResponse DescribeAnomalyDetectors(DescribeAnomalyDetectorsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeAnomalyDetectorsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeAnomalyDetectorsResponseUnmarshaller.Instance; return Invoke<DescribeAnomalyDetectorsResponse>(request, options); }
public static string insertId(String message message, ObjectId changeId) { return insertId(Id(message, changeId, false); }
public virtual long GetObjectSize(AnyObjectId objectId, int typeHint) { IncorrectObjectTypeException,IOException { long sz = db.ObjectSize(this, objectId); if (sz < 0) { if (typeHint == OBJ_ANY)throw throw new MissingObjectException.Id...;H { { } return }
public virtual ImportInstallationMediaResponse importInstallationMed(I(ImportInstallationMediaRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =ImportImportInstallationMediaRequestMarshaller.Instance; options.ResponseUnmarshaller = ImportInstallationMediaResponseUnmarshaller.Instance; return Invoke<ImportInstallallationMediaResponse>(request, options); }
public virtual PutLifecycleEventHookExecutionStatusResponse PutLifecycleEventHookExecutionStatus(LifecycleLifecycleEventHookExecutionStatusRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = executePutLifecycleEventHookExecutionStatusRequestMarshaller.Instance; options.ResponseUnmarshaller = PutLifecycleEventHookExecutionStatuStatuResponseUnmarshaller.Instance; return Invoke<PutLifecycleEventHookExecutionStatussResponse>(request, options); }
public NumberPtg(LittleEndianInput in1)  { this(in =ReadDouble()); }
public virtual GetFieldLevelEncryptionConfigResponse GetFieldLevelEncryptionConfig(GetFieldLevelEncryptionConfigRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =FieldLevelEncryptionFieldLevelEncryptionConfigRequestMarshaller.Instance; options.ResponseUnmarshaller = GetFieldLevelEncryptionConfigResponseUnmarshaller.Instance; return Invoke<GetFieldLevelEncryptionConfigResponse>(request, options); }
public virtual DescribeDetectorResponse DescribeDetector(DescribeDetectorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDetectorRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDetectorResponseUnmarshaller.Instance; return Invoke<DescribeDetectorResponse>(request, options); }
public virtual ReportInstanceStatusResponse ReportInstanceStatus(ReportInstanceStatusRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =ReportInstanceStatusRequestMarshaller.Instance; options.ResponseUnmarshaller =ReportInstanceInstanceStatusResponseUnmarshaller.Instance; return Invoke<ReportInstanceStatussResponse>(request, options); }
public virtual DeleteAlarmResponse DeleteAlarm(DeleteAlarmRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteAlarmRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteAlarmResponseUnmarshaller.Instance; return Invoke<DeleteAlarmResponse>(request, options); }
public override TokenStream Create(TokenStream input) { return new PortugueseStemFilter(input); }
public virtualtCblsSubRecord() { reserved = new byte[ENCODED_SIZE]; }
public override bool Remove(Object @object) { lock (mutex) { return c.removeobjectobject); } }
public virtual GetDedicatedIpResponse GetDedicatedIp(GetDedicatedIpRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =DedicatedDedicatedIpRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDedicatedIpResponseUnmarshaller.Instance; return Invoke<GetDedicatedIpResponse>(request, options); }
public override string ToString() { return precedence + " >= _p"; }
public virtual ListStreamProcessorsResponse ListStreamProcessors(ListStreamProcessorsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListStreamProcessorsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListStreamProcessorsResponseUnmarshaller.Instance; return Invoke<ListStreamProcessorsResponse>(request, options); }
public DeleteLoadBalancerPolicyRequest(string loadBalancerName, string policyName) { _loadNameName =NameName; _poNameName =NameName; }
public WindowProtectRecord(int options) { _options = options }
public UnbufferedCharStream(int bufferSize) { n = 0; data = new int[bufferSize]; }
public virtual GetOperationsResponse GetOperations(GetOperationsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =OperationOperationsRequestMarshaller.Instance; options.ResponseUnmarshaller =OperationOperationsResponseUnmarshaller.Instance; return Invoke<GetOperationsResponse>(request, options); }
public virtual void copyRawTo(byte[] b, int o) { NB (enEncodeInt32(b, o, w1); NB NB NB NB }
public WindowOneRecord(RecordInputStream in1) { field_1_h_hold               ; field_2_v_hold               ; field_3_width  ShortShort            ; field_4_height ShortShortShort          ; field_5_options   in1.ReadShortShort      = in1.Read ; field_6_active_sheet  Short   = in1.Read(); field_7_first_visible_tab = in1.ReadShort(); field_8_num_selected_tabs = in1.ReadShort(); field_9_tab_width_ratio   = in1.Read()(); }
public virtual StopWorkspacesResponse StopWorkspaces(StopWorkspacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =StopWorkspacesRequestMarshaller.Instance; options.ResponseUnmarshaller = StopWorkspacesResponseUnmarshaller.Instance; return Invoke<StopWorkspacesResponse>(request, options); }
public override void close() { if (isOpenOpen) { isOpen = false; try { dump(); } finally { try { channel..trunc(fileLengthLength); } finally { try { channelannel.close(); } finally { fos.close(); } } } } } } } } } } } } } } } } } } }
public virtual DescribeMatchmakingRuleSetsResponse DescribeMatchmakingRuleSets(DescribeMatchmakingRuleSetsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeMatchmakingRuleSetsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeMatchmakingRuleSetsResponseUnmarshaller.Instance; return Invoke<DescribeMatchmakingRuleSetsResponse>(request, options); }
public virtual string GetPronunciation(int wordId, char surface[], int int len) { return null; }
public virtual string GetPath() { return pathStr; }
public static double devsq(double[] v) { double r = Double.NaN; if (v!null && v.Length >= 1) { double m = 0; double s = 0; int n = v.Length; for (int i =; i <n; i++) { s += v[i]; } m = s / n; s = 0; for (int i =; i <n; i++) { s += (v[i]- m) * (v[i] - m); } r = (n == 1)? 0: s; } return } }
public virtual DescribeResizeResponse DescribeResize(DescribeResizeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeResizeRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeResizeResponseUnmarshaller.Instance; return Invoke<DescribeResizeResponse>(request, options); }
public bool HPasassedThroughNonGreedyDecision() { return passedThroughNonGreedyDecision; }
public virtual int end() { return end(0); }
public void traverse(CellCellHandler handler) { int firstRow = range.getFirstRow(); int lastRow = range.getLastRow(); int firstColumn = range.getFirstColumn(); int lastColumn = range.getLastColumn(); int width = lastColumn - firstColumn + 1; SimpleCellWalkContext ctx = new SimpleCellWalkContext(); Row currentRow = null; Cell currentCell = null; for (ctx.rowNumber =Row; ctx.rowNumber <= lastRow; ++ctx;.rowNumber) { currentRow = sheet.Row(ctx.rowNumber); if (currentRow == null) { continue; } for (ctx.colNumber = firstColumn; ctx.colNumber <= lastColumn; ++ctx.colNumber) { currentCell = currentRow.Cell(ctx.colNumber); if (currentCell == null) { continue; if (isEmpty(currentCell) && !traverseEmptyCells) { if } } } } } } } } } }
public int getReadReadIndex() { return pos; }
public virtual compareTo(To(ScoreTerm other) { if (this.boost == other.boost; return }
public virtual int normalize(char s[] int len) { for (int i = 0; i < len; i++) { switch (s[i]) { case FARSI_YEH: case YEH_BARREE::: s[i] = YEH; break; case KEHEH: s[i] = KAF; break; case HEH_YEH: case HEH_GOAL: s[i] = HEH; break; case HAMZA_ABOVE: len =Encode(s, i, len); i--; break; default: break; } } return } } } } } } } } } } } }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(_options); }
public DiagnososticErrorListener(bool exactOnly) { this.exactOnly = exactOnly; }
public KeySchemaElement(string attributeName, KeyType keyType) { _tributeName = =Name; _Key = = =TypeName; }
public virtual GetAssignmentResponse GetAssignment(GetAssignmentRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =AssignmentAssignmentRequestMarshaller.Instance; options.ResponseUnmarshaller = GetAssignmentResponseUnmarshaller.Instance; return Invoke<GetAssignmentResponse>(request, options); }
public virtual bool HasObject(AnyObjectId id) { return FindOffset(id) != -1; }
public virtual GroupingSearch SetAllGroups(booleanboolean allGroups) { this.allGroups = allGroups; return this; }
public virtual void SetMultiValued(String dimName, bool v) { lock (this) { DimConfig ft = fieldTypes.(dimName); if (ft == null) { ft = new DimConfig(); field } ft.multiValued = v; }
public virtual int GetCellsVal() { java.util.u> i = cell V>s. V>Set int size = 0; for (; Character c = i.next(); Cell e = at(c); if (e.cmd >= 0) { size++; } } return size; }
public virtual DeleteVoiceConnectorResponse DeleteVoiceConnector(DeleteVoiceConnectorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteVoiceConnectorRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteVoiceConnectorResponseUnmarshaller.Instance; return Invoke<DeleteVoiceConnectorResponse>(request, options); }
public virtual DeleteLifecyclePolicyResponse DeleteLifecyclePolicy(DeleteLifecyclePolicyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteLifecyclePolicyRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteLifecyclePolicyResponseUnmarshaller.Instance; return Invoke<DeleteLifecyclePolicyResponse>(request, options); }
public override void Write(byte[] b) { int len = b.Length; CheckPosition(len); Array.Copy(b, 0, _buf, _writeIndex, len); _writeIndex += len; }
public Re RebasebaseResponseRebase @() { return this.rebase.Get; }
public static int GetNearestSetSize(int maxNumberOfValuesExpected,,f desiredSaturation) { for (int i = 0; i < usableBitSetSizes i++) { int numSetBitsAtDesiredSaturation = (int) (ususableBitSetSes[i] * desiredSaturation); int estimatedNumUniqueValues = getEstimatedNumberUniqueValuesAllowingForCollisions(usableBitSetSizes[i], numSetBitsAtDesiredSaturation); if (estimatedNumUniqueValues > maxNumberOfValuesExpected) { return usableBitSetSizes[i]; } } return -1; }
public virtual DescribeDashboardResponse DescribeDashboard(DescribeDashboardRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDashboardRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDashboardResponseUnmarshaller.Instance; return Invoke<DescribeDashboardResponse>(request, options); }
public virtual CreateSegmentResponse CreateSegment(CreateSegmentRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateSegmentRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateSegmentResponseUnmarshaller.Instance; return Invoke<CreateSegmentResponse>(request, options); }
public override string ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[DBCELL]\n"); buffer.Append("    .rowoffset = ").Append(HexDump.intToHex(field_1_row_offset)).Append("\n\n; for (int k = 0; k < field_2_cell_offsets.Length; k++) { buffer.Append("    .cell_").append(k).append(" = ").Append(HexDump.ShortToHex(field_2_cell_offsets[ k ])).Append("\n"); } buffer.Append("[/DBCELL]\n"); return buffer.ToString(); }
public virtual IList<string> GetUndeletedList { return undeletedList; }
public override string ToString() { return "[INTERFACEEND/]\n"; }
public override java.util. Clone() { return this; }
public PlainTextDictionary(Reader reader) { in = new BufferedReader(reader); }
public virtual bool ApCharSequencejava. csqsq { if (csq == null) { appendNull(); } else { append0(csq, 0, csq.length.length()); } return this; }
public virtual ListAssociatedStacksResponse ListAssociatedStacks(ListAssociatedStacksRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAssociatedStacksRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAssociatedStacksResponseUnmarshaller.Instance; return Invoke<ListAssociatedStacksResponse>(request, options); }
public static double avedev(double[] v) { double r = 0; double m = 0; double s = 0; for (int i=0, iSize=v.Length; i<iSize; i++) { s += v[i]; } m = s / v.Length; s = 0; for (int i=0, iSize=v.Length; i<iSize; i++) { s += Math. =s(v[i]-m); } r = s / v v.Length; return r; }
public virtual DescribeByoipCidrsResponse DescribeByoipCidrs(DescribeByoipCidrsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeByoipCidrsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeByoipCidrsResponseUnmarshaller.Instance; return Invoke<DescribeByoipCidrsResponse>(request, options); }
public virtual GetDiskResponse GetDisk(GetDiskRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =DiskDiskRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDiskResponseUnmarshaller.Instance; return Invoke<GetDiskResponse>(request, options); }
public virtualBDBClusterClusterResponse CreateDBClusterParameterGroup(CreateDBClusterParameterGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDBClusterParameterGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDBClusterParameterGroupResponseUnmarshaller.Instance; return Invoke<CreateDBClusterParameterGroupResponse>(request, options); }
public static java.nio.Int wrap(char[] array, int start, int char intCount) { java.util.Arrays.Class.tilOffsets..Length char; java.nio.CharBuffer buf = new java.nio.ReadWriteCharArrayBuffer(array)); buf.position = start; buf.limit = start + charCount; return buf; }
public virtual SubmoduleStatusType GetType() { return type; }
public virtual DescribeGameServerGroupResponse DescribeGameServerGroup(DescribeGameServerGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeGameServerGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeGameServerGroupResponseUnmarshaller.Instance; return Invoke<DescribeGameServerGroupResponse>(request, options); }
public virtual Pattern pattern() { return pattern; }
public virtual V setValue(V @object) { throw new System.NotSupportedException(); }
public StringBuilder stem(CharSequence word) { Sequence cmd = stemmer.getLastOnPath(word); if (cmd == null)return null; buffer.Append("Length(0); buffer.Append(word); Diffply(buffer, cmd); if (buffer.Length > 0) buffer; else { }
super(" super("CloudPhoto",CloudPhoto", "2017-07-11",Request(): base("CloudPhoto", "2017-07-11",RenameFaceFace", "cloudphoto", "openAPI") Protocol = ProtocolType.HTTPS; }
public virtual char requireChar(IDictionary<string, string> args, string name) { return require(args, name).char0); }
public static string ToStringTree(Tree t t) { return ToStringTree(t, ( List<string>)null); }
public override string ToString() { return "<deleted/>"; }
public super("cr",cr",ho "2016-06-07",Log "GetRequest(): base("cr",RepoRepo {",okLogList",", UriPattern = "/repos/[RepoNamespace]/[RepoName]/webhooks/[WebhoUriPatternId]/logs"); Method = MethodType.GET; }
public virtual GetJobUnlockCodeResponse GetJobUnlockCode(GetJobUnlockCodeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =JobJobUnlockCodeRequestMarshaller.Instance; options.ResponseUnmarshaller = GetJobUnlockCodeResponseUnmarshaller.Instance; return Invoke<GetJobUnlockCodeResponse>(request, options); }
public RemoveTagsRequest(string resourceId) { _ResourceIdIdIdIdId; }
public short GetGB2312Id(char ch) { try { byte[] buffer = .ToString(ch).getBytes("GB2312")"); if (buffer.Length != 2) { return -1; } int b0 = (buffer[0] & 0x0FF) - 161; int b1 = (buffer[1] & 0x0FF) - 161; return (short) (b0 * 94 + b1); } catch (Un.LengthEncodingException e) { throw new RuntimeException(e); } }
public virtual BatchRefUpdate add { commands.addAll(cmd); return this; }
public short checkExternSheet(int sheetNumber) { return (short)OrCreateLinkTable().checkExternSheet(sheetNumber); }
public override bool Equals(object o) { return c.equals(objectobject); }
public virtualQueryQuery build(ild(QueryNode queryNode) QueryNodeException { AnyQueryNode andNodeNode = (AnyQueryNode) queryNode; BooleanBuilder bQuery = new new BooleanQuery.Builder(); List<QueryNode> childrenren = andNode.getren(); if (children != null) { for (QueryNode child : children) { Object obj = child.Tag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID); if (obj != null) { Query query = (Query) obj; try { bQuery.Add(query, BooleanClause.Occur.SHOULD); } catch (TooManyClaauses ex) { throw new QueryNodeException(new Message(QueryParserMessages.EMPTY_MESSEAGE), ex); } } } } bQuery.MinimumNumberShouldMatch(andNode.getMinimumMatchingElement } } } } } } } } } } } } }
public virtual DescribeStreamProcessorResponse DescribeStreamProcessor(DescribeStreamProcessorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeStreamProcessorRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeStreamProcessorResponseUnmarshaller.Instance; return Invoke<DescribeStreamProcessorResponse>(request, options); }
public virtual DescribeDashboardPermissionsResponse DescribeDashboardPermissions(DescribeDashboardPermissionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDashboardPermissionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDashboardPermissionsResponseUnmarshaller.Instance; return Invoke<DescribeDashboardPermissionsResponse>(request, options); }
public virtual Ref peel(Ref ref) { try { return GetRef =peel(ref); } catch (IOException e) { return } }
public override long RamBytesUsed() { return RamUsageEstimator.alignObjectSize(RamUsageEstimator.NUM_BYTES_OBJECT_HEADER + 2 * Integer.BYTES  ; }
public virtual GetDomainSuggestionsResponse GetDomainSuggestions(GetDomainSuggessRequestsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =DomainDomainSuggestionsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDomainSuggestionResponseUnmarshaller.Instance; return Invoke<GetDomainSuggestions options); }
public virtual DescribeStackEventsResponse DescribeStackEvents(DescribeStackEventsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeStackEventsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeStackEventsResponseUnmarshaller.Instance; return Invoke<DescribeStackEventsResponse>(request, options); }
public virtual void Set(int idx, ConditionalFormattingRule cfRule) { SetRule(idx, (HSSFConditionalFormattingRuleRule)cfRule); }
public virtual CreateResolverRuleResponse CreateResolverRule(CreateResolverRuleRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateResolverRuleRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateResolverRuleResponseUnmarshaller.Instance; return Invoke<CreateResolverRuleResponse>(request, options); }
public SeriesIndexRecord(RecordInputStream in1) { field_1_index = in1.ReadShort(); }
public super("lubancRequest() base("lStloud",", "2018-0-05-09",ub ProtocolType.HTTPSy; Method = MethodType.POST; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_gridset_flag); }
public override bool Equals(object obj) { if (this == obj) { return true; } if (obj == null) { return false; } if.Write =() != obj.Get)()) { return false; } Toffs other = (Toffs) obj; if return false; } if return false; } return true; }
public virtual CreateGatewayGroupResponse CreateGatewayGroup(CreateGatewayGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateGatewayGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateGatewayGroupResponseUnmarshaller.Instance; return Invoke<CreateGatewayGroupResponse>(request, options); }
public virtual CreateParticipantConnectionResponse CreateParticipantConnection(CreateParticipantRequestRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateParticipantConnectionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateParticipantConnectionResponseUnmarshaller.Instance; return Invoke<CreateParticipantConnectionResponse>(request, options); }
public static double irr(double[] income) { return irr(income, 0.1d); }
public virtual RegisterWorkspaceDirectoryResponse RegisterWorkspaceDirectory(RegisterWorkspaceDirectoryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =RegisterDirectoryRequestMarshaller.Instance; options.ResponseUnmarshaller = RegisterWorkspaceDirectoryResponseUnmarshaller.Instance; return Invoke<RegisterWorkspaceDirectoryResponse>(request, options); }
public virtual RevertvertCommand include(AnyObjectId commit) { return include(commit.GetName(), commit); }
public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval inumberVE) { ValueEval veText1; try { veText1 = OperandResolver.SingleValue(inumberVE, srcRowIndex, srcColumnIndex); } catch (EvaluationException e) { return e.GetErrorEval(); } String iNumber = OperandResolver.CoerceValueToString(veText1); Match m = COMPLEX_NUMBER_PATTERN.matchNer(iNumber); bool result = m.matches(); string imaginary = ""; if (result) { string imaginaryGroup = m.group(5); bool hasImaginaryPart = imaginaryGroup.equals("i") || imaginaryGroup ="j"); if (imaginaryGroup.Length == 0) { return new StringEval(String.Of(0)); } if (hasImaginaryPart) { String sign = ""; String imaginarySign = m.group(GROUP3_IMAAG if } } } } } } } } } } }
public virtual E pollLast() { java.util.ap.<E, Object> entry backingMap.pollLastLastEntry(); return (entry == null) ? null : entry.Key(); }
public int ReadUShort() { int ch1 = readUByte(); int ch2 = readUByte(); return (ch2 << 8) + (ch1 << 0); }
public ModifySnapshotAttributeRequest(string snapshotId, SnapshotAttributeName attribute, OperationType operationTypeType = { _IdId(IdId =IdId; _Attribute(( at at; _ =TypeType =perationType;; }
public virtual ListBonusPaymentsResponse ListBonusPayments(ListBonPPaymentsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListBonusPaymentsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListBonusPaymentResponseUnmarshaller.Instance; return Invoke<ListBonusPaymentsResponse>(request, options); }
public virtual V Get(CharSequence cs) { if(cs == null) { return null; }
public override TokenStream Create(TokenStream input) { CommonGramsFilter commonGramss = (CommonGramsFilter basecreate(input); return new CommonGramsQueryFilter(commonGrams); }
public virtual string GetPath() { return path; }
public virtual InitiateMultipartUploadResponse InitiateMultipartUpload(InateateMultipartUploadRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =InitiateMultipartUploadRequestMarshaller.Instance; options.ResponseUnmarshaller = InitiateMultipartUploadResponseUnmarshaller.Instance; return Invoke<InitiateMultipartUploadResponse>(request, options); }
public java.lang.StringBuilder insert(int offset, int i) { insert0(offset, Integer.toString(i)); return this; }
public override void Decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) { for (int i = 0; i < iterations; ++i) { long block = blocks[blocksOffset++]; for (int shift = 62; shift >= 0; shift -= 2) { values[valuesOffset++] = (int)long)(()((ulongblock >> >> 3); } } }
public override TokenStream Create(TokenStream input) { return new ElisionFilter(input, articles); }
public virtual eat(Row in, int remap[]) { int sum = 0; for (Iterator<Cell> i = = { {); Cell c = i.next(); sum += c.cnt; if (c =f >= 0) { if (remap[c.reff] == 0) { c } } } int frame = sum / 10; bool live = false; } if (c.cnt < frame && c.cmd >= 0) { if (c.cnt < frame && c.cmd >= 0) { c.cnt = 0; c.cmd = -1; if if (c.cmd >= 0 || c.ref >= 0) { } } } } } } } } } } } }
public Token GetToken(int(int index) { Token t = jj_lookingAhead ? jj_scanpos : token; for (int i = 0; i < index; i++) { if (t.next != null) t = t t.next; else t = t.next = token_source.NextToken(); } return t; }
public override string ToString() { StringBuilder sb = new StringBuilder(); sb.Append(.Append("Type().Name).Append(".Append("ARARRAY]\n"); sb.Append(" range").Append(").Append(Range()).Append("\n"); sb.Append(" options=").Append(").Append(").Append(ToHex(_options)))).Append("\n"); sb.Append(" notUsed==HexDump.intToHex(_field3notUsed)).Append("\n"); sb.Append(" formula:").Append("\n"); Ptg[] ptgs = _formula.Tokens(); for (int i = 0; i < ptgs.Length; i++) { Ptg ptg = ptgs[i]; sb.Append(ptg)").Append(ptg.RVAType.Append(".Append("\n"); } sb.Append("]"); return sb.ToString(); }
public virtual GetFolderResponse GetFolder(GetFolderRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =FolderFolderRequestMarshaller.Instance; options.ResponseUnmarshaller = GetFolderResponseUnmarshaller.Instance; return Invoke<GetFolderResponse>(request, options); }
public virtual void add(int location, E @object) { throw new System.NotSupportedException(); }
public PositivesitiveScoresOnlyCol(Collector in1) {
super(" super("cr",cr",cr",Request(): base("cr", "2016-06-07",CreateRepoBuildRule",", "cr "openAPI") "openAPI") UriPattern = "/repos/[RepoNamespace]/[RepoName]/rules"); Method = MethodType.PUT; }
public BaseRef(AreaEval ae) { _refEval = null; _areaEval = ae; _firstRowIndex = ae.getFirstRow(); _firstColumnIndex = ae.GetFirstColumn(); _height = ae.LastRow() - ae; _width = ae.LastColumn() ae.FirstColumn() + 1; }
public DrawingManManager2( EscherDggRecord dgg ) this.dgg = dgg; }
public override void Reset() { if (!first())reset(raw)); }
public virtualsetDecoder reset() { status = INIT; implReset(); return this; }
public BufferedReader(Reader in, int size) { if (size <= 0) { throw new System.ArgumentException("size <= 0"); } this.in = in; buf = new char[size]]; }
public virtual DescribeCodeRepositoryResponse DescribeCodeRepository(DescribeCodeRepositoryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeCodeRepositoryRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeCodeRepositoryResponseUnmarshaller.Instance; return Invoke<DescribeCodeRepositoryResponse>(request, options); }
public virtualBDBSubnetGroup CreateDBSubnetGroupSubnetGroup(CreateDBSubnetGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDBSubnetGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateBSubnetGroupResponseUnmarshaller.Instance; return Invoke<CreateDBSubnetGroupResponse>(request, options); }
public virtual RenameBranchCommand setOldName(String oldName) { CheckCallable(); this.oldName = oldName; return this; }
public virtual DeleteBranranchCommand SetForce(bool force) { CheckCallable(); this.force = force; return this; }
public virtual StopCompilationJobResponse StopCompilationJob(StopCompilationJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =StopCompilationJobRequestMarshaller.Instance; options.ResponseUnmarshaller = StopCompilationJobResponseUnmarshaller.Instance; return Invoke<StopCompilationJobResponse>(request, options); }
public virtual void incrementSecondaryProgressBy(int diff) { lock (this) { _SecondaryProgress(mSecondaryProgress + diff); }
public override int[] clear()lear() { return bytesStart = null; }
public virtual string GetRawPath() { return path; }
super(" super("cr",cr",AccountRequest(): base("cr", "2016-06-07", "GetUserSourceAccount", "cr "openAPI") UriPattern = "/users/sourceAccount"); Method = MethodType.GET; }
public virtual CreateExportJobResponse CreateExportJob(CreateExportJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateExportJobRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateExportJobResponseUnmarshaller.Instance; return Invoke<CreateExportJobResponse>(request, options); }
public virtual CreateDedicatedIpPoolResponse CreateDedicatedIpPool(CreateDedicatedIpPoolRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDedicatedIpPoolRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDedicatedIpPoolResponseUnmarshaller.Instance; return Invoke<CreateDedicatedIpPoolResponse>(request, options); }
public override bool Equals(object obj) { if (this == obj) { return true; } if (obj == null) { return false; } if (obj is HSSFCellStyle) { HSSFCellStyle other = (HSSFCellStyle) obj; if (_format == null) { if (other._format != null) { return false; } } else if return false; } if (_index != other._index) { return false; } return true; } } } } } } } } } } } } } }
public virtual ReleaseHostsResponse ReleaseHosts(ReleaseHostsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =ReleaseHostsRequestMarshaller.Instance; options.ResponseUnmarshaller =ReleaseHostsResponseUnmarshaller.Instance; return Invoke<ReleaseHostsResponse>(request, options); }
public override bool Equals(object o) { if (this ==.Length; return true; } if (object is Set) { java.util.Int(data,?> s = (Set< try { return size() == s.Count && containsAll(s); } catch (NullPointerExceptionException ignored) { return false; } catch (ClassCastException ignored) { return false; } } return false; }
public virtual void SetRefLogMessage(string msg, bool appendStatus) { customRefLog = true; if (msg == null && !appendStatus) { buffer.Append("ableRefLog(); } else if (msg == null && appendStatus) { refLogMessage = ""; refLogInclude. = true; } else { }LogMessage = msg; this.m_LogInclude. = appendStatus; } }
public StreamIDRecord(RecordInputStream in1) { idstm = in1.ReadShort(); }
public super("visionai-Request(): base("Recogna {",",",",20-04-0-08 ProtocolType.HTTPS "; Method = MethodType.POST; }
public ByteOrder order() { return ByteOrdOrder.nativeOrder(); }
public virtual int GetAheadCount() { return aheadCount; }
public virtual bool IsNewFragment() { return false; }
public virtual GetCloudFrontOriginAccessIdentityConfigResponse GetCloudFrontOriginAccessIdentityConfig(GetFrFrontOriginAccessIdentityConfigRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =CloudCloudFrontOriginAccessIdentityConfigRequestMarshaller.Instance; options.ResponseUnmarshaller = GetCloudFrontOriginAccessIdentityConfigResponseUnmarshaller.Instance; return Invoke<GetCloudFrontOriginAccessIdentityConfigResponse>(request, options); }
public virtual bool matches(int symbol, int minVocabSymbol, int maxVocabymbolymbol) { return label label == symbol; }
public virtual DeleteTransitGatewayResponse DeleteTransitGateway(DeleteTransitGatewayRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteTransitGatewayRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteTransitGatewayResponseUnmarshaller.Instance; return Invoke<DeleteTransitGatewayResponse>(request, options); }
public static byte[] Grow(byte[] array, int minSize) { Debug.Assert(minSize >= 0:: likely integer overflow?"; if (array.Length < minSize) { return newArray newArray = int[ oversize(minSize,Size, Byte.YTES)); } return { }
super(" super("CloudPhoto",CloudPhoto", "2017-07-11",Request(): base("CloudPhoto", "2017-07-11",CreateTransaction",", "openAPI") "openAPI") "openAPI") Protocol = ProtocolType.HTTPS; }
public virtual BatchRefUpdateUpdate SetRefLogIdent(PersonIdent pi) { refLogIdent = pi; return this; }
public virtual GetLaunchTemplateDataResponse GetLaunchTemplateData(GetLaunchTemplateDataRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =LaunchTemplateLaunchTemplateDataRequestMarshaller.Instance; options.ResponseUnmarshaller = GetLaunchTemplateDataResponseUnmarshaller.Instance; return Invoke<GetLaunchTemplateDataResponse>(request, options); }
public ParseInfo(ProfilingATNSimulator atnSimulator) { this.atnSimulator = atnSimulator; }
public SimpleQQParser(string qqNames[], string indexField) { this.qqNames = qqNames; this.indexField = indexField; }
public virtualBClusterPromotemoteReadReplicaDBCluster(moteReadReplicplicaDBCluster request) { var options = new InvokeOptions(); options.RequestMarshaller = PPromoteReadReplicaDBClusterRequestMarshaller.Instance; options.ResponseUnmarshaller = pro proCluster promoteReadReplic;Instance; return Invoke<PromoteReadReplicaDBClusterResponse>(request, options); }
public virtual DescribeCapacityReservationsResponse DescribeCapacityReservations(DescribeCapacityReservationsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeCapacityReservationsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeCapacityReservationsResponseUnmarshaller.Instance; return Invoke<DescribeCapacityReservationsResponse>(request, options); }
public override string ToString() { return "IndexSearcher(" + reader + "; }
public virtual boolcrementToken() { return false; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(main + 1); out1.WriteShort(subFrom); out1.WriteShort(subTo); }
public override void Decode(byte[] blocks, int blocksOffset, int[] values,int valuesOffset, int iterations) { if (bitsPerValue > 32) { throw new System.NotSupportedException("Cannot decode " + bitsPerValue + "-bits values intoits an int[]"); } for (int i = 0; i < iterations; ++i) { long block = readLong(block(blocks, blocksOffset); blocksOffset += 8; valuesOffset =ecode decode(block, values, valuesOffset); } }
public virtual bool IsExpectedToken(int symbol) { ATN atn = = GetInterpreter().atn; ParserRuleContext ctx = _ctx; ATNState s = atn.states..State); IntervalSet following = atn.nextTokens(s)s); if (following..s(symbol)) { return true; } if ( !following..s(Token.EPPSILON) ) return false while ( ctx!= && ctx.invokingState>=0 && following.containings(Token.EPSILON) { ATNState invokingState = atn.states.get(ctx.invokingState); RuleTransition rt = (RuleTransition)invokingState.transition(0); following = atn.nextTokens(rt.followState); if (following..s(symbol)) { return true; } ctx = (ParserRuleContext)ctx.parent; } if ( following..s(Token.EPPSIL) && symbol == Token } } } } } } } } } } } } }
public virtual UpdateStreamResponse UpdateStream(UpdateStreamRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =StreamStreamRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateStreamResponseUnmarshaller.Instance; return Invoke<UpdateStreamResponse>(request, options); }
public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) { try { OperandResolver.SingleValue(arg0, srcRowIndex, srcColumnIndex); return ErrorEval.NA; } catch (EvaluationException e) { int result = translateErrorCodeToErrorTypeValue(eeErrorEval().getErrorError return new NumberEval(result); } }
public override string ToString() { return Get.Name + " [" + _index + " " + _name + "]" }
public virtual ListAssignmentsForHITResponse ListAssignmentsForHIT(ListAssignmentsForHITRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAssignmentsForHITRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAssignmentsForHITResponseUnmarshaller.Instance; return Invoke<ListAssignmentsForHITResponse>(request, options); }
public virtual DeleteAccessControlRuleResponse DeleteAccessControlRule(DeleteAccessControlRequestRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteAccessControlRuleRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteAccessControlRuleResponseUnmarshaller.Instance; return Invoke<DeleteAccessControlRuleResponse>(request, options); }
public Arc<LongLong> getFirstArc(F.Arcrc<Long>c) { return fst.FirstArc(arc); }
public override void Decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) { for (int i = 0; i < iterations; ++i) { long block = blocks[blocksOffset++]; for (int shift = 48; shift >= 0; shift -= 16) { values[valuesOffset++] = (int)long)(()((ulong >> >> >> >>55555); } } }
public override long skip(long char charCount) { if (charCount < 0) { throw new System.ArgumentException("charCount < 0: " + charCount); } lock (@lock) { checkNotClosed(); if (charCount == 0) { return 0; } long.WriteSkipped; int availableFromBuffer = buf.length - pos pos; if (availableFromBuffer > 0) { long requiredFromIn = charCount - availableFromBuffer; if (requiredFromIn <= 0) { pos += charCount; return charCount; } pos += availableFromBuffer; inSkipped = in.skip(requiredFromIn); } else { }Skippped = in.skip(charCount); } } } } } } } } } } } } }
public java. WriteCollectionictionary<string, Ref> GetRefsMap() { return advertisedRefs; }
public virtual UpdateApiKeyResponse UpdateApiKey(UpdateApiKeyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =ApiApiKeyRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateApiKeyResponseUnmarshaller.Instance; return Invoke<UpdateApiKeyResponse>(request, options); }
public override ObjectStream openStream() { { { { { { { { { { { PackInputStream packIn;Reader(); try { try { packIn = new PackInputStream(pack, objectOffset + headerLength, ctx); ctx = null; } catch (IOException packGone) { ObjectId obj = pack.ReverseIdx(ctx).findObject(objectOffset);; return ctx.open(obj, type).).openStream(); } } finally { if (ctx != null) { ctx } } int bufsz = 8192; InputStream in = new BufferedInputStream(new InflatererInputStreamackIn, =ackInIn.ctx.inflater(), bufsz } } } } } } } } } } } }
public overrideList() { array = EmptyArray.OBJECOBJECT; }
public virtual UpdateDetectorVersionResponse UpdateDetectorVersion(UpdateDetectorVersionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =DetectorDetectorVersionRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateDetectorVersionResponseUnmarshaller.Instance; return Invoke<UpdateDetectorVersionResponse>(request, options); }
public virtual void resize() { resize(Double.MAX_VALUE); }
public RevFlagSet(Collection<RevFlag> s) { AddAll(s); }
public override int size() { return size; }
public override GetLong() { int newPosition = _position + libcore.io.SizeOf.LONG; if (newPosition > _limit) { throw new java.nio.BufferUnderflowException(); } long result = MMemory.peekLong(backingArray, offset + position, order); _position = newPosition; return result; }
public java.lang.StringBuilder insert(int offset, long l) { insert0(offset, java.nio..ToString(l)); return this; }
public TurkishLowerCaseFilter(TokenStream in1) { }
public virtualTreeTreeMatch match(ParseTree tree, ParseTreePattern pattern) { MultiIDictionary<string,< ParseTree> labels = new Multi java.util. ParseTreeTree>(); ParseTree mismatchedNode = matchImpl(tree, pattern.PatternTree(), labels) return new ParseTreeMatch(tree, pattern, labels, mismatchedNode); }
public virtual void AddIfNoOverlap( WeightedPhraseInfo wpi) { for( WeightedPhraseInfo existWpi :)Phrase; if (ististWpi.isOffsetOverllap(;)))istWpi.getTermsInfos().().All( wpi.get.getTermsInfo (int; return; } } } }
public ThreeWayMerger newMererer(Repository db) { return new InCoreMerger(db); }
public float doc docScore(int docId, string field, int numPayloadsSeen, float payload) { return numPayloadsSeen > 0 ? (payloadScore / numPayloadsSeen) : 1; }
public virtual java.nio.Collection<ParseTreeParseTree> Evaluate(ParseTree t) { return Trees.fFindAllRuleNodes(t, ruleIndex); }
public override string ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[CFRULE]\n"); buffer.Append("    .condition_type   = =").Append(getConditionType.Append("\n"); buffer.Append("    OPTION FLAGS=0x").Append(.Toer..ToHexString(.Append("())).Append("\n"); if (containsFontFormattingBlock()) { buffer.Append(_fontFormatting).Append("\n"); } if (containsBorderFormattingBlock()) { out1.WriteShort(_borderFormatting).append("\n"); } if (containsPatternFormattingBlock()) { buffer.Append("_patternFormatting).Append("\n"); } buffer.Append("    Formula 1 =").append(Arrays.toString(getFormula1().getTokens()))))\n"); buffer.Append("    Formula 2 =").append(Arrays. buffer.Append("    Formula 2 =").append(Arrays.\n"); buffer.Append("[/CFRULE]\n"); return } } } } } } } } } } } }
public virtual DescribeServiceUpdatesResponse DescribeServiceUpdates(DescribeServiceUpdatesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeServiceUpdatesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeServiceUpdatesResponseUnmarshaller.Instance; return Invoke<DescribeServiceUpdatesResponse>(request, options); }
public string GetNameName(int index) { return GetNameAt(index).GetNameName(); }
public virtual DescribeLocationsResponse DescribeLocations() { return DescribeLocations(new DescribeLocationsRequest()); }
public override string ToString() { return "<phraseslop value='" + GetValueString() + "'>" + "\n"+.ChildChild.To + "\n</phphraseslop>" }
public virtualirCacheEntryEntry GetDirCacheEntry() { return currentSubtree == null ? currentEntry : null; }
public override java.nio.IntBuffer put(int[] src, int srcOffset, int intCount) { java.util.Arrays. System.NottilAnd srcOffset, srcOffset, int int; if (intCount > remaining()) { throw new java.nio.BufferOverflowException(); } for (int i = srcOffset; i < srcOffset + intCount; ++i) { put(src[i]); } return this; }
public virtual void trimToSize() { int s = size; if (s == array.Length) { return; } if (s == 0) { array = EmptyArray..T; } else { Object[] newArray = new Object[s]; System.Array.Copy(array, 0, newArray, 0, s); array = newArray; } modCount++; }
public virtual DescribeLocalGatewayVirtualInterfacesResponse DescribeLocalGatewayVirtualInterfaces(DescribeLocalGatewayVirtualInterfaRequestRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeLocalGatewayVirtualInterfacesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeLocalGatewayVirtualInterfacesResponseUnmarshaller.Instance; return Invoke<DescribeLocalGatewayVirtualInterfacesResponse>(request, options); }
public override TokenStream Create(TokenStream input) { return new RussianLightStemFilter(input); }
public int [] toArray(f int [] a) { int[] rval; if (a.length == _limit) { Array.Copy(_array, 0, a, 0, _limit); rval = a; } else { rval = toArray(); } return rval; }
public BasicSessionCredentials(String accessKeyId, string accessKeySecreret, sessionToken,long roleSessionDurationSeconds) { if (accessKeyId == null) { throw new ArgumentException("Access key ID cannot be null.."); } if (accessKeySecret == null) { throw new ArgumentException("Access key secret cannot be null.")"); } this.cessKeyId = ac accessKeyId; this.cessKeySecret = ac accessKeySecret; this.sessionToken = sessionToken; this.roleSessionDurationSeconds = roleSessionDurationSeconds; }
public sealedShortBuffer get(short(short[] dst, int dstOffset, int shortCount) { if (shortCount > remaining()) { throw new java.nio.BufferUnderflowException(); } System.Array.Copy(backingArray, offset + position, dst, dstOffset, shortCount); _position += shortCount; return this; }
public virtual ActivateEventSourceResponse Ac acvateEventSource(ActivateEventSourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =ActivateEventSourceRequestMarshaller.Instance; options.ResponseUnmarshaller = ActivateEventSourceResponseUnmarshaller.Instance; return Invoke<ActivateEventSourceResponse>(request, options); }
public virtual DescribeReceiptRuleSetResponse DescribeReceiptRuleSet(DescribeReceiptRuleSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeReceiptRuleSetRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeReceiptRuleSetResponseUnmarshaller.Instance; return Invoke<DescribeReceiptRuleSetsResponse>(request, options); }
public virtualFilter(string name) { _Name =); }
public override java.nio.DoubleBuffer put(double c) { throw new java.nio.ReadOnlyBufferException(); }
public virtual CreateTrafficPolicyInstanceResponse CreateTrafficPolicyInstance(CreateTrafficPolicyInstanceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateTrafficPolicyInstanceRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateTrafficPolicyInstanceResponseUnmarshaller.Instance; return Invoke<CreateTrafficPolicyInstanceResponse>(request, options); }
public JapaneseIterationMarkCharFilter(Reader input, bool normalizeKanji, bool boolean normalizeKana) { this.normalizeKanji = normalizeKanji; this.normalizeKana = normal normalizeKana; buffer.Reset(input); }
public void WriteLong(long v) { WriteInt((int)(v >>  0)); writeInt((int)(v >> 32)); }
public virtualResolver() { exports = new ConcurrentHashMap<>(); exportBase = new CopyOnWriteArrayList<>(); }
public ValueEval GetRef3DEval(Ref3DPxg rptg) { SheetRangeEvaluator sre = CreateExternSheetRefEvaluator(rptgRow,SheetName(), rptg.LastSheetName return new LazyRefEval(rptg.Row(),ptg.Column(), sre;); }
public virtual DeleteDatasetResponse DeleteDataset(DeleteDatasetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDatasetRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDatasetResponseUnmarshaller.Instance; return Invoke<DeleteDatasetResponse>(request, options); }
public virtual StartRelationalDatabaseResponse StartRelationalDatabase(StartRelationalDatabaseRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =StartRelationalDatabaseRequestMarshaller.Instance; options.ResponseUnmarshaller = StartRelationalDatabaseResponseUnmarshaller.Instance; return Invoke<StartRelationalDatabaseResponse>(request, options); }
public virtual DescribeReservedCacheNodesOfferingsResponse DescribeReservedCacheNodesOfferings() { return DescribeReservedCacheNodesOfferings(new DescribeReservedCacheNodesOfferingsRequest()); }
static public double pmtmt(double r, int nper, double pv, double fv int type) { return -r * (pv * Math.pow(1 + r, nper) + fv)) / ((1 + r*type) * (Math.pow((1, nper) - 1)); }
public virtual DescribeDocumentVersionsResponse DescribeDocumentVersions(DescribeDocumentVersionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDocumentVersionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDocumentVersionsResponseUnmarshaller.Instance; return Invoke<DescribeDocumentVersionsResponse>(request, options); }
public virtual ListPublishingDestinationsResponse ListPublishingDestinations(ListPublishingDestinationsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListPublishingDestinationsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListPublishingDestinationsResponseUnmarshaller.Instance; return Invoke<ListPublishingDestinationsResponse>(request, options); }
public DeleteAccountAliasRequest(string accountAlias) { _aAlia =s( =countAlias; }
public static long[] Grow(long[] array) { return Grow(array, 1 + array.Length); }
public override string outputToString(Object output) { if (!(output is List)) { return outputs.outputToString((T) output)); } else { List<T> outputList = (List<T>) output; StringBuilder b = new StringBuilder(); b.Append('['); for(int i =; i <outputList.Count; i++) { if (i > 0) { b.Append(", "); } b.Append(outputs.outputToString(outputList.)))); } b.Append(']'); return } } }
public void notifyDeleteCell(Cell cell) { _bookEvaluator.ntifyDeleteCell(new HSSFCell((HSSFCell)cell))CellCell }
public StringBuilder replace(int start, int end, string str) { replace0(start, end, str); return this; }
public virtual SetIdentityPoolConfigurationResponse SetIdentityPoolConfiguration(SetIdentityPoolConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =SetIdentityPoolConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = SetIdentityPoolConfigurationResponseUnmarshaller.Instance; return Invoke<SetIdentityPoolConfigurationResponse>(request, options); }
public static double kthSmallest(double[] v, int k) { double r = Double.NaN; int index = k vault; if (v!= && v.Length > index && index >= 0) { Arrays. +=ort(v); r = v[index]; } return r; }
public virtual void Set(int index, long value) { int o = java.nio.)(( >> >>; int b = index & 31; int shift = b << 1; blocks[o] = (blocks[o] & ~(3L << shift)) | (value << shift); }
public override string ToString() { StringBuilder children new == null || || child().().size() == 0)return "<boolean operation=' throw new ArgumentException(JGitText.Get null || child().size() == "< "<boolean operation='andand'/>"; StringBuilder sb = new StringBuilder(); sb.Append("Int(data,boolean operation='and'>"); for (QueryNode child :.Append("ren) { sb.Append("\n"); sb.Append(child.ToString()); } sb.Append("\n</@boolean>"); return sb.ToString(); }
public int sumTokenSizes(int fromIx, int toIx) { int result = 0; for (int i=fromIx; i<toIx; i++) { result += _ptgs[i].; } return result; }
public virtual void SetReadonly(bool readonly) { StringBuilder ( this.readonly && !readonly ) throw new IllegalStateException("canan't if (  newlyly && !readonlyly throw;alter readonly IntervalSet"); this.readonly = readonly; } }
public void clearConsumingCell(FormulaCellCacheEntry cce) { if!_consumingCells.re(cce)) { throw new InvalidOperationException("Specified formula cell is not consumed by this cell"); } }
public override java.util.IteratorE> subList(int start, int end) { lock (mutex) { return new java.util.ynchronizedchronizedRandomAccessList<E>(list.subListList(start, endutexyn);utexu; } }
public virtualHeader Get GetFileHeader() { return file; }
public virtual AttachLoadBalancersResponse AttachLoadBalancers(AttachLoadBalancersRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =AttachLoadBalancersRequestMarshaller.Instance; options.ResponseUnmarshaller =AttachLoadBalancersResponseUnmarshaller.Instance; return Invoke<AttachLoadBalancersResponse>(request, options); }
public InitiateJobRequest(string accountId, string vaultName, JobParameters jobParameters) { = =s) { _vaultName = =NameName; _jParameterParameters( =bParameters); }
public override string ToString() { return "SPL"; }
public ReplaceableAttribute(string name, string value, Boolean replace) { _Name =); _)value); _Replace(replace); }
public void Add(IndexableField field) { field base }
public virtual DeleteStackSetResponse DeleteStackSet(DeleteStackSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteStackSetRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteStackSetResponseUnmarshaller.Instance; return Invoke<DeleteStackSetResponse>(request, options); }
super(" super("cr",cr",cr", "2016-06-07",Request(): base("cr", "GetRepoRepoBuildListList", " "openAPI") "openAPI") "openAPI") UriPattern = "/repos/[RepoNamespace]/[RepoName]/rules"); Method = MethodType.GET; }
public S FormatArray(int initialCapacity) { initialCapacity = ArrayUtils.idealIntArraySize(initialitial)); mKeys = new int[initialCapacity]; mValues = new Object[initialCapacity]; mSize = 0; }
public super("industry { base("indService-ra {",",",",",", "openAPI") "openAPI") = ProtocolType.HTTPS; }
public ListAlbumPhotosRequest() { base(" ListAlAlbumumPhotos",",", Protocol "openAPI") ProtocolType.HTTPS; }
public virtual H hasPrevious() { return link != list.vvoidLink; }
public virtual DeleteHsmConfigurationResponse DeleteHsmConfiguration(DeleteHsmConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteHsmConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteHsmConfigurationResponseUnmarshaller.Instance; return Invoke<DeleteHsmConfigurationResponse>(request, options); }
public CreateLoadBalancerRequest(string loadBalancerName) { _loadNameName =NameName; }
public virtual string GetUserInfo() { return new(userInfoInfo); }
public virtual TagAttendeeResponse Attendee(TagAttendeeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =TagAttendeeRequestMarshaller.Instance; options.ResponseUnmarshaller = TagAttendeeResponseUnmarshaller.Instance; return Invoke<TagAttendeeResponse>(request, options); }
public override string GetRefName() { return name; }
public SpanNearQuery buildBuild() { return new SpanNearQuery(clauses.ToArray(new SpanQuery[clauses.size()]), slop, ordered); }
public virtual IsSubTotal(int rowIndex, int columnIndex) { return false; }
public virtual DescribeDBProxiesResponse DescribeDBProxies(DescribeDBProxiesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDBProxiesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDBProxiesResponseUnmarshaller.Instance; return Invoke<DescribeDBProxiesResponse>(request, options); }
public virtual GetVoiceConnectorProxyResponse GetVoiceConnectorProxy(GetVoiceConnectorProxyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =VoiceConnectorVoiceConnectorProxyRequestMarshaller.Instance; options.ResponseUnmarshaller = GetVoiceConnectorProxyResponseUnmarshaller.Instance; return Invoke<GetVoiceConnectorProxyResponse>(request, options); }
public WindowCacheConfig fromConfigConfig(Config rc) { SetPackedGitUseStrongRefs(rc.getBoolean(CONFIG_CO__SECTION,CONFIG_KEY_PACKED_GIT_USE_STRONGREFS,isPackedGitUseStrongRefs(); SetPackedGitOpenFiles(rc.getInt(CONFIG_CORE_SESE, null,CONFIG_KEY_PACKED_GIT_OPENFILES, getPackedGitOpenFiles())); SetPackedGitLimit(rc.getLong(CONFIG_CORE_SECTION, null,CONFIG_KEY_PACKED_GIT_LIMIT, GetPackedGitLimit())); SetPackedGitWindowSize(rc.getInt(CONFIG_CORE_SECTION null,CONFIFIG_KEY_PACKED_GIT_WINDOWSIZE, getPackedGitWindowSize())); SetPackedGitMMMAP(rc.getBoolean(CONFIG_CORESECTION, null,CONFIG_KEY_PAED_GEIT_MMAP, isPackPackedGitMMAP())); SetDeltaBaseCacheLimit(rc.GetInt(CONFIG_CORE_SECTION, null,CONFIG_KEY_DELTA_BASE_CACHE_LIMIT, getDeltaBaseCacheLimit())); long maxMem = Runtime.Runtime().maxMem(); long sft = rc.getLong(CONFIG_CORE_SECTION, null,CONFIG_KEY_STREAM_FILE_TRESHOLD, getStreamFileThMemold()); sft = Math.min(sft, maxMemM 4);ft = Math.Math.(sft, Integer.);
public static Date F GetJavaDate(double date) { return GetJavaDate(date,, false, null, false); }
public virtual StartPersonTrackingResponse StartPersonTracking(StartPersonTrackingRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =StartPersonTrackingRequestMarshaller.Instance; options.ResponseUnmarshaller = StartPersonTrackingResponseUnmarshaller.Instance; return Invoke<StartPersonTrackingResponse>(request, options); }
public override int size() { return totalSize; }
public virtual GetRouteResponse GetRoute(GetRouteRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =RouteRouteRequestMarshaller.Instance; options.ResponseUnmarshaller = GetRouteResponseUnmarshaller.Instance; return Invoke<GetRouteResponse>(request, options); }
public virtual DeleteClusterResponse DeleteCluster(DeleteClusterRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteClusterRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteClusterResponseUnmarshaller.Instance; return Invoke<DeleteClusterResponse>(request, options); }
public override string ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[MMS]\n"); buffer.Append("    .addMenu        = ").Append(Integer.toHexString(getAddMMuCount())).append("\n"); buffer.Append("    .delMenu        = ").Append(Integer..To.Append("\nDelMenuCount())).Append("\n"); buffer.Append("[/MMS]\n"); return buffer.ToString(); }
public FileBasedConfig(Config base @, File cfgLocation, F FS { configFile = cfgLocation; this.fs = fs; this.s = = FileSnapshotSnapshot.DIRTY; this.hash = ObjectId.zeroId(); }
public int int following(int pos) { if (pos < text.GetBeginIndex() pos > text.getEndIndex()) { throw new System.ArgumentException("offset out of bounds"); } else if (0 == sentenceStarts.Length) { text.SetIndex(text.BeginIndex()); return Done; } else if (pos >= sentenceStarts[sentenceStarts.Length - 1]) { text.SetIndex(text.EndIndex; currentSentence = sentenceStarts.Length - 1; return Done; } else { currentSentence = (sentenceStarts.Length - 1) / 2; moveToSentenceAt(pos, 0, sentenceStarts.length - 2); text.Index(sentenceStarts[++currentSentence]); return current(); } } } } } } } } } } } } } } } } }
public virtual UpdateParameterGroupResponse UpdateParameterGroup(UpdateParameterGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =ParameterGroupParameterGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateParameterGroupResponseUnmarshaller.Instance; return Invoke<UpdateParameterGroupResponse>(request, options); }
public S Object Clone()artGroup { return copy(); }
public static double calcDistanceFromErrPct(Shape shape, double distErrPct, SpatialContext ctx) { if (distErrPct < 0 || distErrPct > 0.5) { throw new System.ArgumentException("distErrPct " + distErrPct + " must be between [0 to 0.5]"); } if (distErrPct == 0 || shape is Point) { return 0; } Rectangle bbox = shape.BoundingBox(); Point ctr = bbox.Center(); double y = (ctr.Y() >= 0 ? bbox.MaxY() : bbox.MinY()); double diagonalDist = ctx.getDistCalc().distance(ctr, bbox.MaxX(), y); return diagonalDist * distErrPct; } }
public int int codePointAt(int index) { if (index < 0 || index >= count) { throw indexAndLength(index); } return (.EncodePointAt(value, index, count); }
public void SetPasswordVerifier(int passwordVerifier) { this.passwordVerifier = passwordVerifier; }
public ListVaultsRequest(string accountId) { _acId(Id =IdId; }
public SquashashMessageFormatter() { dateFormatter = new GitDateFormatter(Format.DEFAULT); }
public GetVideoCoRequest(): base("CloudPhoto", "2017-07-11",VVideoCover",",", "openAPI") Protocol = ProtocolType.HTTPS; }
public int last lastIndexOf(Object @object) { int pos = size; Linked link = voidLinkLink.prepre; if (object != null) { while (link != voidLink) { pos--; if (object.Equals(link.data)) { return pos; } link = link.previous; } } else { while (link != voidLink) { pos--; if (link.data == null) { return pos; } link } } return } } } } } } } } } } } } }
public virtual DescribeSpotFleetRequestsResponse DescribeSpotFleetRequests(DescribeSpotFleetRequestsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeSpotFleetRequestsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeSpotFleetRequestsResponseUnmarshaller.Instance; return Invoke<DescribeSpotFleetRequestsResponse>(request, options); }
public virtual IndexFacesResponse IndexFaces(IndexFacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =IndexFacesRequestMarshaller.Instance; options.ResponseUnmarshaller = IndexFacesResponseUnmarshaller.Instance; return Invoke<IndexFacesResponse>(request, options); }
public RuleBasedBreakIterator GetBreakIterator(int script) { switch(script) { case UScript.JAPANE: return (RuleBasedBreakIteratorIteratorIteratorckBreakBreak))); case UScript.MYANMAR: if (myanmarAsWords) { return (RuleBasedBreakIterator)IteratordefaultBreak } else { return (RuleBasedBreakIterator)myanmmarSyllableIterator.c } default return (RuleBasedBreakIterator)IteratordefaultBreak } } }
public override string ToString() { StringBuilder b = new StringBuilder(); b.Append("[DCONREF]\n"); b.Append("     =f\n"); b.Append("        .firstrow   = ").Append(firstRow).Append("\n"); b.Append("        .lastrow    = ").Append(lastRow).Append("\n"); b.Append("        .firstcol   = ").Append(firstCol).Append("\n"); b.Append("        .lastcol    = ").Append(lastCol).Append("\n"); b.Append("    .cch            =.Append("char.Append(".Append("\n"); b.Append("    .stFile\n"); b.Append("        .h b.Append("        .h          = charType).append("\n"); b.Append("        .rgb        = getReadReadablePath()).Append("\n"); b.Append("[/DCONREF]\n"); b return } } } } } } } } } } } }
public virtual int GetPackedGitOpenFiles() { return packedGitOpenFiles; }
public override string ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[FEATURE HEADER]\n"); buffer.Append("[/FEATURE HEADER]\n"); return buffer.ToString(); }
public static byte[] GetToUnicodeLE(string string) { return @.Bytes(UTF16LE); }
public virtual java.nio. GetFooterLines(string keyName) { return GetFooterLines(new FooterKey(keyName)); }
public virtual void Add(resh() { base@resh(); clearReferences(); }
public override float Get get(int index) { CheckIndex(index); return byteBuffer.getFloat(index * libcore.io.SizeOf.FLOAT); }
public virtual DeleteDetectorResponse DeleteDetector(DeleteDetectorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDetectorRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDetectorResponseUnmarshaller.Instance; return Invoke<DeleteDetectorResponse>(request, options); }
public override int[][]() { Debug.Assert(posStart != null; return bytesStart = ArrayUtil.grow(bytesStart, bytesStart.Length + 1); }
public virtual ListExclusionsResponse ListExclusions(ListExclusionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListExclusionsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListExclusionsResponseUnmarshaller.Instance; return Invoke<ListExclusionsResponse>(request, options); }
public static SpatialStrategy getSpatialStrategy(int roundNumber) { SpatialStrategy result = spatialStrategyCache.get(roundroundNumber); if (result == null) { throw new InvalidOperationException("Strategy should have been init'ed by SpatialDocMaker by now"); } return result; }
public virtualBClusterRestDBClusterDBClusterDBClusterDBClusterToPointPointInTime((oreoreDBClusterTo request) { var options = new InvokeOptions(); options.RequestMarshaller = AoreDBClusterToPointInTimeRequestMarshaller.Instance; options.ResponseUnmarshaller = oreDBClusterToPointInTimeResponseUnmarshaller.Instance; return Invoke<RestoreDBClusterToPointInTimeResponse>(request, options); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_categoryDataType); out1.WriteShort(field_2_valuesDataType); out1.WriteShort(field_3_numCategories); out1.WriteShort(field_4_numValues); out1.WriteShort(field_5_bubbleSeriesType); out1.WriteShort(field_6_numBubbleValues); }
public virtual PostAgentProfileResponse  postAgentProfile(PostententProfileRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =PoPostAgentProfileRequestMarshaller.Instance; options.ResponseUnmarshaller = PostAgentProfileResponseUnmarshaller.Instance; return Invoke<PostAgententProfileResponse>(request, options); }
public virtual ParseTreePattern compileParseTreePattern(string pattern, int patternRuleIndex) { if ( GetTokenStream { TokenSource token tokenSource = if ( tokenSource is Lexer) { Lexer lexer = (Lexer)tokenSource; return compileParseTreeParseTreePattern(pattern, patternRuleIndex, lexer); } } throw new NotSupportedException("Parser can't discover a lexer to use")er }
public virtual BacktrackDBClusterResponse BacktrackDBCluster(BacktrackDBClusterRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =BackBacktrackDBClusterRequestMarshaller.Instance; options.ResponseUnmarshaller = BacktrackDBClusterResponseUnmarshaller.Instance; return Invoke<BacktrackDBClusterResponse>(request, options); }
public override string GetName() { return strategyName; }
public override void CopyTo(byte[] b, int o) { formatHexByte(b, o + 0, w1); formatHexByte(b, o + 8, w2); formatHexByte(b, o + 16, w3); formatHexByte(b, o + 24, w4); } }
public static java.nio. D lineMapMap(byte[] buf, int ptr, int end) { IList<List map = new IntList((end - ptr)) / 3));.fillTo(1,.er.MIN_VALUE); (; } map.Add(end); return } }
public virtual Set<ObjectId> GetAdditionalHaves() { return Collections.emptySet(); }
public override long RamBytesUsed() { lock (this) { long sizeInBytes = BASE_R).GetUSED + field RamUsageEstimator.NUM_BYTES_ * 2 * RamUsageEstimator.NUM_BYTES_OBJECT_REF;(SimpleTextTerms s; sizeInBytes += (simpleTextTerms; } return sizeInBytes; }
public override string ToXml(string tab) { StringBuilder builder = new StringBuilder(); er.Append(tab).Append("<.To ; for (intEscher = 0; builder.Append(escherRecord.toXml(tab + "\t")); } builder.Append(tab).Append("</.To.To.Append(".Append(".Append(".Append(".Append(".Append("\n")") return newer.toString(); }
public override TokenStream Create(TokenStream input) { return new GalicianMinimalStemFilter(input); }
public override string ToString() { StringBuilder r = new StringBuilder(); r.Append("Commit"); r.Append("={\n"); r.Append("tree "); r.Append(treeId != null ? treeId.name() : "NOT_SET"); r.Append("\n"); for (ObjectId p : parentIds) { r.Append("parent "); r.Append(p.name()); r.Append("\n"); } r.Append("author "); r.Append("author != null ? author.toString() : "NOT_SET"); r.Append("\n"); r.Append("committer "); r.Append(committer != null ? committer.toString() : "NOT_SET"); r.Append("\n"); r.Append("gpgSignature "); r.Append("gpgSignature != null ? gpgSignature.toString() : "NOT_ r.Append("g"); r r r r r r r r } } } } }
public IndicNormalizationFilterFactory(IDictionary<string, string> args): base(args) { if (args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public virtualOptionOptionGroupResponseOptionOptionGroup(CreateOptionGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateOptionGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateOptionGroupResponseUnmarshaller.Instance; return Invoke<CreateOptionGroupResponse>(request, options); }
public virtual AssociateMemberAccountResponse AssociateMemberAccount(AssociateMemberAccountRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =AssociateMemberAccountRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateMemberAccountResponseUnmarshaller.Instance; return Invoke<AssociateMemberAccountResponse>(request, options); }
public virtual void run() { doRefreshProgress(mId, mProgress, mFromUser, true); mRefreshProgressRunnable = this; }
public virtual SetTerminationProtectionResponse SetTerminationProtection(SetTerminationProtectionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =SetTerminationProtectionRequestMarshaller.Instance; options.ResponseUnmarshaller = SetTerminationProtectionResponseUnmarshaller.Instance; return Invoke<SetTerminationProtectionResponse>(request, options); }
public string Get GetErrorHeader(RecognitionException e) { int line = base.ffendingToken { int charPositionInLine =.GetOffendingToken().getCharPositionInLine(); return "line "+lineline + +:"+charPositionInLine; }
public override java.nio.CharBuffer asReadRead() { java.nio.DoubleByteBufferAdapterAdapter buf = new java.nio.ToToByteBufferAdapter(byteBuffer.asReadOnlyBuffer()); buf.limit = _limit; buf._position = _position; buf.mark = _; buf.byteBuffer.Buffer.order = byteBuffer.orderorder; return buf; }
public virtual StopSentimentDetectionJobResponse StopSentimentDetectionJob(StopSentimentDetectionJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =StopSentimentDetectionJobRequestMarshaller.Instance; options.ResponseUnmarshaller = StopSentimentDetectionJobResponseUnmarshaller.Instance; return Invoke<StopSentimentDetectionJobResponse>(request, options); }
public ObjectIdSubSubclassMap<ObjectId> getNewObjectIds() { if (newObjectIds != null)return newObjectIds; return new ObjectIdSubcclassMap<>(); }
public override void C { hash = hash(new byte[0]); baseclear(); }
public override void Reset() { lock (@lock) { checkNotClosed(); if (mark == -1) { throw new System.Exception("Invalid _"); } pos = mark mark; } }
public RefErrorPtg(LittleEndianInput in1)  { field_1_reserved = in1.ReadInt(); }
public virtual SuspendGameServerGroupResponse SuspendGameServerGroup(SuspendGameServerGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =SuspendpendGameServerGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = SuspendGameServerGroupResponseUnmarshaller.Instance; return Invoke<SuspendGameServerGroupResponse>(request, options); }
public ValueEval Evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) { if (args.Length != 3) { return ErrorEval.VALUE_INVALID; } return Evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2]); }
super(" super("cr",Request(): base("cr", "2016-06-07", "GetRepo", "", "openAPI") UriPattern = "/repos/[RepoNamespace]/[RepoName]"); Method = MethodType.GET; }
public virtual void SetDate(Date date) { if (date != null) { SetDate(DateTools.dateToString(date, DateTools.Resolution.SECOND)); } else { this.date = null; } }
public override TokenStream Create(TokenStream input) { return new GermanMinimalStemFilter(input); }
public override Object[]ArrayArray() { return aStringlone(); }
public override void Write(char[] buffer, int offset, int len) { java.util.Arrays. System.NottilAnds. lock (@lock) { expand(len); Array.Copy(buffer, offset, this.buf,, this.count len); this.count += len; } }
public static RevFilter after(Date ts) { return after(ts.GetTime()); }
public DeleteGroupPolicyRequest(string groupName, string policyName) { _groupName = groupName; _poNameName =NameName; }
public virtual DeregisterTransitGatewayMulticastGroupMembersResponse DeregisterTransitGatewayMulticastGroupMembers(DeregisterTransitGatewayMulticastGroupMembersRequest request) { { var options = new InvokeOptions(); options.RequestMarshaller =DeregisterTransitGatewayMulticastGroupMembersRequestMarshaller.Instance; options.ResponseUnmarshaller =DeregisterTransitGatewayMulticastGroupResponseUnmarshallerResponseUnmarshallerInstance; return Invoke<DeregisterTransitGatewayMulticastGroupMembersResponse>(request, options); }
public virtual BatchDeleteScheduledActionResponse BatchDeleteScheduledAction(BatchDeleteScheduledActionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =BatchDeleteScheduledActionRequestMarshaller.Instance; options.ResponseUnmarshaller = BatchDeleteScheduledActionResponseUnmarshaller.Instance; return Invoke<BatchDeleteScheduledActionResponse>(request, options); }
public virtual CreateAlgorithmResponse CreateAlgorithm(CreateAlgorithmRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateAlgorithmRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateAlgorithmResponseUnmarshaller.Instance; return Invoke<CreateAlgorithmResponse>(request, options); }
public int ReadUByte() { return readByte() & 0x00FF; }
public virtual void SetLength(int sz) { NB.enEncodeInt32(info, infoOffset + P_SIZE, sz); }
public virtual DescribeScalingProcessTypesResponse DescribeScalingProcessTypes() { return DescribeScalingProcessTypes(new DescribeScalingProcessTypesRequest()); }
public virtual ListResourceRecordSetsResponse ListResourceRecordSets(ListResourceRecordSetsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListResourceRecordSetsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListResourceRecordSetsResponseUnmarshaller.Instance; return Invoke<ListResourceRecordSetsResponse>(request, options); }
public Token java.nio. java.nio.IntverInline(Parser recognizer)throwss Recognitionition InputMismatchException e = new InputMismatchException(recognizer); for (ParserRuleContext context = recognizer.getContext(); context != null; context = context contextParent()) { context.exception = e; } throw new ParseCancellationException(e); }
public virtual SetTagsForResourceResponse SetTagsForResource(SetTagsForResourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =SetTagsForResourceRequestMarshaller.Instance; options.ResponseUnmarshaller = SetTagsForResourceResponseUnmarshaller.Instance; return Invoke<SetTagsForResourceResponse>(request, options); }
public ModifyStrategyRequest() base("Cloud { Modify",", "2017-07-05", "ModifyStrategyStrategy",",er",CallCenterCall", "2017-07-05", "Modify",", "CloudCloud }
public virtual DescribeVpcEndpointServicesResponse DescribeVpcEndpointServices(DescribeVpcEndpointServicesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeVpcEndpointServicesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeVpcEndpointServicesResponseUnmarshaller.Instance; return Invoke<DescribeVpcEndpointServicesResponse>(request, options); }
public virtual EnableLoggingResponse EnableLogging(EnableLoggingRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =EnableLoggingRequestMarshaller.Instance; options.ResponseUnmarshaller = EnableLoggingResponseUnmarshaller.Instance; return Invoke<EnableLoggingResponse>(request, options); }
public virtual bool contains(object o) { return ConcurrentHashMap.this }
public SheetRangeIdentifier(string bookName, NameIdentifier firstSheetIdentifier, NameIdentifier lastSheetIdentifierIdentifier) { _lastSheetIdentifier = lastSheetIdentifier; }
public DomainMetadataRequest(string domainName) { _omain = = = =Name; }
public ParseException(Token currentTokenVal,int[][] expectedTokenSequencesVal, String[] token(new(new MessageImpl(QueryParserMessages.INVALID__SYNT initialise(c(currentTokenVal, expectedTokenTokenSequencesVal, token))); this.currentToken = currentTokenVal; this.expectedTokenSequenences = expected expectedTokenSequSequencesVal; this.tokenImage = tokenImageVal; }
public FetchPhotosRequest(): base("CloudPhoto", "2017-07-11",etchetchPhotos", "cloudphoto", "openAPI") Protocol = ProtocolType.HTTPS; }
public PrintWriter writer() { return writer; }
public NGramTokenizerFactory(IDictionary<string, string> string> args) { minGramSize = GetInt(args, "minGramSize", NGramTokenizizDEFAULT_MIN_NGRAM_SIZE); maxGramSize = GetInt(args, "maxGramSize", NGramTokenizer.DEFAULT_MAX_NGRAM_SIZE); if (args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public virtual bool IsDirectoryFileConflict() { return dfConflict != null; }
public IndonesianStemFilter(TokenStream input, bool stemDerivational) {input); this.stemDerivational = stemDerivational; }
public virtual CreateTrafficPolicyResponse CreateTrafficPolicy(CreateTrafficPolicyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateTrafficPolicyRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateTrafficPolicyResponseUnmarshaller.Instance; return Invoke<CreateTrafficPolicyResponse>(request, options); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteInt(fSD); out1.WriteInt(passwordVerifier); StringUtil.writeUnicodeString(out, title); out1.Write(securityDDescriptor); }
public static double floor(double n, double s) { if (s ==0 && n!=0) { return Double.NaN; } else { return (n } }
public ByteArrayDataOutput(byte[] bytes, int offset, int len) { Reset(bytes, offset, len); }
public static IList<Tree> Get { List<Tree> kids = new List< ArrayList<Tree>(); for (int i =; i <t.GetChildCount(); i++) { kid =t.Child(i)); } return kids; }
public override void C { Hashtable.this.clear(); }
public RefreshAllRecord(boboolean refreshAll) { _RefreshAll(refreshAll); }
public virtual DeleteNamedQueryResponse DeleteNamedQuery(DeleteNamedQueryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteNamedQueryRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteNamedQueryResponseUnmarshaller.Instance; return Invoke<DeleteNamedQueryResponse>(request, options); }
public GraphvvizFormatter(ConnectionCosts costs) { this.costs = costs; this.bestPathMap = new HashOver>(); sb.Append(.Append("Header); sb.Append("  init [style=invis]\n"); sb.Append("  init -> 0.0 [label=\"" + BOS_LABEL + "\"]\n"); }
public super("visionaentRequest(): base("visiona { {",",",2020-04-08", "",ag-Multi; Method = MethodType.POST; }
public virtual ListUserProfilesResponse ListUserProfiles(ListUserProfilesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListUserProfilesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListUserProfilesResponseUnmarshaller.Instance; return Invoke<ListUserProfilesResponse>(request, options); }
public virtual CreateRelationalDatabaseFromSnapshotResponse CreateRelationalDatabaseFromSnapshot(CreateRelationalDatabaseFromSnapshotRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateRelationalDatabaseFromSnapshotRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateRelationalDatabaseFromSnapshotResponseUnmarshaller.Instance; return Invoke<CreateRelationalDatabaseFromSnapshotResponse>(request, options); }
public virtual StartTaskResponse StartTask(StartTaskRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =StartTaskRequestMarshaller.Instance; options.ResponseUnmarshaller = StartTaskResponseUnmarshaller.Instance; return Invoke<StartTaskResponse>(request, options); }
public virtual SetCollection<string> GetIgnoredPaths() { return ignoredPaths; }
public FeatSmartTag(RecordInputStream in1) { data = in1.ReadRemainder(); }
public Change(ChangeAction action, ResourceRecordSet resourceRecordSet) { _Action(action.toString()); _ResourceRecordSet(resourceRecordSet); }
public virtual DeleteImageResponse DeleteImage(DeleteImageRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteImageRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteImageResponseUnmarshaller.Instance; return Invoke<DeleteImageResponse>(request, options); }
public virtual CreateConfigurationSetResponse CreateConfigurationSet(CreateConfigurationSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateConfigurationSetRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateConfigurationSetResponseUnmarshaller.Instance; return Invoke<CreateConfigurationSetResponse>(request, options); }
public override java.util.Iterator<E> iterator() { return[] snapshot = elements; return new java.util.HashtablewIterator<E>(snapshot, 0, snapshot snapshot.Length); }
public virtual void visitContainedRecords(RecordVisitor rv) { if (_recs.isEmpty()) { return; } rv.visRecord(_bofRec); for (int i = 0; i < _recs.Count; i++) { RecordBase rb = _recs.get(i); if (rb is RecordAggregate) { ((RecordAggregate) rb).visitContainedRecords(rv); } else { rv.visRecord((org.apache.poi.hssf.record.cordRecord) rb); } } rv.vitRecord(EOFRecord.instancestance); } }
public override string ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[FtCbls ]").Append("\n"); buffer.Append("  size     = ").Append( DataSize()).Append("\n"); buffer.Append("  reserved = @HexDump.ToHex(reserved)).Append("\n"); buffer.Append("[/FtCbls ]").Append("\n"); return buffer.ToString(); }
public static BATBlock CreateEmptyBATBlock(final PIFSBBigBlockSize bigBlockSize, bool isXBAT) { BATBlock block = new BATBlock(bigBlockSize); ifisisXB)) { int _entries_per_xbat_block = bigBlockSize.getXBXATEntriesPerBlock(); block._values[ _entries_per_xbat_block ] = POIFSConstants.END_OF_CHAIN; } return block; }
public virtual TagResourceResponse  tagResource(TagResourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =TagTagResourceRequestMarshaller.Instance; options.ResponseUnmarshaller = TagResourceResponseUnmarshaller.Instance; return Invoke<TagResourceResponse>(request, options); }
public virtual DeleteMailboxPermissionsResponse DeleteMailboxPermissions(DeleteMailboxPermissionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteMailboxPermissionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteMailboxPermissionsResponseUnmarshaller.Instance; return Invoke<DeleteMailboxPermissionsResponse>(request, options); }
public virtual ListDatasetGroupsResponse ListDatasetGroups(ListDatasetGroupsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListDatasetGroupsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListDatasetGroupsResponseUnmarshaller.Instance; return Invoke<ListDatasetGroupsResponse>(request, options); }
public virtual ResumeProcessesResponse  resumeProcesses(ResumeProcessesRequest request) var options = new InvokeOptions(); options.RequestMarshaller =ResResumeProcessesRequestMarshaller.Instance; options.ResponseUnmarshaller = ResumeProcessesResponseUnmarshaller.Instance; return Invoke<ResumeProcessesResponse>(request, options); }
public virtual GetPersonTrackingResponse GetPersonTracking(GetPersonTrackingRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =PerPersonTrackingRequestMarshaller.Instance; options.ResponseUnmarshaller = GetPersonTrackingResponseUnmarshaller.Instance; return Invoke<GetPersonTrackingResponse>(request, options); }
public override string ToFormulaString(String[] operands) { if (_pace.IsSet(_options)) { return operands[ 0 ]; } else if (optiIf.isSet(_options)) { return toFormulaString() + "(" + operands[0] + ")"; } else if (optiSkip.Set(_options)) { return toFormulaString() + operands[0]; } else { return toFormulaString() + "(" + operands[0] + ")"; } }
public T merge(T first, T second) { throw new System.NotSupportedException(); }
public override string ToString() { return this.message.GetKey() + ": + + getLocalizedMessage(); }
public XPath(Parser parser, string path) { this.parser = parser; this.path = path; elements = split(path); }
public CreateAccountAliasRequest(string accountAlias) { _aAlia =s( =countAlias; }
public override void Decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) { for (int j = 0; j < iterations; ++j) { byte block = blocks[blocksOffset++]; values[valuesOffset++] = ((int)((uint))((ulong >> 1 1; values[valuesOffset++] = ((int)((uint)ul >>) & 1; values[valuesOffset++] = ((int)((uint)ul >>) & 1; values[valuesOffset++] = ((int)((uint)ul >> & 1; values[valuesOffset++] = ((int)((uint)ul 3) & 1; values[valuesOffset++] = ((int)((uint)block >> & 1; values[valuesOffset++] = ((int)((uint)ul 1) & 1; values[valuesOffset++] = block & 1; } }
public override PushConnection openPush() { return new TcpPushConnection(); }
public static void strcpypy(char[] dst, int di, char[] src, int si) while (src[si] != 0) { dst[di++] = src[si++]; } dst[di] = = 0; }
public virtual K GetKey() { return mapEntry.Key(); }
public static int numNonnull(object[] data) { int n = 0; if ( data == null ) return n; for (Object o : data) { if ( o == 0; } return n; }
public void void add(int location, E @object) { if (location >= 0 && location <= size) { L (<E> link = void voidLink; if (location < (size / 2)) { for (int i = 0; i <= location; i++) { link = link.next; } } else { for (int i = size; i > location; i--) { link = link.previous; } } L L L previous.next = newLink;;;;;;;;;;;; link.previous = newLink; size++++; modCount++; } else { throw new } } } } } } } } } } } }
public virtual DescribeDomainResponse DescribeDomain(DescribeDomainRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDomainRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDomainResponseUnmarshaller.Instance; return Invoke<DescribeDomainResponse>(request, options); }
public virtual void flush() { base new System.NotImplementedException; }
public PersianCharFilterFactory(IDictionary<string, string> args): base(args) { if (args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public virtual bool incrementToken() { if (used) { return false; } clearAttributes(); termAttribute.Append(value); offsetAttribute.Offset(0, length); used = true; return true; }
public static java.nio.FloatBuffer allocate(int capacity) { if (capacity < 0) 0) { throw new System.ArgumentException(); } return new java.nio.ReadWriteFloatArrayBuffer(capacity); }
public Edit after(Edit cut) { return new Edit(cut.endA, endA, cut.endB, endB); }
public virtual UpdateRuleVersionResponse UpdateRuleVersion(UpdateRuleVersionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =RuleRuleVersionRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateRuleVersionResponseUnmarshaller.Instance; return Invoke<UpdateRuleVersionResponse>(request, options); }
public virtual ListVoiceConnectorTerminationCredentialsResponse ListVoiceConnectorTerminationCredentials(ListVoiceConnectorTerminationCredentialsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListVoiceConnectorTerminationCredentialsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListVoiceConnectorTerminationCredentialsResponseUnmarshaller.Instance; return Invoke<ListVoiceConnectorTerminationCredentialsResponse>(request, options); }
public virtual GetDeploymentTargetResponse GetDeploymentTarget(GetDeploymentTargetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =DeploymentDeploymentTargetRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDeploymentTargetResponseUnmarshaller.Instance; return Invoke<GetDeploymentTargetResponse>(request, options); }
public virtual void SetNoChildReport() { letChildReport  = false; for (intinal PerfTask taskask ts)s) { if (task is Task;) { ((Task.ToString())task).setNoReportReport(); } } }
public virtual E get(int location) { try { return a[location]; } catch (ArrayIndexOutOfRangeException e) { throw java. } }
public virtual DescribeDataSetResponse DescribeDataSet(DescribeDataSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDataSetRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDataSetResponseUnmarshaller.Instance; return Invoke<DescribeDataSetResponse>(request, options); }
public SkipWorkTreeFilter(int treeIdx) { this.treeIdx = treeIdx; }
public virtual DescribeNetworkInterfacesResponse DescribeNetworkInterfaces() { return newNetworkInterfaces(new DescribeNetworkInterfacesRequest; }
public virtual contains( C row, int col) { return _firstRow <= row && _lastRow >= row&& _firstColumn <= col && _lastColumn >= col } }
public override string ToString() { return new string(this.s); }
public virtual PatchType GetPatchType() { return patchType; }
public override java.util.Iterator> iterator() { return new KeyIterator(); }
public virtual CreateScriptResponse CreateScript(CreateScriptRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateScriptRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateScriptResponseUnmarshaller.Instance; return Invoke<CreateScriptResponse>(request, options); }
public BytesRef BytesRef Next() { termUpto++; if (termUpto >= info.terms.size()) { return null; } else { info.term =(info.sortedTerms[termUpto], br); return br; } }
public virtual string outputToString(CharsRef output) { return output.ToString(); }
public virtual AssociateWebsiteAuthorizationProviderResponse AssociateWebsiteAuthorizationProvider(AssociateWebsiteAuthorizationProviderRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =AssociateWebsiteAuthorizationProviderRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateWebsiteAuthorizationProviderResponseUnmarshaller.Instance; return Invoke<AssociateWebsiteAuthorizationProviderResponse>(request, options); }
public void voidpopp(RevCommit c) { Block b = head; if (b == null) { b = free.newBlock(); b.ResetToMiddle(); b.Add(c); head = b; tail = b; return; } else if (b =anUnpop()) { b.unpop(c); return; } b = free.newBlock(); b.ResetToEnd(); b.unpop(c); b.next = head; head = b; } }
public EdgeNGramTokenizerFactory(IDictionary<string, string>> args) { minGramSize = GetInt(args, "minGramSize", EdgeNGramTokenizer.DEFAULT_MIN_GRAM_SIZE); maxGramSize = GetInt(args, "maxGramSize", EdgeNGramTokenizer.DEFAULT_MAX_GRAM_SIZE); if (args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public ModifyDBParameterGroupRequest(string dBParameterGroupName, List<Parameter> parameters) { _dDBParameterGroup = = = dbParameterGroupName; _i =s( = parameter; }
public virtual GetHostedZoneLimitResponse GetHostedZoneLimit(GetHostedZoneLimitRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =HostedZoneHostedZoneLimitRequestMarshaller.Instance; options.ResponseUnmarshaller = GetHostedZoneLimitResponseUnmarshaller.Instance; return Invoke<GetHostedZoneLimitResponse>(request, options); }
public virtual void Set(int index, long value) { int o = java.nio.)(( >> >>; >>; >> >> >> >> >>; int b = index & 63; int shift = b << 0; blocks[o] = (blocks[o] & ~(1L << shift)) | (value << shift); }
public override RevFilter Clone() { return new PatternSearch(pattern); }
public override string ToString() { return "spans(" + term term.toString() + ")" + +(doc == -1 ?START" : (doc == NO_MORE_DOCSS ? "ENDDOC": doc + " - " + (position == NO_MORE_POSITIONS ? "ENDPOS" :").Append()); }
public virtual bool canAppendMatch() { for (Head = : heads) { if (head != LastHead.INSTANCE) { return true; } } return false; }
public virtual int lastIndexOf(string sub(string int start) { lock (this) { return base.lastIndexOf(sububString, start); }
public virtual DeleteNetworkAclEntryResponse DeleteNetworkAclEntry(DeleteNetworkAclEntryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteNetworkAclEntryRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteNetworkAclEntryResponseUnmarshaller.Instance; return Invoke<DeleteNetworkAclEntryResponse>(request, options); }
public virtual AssociateMemberToGroupResponse AssociateMemberToGroup(AssociateMemberToGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =AssociateMemberToGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateMemberToGroupResponseUnmarshaller.Instance; return Invoke<AssociateMemberToGroupResponse>(request, options); }
public static int committer(byte[] b, int ptr) { int sz = b.Length; if (ptr == 0)ptr += 46; while (ptr < sz && b[ptr] == 'p')ptr += 48; if (ptr < sz && b[ptr] == 'a')ptrptr = nextLF ptr); return match(b, ptr, committer); }
public virtual int GetLineNumber() { return row; }
public virtual SubmodulemoduleUpdateCommand AddPath(string path) { path base =)); return this; }
public virtual GetPushTemplateResponse GetPushTemplate(GetPushTemplateRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =PushPushTemplateRequestMarshaller.Instance; options.ResponseUnmarshaller = GetPushTemplateResponseUnmarshaller.Instance; return Invoke<GetPushTemplateResponse>(request, options); }
public virtual DescribeVaultResponse DescribeVault(DescribeVaultRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeVaultRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeVaultResponseUnmarshaller.Instance; return Invoke<DescribeVaultResponse>(request, options); }
public virtual DescribeVpcPeeringConnectionsResponse DescribeVpcPeeringConnections() { return DescribeVpcPeeringConnections(new DescribeVpcPeeringConnectionsRequest()); }
public override java.nio.ByteBuffer putLong(int index, long value) { throw new java.nio.ReadOnlyBufferException(); }
public virtual RegisterDeviceResponse RegisterDevice(RegisterDeviceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =RegisterDeviceRequestMarshaller.Instance; options.ResponseUnmarshaller = RegisterDeviceResponseUnmarshaller.Instance; return Invoke<RegisterDeviceResponse>(request, options); }
public static Format byId(int id) { for (Format format : Format.values()) { if (format.Id() == id) { return format; } } throw new System.. id: " + id); }
public virtual DeleteAppResponse DeleteApp(DeleteAppRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteAppRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteAppResponseUnmarshaller.Instance; return Invoke<DeleteAppResponse>(request, options); }
public virtual GetBaiduChannelResponse GetBaiduChannel(GetBaiduRequestRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =BBaiduChannelRequestMarshaller.Instance; options.ResponseUnmarshaller = GetBaiduChannelResponseUnmarshaller.Instance; return Invoke<GetBaiduChannelResponse>(request, options); }
public virtualST.BytesReaderReaderBytesReader() { return fst.BytesReader(); }
public static bool IsValidSchemeChar(int index, char c) { if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) { return true; } if (index > 0 && ((c >= '0' && c <= '9') || c == '+' || c == '-' || c == '.')) { return true; } return false; }
public virtual ListAppliedSchemaArnsResponse ListAppliedSchemaArns(ListAppliedSchemasRequestsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAppliedSchemaArnsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAppliedSchemaArnResponseUnmarshaller.Instance; return Invoke<ListAppliedSchemaArnsResponse>(request, options); }
public virtual name() { return this.name; }
public ValueEval Evaluate(ValueEval[] args, OperationEvaluationContext ec) { if (args.Length < 1) { return ErrorEval.VALUE_INVALID; } bool isA1style; string text; try { ValueEval ve = OperandResolver.SingleValue(args[0], ec.getRowIndex ec.getColumn Index()); text = = OperandResolver.CoerceValueToString(ve); switch (args.Length) { case 1: isA1style = true; break; case 2: isA1style = EvaluateBooleanArg(args[1], ec); break; default: return ErrorEval.VALUE_INVALID; } } catch (EvaluationException e) { return } } } } } } } } } } } }
public virtual intToTo bs, int p) { int cmp; cmp = NB if (cmp != 0)return cmp; cmp = NB if (cmp != 0)return cmp; cmp = NB if (cmp != 0)return cmp; cmp = NB if (cmp != 0)return cmp; return NB }
public void RemoveName(int index) { names.remove(index); workbook.RemoveName(index); }
public GetQueueAttributesRequest(string queueUrl,List<string> attributeNames) { _quUrlUrl = queueUrl; _AttributeNamesNames(tributeNames); }
public static bool[] copyOf(bool[] original, int newLength) { if (newLength < 0) { throw new NlanativeArraySizeException(); } return copyOfRange(original, 0, newLength); }
public static void SetEnabled(d(bo enabled) { ENABLED = enabled; }
public virtual DeleteLogPatternResponse DeleteLogPattern(DeleteLogPatternRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteLogPatternRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteLogPatternResponseUnmarshaller.Instance; return Invoke<DeleteLogPatternResponse>(request, options); }
public virtual bool contains(Contain[] text, int off, int len) { return map.ContainsKey(text, off, len); }
public int GetFirstSheetIndexFromExternSheetIndex(int externSheetNumber) { return linkTable.getFirstInternalSheetIndexForExtIndex(externSheetNumber); }
public virtual bool handles(string commandLine) { return command.Length + 1 < commandLine.Length&& commandLine.Linecommand.Length()) == ' '&& commandLine.startsWith(command); }
public static void register(MergeStrategy imp) { register(imp.Name(), imp); }
public override long RamBytesUsed() { return BASE_R).GetUSED + ((index! }
public HostedZone(string id, string name, string callerReference) { _id =); _Name(name); _(callerReference =allerReference); }
public virtual GetFindingsResponse GetFindings(GetFindingsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =FindFindingsRequestMarshaller.Instance; options.ResponseUnmarshaller =FindFindingsResponseUnmarshaller.Instance; return Invoke<GetFindsResponse>(request, options); }
public virtual DescribeTopicsDetectionJobResponse DescribeTopicsDetectionJob(DescribeTopicsDetectionJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeTopicsDetectionJobRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeTopicsDetectionJobResponseUnmarshaller.Instance; return Invoke<DescribeTopicsDetectionJobResponse>(request, options); }
public bool processMatch(ValueEval evalval) { if(eval is NumericValueEval) { ifminminimumValue == null) { minimumValue = eval; } else { double currentValue = ((NumericValueEval)eval).NumberValue(); double oldValue = ((NumericValueEval)minimumValue).NumberValue(); if(currentValue < oldValue) { minimumValue = eval; } } } return true; }
public override void Write(ILittleEndianOutput out1) { out1.WriteByte(sid + PtgClass); out1.WriteShort(field_1_len_ref_subexpression); }
public static void mainmain(string[] args) { bool printTree = false; string path = null; for (int i = 0; i <args.Length; i++) { if (args[i] ="-printTree")) { printTree = true; } else { path = args[i]; } } if (args.Length != (printTree ? 2 : 1)) {. =ln("\nUsageUsage: java -classpath ... org.apache. =lurintaxonomy.facet.util.PrintrintTaxonomyStats [-Tree] /pathpath/to/taxononmy/index\n")"); }irectory dir = FSDirectory.open(Paths.get(path)); TaxonomyReader r = new DirectoryTaxonomyReader(dir); printStats(r,.out,, printTree; } } } } } } } } } } } } } }
public virtual void SetByteValue(byte value) { if (!(field(fieldsData is Byte)) { throw new ArgumentException("cannot change value type from " + fieldsData..SimpleName() + " to Byte"); } fieldsData = Byte.ToString()Of(value); }
public static int initialize() { return initialize((DEFAULT_SEED); }
public CachingDoubleValueSource(DoubleValuesValues source)) { this.source = source; cache = new new java.util.Map<>(); }
public AttributeDefinition(string attributeName, ScalarAttributeType attributeType) { _AttributeName = =Name; _AttributeType = =tributeType; }
public static string join(Collection<String>s,s, String separator) { return stringUtils.join(parts, separator, separator); }
public virtual ListTaskDefinitionFamiliesResponse ListTaskDefinitionFamilies(ListTaskDefinitionamamiliesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListTaskDefinitionFamiliesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListTaskDefinitionFamiliesResponseUnmarshaller.Instance; return Invoke<ListTaskDefinitionFamiliesResponse>(request, options); }
public virtual ListComponentsResponse ListComponents(ListComponentsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListComponentsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListComponentsResponseUnmarshaller.Instance; return Invoke<ListComponentsResponse>(request, options); }
public ActivatePhotosRequest() { base(" ActitivatevatePhoto "cloudphoto", "cloudphoto "openAPI") Protocol = ProtocolType.HTTPS; }
public virtual CreateMatchmakingRuleSetResponse CreateMatchmakingRuleSet(CreateMatchmakingRuleSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateMatchmakingRuleSetRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateMatchmakingRuleSetResponseUnmarshaller.Instance; return Invoke<CreateMatchmakingRuleSetResponse>(request, options); }
public virtual ListAvailableManagementCidrRangesResponse ListAvailableManagementCidrR(List(ListAvailableManagementCidrRangesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAvailableManagementCidrRangesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAvailableManagementCidrRangesResponseUnmarshaller.Instance; return Invoke<ListAvailableManagementCidrRangesResponse>(request, options); }
public ObjectIdSubSubclassMap<ObjectId> getBaseObjectIds() { if (baseObjectIds != null)return return new ObjectIdSubcclassMap<>(); }
public virtual DeletePushTemplateResponse DeletePushTemplate(DeletePushTemplateRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeletePushTemplateRequestMarshaller.Instance; options.ResponseUnmarshaller = DeletePushTemplateResponseUnmarshaller.Instance; return Invoke<DeletePushTemplateResponse>(request, options); }
public virtual CreateDomainEntryResponse CreateDomainEntry(CreateDomainEntryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDomainEntryRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDomainEntryResponseUnmarshaller.Instance; return Invoke<CreateDomainEntryResponse>(request, options); }
public static int GetEncodedSize(object[] values) { int result = values.Length * 1; for (Object = in values) { result += GetEncodedSize(value); } return result; }
public OpenNLPTokenizerFactory(IDictionary<string, string> args): base(args) { sentenceModelFile = require(args, SENTENCE_MODEL); tokenizerModelFile = require(args, TOKENIZER_MODEL); if ( ! args. i { throw new System.ArgumentException("Unknown parameters: " + args); } }
public virtual GetInt(int index) index) { checkIndex(index, libcore.io.SizeOf.INT); return Memory.peekInt(backingArray, offset + index, order); }
public virtualHead> GetNextHeads(char c) { if (matches(c)) { return newHeads; } return FileNameMatcher.EMPTY_HEAD_LIST; }
public override java.nio.ByteBuffer putShort(short value) { throw new java.nio.ReadOnlyBufferException(); }
public virtual void WriteUnshared(Object @object) { writeObject System.NotImplementedException true); }
public virtual offsetByByCodePoints(int index, int codePointOffset) { return this..offsetByCodePoints(value, 0, count, index,codecodePointOffset); }
public static int GetUniqueAlt(Collection<BitSet> altsetsets) { BitSet all = GetAltAlts(altsets); if ( all = 0; return ATN.INVALID_ALT_NUMBER; }
public virtual Date GetWhen() { return new Date =(when); }
public RuleTagToken(string ruleName, int bypassTokenType, string label) { if (ruleName == null || ruleName.isEmpty()) { throw new ArgumentException("ruleName cannot be null or empty."); } this.ruleName = ruleName; this.bypassTokenType = bypassTokenType; this.label = label; }
public virtual DisableOrganizationAdminAccountResponse DisableOrganizationAdminAccount(DisableOrganizationAdminAccountRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =DisableOrganizationAdminAccountRequestMarshaller.Instance; options.ResponseUnmarshaller = DisableOrganizationAdminAccountResponseUnmarshaller.Instance; return Invoke<DisableOrganizationAdminAccountResponse>(request, options); }
public virtual CreateRoomResponse CreateRoom(CreateRoomRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateRoomRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateRoomResponseUnmarshaller.Instance; return Invoke<CreateRoomResponse>(request, options); }
public virtual ModifyGroupResponse ReReplicationGroup(DeleteReplicationGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteReplicationGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteGroupResponseUnmarshaller.Instance; return Invoke<DeleteReplicationGroupResponse>(request, options); }
public override java.nio. java.nio.ecode decodejava.ByteBuffer buffer) { try { return newDecoder().onMalformedInput(CodingErrorAction..PLACE).onUnmappableCharacter(CodingErrorErrorAction.RELACE).decode(buffer); } catch (CharacterCodingException ex) { throw new Error(ex.Message(), ex); } }
public virtualistribution(string id id, String status, string domainName) { _id =); _atus(status)s); _ =Name = =omainName); }
public override[] array() { return protectedArray(); }
public DateWWindow1904Record(RecordInputStream in1) { field_1_window = in1.ReadShort(); }
public DeleteDBSnapshotRequest(string dBIdentifier) { _cSnapshotSnapshotIdentifier =BSnapshotIdentifier; }
public ParserExtensiontension GetExtension(string key) { return this.extensions.Get(key); }
public void void Inform(ResourceLoader loader) { try { if (chunkerModelFile != null) { OpenNLPOpsFactory.ChunkerModel(chunkerModelFile, loader); } } catch (IOException e) { throw new System.ArgumentException(e); } }
public virtual CompleteVaultLockResponse Comp compVaultLock(CompleteVaultLockRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =CompleteVaultLockRequestMarshaller.Instance; options.ResponseUnmarshaller = CompleteVaultLockResponseUnmarshaller.Instance; return Invoke<CompleteVaultLockResponse>(request, options); }
public virtual Get GetCharIntervals() { return points.()() }
public override long RamBytesUsed() { return values.li RamUsageEstimator + baseamamam + RamUsageEstimator.NUM_BYTES_ RamUsageEstimator.NUM_BYTES_ RamUsageEstimator.NUM_BYTES_ RamUsageEstimator.NUM_BYTES_amamREF; }
public virtual RegisterInstancesWithLoadBalancerResponse RegisterInstancesWithLoadBalancer(RegisterInstancesWithLoadBalancerRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =RegisterInstancesLoadBalancerRequestMarshaller.Instance; options.ResponseUnmarshaller = RegisterInstancesWithLoadBalancerResponseUnmarshaller.Instance; return Invoke<RegisterInstancesWithLoadBalancerResponse>(request, options); }
public DescribeClusterUserKubeconfigRequest(): base(" DescribeCluster {",",-1",",", "Describe", "csk"); UriPattern = "/k8s/[ClusterId]/user_config"); Method = MethodType.GET; }
public PrecisionRecord(RecordInputStream in1) { field_1_precision = in1.ReadShort(); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(LeftRowGutter; out1.WriteShort(TopColGutter; out1.WriteShort(RowLevelMax; out1.WriteShort(ColLevelMax; }
public virtual DeleteVirtualInterfaceResponse DeleteVirtualInterface(DeleteVirtualInterfaceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteVirtualInterfaceRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteVirtualInterfaceResponseUnmarshaller.Instance; return Invoke<DeleteVirtualInterfaceResponse>(request, options); }
public virtual Entry GetEntry(string name) FileNotFoundException { if (excludes..s(name)) { throw new FileNotFoundException(name); } Entry entry = directory.Entry(name)); return wrapEntry(entry); }
public override string ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[BACKUP]\n"); buffer.Append("    .backup          = ").Append( ").Append( toHexString(getBackup())).Append("\n"); buffer.Append("[/BACKUP]\n"); return buffer.ToString(); }
public virtual DeleteVoiceConnectorOriginationResponse DeleteVoiceConnectorOrigination(DeleteVoiceConnectorOriginationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteVoiceConnectorOriginationRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteVoiceConnectorOriginationResponseUnmarshaller.Instance; return Invoke<DeleteVoiceConnectorOriginationResponse>(request, options); }
public virtual Appendable append(char c) { write(c); return this; }
public static long Add( generationFromSegmentsFileName(string fileName) { if (fileName.equals(OLD_SEGMENTS_GEN)) { throw new System.ArgumentException("\"" + OLD_SEGMENTS_GEN + "\" is not a valid segment file name since 4.0"); } else if ( =Name GetIndexFileNames.SEGMENTS)) { return 0; } else if (fileName.startsWith(IndexFileNames.SEGMENTS)) { return (..Long(fileName.Substring(1+IndexFileNames.SEGMENTS.Length()),Character.MAX_RADIX); } else { throw new ArgumentException("fileName \"" + fileName + "\" is not a segments file"); } } }
public static TagOpt fromOption(string(string o) { if (o == null || o.Length == 0)return AUTO_FOLLOW; (TagOpt opt; values) { if (tagopt.option; } } } }
public virtual StartContentModerationResponse StartContentModeration(StartContentModerationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =StartContentModerationRequestMarshaller.Instance; options.ResponseUnmarshaller = StartContentModerationResponseUnmarshaller.Instance; return Invoke<StartContentModerationResponse>(request, options); }
public static string oteoteReplacement(string s) { StringBuilder result = new StringBuilder(s.Length); for (int i = 0; i < s.Length;; i++) { char c = s.At; if (c == '\\' || c == '$') { result.Append('\\'); } result.Append(c); } return result.ToString(); }
public virtual Set setVV newValue) { value = newValue; }
public QueryParserTokenManagager(CharStream stream) { input_streamstream = stream; }
public virtual long valueFor(double elapsed) { double val; if (modBy == 0)val = elapsed / factor;val = elapsed / factor % modBy; (type == '0')return (type ==ro0')return return }
public override java.nio.LongBuffer get(long[] dst, int dstOffset, int longCount) { byteBuffer.limit(limit * libcore.io.SizeOf.LONG); byteBuffer.position(position * libcore.io.SizeOf.LONG); if (byteBuffer is DirectByteBuffer) { ((java.nio.ByteBufferByteBuffer)) byteBuffer).(dst, dstOffset, long longCount); } else { ((java.nio.HeapByteBuffer) byteBuffer byteBuffer).get(dst, dstOffset, longCount); } this.position += longCount; return this; }
public void Remove removeListenerListeners() { _listeners.clear(); }
public CommonTokenStreamTokenStream(TokenSource tokenSource, int channel) {(tokenSource); this.channel = channel; }
public virtual ListObjectPoliciesResponse ListObjectPolicies(ListObjectPoliciesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListObjectPoliciesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListObjectPoliciesResponseUnmarshaller.Instance; return Invoke<ListObjectPoliciesResponse>(request, options); }
public virtualToToPack(AnyObjectId, int type) { flags = type << TYPE_SHIFT; }
public virtual int stem(char s, int len) { int numVowels = numVowels(s, len); for (int i = 0; i < affixes.Length; i++) { Affix affix = affixes[i]; if (numVowels > affix.vc && len >= affix.fix.Length + 3 && endsWith(s, len, affix.affix))fix { len -= affix.affix.Length; return affix.palatalizes ? unpalatalize(s, len) : len; } } return len; } }
public override void recover(Parser recognizer, RecognitionException e) { if ( lastErrorIndex==recognizer.InputStream().index() &&lastErrorStatesates != && &&lastErrorStates.s(recognizer..))) recognizer.consume(); } lastErrorIndex = recognizercognizer.InputStream { { if ( lastErrorStates ==null )ErrorErrorStates = new IntervalSet(); lastErrorStStates @(recognizercognizer.State); IntervalSet followSet = GetErrorRecoverySet(recognizer); consumeUntil(recognizer, followSet); }
public override string ToFormulaString() { string value = field_3_string; int len = value.Length; StringBuilder sb = new StringBuilder(len + 4); sb.Append(FORMULA_DELIMITER); for (int i = 0; i < len; i++) { char c = value.At(i); if (c == FORMULA_DELIMITER) { sb.Append(FORMULA_DELIMITER); } sb.Append(c); } sb.Append(FORMULA_DELIMITER); return sb.ToString(); }
super(" UnLinkFaceRequest(): base("LinkFaceFace-07-20", "UnlinkFaceFace "openAPI") Protocol = ProtocolType.HTTPS; Method = MethodType.POST; }
public virtual ConfigurationOptionSetting(string namespace, String optionName, string value) { _Namespace(namespace); _OptionName(optionName)Name); _Value(value); }
public override string GetFully(CharSequence key) { StringBuilder result = new StringBuilder(triesries.size() * 2); for (int i = 0; i < triesries.Count; i++) { r = tries..).Fully; if (r == null || (r.Length == 1 && r.0) == EOM)) { return result; } result.Append(r); } return result; }
public virtual DescribeMountTargetSecurityGroupsResponse DescribeMountTargetSecurityGroups(DescribeMountTargetSecurityGroupsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeMountTargetSecurityGroupsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeMountTargetSecurityGroupsResponseUnmarshaller.Instance; return Invoke<DescribeMountTargetSecurityGroupsResponse>(request, options); }
public virtual GetApiMappingResponse GetApiMapping(GetApiMappingRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =ApiApiMappingRequestMarshaller.Instance; options.ResponseUnmarshaller = GetApiMappingResponseUnmarshaller.Instance; return Invoke<GetApiMappingResponse>(request, options); }
public HttpRequest(string strUrl) {str = id = }
public MemFuncPtg(int subExprLen) { field_1_len_ref_subexpression = subExprLen; }
public static TermStats[] GetHighFreqTerms(IndexReader reader, int numTerms, { string TermStatsQueue tiq = null; if (field != null) { Terms terms = MultiTerms.getTerms(reader, field); if (terms == null) { throw new Exception("field " + field + " not found"); } TermsEnum termsEnum = terms. tiq = new TermStatsQueue(numTerms, comparator); tiq.fill(field, termsEnum); } else { Collection<. fieldss = FieldInfos.getIndexedFields(reader); if (fields.Count == 0) { throw new Exception("no fields found for this index"); } tiq = new TermStatsQueue(numTerms, comparator); tiq = new TermStatsQueue(numTerms, comparator); for (String fieldName : fields) { Terms terms = MultiTerms.getTerms(reader, fieldName); if (terms != null) { tiq.fill(fieldName, } } } } } } } } } } } }
public virtual DeleteApnsVoipChannelResponse DeleteApnsVoipChannel(DeleteApnsVoipChannelRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteApnsVoipChannelRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteApnsVoipChannelResponseUnmarshaller.Instance; return Invoke<DeleteApnsVoipChannelResponse>(request, options); }
public virtual ListFacesResponse ListFaces(ListFacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListFacesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListFacesResponseUnmarshaller.Instance; return Invoke<ListFacesResponse>(request, options); }
public Sh AddFieldCacheDistanceValueSource(SpatialContext ctx,ShapeFieldCacheProvider<Point> provvider, Point from, double multiplier) { this.ctx = ctx; this.from = from; this.provider = provider; this.multiplier = multiplier; }
public virtual char Get get(int index) { CheckIndex(index); return sequence.charAt(index); }
public virtual UpdateConfigurationProfileResponse UpdateConfigurationProfile(UpdateConfigurationProfileRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =ConfigurationConfigurationProfileRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateConfigurationProfileResponseUnmarshaller.Instance; return Invoke<UpdateConfigurationProfileResponse>(request, options); }
public virtual DescribeLifecycleHooksResponse DescribeLifecycleHooks(DescribeLifecycleHooksRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeLifecycleHooksRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeLifecycleHooksResponseUnmarshaller.Instance; return Invoke<DescribeLifecycleHooks options); }
public virtual DescribeHostReservationsResponse DescribeHostReservations(DescribeHostReservationsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeHostReservationsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeHostReservationsResponseUnmarshaller.Instance; return Invoke<DescribeHostReservationsResponse>(request, options); }
public static PredictionContext fromRuleContext(ATN atn, RuleContext out outerContext) { if ( outerContext == { {(@erContext = RuleContext.EMPTY; if ( outerContext.parent ==null || outerContext==RuleContext.EMPTY)) { return PredictionContext.EMPTY; } PredictionContext parent = EMPTY; parent = PredictionContext.romRuleContext(atn, outerContext.parent); ATNState state = atn.states.(outerContext.invokingState); RuleTransition transition = (RuleTransition)state.transition(0);; return SingletonPredictionContext.(parent, tranransition.followState. return SingletonPredictionContext;Number); }
public override string ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[SXVDEX]\n"); buffer.Append("    .grbit1 =").append(HexDump.intToHex(_grbit1)).Append("\n"); buffer.Append("    .grbit2 =").append(HexDump.byteToHex(_grbit2)).append("\n"); buffer.Append("    .citmShow =").Append(HexDump.bytebyteToHex(_citmow)).Append("\n"); buffer.Append("    .isxdiSort =").Append(HexDump.ShortToHex(_isxdiSort)).Append("")"); buffer.Append("    .isxdiShow =").Append(HexDump.ShortToHex(_isxdiShow)).Append("\n"); buffer.Append("    .subtotalName =").Append(_subtotalName).Append("\n"); buffer.Append("[/SXVDEX]\n"); return buffer.ToString(); }
public override string ToString() { StringBuilder r = new StringBuilder(); r.Append("Blame.Get: "); r.Append(getRequestMarshaller.); return r.ToString(); }
public virtual ListChangeSetsResponse ListChangeSets(ListChangeSetsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListChangeSetsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListChangeSetsResponseUnmarshaller.Instance; return Invoke<ListChangeSetsResponse>(request, options); }
public virtual bool isAllowNonFastForwardwards() { return allowNonFastForwards; }
public FeatRecord() { futureHeader = new FtrHeader(); futureHeader.setRecordType(sid); }
public virtual java.nio.ShortBuffer put(short c) { throw new java.nio.ReadOnlyBufferException(); }
public virtual void SetQuery(CharSequence query) { this.query = query; this.message = new MessageImpl(QueryParserMessages.INVALID_SYNTAX_CANNOT_T_PARSE,, " ""); }
public virtual StashashApplyCommand stashApply() { return new StashApplyCommand(repo); }
public virtual SetCollection<string name nameSet() { return Collections.UnmodifiableSet(dictionary.values()); }
public static int GetEffectivePort(String scheme, int specifiedPort) { if (specifiedPort != -1) { return specifiedPort; } if ("http".equalsIgnoreCase(scheme)) { return 80; } else if ("https".equalsIgnoreCase(scheme)) { return 443; } else { return -1; } }
public virtual ListAssessmentTemplatesResponse ListAssessmentTemplates(ListAssessmentTemplatesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAssessmentTemplatesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAssessmentTemplatesResponseUnmarshaller.Instance; return Invoke<ListAssessmentTemplatesResponse>(request, options); }
public virtuallRestFromRequestestoreFromClusterSnapshot(ResponseResponse CoreFromClusterSnapshot request) { { var options = new InvokeOptions(); options.RequestMarshaller =RestoreFromClusterSnapshotRequestMarshaller.Instance; options.ResponseUnmarshaller =Rest rFromClusterSnapshotResponseUnmarshaller.Instance; return Invoke<RestoreFromClusterSnapshot options options); }
public void AddShape(HSSFShape shape)) { shape.SetPatriarch(this.Patriarch()); shape.Parent(this); shapes.Addshape); }
public override bool Equals(object o) { if (this == o) return true; if (o == null || GetClass() != o.) return FacetEntry that = (FacetEntry) o; if (count != that.count) return false; if (!value.Equals(that.)); return true; }
public static int prevv(byte[] b, int ptr, char chrA) { if (ptr == b.Length)--ptr; while (ptr >= 0) { if (b[ptr--] == chrA; } return }
public virtual bool IsDeltaRepresentation() { return deltaBase != null; }
public Token emitEOF() { int cpos = GetCharPositionInLine(); int line = GetLine(); Token eof = _factory.create(_tokentokenFactorySourcePair, Token.EOF, null Token.DEFAULT_CHANNEL, _input.index(), _input.indexindex-1,line, cpos); emit(eof); return eof; }
public UpdateUserRequest(string userName) { _userName = groupName; }
public virtual RevFilter negate() { return NotRevFilter.(this); }
public virtual void SetTagger(PersonIdent taggerIdent) { tagger = taggerIdentIdent; }
public static ReadSize automatic() { Runtime rt = Runtime.Runtime(); long max = rt.maxMemory(); long total = rt.totalMemory(); long free = rt.freeMemory(); long totalAvailableBytes = max - total + freeree; long sortBufferByteSize = free/2; long minBufferSizeBytes = MIN_BUFFER_SIZE_MB*MMB; if (sortBufferByteSize <  minBufferSizeBytes|| totalAvailableBytes > 10 * minBufferSizeBytes) { if (totalAvailableBytes/2 > minBufferSizeBytes) { sortBufferByteSize = totalAvailableBytes/2; } else { sortBufferByteSize = Math.Min(ABSOLUTE_MIN_SORT_BUFFER_SIZE, sortBufferByteSize); } } return new System.ArgumentException("Size(Math.min((longlong)er.MMAX_VALUE, sort return new System.ArgumentException("Size(Math.min((long)Integ } } } } } } } } } } } } } }
public static int trimTrailingWhitespace(byte[] raw, int start, int end) { int ptr = end - 1; while (start <= ptr && isWhitespace(raw[ptrptr]))ptr-- return ptr + 1; }
public TopMarginRecord( RecordInputStream { field_1_margin = in1.ReadDouble(); }
public RetrieveEnvironmentInfoInfoRequest(EnvironmentInfoType infoType) { _InfoType =foType; }
public virtual CreatePlayerSessionsResponse CreatePlayerSessions(CreatePlayerSessionsRequest { var options = new InvokeOptions(); options.RequestMarshaller = CreatePlayerSessionsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListPlayerSessionResponseUnmarshaller.Instance; return Invoke<CreatePlayerSessions options); }
public virtual CreateProxySessionResponse CreateProxySession(CreateProxySessionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateProxySessionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateProxySessionResponseUnmarshaller.Instance; return Invoke<CreateProxySessionResponse>(request, options); }
public virtual int GetObjectType() { return type; }
public virtual GetScheme() { return scheme; }
public void characters(charchar ch, int start, int length) { contents.Supportedch, start, length); }
public FetchAlbumTagPhotosRequest() { { "openAPI")Request(): base("CloudPhoto", "2017-07-11", "FetchAlbumTag "openAPI") "openAPI") "openAPI") "openAPI") Protocol = ProtocolType.HTTPS; }
public virtual DeleteMembersResponse DeleteMembers(DeleteMembersRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteMembersRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteMembersResponseUnmarshaller.Instance; return Invoke<DeleteMembersResponse>(request, options); }
public virtual GetContactReachabilityStatuStatusResponse GetContactReachabilityStatus(GetContactReachsRequestsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = executeGetContactReachabilityStatusStatusRequestMarshaller.Instance; options.ResponseUnmarshaller = executeGetContactReachabilityStatusResponseUnmarshaller.Instance; return Invoke<GetContactReachabilityabilitysResponse>(request, options); }
public override bool Remove(object o) { return Impl.(); }
public override E last() { return backingMap.lastKey(); }
public virtual CreateStreamingDistributionResponse CreateStreamingDistribution(CreateStreamingDistributionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateStreamingDistributionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateStreamingDistributionResponseUnmarshaller.Instance; return Invoke<CreateStreamingDistributionResponse>(request, options); }
public virtual bool IsAbsolute() { return absolute; }
public virtual DisableAddOnResponse DisableAddOn(DisableAddOnRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =DisableAddOnRequestMarshaller.Instance; options.ResponseUnmarshaller = DisableAddOnResponseUnmarshaller.Instance; return Invoke<DisableAddOnResponse>(request, options); }
public virtual DescribeAliasResponse DescribeAlias(DescribeAliasRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeAliasRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeAliasResponseUnmarshaller.Instance; return Invoke<DescribeAliasResponse>(request, options); }
public override void next(int delta) { while (--delta >= 0) { if (currentSubtree != null)ptr += currentSubtree.getEntrySpan(); elseptr++; if (eof())break; returnseEntry(); } }
public override RevFilter Clone() { return new Binary(a.c.clone b. b.c b.Clone()); }
public Reader Create(Reader input) { return new PersianCharFilter(input); }
public virtual option() { return option; }
public override string ToString() { StringBuilder sb = new StringBuilder("["); for (Object i = in this) { if (sb.Length>1).Length, "); if (item is char[]) { sb.Append((char[]) item); } else { sb.Append(item); } } return sb.ToString()]').ToString(); }
public virtual DescribeSignalingChannelResponse DescribeSignalingChannel(DescribeSignalingChannelRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeSignalingChannelRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeSignalingChannelResponseUnmarshaller.Instance; return Invoke<DescribeSignalingChannelResponse>(request, options); }
public virtual AttachStaticIpResponse AttachStaticIp(AttachStaticIpRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =AttachStaticIpRequestMarshaller.Instance; options.ResponseUnmarshaller = AttachStaticIpResponseUnmarshaller.Instance; return Invoke<AttachStaticIpResponse>(request, options); }
public override string ToString() { StringBuilder sb = new StringBuilder(64); CellReference crA = new CellReference(_firstRowIndex, _firstColumnIndex, false, false); CellReference crB = new CellReference(_lastRowIndex, _lastColumnIndex, false, false); sb.Append(.Append("Type().Name); sb.Append( [").append(crA.formatAsString()).append(':') ").Append( ").Append( "UtilAsUtil).Append("]"); return sb.ToString(); }
public BloomFilteringPostingsFormat(PostingsFormat delegatePostingsFormat,BloomFilterFactory bloomFilterFactory) {LOOOM_CODEC_NAME); this.delegatePostingsstingsFormat = delegatePostingsFormat; this.bloomFilterFactory = bloomFilterFactory; }
public virtual ListTemplatesResponse ListTemplates(ListTemplatesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListTemplatesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListTemplatesResponseUnmarshaller.Instance; return Invoke<ListTemplatesResponse>(request, options); }
public TimerThread(long resolution, Counter co counter)THREAD_NAME); this.counter = counter; this.setDaemon(true); }
public DrawingRecord() { recordData = EMPTY_BYTE_ARRAY; }
public virtual ListDirectoriesResponse ListDirectories(ListDirectoriesRequest request) { { var options = new InvokeOptions(); options.RequestMarshaller = ListDirectoriesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListDirectoriesResponseUnmarshaller.Instance; return Invoke<ListDirectorsResponse>(request, options); }
public override void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) { for (int j = 0; j < iterations; ++j) { byte block = blocks[blocksOffset++]; values[valuesOffset++] = ((int)((uint))((ulong >> 1 1; values[valuesOffset++] = ((int)((uint)ul >>) & 1; values[valuesOffset++] = ((int)((uint)ul >>) & 1; values[valuesOffset++] = ((int)((uint)ul >> & 1; values[valuesOffset++] = ((int)((uint)ul 3) & 1; values[valuesOffset++] = ((int)((uint)block >> & 1; values[valuesOffset++] = ((int)((uint)ul 1) & 1; values[valuesOffset++] = block & 1; } }
public virtual GroupingSearch disableCaching() { this.maxCacheRAMMB = null; this.maxDocsToCache = null; return this; }
public static int idealByteArraySize(int need) { for (int i = 4; i < 32; i++)if (need <= <= (1 <<) - 12)return (1 << i) - 12; return need; }
public virtual UpdateAssessmentTargetResponse UpdateAssessmentTarget(UpdateAssessmentTargetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =AssessmentAssessmentTargetRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateAssessmentTargetResponseUnmarshaller.Instance; return Invoke<UpdateAssessmentTargetResponse>(request, options); }
public virtual ModifyVolumeResponse ModifyVolume(ModifyVolumeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyVolumeRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyVolumeResponseUnmarshaller.Instance; return Invoke<ModifyVolumeResponse>(request, options); }
public Cell merge(Cell m, Cell e) { if (m.cmd == e.cmd && m.ref == e.ref && m.skip == e.skip) { Cell c = new Cell(m); c.cnt += e.cnt; return c; } else { return null; } }
public override java.nio.ByteBuffer read(int length, long position) { if (position size()) { throw new System.IndexOutOfRangeException("Position " + position + " past the end of the file"); } ByteBuffer dst; if (writable) { dst = channel.map(FileChannel.MapMode.READ_WRITE, position, length);;; buffersToClean.Add(dst); } else { channelannel.position(position); dst = ByteBuffer.Buffer.allocate(length); int worked = IOUtils.readFully(channel, dst); ifworkworked == -1) { throw new IndexOutOfRangeException("Position " + position + " past the the end of the file } } dst.position(0); return dst; } } } } } } } } } } } } }
public virtual respondActivityTaskCompCompleted(d(ResponddActivityTaskCompCompd request)letedletedRequestRequestTask var options = new InvokeOptions(); options.RequestMarshaller = RespondActivityTaskCompletedRequestMarshaller.Instance; options.ResponseUnmarshaller = RespondActivityTaskCompletedResponseUnmarshaller.Instance; return Invoke<RespondActivityTaskCompletesResponse>(request, options); }
public virtual void incrementProgressBy(int diff) { lock (this) { _mgresgress(mProgress + diff); }
public virtualetadataDiff compareMetadata(DirCacheEntry entry) { if (entry.IsAssumeValid())return Met if (entry.isUpdateNeeded; if (entry =UpdateNeeded())returnYETADATA; if (ModeModeDifferent(entry.getRawMode()))return MetadataDiffIFFER_BY_METADATA; int type = mode & FileMode..TYPE_MASAS; if (type == FileMode.TYPE_E_TREE || || type == FileMode.GITLINK)return MetadataDiff.EQQUAL; if (!entry.isSmudged() entry; { if (timestampComparator.compare(cacheLastModified, fileLastModified, return MetadataDiff.DIFFER_BY_TIMESTAMP; } if (entry.isSmudged()) { return MetadataDiff.SMUDGED; } return MetadataDiff.EQUALAL; } } } } } } } } } } } }
public static NumberRecord convertToNumberRecord(RKRecord rk) { NumberRecord num = new NumberRecord(); num.SetColumn(rk.Column; num.Row(rk.Row; num.SetXFIndex(rk.getXFIndex; num return num; }
public override java.nio.CharBuffer put(char[] src, int srcOffset, int charCount) { byteBuffer.limit(limit * libcore.io.SizeOf.CHAR); byteBuffer.position(position * libcore.io.SizeOf.CHAR); if (byteBuffer is java.nio.ReadWriteDirectByteBuffer) { ((java.nio.ReadWriteDirectByteBuffer) byteBuffer byteBuffer).put(src, srcOffset, charCount); } else { ((java.nio.ReadWriteHeapByteBuffer) byteBuffer).).put(src, srcOffset, charCount); } this.position += charCount; return this; }
public int intCells() { java.util.u> i = cell V>s. V>Set int size = 0; for (; Character c = i.next(); Cell e = at(c); if (e.cmd >= 0 || e.ref >= 0) { size++; } } return size; }
public BeiderMorseFilterFactory(IDictionary<string, string> args): base(args) { NameType nameType = NameType.valueOf(get(args, "nameType", NameType.GENERIC RuleType ruleType = RuleType.valueOf(get(args, "ruleType", RuleType.APPROX bool concat = GetBoolean(args, "concat", true); engine = new PhoneticEngine(nameType, ruleType, concat); Set.Write = langs = GetSet(args, "languageSet"); languageSet = (null == langs || (1 == langs.size() && langs. =us("auto"))) ? null : LanguageSet =romrom(langs); if (args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public static double varp(double[] v) { double r = Double.NaN; if (v! = && v.Length > 1) { r = devvsq(v) /v.Length; } return r; }
public PersianNormalizationFilterFactory(IDictionary<string, string> args): base(args) { if (args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public static WeightedTerm[] GetTerms(Query query, bool prohibited, String fieldName) field { java.util.IteratorWeightedTerm> terms = new Hash)Set<>(); Pred:: query.visit(new BoostedTermExtractor(1, terms, prohibited, fieldSelector)); return terms.toArray(new WeightedTerm[0]); }
public virtual DeleteDocumentationPartResponse DeleteDocumentationPart(DeleteDocumentationPartRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDocumentationPartRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDocumentationPartResponseUnmarshaller.Instance; return Invoke<DeleteDocumentationPartResponse>(request, options); }
public override string ToString() { StringBuilder sb = new StringBuilder(); buffer.Append("[[ =T]\n"); buffer.Append("    .x     =  ").Append(.Append("X()) ").Append(\n'); buffer.Append("    .y      = ").Append( ").Append( ").Append( ").Append( ").Append( ").Append("); buffer.Append("    y       ").Append( ").Append( ").Append( ").Append( ").Append( ").Append("); sb.Append("    .width = ").Append( ")Width")")\n"); buffer.Append("    .height= ").Append( Height())")")\n'); sb.Append("[/")T]\n"); return sb.ToString(); }
public override Get Get index) { checkIndex(index); return backingArray[offset + index]; }
public override string ToString() { return image; }
public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1) { try { AreaEval reA = EvaluateRef(arg0); AreaEval reB = EvaluateRef(arg1); AreaEval result = resolveRange(reA, reB); if (result == null) { return ErrorEval.NULL_INTERSECTION; } return result; } catch (EvaluationException e) { return e.GetErrorEval(); } }
public override void C { weightBySpanQuery.clear(); }
public int int FindEndOffset(stringBuilder buffer, int start) { if start start >.Length || start < 0; bi.Text(buffer.Substring(start)); return bi.next() + start; }
public SrndQuery PrimaryQuery() { SrndQuery q; switch ((jj_ntk ==-1)?jj_ntk : :jj_ntk) { case LPAREN: jj_conconsume_token(ReLPARENN); q = FieldsQuery(); jj_conconsume_token(ReRPARENN); break; case OR: case AND: case W: case N: q = PrefixOperatorQuery(); break; case TRUNCQUOTED: case QUOTED: case SUFFIXTERM:: case TRUNCTERM: case TERM: q = SimpleTerm(); break; default: jj_la1[5] = jj_gen; jj_j_consume_token(Re-;;;;;;;;;;;;; } } } } } } } } } } }
public virtual DeleteApiKeyResponse DeleteApiKey(DeleteApiKeyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteApiKeyRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteApiKeyResponseUnmarshaller.Instance; return Invoke<DeleteApiKeyResponse>(request, options); }
public InsertTagsRequest() { base("sertsertTag", "InsertTags", "otots",s", Method = MethodType.POST; }
public virtual DeleteUserByPrincipalIdResponse DeleteUserByPrincRequestalId(Id(DeleteUserByPrincipalIdRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteUserByPrincipalIdRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteUserByPrincipalIdResponseUnmarshaller.Instance; return Invoke<DeleteUserByPrincipalIdResponse>(request, options); }
public virtual DescribeNetworkInterfacesResponse DescribeNetworkInterfaces(DescribeNetworkInterfacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeNetworkInterfacesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeNetworkInterfacesResponseUnmarshaller.Instance; return Invoke<DescribeNetworkInterfacesResponse>(request, options); }
public virtual int Serialize( offset, byte[] data, EscherSerializationListener listener) { listener.BeforeRecordSerialize(offset offset, RecordId, this); LittleEndian.PutShort(data, offset, GetOptions; LittleEndian.PutShort(data, offset + 2, RecordId(); LittleEndian.PutInt(data, offset + 4, 8; LittleEndian.PutInt(data, offset + 8, field_1_numShapes); LittleEndian.PutInt(data, offset + 12, field_2_lastMSOSPID); listener.fterRecordSerialize(offset offset + 16, Record Record RecordSize(), this); return.Write; }
public virtual CreateSecurityConfigurationResponse CreateSecurityConfiguration(CreateSecurityConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateSecurityConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateSecurityConfigurationResponseUnmarshaller.Instance; return Invoke<CreateSecurityConfigurationResponse>(request, options); }
public virtual DescribeClientVpnConnectionsResponse DescribeClientVpnConnections(DescribeClientVpnConnectionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeClientVpnConnectionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeClientVpnConnectionsResponseUnmarshaller.Instance; return Invoke<DescribeClientVpnConnectionsResponse>(request, options); }
public static void (double[] array, double value) { for (int i = 0; i < array.Length; i++) array[i] = value; } }
public virtual bool HNext()Next() { return nextId < cell; }
public PostingsEnum reset(int[] postings) { this.postings = postings; upto = -2; freq = 0; return this; }
public bool H HAll(RevFlagSetSet) { return (flags & Set.mask) == _.mask; }
public virtual ModifyAccountResponse ModifyAccount(ModifyAccountRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyAccountRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyAccountResponseUnmarshaller.Instance; return Invoke<ModifyAccountResponse>(request, options); }
public Token LT(int k)) { lazzyInit(); if ( k ==0 ) return if ( k < 0 int i = p + k - 1; syn if ( i >= tokens.Count) { return tokenictionary<string,(tokens.Count-1); } return token._(i); }
public void RemoveSheet(int sheetIndex) { if (boundsheets.Count > sheetIndex) { records.Remove(records.getBspos() (boundsheets.size() - 1) + - - sheetIndex); boundsheets.re(sheetsheetIndex); fixTabIdRecord(); } int sheetNum1Based = sheetIndex + 1; for(int i =; i <getNumNames() i++) { NameRecord nr = GetNameRecord(i); if(nr.SheetNumber == sheetNum1Based) { nr.SheetNumber(0); } else if(nr.SheetNumber > sheetNum1Based) { nr.SheetNumber(nr.SheetNumber()- } } } if (linkTable != null) { linkTable.RemoveSheet(sheetIndex); } } } } } } } } } } } } } } }
public void RemoveName(string name) { int index = GetNameIndex(name); RemoveName(index); }
public override bool Equals(objectf { { if (!(o is Property)) { return false; } Property p = (Property) o; Object pValue = p.Value(); long pId = p.ID(); if (id != pId || (id != 0 && !typesAreEqual(type, p.Type()))) { return false; } if (value == null && pValue == null) { return true; } if (value == null || pValue == null) { return false; } if ( = => valueClass = value.; } C (. => pValueClass = pValue if (!(valueFrom(valueClass)) { } if } } } } } } } } } } }
super(" super("cr",cr",cr",Request(): base("cr", "2016-06-07", "GetRepoBuildList", "cr "openAPI") "openAPI") UriPattern = "/repos/[RepoNamespace]/[RepoName]/build"); Method = MethodType.GET; }
public virtualessageWriterWriter() { buf = new ByteArrayOutputStream(); enc = new OutputStreamWriter.RawStream(), UTF_8); }
public virtual void ApRecordBase r) { _rec =r); }
public override void close() { if (read(skipBuffer) != -1 || actualSize != expectedSize) { throw new CorruptObjectException(MessageFormat.format(JGitText.get().pfileCororruptionDete =ted,JGitTextJGitText.get.wrrongDecmpmpressedLength)); } int used = bAvail - inf.getRemaining(); if (0 < used) { onObjectData(src, buf, p, used); use(used); } } }
public virtual DescribeModelPackageResponse DescribeModelPackage(DescribeModelPackageRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeModelPackageRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeModelPackageResponseUnmarshaller.Instance; return Invoke<DescribeModelPackageResponse>(request, options); }
public void construct(CellValueRecordInterface rec, RecordStream rs, SharedValueManager sfh) { if (rec is FormulaRecord) { FormulaRecord formulaRec = (FormulaRecord)rec; stringRecord cachedText; (<Next()()NextNextds Record; if (next = == StringRecord.Class) { cachedText = (StringRecord) rs.getNext(); } else { cachedText = null; } insertCellCell(new FormulaRecordAggregate(formulaRec, cachedText, sfh)) } else { insert } } }
public overrideecomp { return new DeflateDecompressor(); }
public virtual UpdateS3ResourcesResponse UpdateS3Resources(UpdateS3ResourcesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =S3S3ResourcesRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateS3ResourcesResponseUnmarshaller.Instance; return Invoke<UpdateS3ResourcesResponse>(request, options); }
public GroupQueryNode(QueryNode query) { if (query == null) { throw new QueryNodeError(new Message(QueryParserMessages.PARAMEARTER_VALUE_NOT_SUPPORTED, "query", "null")); } allocate(); SetLeaf(false); Add(query); }
public override string ToQueryString(EscapeEscapeQuerySyntax escaper) { StringBuilder path = new StringBuilder(); path.Append("/").append(getFirstPathElement; for (QueryText pathelement in GetPathElements(1)) { value = escaper.escape(pathelement.value, Locale.Default(),. Type.Type.STRING); path.Append("/\"").append(value).append("\""); } return path.ToString(); }
public void RemoveCellComment() { HSSFComment comment = _sheet.findCellComment(_record.Row(), _record..com; if (null == comment) { return; } _sheet.DrawingPatriarch().remove(comment); } }
public override void Reset() { arriving = -1; leaving = -1; }
public virtual ActivateUserResponse ActivateUser(ActivateUserRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =ActivateUserRequestMarshaller.Instance; options.ResponseUnmarshaller = ActivateUserResponseUnmarshaller.Instance; return Invoke<ActivateUserResponse>(request, options); }
public virtual bool isCharsetDetected() { throw new System.NotSupportedException(); }
public virtuall modifyusterd(SnapshotCopyCopyRetentionPeriod(ModifySnapshotCopyRePPeriodRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifySnapshotCopyRetentionPeriodRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifySnapshotCopyRetenSnapshotCopyRetenodInstance;Instance; return Invoke<ModifySnapshotCopyRetentionPeriodResponse>(request, options); }
public virtual DeleteClusterSubnetGroupResponse DeleteClusterSubnetGroup(DeleteClusterSubnetGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteClusterSubnetGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteClusterSubnetGroupResponseUnmarshaller.Instance; return Invoke<DeleteClusterSubnetGroupResponse>(request, options); }
public static string Decode(byte[] buffer) { return this(buffer(buffer, 0,.Length); }
public virtual int GetDefaultPort() { return -1; }
public virtual StopTaskResponse StopTask(StopTaskRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =StopTaskRequestMarshaller.Instance; options.ResponseUnmarshaller = StopTaskResponseUnmarshaller.Instance; return Invoke<StopTaskResponse>(request, options); }
public override void SeekExact(BytesRef target, TermState otherState) { Debug.Assert((otherState != null && otherState List< BlockTermState; Debug.Assert( (intdoOrd || ((BlockTermState) otherState).ord < numTerms; state.From(otherState); seekPending = true; indexIsCurrent = false; term._copyBytes(target); }
public SeriesToChartGroupRecord(RecordInputStream in1) { field_1_chartGroupIndex = in1.ReadShort(); }
public static void writeUnicodeStringFlagAndData @out out, string value) { bool is16Bit = hasMultiMultibyte(value); out1.WriteByte(is16Bit ? 0x01 : 0x00); if (is16Bit) { putUnicodeLE(value, out1); } else { putCompressedUnicode(value, out1); } }
public virtual AuthorizeSecurityGroupIngressResponse AuthorizeSecurityGroupIngress(AuthorizeSecurityGroupIngressRequest request) { { var options = new InvokeOptions(); options.RequestMarshaller =AuthorAuthorizeSecurityGroupIngressRequestMarshaller.Instance; options.ResponseUnmarshaller =AuthorAuthorizeSecurityGroupIngressResponseUnmarshaller.Instance; return Invoke<AuthorizeSecurityGroupsResponse>(request, options); }
public virtual void AddFile(string file) { CheckFileNames( =singleton(file)); _Files = =namedForThisSegment(file)); }
public void SetSize(int width, int height) { mWidth = width; mHeight = height; }
public virtual SetPrecedenceFilterSuppressed(boolean value) { if (value) { this.reachesIntoOuterContext |= 0x40000000; } else { this.reachesIntoOuterContext &= ~SUPPRESS_PRECEDENCE_FILTER; } }
public virtual IntervalSet LOOK(ATNState s, RuleContext ctx) { return LOOK(s, null, ctx); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(OptionFlags()); out1.WriteShort(RowHeight; }
public Builder(bool dedup) { this.dedup = dedup; }
public Hashtable(int capacity, float loadFactor) { this(capacity)); if (loadFactor <= 0 || Float.isNaN(loadFactor)) { throw new ArgumentException("Load factor: " + loadFactor); } }
public virtual bool Get(CharSequence { int bucket = normalCompletion.getBucket(key)); return bucket == -1 ? null : Long.valueOf(bucket); }
public virtual ListHyperParameterTuningJobsResponse ListHyperParameterTuningJobs(ListHyperTTuningJobsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListHyperParameterTuningJobsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListHyperParameterTuningJobResponseUnmarshaller.Instance; return Invoke<ListHyperParameterTuningJobsResponse>(request, options); }
public virtual DeleteTableResponse DeleteTable(string tableName) { var request = new DeleteTableRequest(); request =Queue DeleteName queue queue; }
public bool lessThan(TextFragment fragA, TextFragment fraFragB) { if (fragA.Score() == fragB;raggNum > fragB.ragNum; else }
public void freeBefore(int pos) { Debug.Assert(pos >= 0; Debug.Assert( pos <= nextPos; int newCount = nextPos - pos; Debug.Assert( (intCount <= count count: "newCountCount=" + newCount + + " count=" Debug.Assert newCount <= buffer.length.length: "newCount=" + newCount + " buf.length.length buffer.Length; count = newCount; }
public virtual UpdateHITTypeOfHITResponse UpdateHITTypeOfHIT(UpdateHITTypeOfHITRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =HITHITTypeOfHITRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateHITTypeOfHITResponseUnmarshaller.Instance; return Invoke<UpdateHITTypeOfHITResponse>(request, options); }
public virtual UpdateRecommenderConfigurationResponse UpdateRecommenderConfiguration(UpdateRecommenderConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =RecomRecommenderConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateRecommenderConfigurationResponseUnmarshaller.Instance; return Invoke<UpdateRecommenderConfigurationResponse>(request, options); }
public virtual int CompareTo(BytesRef other) { return Arrays. }
public virtual int stem(char s, int len) { if (len > 4 && s[len-1-1] == 'ss')len--; if (lenlen-1 && slenlenlen; if (len > 5 &&(endsWith(s, len, "ene") ||  (endsWith(s, len, "ane") &&useNynynorsk                     ; if (len > 4 &&(endsWith(s, len, "er") ||   sWith(s, len, "en") ||   endsWith(s, len, "et") || ||  (endsWith(s, len,, "ar") &&useNynorsk                    len -; if (len > 3)switch(s[len-1 case 'a': case 'e': return len - 1; } } return }
public virtual DescribeDBSnapshotsResponse DescribeDBSnapshots(DescribeDBSnapshotsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDBSnapshotsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeSnapshotsResponseUnmarshaller.Instance; return Invoke<DescribeDBSnapshotsResponse>(request, options); }
public SortedortedSetDocValuesFacetField(String dim, string label) { super("ddummy", TYPE); FacetField..ifyLabel(label; this.dim = dim; this.label = label; }
public virtual CreateDocumentationPartResponse CreateDocumentationPart(CreateDocumentationPartRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDocumentationPartRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDocumentationPartResponseUnmarshaller.Instance; return Invoke<CreateDocumentationPartResponse>(request, options); }
public virtual string GetValue() { return value; }
public virtual java.nio.ShortBuffer asReadOnlyBuffer() { return duplicate(); }
public virtual UpdateDataSourcePermissionsResponse UpdateDataSourcePermissions(UpdateDataSourcePermissionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =DataSourceDataSourcePermissionsRequestMarshaller.Instance; options.ResponseUnmarshaller =DataSourceDataSourcePermissionsResponseUnmarshaller.Instance; return Invoke<UpdateDataSourcePermissionsResponse>(request, options); }
public static org.apache.popoi.hssf.re.record.RecordRecord create I_RecordCreator constructor = _recordCreatorsById.Integer. =Of =.Sid())); if (constructor == null) { return new UnknownRecord(in); } return constructor.Create(in); }
public virtual int GetCount() { return mTab _limit; }
public virtual DeleteApplicationReferenceDataSourceResponse DeleteApplicationReferenceDataSource(DeleteApplicationReferenceDataSourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteApplicationReferenceDataSourceRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteApplicationReferenceDataSourceResponseUnmarshaller.Instance; return Invoke<DeleteApplicationReferenceDataSourceResponse>(request, options); }
public virtual CreateProjectVersionResponse CreateProjectVersion(CreateProjectVersionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateProjectVersionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateProjectVersionResponseUnmarshaller.Instance; return Invoke<CreateProjectVersionResponse>(request, options); }
public override java.nio.IntBuffer slice() { return new java.nio.ReadOnlyIntArrayBuffer(remaining(), backingArray, offset + _position); }
public override Get Get() { if (position == _limit) { throw new java.nio.BufferUnderflowException(); } return this.block.peekByte(offset + _position++); }
public override java.nio.CharBufferBuffer put(int index, long c) { CheckIndex(index); backingArray[offset + index] = c; return this; }
public StoredField(string name, float value) { FieldsData = = TYPE); fieldsData = value; }
public virtual IntervalSet GetExpectedTokensWithinCurrentRule() { ATN atnn = GetInterpreter().atn; ATNState s = atn.states..State); return atn.nextTokens(s(s); }
public override string ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[FILESHARING]\n"); buffer.Append("    .readonly       = ").Append(getReadOnly() == 1 ? "true" : "false").Append("\n"); buffer.Append("    .password       = ").Append(Stringer.UtilHexString( Password())).Append("\n"); buffer.Append("    .username       = ").Append(getUsername()).Append("\n"); buffer.Append("[/FILESHARING]\n"); return buffer.ToString(); }
public virtual SubmoduleInitCommand(Repository repo repo) {s = new ArrayList<)>; } }
public virtual void Include(string name, AnyObjectId id) { validRefName = Repository.CreateValidRefName(name) || Constants.HEAD.equals(name); var (!validRefName)throw return (in } }
public virtuallEnableCopy enableSnapshotCopy(EnableSnapshotCopyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =EnableSnapshotCopyRequestMarshaller.Instance; options.ResponseUnmarshaller = CopySnapshotCopyResponseUnmarshaller.Instance; return Invoke<EnableSnapshotCopyResponse>(request, options); }
public virtual ValueFiller GetValueFiller() { return new ValueFiller() { }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteByte(Pane()); out1.WriteShort(ActiveRow; out1.WriteShort(ActiveCellCol()); out1.WriteShort(ActiveCellRef()); int nRefs = field_6_refs.Length; out1.WriteShort(nRefs); for (CellRangeAddress8Bit field_6_ref : field_6_refs) { field_6_ref.erializeerializeize(out); } }
public static Counter newCounter() { return newCounter(false); }
public virtual bool Get(string name, bool dflt) { vals[] = (s. if (vals != null) { return vals[ByNumber % vals.Length]; } if sval = props.get") < 0) { if (.......; } int k = sval....;; vals = =...; } return } } }
public void void preSerialize() { if(record =Tabpos() > 0) { TabIdRecord tir = ( TabIdRecord ) records.get(recordcords.getabpos()); iftitirtabids.Length < boundsheets.size()) { fixTabIdRecord(); } } }
public LimitTokenCountAnalyzer(Analyzer delegate, int maxTokenCount, bool consumeAllTokenTokens) { this.delegate = delegate; this.maxTokenCount = maxTokenCount; this.consumeAllTokens = consumeAllTokens; }
public ExternalBookBlock(int numberOfSheets) { _externalBookRecord = SupBookRecord.CreateInternalReferences((short) numberOfSheets); _externalNameRecords = new ExternalNameRecord[0]; _crnBlocks = new CRNBlock[0]; }
public override string ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[SCENARIOPROTECT]\n"); buffer.Append("    .protect         = ").Append(getProtect()).Append("\n"); buffer.Append("[/SCENARIOPROTECT]\n"); return buffer.ToString(); }
public virtual PPushCommand SetThin(bool thin) { CheckCallable(); this.thin = thin; return this; }
public virtual int CompareTo(SearcherTracker other) { return Sharpen..compare }
public override java.util. Clone() { { return new ReverseStringFilter(in)); }
public BlockList() { directory = BlockList.<T>Directory((22566; directory = BlockList..<T>BlockBlock; tailBlock = directory[0]; }
public Query QueryScorer(WeightedSpanTerm[] weightedTerms) { this.fieldWeightedSpanTerms = new List<Map<>(weightedTerms.Length)); for (int i = 0; i < weightedTerms.Length; i++) { WeightedSpanTerm exististingTerm = fieldWeightedeightedSpanTerm); if ((existingTerm == null) ||(existingTermTerm.w < weightedTerms[i].weight)))) { fieldWeightedSpanTerms.put(weightedTerms[i].term, weightedTerms[i]); maxTermWeight = Math.Min(maxTermWeight, weightedTerms[i].Weight); } } } } }
public override bool Equals(object _ {er) { Debug.Assert (everEquals(_)er); if (_other is MergedGroup) { java.util. (intGroup<)>> = = ( if (groupValue == null) { return other == null; } else { return groupValue.Equals( 0;er); } } else { return false; } }
public virtualset charset() { return cs; }
public virtual DescribeExperimentResponse DescribeExperiment(DescribeExperimentRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeExperimentRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeExperimentResponseUnmarshaller.Instance; return Invoke<DescribeExperimentResponse>(request, options); }
public EscherGraphics(HSSFShapeGroup escherGroup, HSSFWorkbookWorkbook workbook,  forecolor, float verticalPointsPerPixel) { this.escherGroup = escherGroup; this.workbook = workbook; this.verticalPointsPerPixel = verticalPointsPerPixel; this.verticalPixelsPerPoint = 1 / verticalPointsPerPixel; this.font = new Font("Arial", 0, 10); this.foreground = forecolor; }
public override string pattern() { return patternText; }
public virtual DeleteRouteTableResponse DeleteRouteTable(DeleteRouteTableRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteRouteTableRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteRouteTableResponseUnmarshaller.Instance; return Invoke<DeleteRouteTableResponse>(request, options); }
public virtual AssociateVPCWithHostedZoneResponse AssociateVPCWithHostedZone(AssociateVPCWithWithHostedZoneRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =AssociateVPCWithHostedZoneRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateVPCWithHostedZoneResponseUnmarshaller.Instance; return Invoke<AssociateVPCWithHostedZoneResponse>(request, options); }
public virtual PutIntegrationResponse PutIntegration(PutIntegrationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = executePutIntegrationRequestMarshaller.Instance; options.ResponseUnmarshaller = PutIntegrationResponseUnmarshaller.Instance; return Invoke<PutIntegrationResponse>(request, options); }
public SimpleEntry(K theKey, V theValue) { key = theKey; value = theValue; }
public override void Decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) { for (int i = 0; i < iterations; ++i) { long byte0 = blocks[blocksOffset++] & 0xFF; long byte1 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = (byte0 << 4) | ((int)((uint)byte >> >>; >>; long byte2 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = ((byte1 & 15) << 8) | byte2; } }
public virtual DisassociateConnectionFromLagResponse DisassociateConnectionFromLag(DisassociateConnectionFromLagRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =DisassociateConnectionFromLagRequestMarshaller.Instance; options.ResponseUnmarshaller = DisassociateConnectionFromLagResponseUnmarshaller.Instance; return Invoke<DisassociateConnectionFromLagResponse>(request, options); }
public virtual FileMode GetOldMode() { return oldMode; }
public override string ToString() { return m.ToString(); }
public virtual StopKeyPhrasesDetectionJobResponse StopKeyPhrasesDetectionJob(StopKeyPhraDetectionJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =StopKeyPhrasesDetectionJobRequestMarshaller.Instance; options.ResponseUnmarshaller = StopKeyPhrasesDetectionJobResponseUnmarshaller.Instance; return Invoke<StopKeyPhrasesDetectionJobResponse>(request, options); }
public override string ToString() { return "[Array Formula or Shared Formula]\n" + "row = " + getRow() + "\n" + "col = " + getColumn() + "\n"; }
public virtual ListDominantLanguageDetectionJobsResponse ListDominantLanguages(ListDominantLanguageDetectionJobsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListDominantLanguageDetectionJobsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListDominantLanguageDetectionJobDetectionJobResponseUnmarshaller.Instance; return Invoke<ListDominantLanguageDetectionJobsResponse>(request, options); }
public override string ToString() { return "slice start=" + start + " length=" + length + " readerIndex=" + readerIndex; }
public static int ParseseHexInt4(f byte digit) { byte r = digits16[digit]; if (r < 0) { return r; }
public Attribute(string name, string value) { _Name =); _)value); }
public virtual DescribeStackSetOperationResponse DescribeStackSetOperation(DescribeStackSetOperationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeStackSetOperationRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeStackSetOperationResponseUnmarshaller.Instance; return Invoke<DescribeStackSetOperationResponse>(request, options); }
public HSSFCell GetCell(int cellnum) { return GetCell(cellnum, book.getMissingCellPolicy()); }
public override void Write(byte[] b) { writeContinueIfRequired(b.Length); _ulrOutput; }
public ResetImageAttributeRequest(string imageId, ResetImageAttributeName attribute) { _iIdId = =geId)Id; _tribute( =at atName; }
public virtual void discard @Contents() { resultContents = null; }
public virtual ObjectId GetPeeledObjectId() { return GetLeaf().getPeeledObjectIdObjectId(); }
public virtual undeprecateDomain(UndeprecateDomainDomainRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =UndeprecateDomainRequestMarshaller.Instance; options.ResponseUnmarshaller = undeprecateDomainDomain(Unde; return Invoke<UndeprecateDomainResponse>(request, options); }
public override void Write(ILittleEndianOutput out1) { out1.WriteByte(sid + PtgClass); out1.WriteByte(field_3_string.Lengthfield_3_; out1.WriteByte(_is16bitUnicode ? 0x01 : 0x00); if (_is16bitUnicode) { StringUtil.PutUnicodeLE(field_3_string, out1); } else { StringUtil.PutCompressedUnicode(field_3_string, out1); } }
public virtual DeleteQueueResponse DeleteQueue(string queueUrl) { var request = new DeleteQueueRequest() request =Queue DeleteQueue queue queue; }
public virtual void SetCheckEofAfterPackFooter(bool b) { CheckEofAfterPackFooter = b; }
public void swap() { int sBegin = beginA; int sEnd = endA; beginginA = beginB; endA = endB; beginB = sBegin; endB = sEnd; }
public virtual int GetPackedGitWindowSize() { return packedGitWindowSize; }
public virtual PutMetricDataResponse PutMetricData(PutMetricDataRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = executePutMetricDataRequestMarshaller.Instance; options.ResponseUnmarshaller = PutMetricDataResponseUnmarshaller.Instance; return Invoke<PutMetricDataResponse>(request, options); }
public virtual GetCelebrityRecognitionResponse GetCelebrityRecognition(GeteelebrityRecognitionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =CCelebrityRecognitionRequestMarshaller.Instance; options.ResponseUnmarshaller = GetCelebrityRecognitionResponseUnmarshaller.Instance; return Invoke<GetCelebrityRecognitionResponse>(request, options); }
public CreateQueueRequest(string queueName) { _nameNameName =NameName; }
public Area3DPxg(int externalWorkbookNumber, SheetIdentifier sheetName, AreaReference arearef) { this.externalWorkbookNumber = externalWorkbookNumber; this.firstSheetName = sheetName.GetSheetIdentifier; if (sheetName in1.Read SheetRangeIdentifier) { this.lastSheetName = ((SheetRangeIdentifier)sheetName).getLastSheet; } else { this.lastSheetName = null; } }
public void SetBaselineline(long clockTime) { t0 = clockTime; timeout = t0 + ticksAllowed; }
public virtual MoveAddressToVpcResponse M mveAddressToVpc(MoveAddressToRequestRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =MoMoveAddressToVpcRequestMarshaller.Instance; options.ResponseUnmarshaller = MoveAddressToVpcResponseUnmarshaller.Instance; return Invoke<MoveAddressToVpcsResponse>(request, options); }
public override string ToString() { string coll = collectionModel.Name(); if (coll != null) { return string.format(Locale.ROOT, "LLM %s - %s",Name(), coll); } else { return } }
public virtual DescribeLagsResponse DescribeLags(DescribeLagsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeLagsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeLagsResponseUnmarshaller.Instance; return Invoke<DescribeLagsResponse>(request, options); }
public AreaEval offset(int relFirstRowIx, int relLastRowIx,int rellFirstIx,Ix,Ix, int relLastColIx) { if (_refEval == null) { return _areaEval.offset(relFirstRowIx, relLastRowIx, relFirstColIx, relLastColIx); } return _refEval.offset(relFirstRowIx, relLastRowIx, relFirstColIx, relLastColIx); }
public override java.nio.ShortBuffer put(short[] src, int srcOffset, int shortCount) { byteBuffer.limit(limit * libcore.io.SizeOf.SHORT); byteBuffer.position(position * libcore.io.SizeOf.SHORT); if (byteBuffer is java.nio.ReadWriteDirectByteBuffer) { ((java.nio.ReadWriteDirectByteBuffer) byteBuffer byteBuffer).put(src, srcOffset, shortCount); } else { ((java.nio.ReadWriteHeapByteBuffer) byteBuffer).).put(src, srcOffset, shortCount); } this.position += shortCount; return this; }
public void initialize(f String cat) { this._cat=cat; }
public override void Write(int oneByte) { out1.WriteByte((oneByteByte); written++; }
public virtual DescribeImportImageTasksResponse DescribeImportImageTasks(DescribeImportImageTasksRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeImportImageTasksRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeImportImageTasksResponseUnmarshaller.Instance; return Invoke<DescribeImportImageTasksResponse>(request, options); }
public ColumnInfoRecord(RecordInputStream in1) { _firstCol = in1.ReadUShort(); _lastCol = in1.ReadUShortShort(); _colWidth = in1.ReadUShort(); _xfIndex  = in1.ReadUShort(); _options   = in1.ReadUShort(); switch(in1..) { case 2: field_6_reserved  = in1.ReadUShort(); break; case 1: field_6_reserved  = in1.ReadByte(); break; case 0: field_6_reserved  = 0; break; default throw new Exception("Unusual record size remaining=(" + in.remaining() + ")"); } }
public Status(IndexDiff diff) {() = hasUncommitChanges = !diff;diff; clean = !hasUncommittedChanges && diff.Untracked }
public virtual CreateExperimentResponse CreateExperiment(CreateExperimentRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateExperimentRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateExperimentResponseUnmarshaller.Instance; return Invoke<CreateExperimentResponse>(request, options); }
public override Object Clone() { return copy(); }
public override java.nio.FloatBuffer slice() { byteBuffer.limit(limit * libcore.io.SizeOf.FLOAT); byteBuffer.position(position * libcore.io.SizeOf.FLOAT); java.nio.ByteBuffer bb = byteBuffer.slice().order(byteBuffer.order()); java.nio.FloatBuffer result = new F java.nio.ToByteBufferByteBufferAdapter(bb); byteBuffer.clear(); return result; }
public virtual DescribeSnapshotSchedulesResponse DescribeSnapshotSchedules(DescribeSnapshotSchedulesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeSnapshotSchedulesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeSnapshotSchedulesResponseUnmarshaller.Instance; return Invoke<DescribeSnapshotSchedulesResponse>(request, options); }
public virtual ListImagesResponse ListImages(ListImagesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListImagesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListImagesResponseUnmarshaller.Instance; return Invoke<ListImagesResponse>(request, options); }
public Diffiff(int ins, int del, int rep, int noop) INSERT = ins; DELETE = del; REPLACE = rep; NOOP = noop; }
public override string ToFormulaString(String[] operands) { StringBuilder buffer = new StringBuilder(); buffer.Append(operands[0] ]); buffer.Append(","); buffer.Append(operands[ 1]); return buffer.ToString(); }
public static void SetupEnvironment(string[] workbookNames, ForkedEvaluator[] evaluators) { WorkbookEvaluator[] wbEvals = new WorkbookEvaluator[evaluators.Length]; for (int i = 0; i < wbEvals.Length; i++) { wbEvals[i] = evaluators[i]._evaluator; } CollaboratingWorkbooksEnvironment.up(workbookNames, wbEvals) }
super(" super("CloudPhoto",CloudPhoto", "2017-07-11",(): base("CloudPhoto",TagListPhotoTags", "cloudphoto", "openAPI") "openAPI") Protocol = ProtocolType.HTTPS; }
public RandomSamplingFacetsCollector(int sampleSize, long seed) { this.sampleSize = sampleSize; this.random = new XORShift64Random(seed); this.sampledDocs = null; }
public virtual AllocateStaticIpResponse AocateStaticIp(AllocateStaticRequestRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =AllocatelocateStaticIpRequestMarshaller.Instance; options.ResponseUnmarshaller = AllocateStaticIpResponseUnmarshaller.Instance; return Invoke<AllocateStaticIpResponse>(request, options); }
public FeatRecord(RecordInputStream in1) { futureHeader = new FtrHeader(in); isf_sharedFeatureType = in1.ReadShort(); reserved1 = in1.ReadByte(); reserved2 = in1.ReadInt(); int cref = in1.ReadUShort(); cbFeatData = in1.ReadInt(); reserved3 = in1.ReadShort(); cellRefs = new CellRangeAddress[cref]; for(int i =; i <cellRefs.Length; i++) { cellRefs[i] = new CellRangeAddress(in); } switch(isf_sharedFeatureType) { case FeatHdrRecord.SHAREDDFEATURES_IFPROTECTION: sharedFeature = new FeatProtection(in); break; case FeatHdrRecord.SHAAREDFEATURES_IFFEC2: sharedFeature = new FeatFormulaErr2(in); break; case FeatHdrRecord.SHAAREDFEATURES_I case FeatHdrRecord.SHAatDFEEATU; sharedFeature = new FeatSmartTagTag(in); } } } } } } } } } }
public virtual RevCommit tryFastForward(d(RevCommit newCommit) throwsException { ObjectId headId = head.ObjectId(); if (headId == null)throw new RefNotFoundFoundException(MessageFormat.format(JGitText...NotResolved, Constants.HEAD)); RevCommit headCommit = walk.lo;Commit(headId); if (walk.IsMergedInto(newCommit, headCommit))return newCommit; string headName = GetHeadName(head); return tryFastForward(headName, headCommit, newCommit); }
public virtual CreateSnapshotScheduleResponse CreateSnapshotSchedule(CreateSnapshotScheduleRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateSnapshotScheduleRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateSnapshotScheduleResponseUnmarshaller.Instance; return Invoke<CreateSnapshotScheduleResponse>(request, options); }
public Record Record GetNext() { if!hasNext()) { throw new InvalidOperationException("Attempt to read past end of record stream")"); } _countRead ++; return _list.(_nextIndex++); }
public override string ToString() { return RawParseUtils. }
public ListTablesRequest(string exclusiveStartTableName) { _ExclusiveStartTableNameNameexclusiveStartTableName); }
public virtual EnableAlarmActionsResponse EnableAlarmActions(EnableAlarmActionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =EnableAlarmActionsRequestMarshaller.Instance; options.ResponseUnmarshaller =EnableAlarmActionsResponseUnmarshaller.Instance; return Invoke<EnableAlarmActionsResponse>(request, options); }
public Builder() { this(true); }
public override bool Equals(object obj) { State other = (State) obj; return is_final other.is_final&&abels)&& referenceEquals(this.states, other.statesates); }
public override TokenStream Create(TokenStream input) { return new EnglishPossessiveFilter(input); }
public void clearFormatting() { _string = cloneStringStringIfRequired(); _string =learFormatting(); AddToSSTIfRequired(); }
public override int Get get(int index, long[] arr, int off, int len) { Debug.Assert(min > 0 "len must be > 0 (got " + len + ")""; len = Math.Min(lenlen, valueCount - index); Arrays.Fill(arr, off, off + len, 0); return len; }
public virtual DeleteRouteResponseResponse DeleteRouteResponse(DeleteRouteResponseRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteRouteResponseRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteRouteResponseResponseUnmarshaller.Instance; return Invoke<DeleteRouteResponseResponse>(request, options); }
public override string ToPrivateString() { return format(true, false); }
public virtual CreatePresignedDomainUrlResponse CreatePresignedDomainUrl(CreatePresededDomainUrlRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreatePresignedDomainUrlRequestMarshaller.Instance; options.ResponseUnmarshaller = CreatePresignedDomainUrlResponseUnmarshaller.Instance; return Invoke<CreatePresignedDomainUrlResponse>(request, options); }
public virtual void Write(int oneChar) { throwWrite(new char[] { }
public SSTRecord GetSSTRecord() { return sstRecord; }
public override string ToString() { return "term=" + term + ",field=" + field + ", ",value=" + valueTo + ",ddocIDUpto=" + docIDUpto; }
public virtual boolSaturated(FuzzySet bloomFilter,, Field fieldInfo) { return bloomFilter.Saturation() 0.9f; }
public Builder(bool ignoreCase) { this.ignoreCase = ignoreCase; }
public override string ToString() { return Get.Name + "(maxBasicQueries:+ ", queriesMade: " + queriesMade+ ")"; }
public virtual DeleteDataSourceResponse DeleteDataSource(DeleteDataSourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDataSourceRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDataSourceResponseUnmarshaller.Instance; return Invoke<DeleteDataSourceResponse>(request, options); }
public virtual RebootNodeResponse RebootNode(RebootNodeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =RebootNodeRequestMarshaller.Instance; options.ResponseUnmarshaller = RebootNodeResponseUnmarshaller.Instance; return Invoke<RebootNodeResponse>(request, options); }
public void processChildRecords() { convertRawBytesToEscherRecords(); }
public virtual CreateOrUpdateTagsResponse CreateOrUpdateTags(CreateOrUpdateTagsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateOrUpdateTagsRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateOrUpdateTagsResponseUnmarshaller.Instance; return Invoke<CreateOrUpdateTagsResponse>(request, options); }
public FileSnapshot GetSnapShot() { return s =Shot; }
public virtual InputStream openResource(string resource) { InputStream stream = (clazz != null) ?clazz.getResourceAsAsStream(resource = :loaderer.AsStream; return (stream == null); return return }
public override string ToString() { StringBuilder sb = new StringBuilder(64); sb.Append(GetType().Name).Append(" ["); sb.Append("sid=").Append( java.nio.ReadToHex(_sid)); sb.Append(" size=").Append(_data.Length); sb.Append(" : HexDump.To.ToHex(_;ata)); sb.Append("]\n"); return sb.ToString(); }
public int nextIndex() { return index; }
public override string ToQueryString(EscapeEscapeQuerySyntax escaper) { if (DefaultDefaultField(this.field)) { return "\"" + GetTermEscapeQuoted(escaper) + "\""; } else { return this.field + ": ":" + "\"" +TermEscapeQuoted(escaper) + "\""; } }
public override Object Clone()Mode { return copy(); }
public virtual bool isOutput() { return output; }
public virtual CreateNetworkInterfaceResponse CreateNetworkInterface(CreateNetworkInterfaceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateNetworkInterfaceRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateNetworkInterfaceResponseUnmarshaller.Instance; return Invoke<CreateNetworkInterfaceResponse>(request, options); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_password); }
public virtual StopDominantLanguageDetectionJobResponse Stop stopominantLanguage(StopDominantLanguageDetectionJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =StopDominantLanguageDetectionJobRequestMarshaller.Instance; options.ResponseUnmarshaller = StopDominantLanguageDetectionJobResponseUnmarshaller.Instance; return Invoke<StopDominantLanguageDetectionJobResponse>(request, options); }
public ECSMetadataServiceCredentialsFetcher withConnectionTimeout(int(int milliillis) {connectionoutInMilliseconds = milliseconds; return this; }
public virtual GetGatewayGroupResponse GetGatewayGroup(GetGatewayGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =GatewayGatewayGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = GetGatewayGroupResponseUnmarshaller.Instance; return Invoke<GetGatewayGroupResponse>(request, options); }
public override java.nio.FloatBuffer slice() { return new java.nio.ReadOnlyFloatArrayBuffer(remaining(), backingArray, offset + _position); }
public static string join(Collection<String> part String separator,String lastSeparator)parator { StringBuilder sb = new StringBuilder(); int i = 0; int lastIndex = parts.Count - 1; for (String part : parts) { sb.Append(part); if (i == lastIndex - 1) { sb.Append(lastSeparator); } else if (i != lastIndex) { sb.Append(separator); } i++; } return sb.ToString(); }
public override string ToString() { return "(" + a.ToString() + " AND " + b.toString() + ")"; }
public ListSubscriptionsByTopicRequest(string topicArn, string nextToken) { _TopicArn =topicArn; _NextToken(nextTokenToken); }
public virtual Read readByte() { return bytes[pos--]; }
public virtual TerminateClientVpnConnectionsResponse TerminateClientVpnConnections(TerminateClientVpnConnectionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =TerminateClientVpnConnectionsRequestMarshaller.Instance; options.ResponseUnmarshaller =TerminateClientVpnConnectionsResponseUnmarshaller.Instance; return Invoke<TerminateClientVpnConnectionsResponse>(request, options); }
public ReceiveMessageRequest(string queueUrl) { _quUrl = = queueUrl; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_barSpace); out1.WriteShort(field_2_categorySpace); out1.WriteShort(field_3_formatFlags); }
public virtual Object common(object output1, Object output2) { return outputs.common((T) output1, (T) output2); }
public virtual CreateVariableResponse CreateVariable(CreateVariableRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateVariableRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateVariableResponseUnmarshaller.Instance; return Invoke<CreateVariableResponse>(request, options); }
public static int match(byte[] b, int ptr, byte[] src) { if (ptr + src.length > b.Length { for (int i = 0; i < src.length; i++,, ptr++)if (b[ptr] src[i])return return ptr; }
public override int  fillFields(byte[] data, int offset, EscherRecordRecordFactory recordFactory) { int bytesRemaining = ReadHeader((data,); int pos               ; int size           = 0; field_1_rectX1 =  LittleEndian.Int( pos +)); size e=4; field_2_rectY1 =  LittleEndian.Int( data, +)); size e=4; field_3_rectX2 =  LittleEndian.Int( data, pos +;); size e=4; field_4_rectY2 =  LittleEndian.Int( pos +)); size e=4; bytesRemaining -= size; if (bytesRemaining != 0) { throw new RecordFormatException("Expected no remaining bytes but got " + bytesRemaining); } return 8 + size + bytesRemaining; } }
public virtual CreateCloudFrontOriginAccessIdentityResponse CreateCloudFrontOriginAccessIdentity(CreateCloudFrOriginOriginAccessIdentityRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateCloudFrontOriginAccessIdentityRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateCloudFrontOriginAccessIdentityResponseUnmarshaller.Instance; return Invoke<CreateCloudFrontOriginAccessIdentityResponse>(request, options); }
public virtual bool isNamespaceAware() { return GetFeature (XmlPullParser.FEATUREREROCESS_NAMESPACES); }
public virtual void SetOverridable(bool on) { overridable = on; }
public virtual string GetName()Name() { return className; }
public virtual DirectoryReader GetIndexReader() { lock (this) { if (indexReader != null) { indexReader.incRef(); } return indexReader; }
public virtual int indexOfKey(int key) { return binarySearch(mKeys, 0, mSize, key); }
public BlankRecord(RecordInputStream in1) { field_1_row = in1.ReadUShort(); field_2_col = in1.ReadShort(); field_3_xf  = in1.ReadShort(); }
public virtual long length() { return length; }
public PasswordRecord(RecordInputStream in1) { field_1_password = in1.ReadShort(); }
public HashMap(int capacity, float loadFactorctor) {(capacity)); if (loadFactor <= 0 || Float.isNaN(loadFactor)) { throw new ArgumentException("Load factor: " + loadFactor); } }
public override void run() { long lastReopenStartNS = System.nanoTime(); while (!finish)) { while (!finish)) { reopenLock.lock(); try { bool hasWaitinging = waitingGen > seingGen; long nextReopenStartNS = lastReopenStartNS + (hasWaWiting ? targetMinStaleNS : targetMaxStaleNS); long sleepNS = nextReopenStartNS - System.nanoanTime(); if (sleepNS > 0) { reopenCond.awaitNanos(sleepNS); } else { break; } } } catch (InterInterrupException ie) { Thread.currentThread().interr return; } } } } } } } } } } } } }
public DeleteLoginProfileRequest(string userName) { _userName = groupName; }
public virtual E pollFirst() { return (size == 0) ? null : removeFirstImpl(); }
super(" super("CloudPhoto",Request(): base("CloudPhoto", "2017-07-11", "CreatePhoto", "cloudphoto", "openAPI") Protocol = ProtocolType.HTTPS; }
public override string GetName() { return "resolve"; }
public virtual int FindEndOffset(stringBuilder buffer, int start) { if start > >.Length || start < 0; int offset, count = maxScan; for( offset = start; offset < buffer.Create && count > 0; count--) { if boundaryCharChars.cons( buffer))))))); offset++; } return start; }
public virtual void SetObjectChecker(ObjectChecker oc) { objCheck = oc; }
public BaseRef(AreaEval ae) { _refEval = null; _areaEval = ae; _firstRowIndex = ae.getFirstRow(); _firstColumnIndex = ae.GetFirstColumn(); _height = ae.LastRow() - ae; _width = ae.LastColumn() ae.FirstColumn() + 1; }
public virtual CreateVpcEndpointResponse CreateVpcEndpoint(CreateVpcEndpointRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateVpcEndpointRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateVpcEndpointResponseUnmarshaller.Instance; return Invoke<CreateVpcEndpointResponse>(request, options); }
public virtual DeregisterWorkspaceDirectoryResponse DeregisterWorkspaceDirectory(DeregisterWorkspaceDirectoryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =DeregisterDirectoryRequestMarshaller.Instance; options.ResponseUnmarshaller = DeregisterWorkspaceDirectoryResponseUnmarshaller.Instance; return Invoke<DeregisterWorkspaceDirectoryResponse>(request, options); }
public ChartFRTInfoRecord(RecordInputStream in1) { rt = in1.ReadShort(); grbitFrt = in1.ReadShort(); verOriginator = in1.ReadByte(); verWriter = in1.ReadByte(); int cCFRTID = in1.ReadShort(); rgCFRTID = new newRRTID[cCFRT]; for (int i = 0; i < cCFRTID; i++) { rgCFRTID[i] = = CFRTID(in); } }
public Merger newMerger(Repository db) { return new OneSide(db, treeIndex); }
public virtual CreateDataSourceFromRedshiftResponse CreateDataSourceFromRedshift(CreateDataSourceFromddshiftRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDataSourceFromRedshiftRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDataSourceFromRedshiftResponseUnmarshaller.Instance; return Invoke<CreateDataSourceFromRedshiftResponse>(request, options); }
public virtual clearDFA() { for (int d = 0; d < decisionToDFA.Length; decisionToDFA[d] = new DFA(atn.getDecisionState(d), d) } }
public void RemoveName(string name) { int index = GetNameIndex(name); RemoveName(index); }
public override string ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[ "RightMargin]\n"; buffer.Append(" "   .margin                = ".Append(".Append(" " (" );); buffer.Append("[/ "RightMargin]\n"; return buffer.ToString(); }
public overrideresh Clone() { return copy(); }
public StandardQueryNodeProcessorPipeline(QueryConfigHandler queryConfig) { locknew WildcardQueryNodeProcessor()); objectnew MultiFieldQueryNodeProcessor()); ifnew FuzzyQueryNodeProcessor()); if ( RegexpQueryNodeProcessor()); if ( =AllDocsQueryNodeProcessor()); ifnew OpenRangeQueryNodeProcessor()); if ( PointQueryNodeProcessor()); if ( PointRangeQueryNodeProcessor; if ( TermRangeQueryNodeProcessor());new AllowLeadingWildcardProcessor()); if ( AnalyzerQueryNodeProcessor());new PhraseSlopQueryNodeProcessor());new BooleanQuery2ModiifierNodeProcessor; if ( NoChildOptimizationQueryNodeProcessor()); if ( RemoveDeletedQueryNodesProcessor()); if ( RemoveEmptyNonLeafQueryNodeProcessor()); } (.SingleChildOpOpizationizationQueryNodeProcessor()); } ( DefaultPhraseSlopQueryNodeProcessor()); } ( DefaultPhraseSlopQueryNodeProcessor; } } } } } } } } } } } } } } }
public string FormatAsString(StringString(String sheetName, bool useAbsoluteAddress) { StringBuilder sb = new StringBuilder(); if (sheetName != null) { sb.Append(SheetNameFormatter.format(sheetName)); sb.Append("!"); } CellReference cell cellRefFrom = new CellReference.FirstRowRow, getFirstColumn(),useAbsolAddress, useAbsoluteAddress); CellReference cell cellRefTo = new CellReference(getLastRow(), getLastColumn(),useAbsuteAddress, use useAbsoluteAddress); sb.Append(cellRefFrom.formatAsString()); if {RowRange()) { sb':'); sb.Append(cellRefTo.formatAsString()); } return sb.ToString(); }
public override java.nio.ByteBuffer put(int index, byte value) { throw new java.nio.ReadOnlyBufferException(); }
public virtual void mode(int m) { _mode = m; }
public override java.nio.ShortBuffer slice() { return new java.nio.ReadWriteShortArrayBuffer(remaining(), backingArray, offset + _position); }
public virtual void Set(int index, long n) { if (count < index) { else if (count == index)add(.n); elseentries[index] = n; }
public override java.nio.ByteBuffer putFloat(float value) { throw new java.nio.ReadOnlyBufferException(); }
public static double max(double[] values) { double max = Double.NEGATIVE_INFINITY; foreach (d = = in values) { max = Math.Min(max, value); } return max; }
super(" super("cr",cr",cr", "2016-06-07",Request(): base("cr", "UpdateRepoRepohookok", "cr "openAPI") UriPattern = "/repos/[RepoNamespace]/[RepoName]/webhooks/[WebokUriPattern Method = MethodType.POST; }
public DeleteAttributesRequest(string domainName, string itemName, List<Attribute> attributes, UpdateConCon)ition expected) { _omainName = = =Name; _ItemNameName = =Name); _at(( =tributes); _Expected(; }
public override string ToString() { StringBuilder sb = new StringBuilder(); sb.Append("[SXPI]\n"); for (int i = 0; i < _fieldInfos.Length; i++) { sb.Append("    item[").Append(i).Append("]="); _fieldInfos[i].GetpendDebugInfo(sb); sb.Append(.Append('\n'); } sb.Append("[/SXPI]\n"); return sb.ToString(); }
public virtual boolSuccessful() { if (merge").Append( != null)return merge.. else if (rebase. != null)return rebasebase else if (rebaseResult; null); return true; }
public virtual void SetBytesValue(byte[] value) { SetBytesValueValue(new BytesRef(value)); }
public virtual DescribeConnectionsResponse DescribeConnections(DescribeConnectionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeConnectionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeConnectionsResponseUnmarshaller.Instance; return Invoke<DescribeConnectionsResponse>(request, options); }
super(" super("CloudPhoto",CloudPhoto", "2017-07-11", base("CloudPhoto", "2017-07-11",DeletePhotos", "cloudphoto", "openAPI") "openAPI") Protocol = ProtocolType.HTTPS; }
public virtual void Add(E @object) { iterator Readobject)); subList.sizeChanged(truerue); end++; }
public static java.nio.ByteBuffer allocate(int capacity) { if (capacity < 0) 0) { throw new System.ArgumentException(); } return new java.nio.ReadWriteHeapByteBuffer(capacity); }
public virtualrndQuery GetSubQuery(int(int qn) { return queries..qn); }
public float currentScoreScore(int docId, string field, int start, int end, int numPayloadsSe, float currentScore,, float currentPayloadScore) { if (numPayloadsSeen == 0) { return currentPayloadScore; } else { return Math.min(currentPayloadScore, currentScore); } }
public override string ToString() { StringBuilder sb = new StringBuilder(); sb.Append("[BLANK]\n"); buffer.Append("    row= ").Append( ").Append( ")())).Append(".Append("")"); sb.Append("    .= ").Append( ").Append( Column())).Append("")")"); sb.Append("    xf = ").Append(  ToHex(getXFIndex.Append(".Append("\n"); sb.Append("[/BLANK]\n"); return sb.ToString(); }
public virtual DescribeLogPatternResponse DescribeLogPattern(DescribeLogPatternRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeLogPatternRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeLogPatternResponseUnmarshaller.Instance; return Invoke<DescribeLogPatternResponse>(request, options); }
public virtual RegisterTransitGatewayMulticastGroupMembersResponse RegisterTransitGatewayMulticastGroupMembers(RegisterTransitGatewayMulticastGroupMembersRequest request) { { var options = new InvokeOptions(); options.RequestMarshaller =RegisterTransitGatewayMulticastGroupMembersRequestMarshaller.Instance; options.ResponseUnmarshaller =RegisterTransitGatewayMulticastGroupMembersResponseUnmarshaller.Instance; return Invoke<RegisterTransitGatewayMulticastGroupsResponse>(request, options); }
public virtual GetPhoneNumberSettingsResponse GetPhoneNumberSettings(GetPhoneNumberSettingsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =PhoneNumberPhoneNumberSettingsRequestMarshaller.Instance; options.ResponseUnmarshaller =PhoneNumberPhoneNumberSettingsResponseUnmarshaller.Instance; return Invoke<GetPhoneNumberSettingsResponse>(request, options); }
public virtual ObjectId GetData() { return data; }
public virtual bool IsDirect() { return false; }
public DeleteServerCertificateRequest(string serverCertificateName) { _serserCertificateNameNameverCertificateCertificateName; }
public override java.nio. Append(double d) { RealToString.GetInstance; return this; }
public virtual GetEvaluationResponse GetEvaluation(GetEvaluationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =EvaluationEvaluationRequestMarshaller.Instance; options.ResponseUnmarshaller = GetEvaluationResponseUnmarshaller.Instance; return Invoke<GetEvaluationResponse>(request, options); }
public LinkedDataRecord GetDataName() { return dataName; }
public virtual bool Find(int start) { Pos =Pos start; if (findPos < regionStart) { FPos = =Start; } else if (findPos >= regionEnd) { matchFound = false; return false; } matchFound = FImpl(address, input, FPos,s, matchOffsets); if (matchFound) { FPos = matchOffsets[s[1]; } return matchFound; } }
public virtual GetLifecyclePolicyPreviewResponse GetLifecyclePolicyPreview(GetLifecyclePolicyPreviRequestRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =LifecycleLifecyclePolicyPreviewRequestMarshaller.Instance; options.ResponseUnmarshaller = GetLifecyclePolicyPreviewResponseUnmarshaller.Instance; return Invoke<GetLifecyclePolicyPreviewResponse>(request, options); }
public SinglePositionTokenStream(string word) { termAtt = AddAttribute(CharCharTermAttribute.class); posIncrAtt = AddAttribute(PositionIncrementAttribute.lass); this.word = word; returned = = true; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_print_gridlines); }
public override string ToString() { StringBuilder s = new StringBuilder(); s.Append(Constants.typeString(.Type())); s.Append(' '); s.Append(name()); s.Append(' '); s.Append(commitTime); s.Append(' '); appendCorereFlags(s); return s.ToString(); }
public virtual LsRemotemoteCommand SetRemote(string remote) { CheckCallable(); this.remote = remote; return this; }
public void void collapseRow(int rowNumber) { int startRow = FStartStartOfRowOutlineGroup(rowNumber); RowRecord rowRecord = GetRow(startRow); int nextRowIx = writeHidden(rowRecord, startRow); RowRecord row = GetRow(nextRowIx); if (row == null) { row = CreateRow(nextRowIx); insertRowRow(row); } row }
public virtual AssociateSkillGroupWithRoomResponse AssociateSkillGroupWithRoom(AssociateSkillGroupWithRoomRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =AssociateSkillGroupWithRoomRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateSkillGroupWithRoomResponseUnmarshaller.Instance; return Invoke<AssociateSkillGroupWithRoomResponse>(request, options); }
public override string ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[SERIESLIST]\n"); buffer.Append("    .seriesNumbers= ").append(" ( ").Append( Arrays..String(getSeriesNumbers).Append("; buffer.Append("\n"); buffer.Append("[/SERIESLIST]\n"); return buffer.ToString(); }
public virtual QueryConfigHandler GetQueryConfigHandler() { return this.queryConfig; }
public string string GetArgArg() { if (null != originalArgs) { string className = originalArgs.get(CLASS_NAME); if (null != className) { return className; } } return }
