[{"cs": "public DVRecord(RecordInputStream in1) {\n    _option_flags = in1.ReadInt();\n    _promptTitle = ReadUnicodeString(in1);\n    _errorTitle = ReadUnicodeString(in1);\n    _promptText = ReadUnicodeString(in1);\n    _errorText = ReadUnicodeString(in1);\n    int field_size_first_formula = in1.ReadUShort();\n    _not_used_1 = in1.ReadShort();\n    _formula1 = NPOI.SS.Formula.Formula.Read(field_size_first_formula, in1);\n    int field_size_sec_formula = in1.ReadUShort();\n    _not_used_2 = in1.ReadShort();\n    _formula2 = NPOI.SS.Formula.Formula.Read(field_size_sec_formula, in1);\n    _regions = new CellRangeAddressList(in1);\n}\n", "java": "public DVRecord(RecordInputStream in) {\n    _option_flags = in.readInt();\n    _promptTitle = readUnicodeString(in);\n    _errorTitle = readUnicodeString(in);\n    _promptText = readUnicodeString(in);\n    _errorText = readUnicodeString(in);\n    int field_size_first_formula = in.readUShort();\n    _not_used_1 = in.readShort();\n    _formula1 = Formula.read(field_size_first_formula, in);\n    int field_size_sec_formula = in.readUShort();\n    _not_used_2 = in.readShort();\n    _formula2 = Formula.read(field_size_sec_formula, in);\n    _regions = new CellRangeAddressList(in);\n}\n", "cs_t": [["\u2581public", "\u2581D", "$$V", "$$Record(RecordInputStream", "\u2581in1)", "\u2581{"], ["\u2581_", "$$o", "$$ption", "$$_", "$$flag", "$$s", "\u2581=", "\u2581in1.Read", "$$Int", "$$()", "$$;"], ["\u2581_", "$$pro", "$$mp", "$$t", "$$T", "$$it", "$$le", "\u2581=", "\u2581Read", "$$Unicode", "$$String(", "$$in", "$$1)", "$$;"], ["\u2581_", "$$error", "$$T", "$$it", "$$le", "\u2581=", "\u2581Read", "$$Unicode", "$$String(", "$$in", "$$1)", "$$;"], ["\u2581_", "$$pro", "$$mp", "$$t", "$$Text", "\u2581=", "\u2581Read", "$$Unicode", "$$String(", "$$in", "$$1)", "$$;"], ["\u2581_", "$$error", "$$Text", "\u2581=", "\u2581Read", "$$Unicode", "$$String(", "$$in", "$$1)", "$$;"], ["\u2581int", "\u2581field_", "$$size", "$$_", "$$first", "$$_", "$$form", "$$ula", "\u2581=", "\u2581in1.Read", "$$U", "$$Short", "$$()", "$$;"], ["\u2581_", "$$n", "$$ot", "$$_", "$$used", "$$_1", "\u2581=", "\u2581in1.Read", "$$Short", "$$()", "$$;"], ["\u2581_", "$$form", "$$ula", "$$1", "\u2581=", "\u2581N", "$$POI", "$$.", "$$SS", "$$.", "$$Formula", "$$.", "$$Formula", "$$.", "$$Re", "$$ad(", "$$field_", "$$size", "$$_", "$$first", "$$_", "$$form", "$$ula", "$$,", "\u2581in1)", "$$;"], ["\u2581int", "\u2581field_", "$$size", "$$_", "$$se", "$$c", "$$_", "$$form", "$$ula", "\u2581=", "\u2581in1.Read", "$$U", "$$Short", "$$()", "$$;"], ["\u2581_", "$$n", "$$ot", "$$_", "$$used", "$$_", "$$2", "\u2581=", "\u2581in1.Read", "$$Short", "$$()", "$$;"], ["\u2581_", "$$form", "$$ula", "$$2", "\u2581=", "\u2581N", "$$POI", "$$.", "$$SS", "$$.", "$$Formula", "$$.", "$$Formula", "$$.", "$$Re", "$$ad(", "$$field_", "$$size", "$$_", "$$se", "$$c", "$$_", "$$form", "$$ula", "$$,", "\u2581in1)", "$$;"], ["\u2581_re", "$$gion", "$$s", "\u2581=", "\u2581new", "\u2581CellRangeAddress", "$$List", "$$(in", "$$1)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581D", "$$V", "$$Record(RecordInputStream", "\u2581in)", "\u2581{"], ["\u2581_", "$$o", "$$ption", "$$_", "$$flag", "$$s", "\u2581=", "\u2581in.read", "$$Int", "$$()", "$$;"], ["\u2581_", "$$pro", "$$mp", "$$t", "$$T", "$$it", "$$le", "\u2581=", "\u2581read", "$$Unicode", "$$String(", "$$in", "$$)", "$$;"], ["\u2581_", "$$error", "$$T", "$$it", "$$le", "\u2581=", "\u2581read", "$$Unicode", "$$String(", "$$in", "$$)", "$$;"], ["\u2581_", "$$pro", "$$mp", "$$t", "$$Text", "\u2581=", "\u2581read", "$$Unicode", "$$String(", "$$in", "$$)", "$$;"], ["\u2581_", "$$error", "$$Text", "\u2581=", "\u2581read", "$$Unicode", "$$String(", "$$in", "$$)", "$$;"], ["\u2581int", "\u2581field_", "$$size", "$$_", "$$first", "$$_", "$$form", "$$ula", "\u2581=", "\u2581in.read", "$$U", "$$Short", "$$()", "$$;"], ["\u2581_", "$$n", "$$ot", "$$_", "$$used", "$$_1", "\u2581=", "\u2581in.read", "$$Short", "$$()", "$$;"], ["\u2581_", "$$form", "$$ula", "$$1", "\u2581=", "\u2581Formula", "$$.re", "$$ad(", "$$field_", "$$size", "$$_", "$$first", "$$_", "$$form", "$$ula", "$$,", "\u2581in)", "$$;"], ["\u2581int", "\u2581field_", "$$size", "$$_", "$$se", "$$c", "$$_", "$$form", "$$ula", "\u2581=", "\u2581in.read", "$$U", "$$Short", "$$()", "$$;"], ["\u2581_", "$$n", "$$ot", "$$_", "$$used", "$$_", "$$2", "\u2581=", "\u2581in.read", "$$Short", "$$()", "$$;"], ["\u2581_", "$$form", "$$ula", "$$2", "\u2581=", "\u2581Formula", "$$.re", "$$ad(", "$$field_", "$$size", "$$_", "$$se", "$$c", "$$_", "$$form", "$$ula", "$$,", "\u2581in)", "$$;"], ["\u2581_re", "$$gion", "$$s", "\u2581=", "\u2581new", "\u2581CellRangeAddress", "$$List", "$$(in", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override string ToString() {\n    return Pattern();\n}\n", "java": "public String toString() {\n    return pattern();\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581string", "\u2581ToString()", "\u2581{"], ["\u2581return", "\u2581P", "$$attern", "$$()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581String", "\u2581toString()", "\u2581{"], ["\u2581return", "\u2581pattern", "$$()", "$$;"], ["\u2581}"]]}, {"cs": "public InsertInstanceRequest(): base(\"Ots\", \"2016-06-20\", \"InsertInstance\", \"ots\", \"openAPI\") {\n    Method = MethodType.POST;\n}\n", "java": "public InsertInstanceRequest() {\n    super(\"Ots\", \"2016-06-20\", \"InsertInstance\", \"ots\");\n    setMethod(MethodType.POST);\n}\n", "cs_t": [["\u2581public", "\u2581In", "$$sert", "$$Instance", "$$Request():", "\u2581base(\"", "$$O", "$$t", "$$s\",", "\u2581\"2016-06", "$$-", "$$20", "$$\",", "\u2581\"", "$$In", "$$sert", "$$Instance", "$$\",", "\u2581\"", "$$ot", "$$s\",", "\u2581\"openAPI\")", "\u2581{"], ["\u2581Method", "\u2581=", "\u2581MethodType.POST", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581In", "$$sert", "$$Instance", "$$Request()", "\u2581{"], ["\u2581super(\"", "$$O", "$$t", "$$s\",", "\u2581\"2016-06", "$$-", "$$20", "$$\",", "\u2581\"", "$$In", "$$sert", "$$Instance", "$$\",", "\u2581\"", "$$ot", "$$s", "$$\")", "$$;"], ["\u2581setMethod(Method", "$$Type.POST", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual bool contains(object o) {\n    return indexOf(o) != -1;\n}\n", "java": "public boolean contains(Object o) {\n    return indexOf(o) != -1;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581bool", "\u2581contains(", "$$object", "\u2581o)", "\u2581{"], ["\u2581return", "\u2581index", "$$Of", "$$(o", "$$)", "\u2581!=", "\u2581-1", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581boolean", "\u2581contains(", "$$Object", "\u2581o)", "\u2581{"], ["\u2581return", "\u2581index", "$$Of", "$$(o", "$$)", "\u2581!=", "\u2581-1", "$$;"], ["\u2581}"]]}, {"cs": "public java.nio.ByteBuffer encode(string s) {\n    return encode(java.nio.CharBuffer.wrap(java.lang.CharSequenceProxy.Wrap(s)));\n}\n", "java": "public final ByteBuffer encode(String s) {\n    return encode(CharBuffer.wrap(s));\n}\n", "cs_t": [["\u2581public", "\u2581java.nio.ByteBuffer", "\u2581en", "$$code", "$$(string", "\u2581s)", "\u2581{"], ["\u2581return", "\u2581en", "$$code", "$$(", "$$java.", "$$nio.", "$$CharBuffer", "$$.w", "$$rap", "$$(", "$$java.", "$$lang.", "$$CharSequence", "$$Proxy", "$$.", "$$W", "$$rap", "$$(s", "$$))", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581final", "\u2581ByteBuffer", "\u2581en", "$$code", "$$(String", "\u2581s)", "\u2581{"], ["\u2581return", "\u2581en", "$$code", "$$(", "$$CharBuffer", "$$.w", "$$rap", "$$(s", "$$))", "$$;"], ["\u2581}"]]}, {"cs": "public override bool RequiresCommitBody() {\n    return false;\n}\n", "java": "public boolean requiresCommitBody() {\n    return false;\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581bool", "\u2581Re", "$$qu", "$$ir", "$$es", "$$Commit", "$$Body", "$$()", "\u2581{"], ["\u2581return", "\u2581false", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581boolean", "\u2581re", "$$qu", "$$ir", "$$es", "$$Commit", "$$Body", "$$()", "\u2581{"], ["\u2581return", "\u2581false", "$$;"], ["\u2581}"]]}, {"cs": "public string GetKey() {\n    return RawParseUtils.Decode(enc, buffer, keyStart, keyEnd);\n}\n", "java": "public String getKey() {\n    return RawParseUtils.decode(enc, buffer, keyStart, keyEnd);\n}\n", "cs_t": [["\u2581public", "\u2581string", "\u2581Get", "$$Key", "$$()", "\u2581{"], ["\u2581return", "\u2581RawParseUtils.", "$$D", "$$ecode", "$$(", "$$enc", "$$,", "\u2581buffer,", "\u2581key", "$$Start", "$$,", "\u2581key", "$$End", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581String", "\u2581get", "$$Key", "$$()", "\u2581{"], ["\u2581return", "\u2581RawParseUtils.", "$$d", "$$ecode", "$$(", "$$enc", "$$,", "\u2581buffer,", "\u2581key", "$$Start", "$$,", "\u2581key", "$$End", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1,ValueEval arg2, ValueEval arg3, ValueEval arg4) {\n    double result;\n    try {\n        double d0 = NumericFunction.SingleOperandEvaluate(arg0, srcRowIndex, srcColumnIndex);\n        double d1 = NumericFunction.SingleOperandEvaluate(arg1, srcRowIndex, srcColumnIndex);\n        double d2 = NumericFunction.SingleOperandEvaluate(arg2, srcRowIndex, srcColumnIndex);\n        double d3 = NumericFunction.SingleOperandEvaluate(arg3, srcRowIndex, srcColumnIndex);\n        double d4 = NumericFunction.SingleOperandEvaluate(arg4, srcRowIndex, srcColumnIndex);\n        result = Evaluate(d0, d1, d2, d3, d4 != 0.0);\n        NumericFunction.CheckValue(result);\n    }\n    catch (EvaluationException e) {\n        return e.GetErrorEval();\n    }\n    return new NumberEval(result);\n}\n", "java": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1,ValueEval arg2, ValueEval arg3, ValueEval arg4) {\n    double result;\n    try {\n        double d0 = NumericFunction.singleOperandEvaluate(arg0, srcRowIndex, srcColumnIndex);\n        double d1 = NumericFunction.singleOperandEvaluate(arg1, srcRowIndex, srcColumnIndex);\n        double d2 = NumericFunction.singleOperandEvaluate(arg2, srcRowIndex, srcColumnIndex);\n        double d3 = NumericFunction.singleOperandEvaluate(arg3, srcRowIndex, srcColumnIndex);\n        double d4 = NumericFunction.singleOperandEvaluate(arg4, srcRowIndex, srcColumnIndex);\n        result = evaluate(d0, d1, d2, d3, d4 != 0.0);\n        NumericFunction.checkValue(result);\n    }\n    catch (EvaluationException e) {\n        return e.getErrorEval();\n    }\n    return new NumberEval(result);\n}\n", "cs_t": [["\u2581public", "\u2581ValueEval", "\u2581Evaluate(int", "\u2581srcRowIndex,", "\u2581int", "\u2581srcColumnIndex,", "\u2581ValueEval", "\u2581arg0,", "\u2581ValueEval", "\u2581arg", "$$1,", "$$ValueEval", "\u2581arg", "$$2,", "\u2581ValueEval", "\u2581arg", "$$3", "$$,", "\u2581ValueEval", "\u2581arg", "$$4", "$$)", "\u2581{"], ["\u2581double", "\u2581result", "$$;"], ["\u2581try", "\u2581{"], ["\u2581double", "\u2581d", "$$0", "\u2581=", "\u2581Numeric", "$$Function", "$$.S", "$$ingle", "$$Operand", "$$Evaluate", "$$(arg", "$$0,", "\u2581srcRowIndex,", "\u2581srcColumn", "$$Index)", "$$;"], ["\u2581double", "\u2581d", "$$1", "\u2581=", "\u2581Numeric", "$$Function", "$$.S", "$$ingle", "$$Operand", "$$Evaluate", "$$(arg", "$$1,", "\u2581srcRowIndex,", "\u2581srcColumn", "$$Index)", "$$;"], ["\u2581double", "\u2581d", "$$2", "\u2581=", "\u2581Numeric", "$$Function", "$$.S", "$$ingle", "$$Operand", "$$Evaluate", "$$(arg", "$$2,", "\u2581srcRowIndex,", "\u2581srcColumn", "$$Index)", "$$;"], ["\u2581double", "\u2581d", "$$3", "\u2581=", "\u2581Numeric", "$$Function", "$$.S", "$$ingle", "$$Operand", "$$Evaluate", "$$(arg", "$$3", "$$,", "\u2581srcRowIndex,", "\u2581srcColumn", "$$Index)", "$$;"], ["\u2581double", "\u2581d", "$$4", "\u2581=", "\u2581Numeric", "$$Function", "$$.S", "$$ingle", "$$Operand", "$$Evaluate", "$$(arg", "$$4", "$$,", "\u2581srcRowIndex,", "\u2581srcColumn", "$$Index)", "$$;"], ["\u2581result", "\u2581=", "\u2581Evaluate", "$$(d", "$$0,", "\u2581d", "$$1,", "\u2581d", "$$2,", "\u2581d", "$$3", "$$,", "\u2581d", "$$4", "\u2581!=", "\u25810", "$$.", "$$0)", "$$;"], ["\u2581Numeric", "$$Function", "$$.", "$$Check", "$$Value(", "$$result", "$$)", "$$;"], ["\u2581}"], ["\u2581catch", "\u2581(EvaluationException", "\u2581e)", "\u2581{"], ["\u2581return", "\u2581e", "$$.Get", "$$ErrorEval", "$$()", "$$;"], ["\u2581}"], ["\u2581return", "\u2581new", "\u2581NumberEval", "$$(result", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581ValueEval", "\u2581evaluate(int", "\u2581srcRowIndex,", "\u2581int", "\u2581srcColumnIndex,", "\u2581ValueEval", "\u2581arg0,", "\u2581ValueEval", "\u2581arg", "$$1,", "$$ValueEval", "\u2581arg", "$$2,", "\u2581ValueEval", "\u2581arg", "$$3", "$$,", "\u2581ValueEval", "\u2581arg", "$$4", "$$)", "\u2581{"], ["\u2581double", "\u2581result", "$$;"], ["\u2581try", "\u2581{"], ["\u2581double", "\u2581d", "$$0", "\u2581=", "\u2581Numeric", "$$Function", "$$.", "$$sing", "$$le", "$$Operand", "$$Evaluate", "$$(arg", "$$0,", "\u2581srcRowIndex,", "\u2581srcColumn", "$$Index)", "$$;"], ["\u2581double", "\u2581d", "$$1", "\u2581=", "\u2581Numeric", "$$Function", "$$.", "$$sing", "$$le", "$$Operand", "$$Evaluate", "$$(arg", "$$1,", "\u2581srcRowIndex,", "\u2581srcColumn", "$$Index)", "$$;"], ["\u2581double", "\u2581d", "$$2", "\u2581=", "\u2581Numeric", "$$Function", "$$.", "$$sing", "$$le", "$$Operand", "$$Evaluate", "$$(arg", "$$2,", "\u2581srcRowIndex,", "\u2581srcColumn", "$$Index)", "$$;"], ["\u2581double", "\u2581d", "$$3", "\u2581=", "\u2581Numeric", "$$Function", "$$.", "$$sing", "$$le", "$$Operand", "$$Evaluate", "$$(arg", "$$3", "$$,", "\u2581srcRowIndex,", "\u2581srcColumn", "$$Index)", "$$;"], ["\u2581double", "\u2581d", "$$4", "\u2581=", "\u2581Numeric", "$$Function", "$$.", "$$sing", "$$le", "$$Operand", "$$Evaluate", "$$(arg", "$$4", "$$,", "\u2581srcRowIndex,", "\u2581srcColumn", "$$Index)", "$$;"], ["\u2581result", "\u2581=", "\u2581evaluate", "$$(d", "$$0,", "\u2581d", "$$1,", "\u2581d", "$$2,", "\u2581d", "$$3", "$$,", "\u2581d", "$$4", "\u2581!=", "\u25810", "$$.", "$$0)", "$$;"], ["\u2581Numeric", "$$Function", "$$.", "$$check", "$$Value(", "$$result", "$$)", "$$;"], ["\u2581}"], ["\u2581catch", "\u2581(EvaluationException", "\u2581e)", "\u2581{"], ["\u2581return", "\u2581e.get", "$$ErrorEval", "$$()", "$$;"], ["\u2581}"], ["\u2581return", "\u2581new", "\u2581NumberEval", "$$(result", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DeleteClientVpnEndpointResponse DeleteClientVpnEndpoint(DeleteClientVpnEndpointRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DeleteClientVpnEndpointRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DeleteClientVpnEndpointResponseUnmarshaller.Instance;\n    return Invoke<DeleteClientVpnEndpointResponse>(request, options);\n}\n", "java": "public DeleteClientVpnEndpointResult deleteClientVpnEndpoint(DeleteClientVpnEndpointRequest request) {\n    request = beforeClientExecution(request);\n    return executeDeleteClientVpnEndpoint(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Delete", "$$ClientVpn", "$$Endpoint", "$$Response", "\u2581Delete", "$$ClientVpn", "$$Endpoint", "$$(Delete", "$$ClientVpn", "$$Endpoint", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Delete", "$$ClientVpn", "$$Endpoint", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Delete", "$$ClientVpn", "$$Endpoint", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Delete", "$$ClientVpn", "$$Endpoint", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Delete", "$$ClientVpn", "$$Endpoint", "$$Result", "\u2581delete", "$$ClientVpn", "$$Endpoint", "$$(Delete", "$$ClientVpn", "$$Endpoint", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDelete", "$$ClientVpn", "$$Endpoint", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual object Get(string key) {\n    IList<TernaryTreeNode> list = autocomplete.PrefixCompletion(root, key, 0);\n    if (list == null || list.Count == 0) {\n        return null;\n    }\n    foreach (TernaryTreeNode n in list) {\n        if (CharSeqEquals(n.token, key)) {\n            return n.val;\n        }\n    }\n    return null;\n}\n", "java": "public Object get(CharSequence key) {\n    List<TernaryTreeNode> list = autocomplete.prefixCompletion(root, key, 0);\n    if (list == null || list.isEmpty()) {\n        return null;\n    }\n    for (TernaryTreeNode n : list) {\n        if (charSeqEquals(n.token, key)) {\n            return n.val;\n        }\n    }\n    return null;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581object", "\u2581Get", "$$(string", "\u2581key)", "\u2581{"], ["\u2581IList<", "$$T", "$$er", "$$n", "$$ary", "$$Tree", "$$Node", "$$>", "\u2581list", "\u2581=", "\u2581a", "$$ut", "$$oc", "$$o", "$$mp", "$$lete", "$$.", "$$Prefix", "$$Comp", "$$letion", "$$(", "$$root", "$$,", "\u2581key", "$$,", "\u25810)", "$$;"], ["\u2581if", "\u2581(", "$$list", "\u2581==", "\u2581null", "\u2581||", "\u2581list", "$$.Count", "\u2581==", "\u25810)", "\u2581{"], ["\u2581return", "\u2581null", "$$;"], ["\u2581}"], ["\u2581foreach", "\u2581(", "$$T", "$$er", "$$n", "$$ary", "$$Tree", "$$Node", "\u2581n", "\u2581in", "\u2581list", "$$)", "\u2581{"], ["\u2581if", "\u2581(", "$$Char", "$$Se", "$$q", "$$E", "$$quals(", "$$n", "$$.", "$$token", "$$,", "\u2581key", "$$))", "\u2581{"], ["\u2581return", "\u2581n", "$$.", "$$val", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581return", "\u2581null", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Object", "\u2581get", "$$(", "$$CharSequence", "\u2581key)", "\u2581{"], ["\u2581List<", "$$T", "$$er", "$$n", "$$ary", "$$Tree", "$$Node", "$$>", "\u2581list", "\u2581=", "\u2581a", "$$ut", "$$oc", "$$o", "$$mp", "$$lete", "$$.", "$$pre", "$$fix", "$$Comp", "$$letion", "$$(", "$$root", "$$,", "\u2581key", "$$,", "\u25810)", "$$;"], ["\u2581if", "\u2581(", "$$list", "\u2581==", "\u2581null", "\u2581||", "\u2581list", "$$.", "$$isEmpty())", "\u2581{"], ["\u2581return", "\u2581null", "$$;"], ["\u2581}"], ["\u2581for", "\u2581(", "$$T", "$$er", "$$n", "$$ary", "$$Tree", "$$Node", "\u2581n", "\u2581:", "\u2581list", "$$)", "\u2581{"], ["\u2581if", "\u2581(char", "$$Se", "$$q", "$$E", "$$quals(", "$$n", "$$.", "$$token", "$$,", "\u2581key", "$$))", "\u2581{"], ["\u2581return", "\u2581n", "$$.", "$$val", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581return", "\u2581null", "$$;"], ["\u2581}"]]}, {"cs": "public virtual StartFleetActionsResponse StartFleetActions(StartFleetActionsRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = StartFleetActionsRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = StartFleetActionsResponseUnmarshaller.Instance;\n    return Invoke<StartFleetActionsResponse>(request, options);\n}\n", "java": "public StartFleetActionsResult startFleetActions(StartFleetActionsRequest request) {\n    request = beforeClientExecution(request);\n    return executeStartFleetActions(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Start", "$$Fleet", "$$Action", "$$sResponse", "\u2581Start", "$$Fleet", "$$Action", "$$s(", "$$Start", "$$Fleet", "$$Action", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Start", "$$Fleet", "$$Action", "$$s", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Start", "$$Fleet", "$$Action", "$$s", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<", "$$Start", "$$Fleet", "$$Action", "$$sResponse>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Start", "$$Fleet", "$$Action", "$$sResult", "\u2581start", "$$Fleet", "$$Action", "$$s(", "$$Start", "$$Fleet", "$$Action", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581execute", "$$Start", "$$Fleet", "$$Action", "$$s", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public CellRangeAddress GetCellRangeAddress(int index) {\n    return (CellRangeAddress)_list[index];\n}\n", "java": "public CellRangeAddress getCellRangeAddress(int index) {\n    return _list.get(index);\n}\n", "cs_t": [["\u2581public", "\u2581CellRangeAddress", "\u2581Get", "$$Cell", "$$Range", "$$Addres", "$$s(", "$$int", "\u2581index)", "\u2581{"], ["\u2581return", "\u2581(", "$$Cell", "$$Range", "$$Addres", "$$s)", "$$_", "$$list", "$$[index", "$$]", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581CellRangeAddress", "\u2581get", "$$Cell", "$$Range", "$$Addres", "$$s(", "$$int", "\u2581index)", "\u2581{"], ["\u2581return", "\u2581_", "$$list", "$$.get", "$$(index", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public static XmlDocument LoadXML(TextReader input) {\n    XmlDocument result = new XmlDocument();\n    try {\n        result.Load(input);\n    }\n    catch (Exception se) {\n        throw new Exception(\"Error parsing file:\" + se, se);\n    }\n    return result;\n}\n", "java": "public static Document loadXML(Reader is) {\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = null;\n    try {\n        db = dbf.newDocumentBuilder();\n    }\n    catch (Exception se) {\n        throw new RuntimeException(\"Parser configuration error\", se);\n    }\n    org.w3c.dom.Document doc = null;\n    try {\n        doc = db.parse(new InputSource(is));\n    }\n    catch (Exception se) {\n        throw new RuntimeException(\"Error parsing file:\" + se, se);\n    }\n    return doc;\n}\n", "cs_t": [["\u2581public", "\u2581static", "\u2581", "$$X", "$$m", "$$l", "$$Document", "\u2581", "$$Load", "$$X", "$$ML", "$$(", "$$Text", "$$Reader", "\u2581input)", "\u2581{"], ["\u2581", "$$X", "$$m", "$$l", "$$Document", "\u2581result", "\u2581=", "\u2581new", "\u2581", "$$X", "$$m", "$$l", "$$Document", "$$()", "$$;"], ["\u2581try", "\u2581{"], ["\u2581result", "$$.", "$$Lo", "$$ad(", "$$input", "$$)", "$$;"], ["\u2581}"], ["\u2581catch", "\u2581(", "$$Exception", "\u2581se", "$$)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581Exception(\"", "$$Error", "\u2581par", "$$sing", "\u2581file", "$$:", "$$\"", "\u2581+", "\u2581se", "$$,", "\u2581se", "$$)", "$$;"], ["\u2581}"], ["\u2581return", "\u2581result", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581static", "\u2581Doc", "$$ument", "\u2581load", "$$X", "$$ML", "$$(", "$$Reader", "\u2581i", "$$s)", "\u2581{"], ["\u2581Doc", "$$ument", "$$Builder", "$$Factory", "\u2581db", "$$f", "\u2581=", "\u2581Doc", "$$ument", "$$Builder", "$$Factory", "$$.", "$$new", "$$Instance", "$$()", "$$;"], ["\u2581Doc", "$$ument", "$$Builder", "\u2581db", "\u2581=", "\u2581null", "$$;"], ["\u2581try", "\u2581{"], ["\u2581db", "\u2581=", "\u2581db", "$$f", "$$.", "$$new", "$$Document", "$$Builder", "$$()", "$$;"], ["\u2581}"], ["\u2581catch", "\u2581(", "$$Exception", "\u2581se", "$$)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581RuntimeException(\"", "$$Parser", "\u2581config", "$$uration", "\u2581error", "$$\",", "\u2581se", "$$)", "$$;"], ["\u2581}"], ["\u2581or", "$$g", "$$.w", "$$3", "$$c", "$$.d", "$$om", "$$.", "$$Document", "\u2581doc", "\u2581=", "\u2581null", "$$;"], ["\u2581try", "\u2581{"], ["\u2581doc", "\u2581=", "\u2581db", "$$.", "$$parse", "$$(new", "\u2581In", "$$put", "$$Source", "$$(", "$$is", "$$))", "$$;"], ["\u2581}"], ["\u2581catch", "\u2581(", "$$Exception", "\u2581se", "$$)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581RuntimeException(\"", "$$Error", "\u2581par", "$$sing", "\u2581file", "$$:", "$$\"", "\u2581+", "\u2581se", "$$,", "\u2581se", "$$)", "$$;"], ["\u2581}"], ["\u2581return", "\u2581doc", "$$;"], ["\u2581}"]]}, {"cs": "public virtual int Get(string name, int dflt) {\n    int[] vals;\n    object temp;\n    if (valByRound.TryGetValue(name, out temp) && temp != null) {\n        vals = (int[])temp;\n        return vals[roundNumber % vals.Length];\n    }\n    string sval;\n    if (!props.TryGetValue(name, out sval)) {\n        sval = dflt.ToString(CultureInfo.InvariantCulture);\n    }\n    if (sval.IndexOf(':') < 0) {\n        return int.Parse(sval, CultureInfo.InvariantCulture);\n    }\n    int k = sval.IndexOf(':');\n    string colName = sval.Substring(0, k - 0);\n    sval = sval.Substring(k + 1);\n    colForValByRound[name] = colName;\n    vals = PropToInt32Array(sval);\n    valByRound[name] = vals;\n    return vals[roundNumber % vals.Length];\n}\n", "java": "public double get(String name, double dflt) {\n    double vals[] = (double[]) valByRound.get(name);\n    if (vals != null) {\n        return vals[roundNumber % vals.length];\n    }\n    String sval = props.getProperty(name, \"\" + dflt);\n    if (sval.indexOf(\":\") < 0) {\n        return Double.parseDouble(sval);\n    }\n    int k = sval.indexOf(\":\");\n    String colName = sval.substring(0, k);\n    sval = sval.substring(k + 1);\n    colForValByRound.put(name, colName);\n    vals = propToDoubleArray(sval);\n    valByRound.put(name, vals);\n    return vals[roundNumber % vals.length];\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581int", "\u2581Get", "$$(string", "\u2581name,", "\u2581int", "\u2581d", "$$f", "$$l", "$$t", "$$)", "\u2581{"], ["\u2581int[]", "\u2581val", "$$s;"], ["\u2581object", "\u2581temp", "$$;"], ["\u2581if", "\u2581(", "$$val", "$$By", "$$Round", "$$.", "$$TryGet", "$$Value", "$$(name,", "\u2581out", "\u2581temp", "$$)", "\u2581&&", "\u2581temp", "\u2581!=", "\u2581null)", "\u2581{"], ["\u2581val", "$$s", "\u2581=", "\u2581(int", "$$[]", "$$)", "$$temp", "$$;"], ["\u2581return", "\u2581val", "$$s[", "$$round", "$$Number", "\u2581%", "\u2581val", "$$s.Length", "$$]", "$$;"], ["\u2581}"], ["\u2581string", "\u2581s", "$$val", "$$;"], ["\u2581if", "\u2581(!", "$$pro", "$$p", "$$s.", "$$TryGet", "$$Value", "$$(name,", "\u2581out", "\u2581s", "$$val", "$$))", "\u2581{"], ["\u2581s", "$$val", "\u2581=", "\u2581d", "$$f", "$$l", "$$t", "$$.To", "$$String(", "$$Culture", "$$Info.", "$$Inv", "$$ariant", "$$Culture", "$$)", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(s", "$$val.", "$$Index", "$$Of(", "$$'", "$$:", "$$')", "\u2581<", "\u25810)", "\u2581{"], ["\u2581return", "\u2581int", "$$.", "$$Parse", "$$(s", "$$val", "$$,", "\u2581C", "$$ulture", "$$Info.", "$$Inv", "$$ariant", "$$Culture", "$$)", "$$;"], ["\u2581}"], ["\u2581int", "\u2581k", "\u2581=", "\u2581s", "$$val.", "$$Index", "$$Of(", "$$'", "$$:", "$$')", "$$;"], ["\u2581string", "\u2581col", "$$Name", "\u2581=", "\u2581s", "$$val.", "$$Sub", "$$string(", "$$0,", "\u2581k", "\u2581-", "\u25810)", "$$;"], ["\u2581s", "$$val", "\u2581=", "\u2581s", "$$val.", "$$Sub", "$$string(", "$$k", "\u2581+", "\u25811)", "$$;"], ["\u2581col", "$$For", "$$Val", "$$By", "$$Round", "$$[", "$$name", "$$]", "\u2581=", "\u2581col", "$$Name", "$$;"], ["\u2581val", "$$s", "\u2581=", "\u2581", "$$Prop", "$$To", "$$Int32", "$$Array", "$$(s", "$$val", "$$)", "$$;"], ["\u2581val", "$$By", "$$Round", "$$[", "$$name", "$$]", "\u2581=", "\u2581val", "$$s;"], ["\u2581return", "\u2581val", "$$s[", "$$round", "$$Number", "\u2581%", "\u2581val", "$$s.Length", "$$]", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581double", "\u2581get", "$$(String", "\u2581name,", "\u2581double", "\u2581d", "$$f", "$$l", "$$t", "$$)", "\u2581{"], ["\u2581double", "\u2581val", "$$s", "$$[]", "\u2581=", "\u2581(d", "$$ouble", "$$[]", "$$)", "\u2581val", "$$By", "$$Round", "$$.get", "$$(name", "$$)", "$$;"], ["\u2581if", "\u2581(", "$$val", "$$s", "\u2581!=", "\u2581null)", "\u2581{"], ["\u2581return", "\u2581val", "$$s[", "$$round", "$$Number", "\u2581%", "\u2581val", "$$s.length", "$$]", "$$;"], ["\u2581}"], ["\u2581String", "\u2581s", "$$val", "\u2581=", "\u2581pro", "$$p", "$$s.get", "$$Property", "$$(name,", "\u2581\"", "$$\"", "\u2581+", "\u2581d", "$$f", "$$l", "$$t", "$$)", "$$;"], ["\u2581if", "\u2581(s", "$$val.", "$$index", "$$Of", "$$(\"", "$$:", "$$\")", "\u2581<", "\u25810)", "\u2581{"], ["\u2581return", "\u2581Double", "$$.", "$$parse", "$$Double", "$$(s", "$$val", "$$)", "$$;"], ["\u2581}"], ["\u2581int", "\u2581k", "\u2581=", "\u2581s", "$$val.", "$$index", "$$Of", "$$(\"", "$$:", "$$\")", "$$;"], ["\u2581String", "\u2581col", "$$Name", "\u2581=", "\u2581s", "$$val.", "$$sub", "$$string(", "$$0,", "\u2581k", "$$)", "$$;"], ["\u2581s", "$$val", "\u2581=", "\u2581s", "$$val.", "$$sub", "$$string(", "$$k", "\u2581+", "\u25811)", "$$;"], ["\u2581col", "$$For", "$$Val", "$$By", "$$Round", "$$.put", "$$(name,", "\u2581col", "$$Name)", "$$;"], ["\u2581val", "$$s", "\u2581=", "\u2581pro", "$$p", "$$To", "$$Double", "$$Array", "$$(s", "$$val", "$$)", "$$;"], ["\u2581val", "$$By", "$$Round", "$$.put", "$$(name,", "\u2581val", "$$s)", "$$;"], ["\u2581return", "\u2581val", "$$s[", "$$round", "$$Number", "\u2581%", "\u2581val", "$$s.length", "$$]", "$$;"], ["\u2581}"]]}, {"cs": "public int GetBackgroundImageId() {\n    EscherSimpleProperty property = (EscherSimpleProperty)GetOptRecord().Lookup(EscherProperties.FILL__PATTERNTEXTURE);\n    return property == null ? 0 : property.PropertyValue;\n}\n", "java": "public int getBackgroundImageId() {\n    EscherSimpleProperty property = getOptRecord().lookup(EscherPropertyTypes.FILL__PATTERNTEXTURE);\n    return property == null ? 0 : property.getPropertyValue();\n}\n", "cs_t": [["\u2581public", "\u2581int", "\u2581Get", "$$Back", "$$ground", "$$Image", "$$Id()", "\u2581{"], ["\u2581Escher", "$$Simple", "$$Property", "\u2581proper", "$$ty", "\u2581=", "\u2581(", "$$Escher", "$$Simple", "$$Property", "$$)", "$$Get", "$$O", "$$pt", "$$Record", "$$().", "$$Lookup", "$$(", "$$Escher", "$$Properties", "$$.", "$$FI", "$$LL", "$$_", "$$_P", "$$AT", "$$TER", "$$N", "$$TE", "$$X", "$$T", "$$U", "$$RE", "$$)", "$$;"], ["\u2581return", "\u2581proper", "$$ty", "\u2581==", "\u2581null", "\u2581?", "\u25810", "\u2581:", "\u2581proper", "$$ty", "$$.", "$$Property", "$$Value", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581int", "\u2581get", "$$Back", "$$ground", "$$Image", "$$Id()", "\u2581{"], ["\u2581Escher", "$$Simple", "$$Property", "\u2581proper", "$$ty", "\u2581=", "\u2581get", "$$O", "$$pt", "$$Record", "$$().", "$$lo", "$$okup", "$$(", "$$Escher", "$$Property", "$$Types", "$$.", "$$FI", "$$LL", "$$_", "$$_P", "$$AT", "$$TER", "$$N", "$$TE", "$$X", "$$T", "$$U", "$$RE", "$$)", "$$;"], ["\u2581return", "\u2581proper", "$$ty", "\u2581==", "\u2581null", "\u2581?", "\u25810", "\u2581:", "\u2581proper", "$$ty", "$$.get", "$$Property", "$$Value", "$$()", "$$;"], ["\u2581}"]]}, {"cs": "public virtual TreeFilter GetTreeFilter() {\n    return treeFilter;\n}\n", "java": "public TreeFilter getTreeFilter() {\n    return treeFilter;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581TreeFilter", "\u2581Get", "$$TreeFilter", "$$()", "\u2581{"], ["\u2581return", "\u2581t", "$$ree", "$$Filter", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581TreeFilter", "\u2581get", "$$TreeFilter", "$$()", "\u2581{"], ["\u2581return", "\u2581t", "$$ree", "$$Filter", "$$;"], ["\u2581}"]]}, {"cs": "public virtual GetMemberResponse GetMember(GetMemberRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = GetMemberRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = GetMemberResponseUnmarshaller.Instance;\n    return Invoke<GetMemberResponse>(request, options);\n}\n", "java": "public GetMemberResult getMember(GetMemberRequest request) {\n    request = beforeClientExecution(request);\n    return executeGetMember(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Get", "$$Member", "$$Response", "\u2581Get", "$$Member", "$$(Get", "$$Member", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Get", "$$Member", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Get", "$$Member", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Get", "$$Member", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Get", "$$Member", "$$Result", "\u2581get", "$$Member", "$$(Get", "$$Member", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeGet", "$$Member", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual bool canEncode() {\n    return true;\n}\n", "java": "public boolean canEncode() {\n    return true;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581bool", "\u2581c", "$$an", "$$Encode", "$$()", "\u2581{"], ["\u2581return", "\u2581true", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581boolean", "\u2581c", "$$an", "$$Encode", "$$()", "\u2581{"], ["\u2581return", "\u2581true", "$$;"], ["\u2581}"]]}, {"cs": "public virtual ReplaceRouteResponse ReplaceRoute(ReplaceRouteRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = ReplaceRouteRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = ReplaceRouteResponseUnmarshaller.Instance;\n    return Invoke<ReplaceRouteResponse>(request, options);\n}\n", "java": "public ReplaceRouteResult replaceRoute(ReplaceRouteRequest request) {\n    request = beforeClientExecution(request);\n    return executeReplaceRoute(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Re", "$$place", "$$Route", "$$Response", "\u2581Re", "$$place", "$$Route", "$$(Re", "$$place", "$$Route", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Re", "$$place", "$$Route", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Re", "$$place", "$$Route", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<", "$$Re", "$$place", "$$Route", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Re", "$$place", "$$Route", "$$Result", "\u2581re", "$$place", "$$Route", "$$(Re", "$$place", "$$Route", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581execute", "$$Re", "$$place", "$$Route", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override ObjectId GetResultTreeId() {\n    return (resultTree == null) ? null : resultTree.ToObjectId();\n}\n", "java": "public ObjectId getResultTreeId() {\n    return (resultTree == null) ? null : resultTree.toObjectId();\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581ObjectId", "\u2581Get", "$$Result", "$$Tree", "$$Id()", "\u2581{"], ["\u2581return", "\u2581(result", "$$Tree", "\u2581==", "\u2581null)", "\u2581?", "\u2581null", "\u2581:", "\u2581result", "$$Tree", "$$.To", "$$ObjectId", "$$()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581ObjectId", "\u2581get", "$$Result", "$$Tree", "$$Id()", "\u2581{"], ["\u2581return", "\u2581(result", "$$Tree", "\u2581==", "\u2581null)", "\u2581?", "\u2581null", "\u2581:", "\u2581result", "$$Tree", "$$.to", "$$ObjectId", "$$()", "$$;"], ["\u2581}"]]}, {"cs": "public override bool Equals(Object o) {\n    bool rval = this == o;\n    if (!rval && (o != null) && (o.GetType() == this.GetType())) {\n        IntList other = (IntList)o;\n        if (other._limit == _limit) {\n            rval = true;\n            for (int j = 0; rval && (j < _limit); j++) {\n                rval = _array[j] == other._array[j];\n            }\n        }\n    }\n    return rval;\n}\n", "java": "public boolean equals(final Object o) {\n    boolean rval = this == o;\n    if (!rval && (o != null) && (o.getClass() == this.getClass())) {\n        IntList other = ( IntList ) o;\n        if (other._limit == _limit) {\n            rval = true;\n            for (int j = 0; rval && (j < _limit); j++) {\n                rval = _array[ j ] == other._array[ j ];\n            }\n        }\n    }\n    return rval;\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581bool", "\u2581Equals(", "$$Object", "\u2581o)", "\u2581{"], ["\u2581bool", "\u2581rval", "\u2581=", "\u2581this", "\u2581==", "\u2581o", "$$;"], ["\u2581if", "\u2581(!", "$$r", "$$val", "\u2581&&", "\u2581(o", "\u2581!=", "\u2581null)", "\u2581&&", "\u2581(o", "$$.Get", "$$Type()", "\u2581==", "\u2581this.", "$$Get", "$$Type()", "$$))", "\u2581{"], ["\u2581Int", "$$List", "\u2581other", "\u2581=", "\u2581(", "$$Int", "$$List", "$$)o", "$$;"], ["\u2581if", "\u2581(", "$$other.", "$$_", "$$limit", "\u2581==", "\u2581_limit", "$$)", "\u2581{"], ["\u2581rval", "\u2581=", "\u2581true", "$$;"], ["\u2581for", "\u2581(int", "\u2581j", "\u2581=", "\u25810;", "\u2581rval", "\u2581&&", "\u2581(", "$$j", "\u2581<", "\u2581_limit", "$$)", "$$;", "\u2581j", "$$++)", "\u2581{"], ["\u2581rval", "\u2581=", "\u2581_", "$$array", "$$[", "$$j", "$$]", "\u2581==", "\u2581other.", "$$_", "$$array", "$$[", "$$j", "$$]", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581}"], ["\u2581return", "\u2581rval", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581boolean", "\u2581equals(", "$$f", "$$inal", "\u2581Object", "\u2581o)", "\u2581{"], ["\u2581boolean", "\u2581rval", "\u2581=", "\u2581this", "\u2581==", "\u2581o", "$$;"], ["\u2581if", "\u2581(!", "$$r", "$$val", "\u2581&&", "\u2581(o", "\u2581!=", "\u2581null)", "\u2581&&", "\u2581(o", "$$.get", "$$Class", "$$()", "\u2581==", "\u2581this.", "$$get", "$$Class", "$$()))", "\u2581{"], ["\u2581Int", "$$List", "\u2581other", "\u2581=", "\u2581(", "\u2581Int", "$$List", "\u2581)", "\u2581o", "$$;"], ["\u2581if", "\u2581(", "$$other.", "$$_", "$$limit", "\u2581==", "\u2581_limit", "$$)", "\u2581{"], ["\u2581rval", "\u2581=", "\u2581true", "$$;"], ["\u2581for", "\u2581(int", "\u2581j", "\u2581=", "\u25810;", "\u2581rval", "\u2581&&", "\u2581(", "$$j", "\u2581<", "\u2581_limit", "$$)", "$$;", "\u2581j", "$$++)", "\u2581{"], ["\u2581rval", "\u2581=", "\u2581_", "$$array", "$$[", "\u2581j", "\u2581", "$$]", "\u2581==", "\u2581other.", "$$_", "$$array", "$$[", "\u2581j", "\u2581", "$$]", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581}"], ["\u2581return", "\u2581rval", "$$;"], ["\u2581}"]]}, {"cs": "public virtual ListReusableDelegationSetsResponse ListReusableDelegationSets(ListReusableDelegationSetsRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = ListReusableDelegationSetsRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = ListReusableDelegationSetsResponseUnmarshaller.Instance;\n    return Invoke<ListReusableDelegationSetsResponse>(request, options);\n}\n", "java": "public ListReusableDelegationSetsResult listReusableDelegationSets(ListReusableDelegationSetsRequest request) {\n    request = beforeClientExecution(request);\n    return executeListReusableDelegationSets(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581List", "$$Re", "$$us", "$$able", "$$De", "$$leg", "$$ation", "$$Set", "$$sResponse", "\u2581List", "$$Re", "$$us", "$$able", "$$De", "$$leg", "$$ation", "$$Set", "$$s(List", "$$Re", "$$us", "$$able", "$$De", "$$leg", "$$ation", "$$Set", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581List", "$$Re", "$$us", "$$able", "$$De", "$$leg", "$$ation", "$$Set", "$$s", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581List", "$$Re", "$$us", "$$able", "$$De", "$$leg", "$$ation", "$$Set", "$$s", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<List", "$$Re", "$$us", "$$able", "$$De", "$$leg", "$$ation", "$$Set", "$$sResponse>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581List", "$$Re", "$$us", "$$able", "$$De", "$$leg", "$$ation", "$$Set", "$$sResult", "\u2581list", "$$Re", "$$us", "$$able", "$$De", "$$leg", "$$ation", "$$Set", "$$s(List", "$$Re", "$$us", "$$able", "$$De", "$$leg", "$$ation", "$$Set", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeList", "$$Re", "$$us", "$$able", "$$De", "$$leg", "$$ation", "$$Set", "$$s", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override string ToString() {\n    return \"(\" + a.ToString() + \" OR \" + b.ToString() + \")\";\n}\n", "java": "public String toString() {\n    return \"(\" + a.toString() + \" OR \" + b.toString() + \")\";\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581string", "\u2581ToString()", "\u2581{"], ["\u2581return", "\u2581\"", "$$(\"", "\u2581+", "\u2581a", "$$.ToString()", "\u2581+", "\u2581\"", "\u2581", "$$OR", "\u2581\"", "\u2581+", "\u2581b", "$$.ToString()", "\u2581+", "\u2581\")", "$$\"", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581String", "\u2581toString()", "\u2581{"], ["\u2581return", "\u2581\"", "$$(\"", "\u2581+", "\u2581a", "$$.toString()", "\u2581+", "\u2581\"", "\u2581", "$$OR", "\u2581\"", "\u2581+", "\u2581b", "$$.toString()", "\u2581+", "\u2581\")", "$$\"", "$$;"], ["\u2581}"]]}, {"cs": "public virtual InitiateLayerUploadResponse InitiateLayerUpload(InitiateLayerUploadRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = InitiateLayerUploadRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = InitiateLayerUploadResponseUnmarshaller.Instance;\n    return Invoke<InitiateLayerUploadResponse>(request, options);\n}\n", "java": "public InitiateLayerUploadResult initiateLayerUpload(InitiateLayerUploadRequest request) {\n    request = beforeClientExecution(request);\n    return executeInitiateLayerUpload(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581In", "$$iti", "$$ate", "$$L", "$$ay", "$$er", "$$Upload", "$$Response", "\u2581In", "$$iti", "$$ate", "$$L", "$$ay", "$$er", "$$Up", "$$lo", "$$ad(", "$$In", "$$iti", "$$ate", "$$L", "$$ay", "$$er", "$$Upload", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581In", "$$iti", "$$ate", "$$L", "$$ay", "$$er", "$$Upload", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581In", "$$iti", "$$ate", "$$L", "$$ay", "$$er", "$$Upload", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<", "$$In", "$$iti", "$$ate", "$$L", "$$ay", "$$er", "$$Upload", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581In", "$$iti", "$$ate", "$$L", "$$ay", "$$er", "$$Upload", "$$Result", "\u2581in", "$$iti", "$$ate", "$$L", "$$ay", "$$er", "$$Up", "$$lo", "$$ad(", "$$In", "$$iti", "$$ate", "$$L", "$$ay", "$$er", "$$Upload", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581execute", "$$In", "$$iti", "$$ate", "$$L", "$$ay", "$$er", "$$Upload", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public UpdateRepoRequest(): base(\"cr\", \"2016-06-07\", \"UpdateRepo\", \"cr\", \"openAPI\") {\n    UriPattern = \"/repos/[RepoNamespace]/[RepoName]\";\n    Method = MethodType.POST;\n}\n", "java": "public UpdateRepoRequest() {\n    super(\"cr\", \"2016-06-07\", \"UpdateRepo\", \"cr\");\n    setUriPattern(\"/repos/[RepoNamespace]/[RepoName]\");\n    setMethod(MethodType.POST);\n}\n", "cs_t": [["\u2581public", "\u2581Update", "$$Repo", "$$Request():", "\u2581base(\"", "$$cr\",", "\u2581\"2016-06-07\",", "\u2581\"", "$$Update", "$$Repo", "$$\",", "\u2581\"", "$$cr\",", "\u2581\"openAPI\")", "\u2581{"], ["\u2581", "$$UriPattern", "\u2581=", "\u2581\"/", "$$re", "$$pos", "$$/[Repo", "$$Namespace", "$$]", "$$/[Repo", "$$Name", "$$]", "$$\"", "$$;"], ["\u2581Method", "\u2581=", "\u2581MethodType.POST", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Update", "$$Repo", "$$Request()", "\u2581{"], ["\u2581super(\"", "$$cr\",", "\u2581\"2016-06-07\",", "\u2581\"", "$$Update", "$$Repo", "$$\",", "\u2581\"", "$$cr", "$$\")", "$$;"], ["\u2581set", "$$UriPattern", "$$(\"/", "$$re", "$$pos", "$$/[Repo", "$$Namespace", "$$]", "$$/[Repo", "$$Name", "$$]", "$$\")", "$$;"], ["\u2581setMethod(Method", "$$Type.POST", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public PhoneticFilterFactory(IDictionary<string, string> args): base(args) {\n    inject = GetBoolean(args, INJECT, true);\n    name = Require(args, ENCODER);\n    string v = Get(args, MAX_CODE_LENGTH);\n    if (v != null) {\n        maxCodeLength = int.Parse(v, CultureInfo.InvariantCulture);\n    }\n    else {\n        maxCodeLength = null;\n    }\n    if (!(args.Count == 0)) {\n        throw new ArgumentException(\"Unknown parameters: \" + args);\n    }\n}\n", "java": "public PhoneticFilterFactory(Map<String,String> args) {\n    super(args);\n    inject = getBoolean(args, INJECT, true);\n    name = require(args, ENCODER);\n    String v = get(args, MAX_CODE_LENGTH);\n    if (v != null) {\n        maxCodeLength = Integer.valueOf(v);\n    }\n    else {\n        maxCodeLength = null;\n    }\n    if (!args.isEmpty()) {\n        throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n}\n", "cs_t": [["\u2581public", "\u2581P", "$$h", "$$one", "$$tic", "$$FilterFactory(IDictionary<string,", "\u2581string>", "\u2581args):", "\u2581base(args)", "\u2581{"], ["\u2581in", "$$ject", "\u2581=", "\u2581Get", "$$Boolean(args,", "\u2581I", "$$N", "$$J", "$$EC", "$$T", "$$,", "\u2581true", "$$)", "$$;"], ["\u2581name", "\u2581=", "\u2581Re", "$$quire", "$$(args,", "\u2581E", "$$N", "$$CO", "$$D", "$$ER", "$$)", "$$;"], ["\u2581string", "\u2581v", "\u2581=", "\u2581Get", "$$(args,", "\u2581MAX_", "$$CO", "$$D", "$$E_", "$$LENGTH", "$$)", "$$;"], ["\u2581if", "\u2581(v", "\u2581!=", "\u2581null)", "\u2581{"], ["\u2581max", "$$Code", "$$Length", "\u2581=", "\u2581int", "$$.", "$$Parse", "$$(", "$$v", "$$,", "\u2581C", "$$ulture", "$$Info.", "$$Inv", "$$ariant", "$$Culture", "$$)", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581max", "$$Code", "$$Length", "\u2581=", "\u2581null", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(!", "$$(arg", "$$s.Count", "\u2581==", "\u25810", "$$))", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581ArgumentException(\"", "$$Unknown", "\u2581parameters:", "\u2581\"", "\u2581+", "\u2581args)", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581P", "$$h", "$$one", "$$tic", "$$FilterFactory(Map<String,String>", "\u2581args)", "\u2581{"], ["\u2581super(", "$$arg", "$$s)", "$$;"], ["\u2581in", "$$ject", "\u2581=", "\u2581get", "$$Boolean(args,", "\u2581I", "$$N", "$$J", "$$EC", "$$T", "$$,", "\u2581true", "$$)", "$$;"], ["\u2581name", "\u2581=", "\u2581re", "$$quire", "$$(args,", "\u2581E", "$$N", "$$CO", "$$D", "$$ER", "$$)", "$$;"], ["\u2581String", "\u2581v", "\u2581=", "\u2581get", "$$(args,", "\u2581MAX_", "$$CO", "$$D", "$$E_", "$$LENGTH", "$$)", "$$;"], ["\u2581if", "\u2581(v", "\u2581!=", "\u2581null)", "\u2581{"], ["\u2581max", "$$Code", "$$Length", "\u2581=", "\u2581Integ", "$$er.", "$$value", "$$Of(", "$$v", "$$)", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581max", "$$Code", "$$Length", "\u2581=", "\u2581null", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(!args.isEmpty())", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581IllegalArgumentException(\"Unknown", "\u2581parameters:", "\u2581\"", "\u2581+", "\u2581args)", "$$;"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public virtual FetchCommand Fetch() {\n    return new FetchCommand(repo);\n}\n", "java": "public FetchCommand fetch() {\n    return new FetchCommand(repo);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581F", "$$etch", "$$Command", "\u2581F", "$$etch", "$$()", "\u2581{"], ["\u2581return", "\u2581new", "\u2581F", "$$etch", "$$Command", "$$(repo", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581F", "$$etch", "$$Command", "\u2581f", "$$etch", "$$()", "\u2581{"], ["\u2581return", "\u2581new", "\u2581F", "$$etch", "$$Command", "$$(repo", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual QueryPhraseMap SearchPhrase(string fieldName, IList<TermInfo> phraseCandidate) {\n    QueryPhraseMap root = GetRootMap(fieldName);\n    if (root == null) return null;\n    return root.SearchPhrase(phraseCandidate);\n}\n", "java": "public QueryPhraseMap searchPhrase( String fieldName, final List<TermInfo> phraseCandidate ) {\n    QueryPhraseMap root = getRootMap( fieldName );\n    if( root == null ) return null;\n    return root.searchPhrase( phraseCandidate );\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Query", "$$Phrase", "$$Map", "\u2581Search", "$$Phrase", "$$(string", "\u2581field", "$$Name,", "\u2581IList<", "$$Term", "$$Info", "$$>", "\u2581p", "$$h", "$$rase", "$$C", "$$and", "$$idate", "$$)", "\u2581{"], ["\u2581Query", "$$Phrase", "$$Map", "\u2581", "$$root", "\u2581=", "\u2581Get", "$$Ro", "$$ot", "$$Map", "$$(field", "$$Name)", "$$;"], ["\u2581if", "\u2581(", "$$root", "\u2581==", "\u2581null)", "\u2581return", "\u2581null", "$$;"], ["\u2581return", "\u2581", "$$root", "$$.", "$$Search", "$$Phrase", "$$(p", "$$h", "$$rase", "$$C", "$$and", "$$idate", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Query", "$$Phrase", "$$Map", "\u2581se", "$$arch", "$$Phrase", "$$(", "\u2581String", "\u2581field", "$$Name,", "\u2581final", "\u2581List<", "$$Term", "$$Info", "$$>", "\u2581p", "$$h", "$$rase", "$$C", "$$and", "$$idate", "\u2581)", "\u2581{"], ["\u2581Query", "$$Phrase", "$$Map", "\u2581", "$$root", "\u2581=", "\u2581get", "$$Ro", "$$ot", "$$Map", "$$(", "\u2581field", "$$Name", "\u2581)", "$$;"], ["\u2581if(", "\u2581", "$$root", "\u2581==", "\u2581null", "\u2581)", "\u2581return", "\u2581null", "$$;"], ["\u2581return", "\u2581", "$$root", "$$.se", "$$arch", "$$Phrase", "$$(", "\u2581p", "$$h", "$$rase", "$$C", "$$and", "$$idate", "\u2581)", "$$;"], ["\u2581}"]]}, {"cs": "public override java.util.Iterator<java.util.MapClass.Entry<K, V>> iterator() {\n    return new java.util.Hashtable<K, V>.EntryIterator(this._enclosing);\n}\n", "java": "@Override public Iterator<Multiset.Entry<K>> iterator() {\n    return new MultisetEntryIterator();\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581java.util.", "$$Iterator", "$$<", "$$java.util.", "$$MapClass.", "$$Entry<K,", "\u2581V>", "$$>", "\u2581iterator", "$$()", "\u2581{"], ["\u2581return", "\u2581new", "\u2581java.util.", "$$Hashtable", "$$<", "$$K,", "\u2581V>", "$$.", "$$Entry", "$$Iterator", "$$(this", "$$._", "$$enclosing", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581@Override", "\u2581public", "\u2581Iterator<", "$$Multi", "$$set", "$$.", "$$Entry<", "$$K", "$$>", "$$>", "\u2581iterator", "$$()", "\u2581{"], ["\u2581return", "\u2581new", "\u2581M", "$$ulti", "$$set", "$$Entry", "$$Iterator", "$$()", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DeleteDBSnapshotResponse DeleteDBSnapshot(DeleteDBSnapshotRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DeleteDBSnapshotRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DeleteDBSnapshotResponseUnmarshaller.Instance;\n    return Invoke<DeleteDBSnapshotResponse>(request, options);\n}\n", "java": "public DBSnapshot deleteDBSnapshot(DeleteDBSnapshotRequest request) {\n    request = beforeClientExecution(request);\n    return executeDeleteDBSnapshot(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Delete", "$$DB", "$$Snapshot", "$$Response", "\u2581Delete", "$$DB", "$$Snapshot", "$$(Delete", "$$DB", "$$SnapshotRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Delete", "$$DB", "$$Snapshot", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Delete", "$$DB", "$$Snapshot", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Delete", "$$DB", "$$Snapshot", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581D", "$$B", "$$Snapshot", "\u2581delete", "$$DB", "$$Snapshot", "$$(Delete", "$$DB", "$$SnapshotRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDelete", "$$DB", "$$Snapshot", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual void SetOutput() {\n    output = true;\n}\n", "java": "public void setOutput() {\n    output = true;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581void", "\u2581Set", "$$Output", "$$()", "\u2581{"], ["\u2581output", "\u2581=", "\u2581true", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581set", "$$Output", "$$()", "\u2581{"], ["\u2581output", "\u2581=", "\u2581true", "$$;"], ["\u2581}"]]}, {"cs": "public override java.nio.ByteBuffer compact() {\n    throw new System.NotImplementedException();\n}\n", "java": "public ByteBuffer compact() {\n    throw new ReadOnlyBufferException();\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581java.nio.ByteBuffer", "\u2581comp", "$$act", "$$()", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581System.NotImplemented", "$$Exception", "$$()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581ByteBuffer", "\u2581comp", "$$act", "$$()", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581Read", "$$OnlyBuffer", "$$Exception", "$$()", "$$;"], ["\u2581}"]]}, {"cs": "public virtual org.xmlpull.v1.XmlPullParser newPullParser() {\n    if (parserClasses == null) {\n        throw new org.xmlpull.v1.XmlPullParserException(\"Factory initialization was incomplete - has not tried \"+ classNamesLocation);\n    }\n    if (parserClasses.size() == 0) {\n        throw new org.xmlpull.v1.XmlPullParserException(\"No valid parser classes found in \"+ classNamesLocation);\n    }\n    java.lang.StringBuilder issues = new java.lang.StringBuilder();\n    {\n        for (int i = 0; i < parserClasses.size(); i++) {\n            System.Type ppClass = (System.Type)parserClasses.get(i);\n            try {\n                org.xmlpull.v1.XmlPullParser pp = (org.xmlpull.v1.XmlPullParser)System.Activator.CreateInstance(ppClass);\n                {\n                    for (java.util.Iterator<object> iter = features.keySet().iterator(); iter.hasNext(); ) {\n                        string key = (string)iter.next();\n                        bool value = (bool)features.get(key);\n                        if (value != null && value) {\n                            pp.setFeature(key, true);\n                        }\n                    }\n                }\n                return pp;\n            }\n            catch (System.Exception ex) {\n                issues.append(ppClass.FullName + \": \" + ex.ToString() + \"; \");\n            }\n        }\n    }\n    throw new org.xmlpull.v1.XmlPullParserException(\"could not create parser: \" + issues);\n}\n", "java": "public XmlPullParser newPullParser() throws XmlPullParserException {\n    if (parserClasses == null) throw new XmlPullParserException(\"Factory initialization was incomplete - has not tried \"+classNamesLocation);\n    if (parserClasses.size() == 0) throw new XmlPullParserException(\"No valid parser classes found in \"+classNamesLocation);\n    final StringBuilder issues = new StringBuilder();\n    for (int i = 0; i < parserClasses.size(); i++) {\n        final Class ppClass = (Class) parserClasses.get(i);\n        try {\n            final XmlPullParser pp = (XmlPullParser) ppClass.newInstance();\n            for (Iterator iter = features.keySet().iterator(); iter.hasNext(); ) {\n                final String key = (String) iter.next();\n                final Boolean value = (Boolean) features.get(key);\n                if(value != null && value.booleanValue()) {\n                    pp.setFeature(key, true);\n                }\n            }\n            return pp;\n        }\n        catch(Exception ex) {\n            issues.append (ppClass.getName () + \": \"+ ex.toString ()+\"; \");\n        }\n    }\n    throw new XmlPullParserException (\"could not create parser: \"+issues);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581or", "$$g.", "$$x", "$$m", "$$l", "$$p", "$$ull", "$$.", "$$v", "$$1.", "$$X", "$$m", "$$l", "$$P", "$$ull", "$$Parser", "\u2581new", "$$P", "$$ull", "$$Parser", "$$()", "\u2581{"], ["\u2581if", "\u2581(", "$$par", "$$ser", "$$Class", "$$es", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581or", "$$g.", "$$x", "$$m", "$$l", "$$p", "$$ull", "$$.", "$$v", "$$1.", "$$X", "$$m", "$$l", "$$P", "$$ull", "$$Parser", "$$Exception(\"", "$$Factory", "\u2581in", "$$itial", "$$ization", "\u2581w", "$$as", "\u2581in", "$$comp", "$$lete", "\u2581-", "\u2581has", "\u2581not", "\u2581t", "$$ri", "$$ed", "\u2581\"+", "\u2581c", "$$lass", "$$Names", "$$Loc", "$$ation", "$$)", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(", "$$par", "$$ser", "$$Class", "$$es", "$$.size()", "\u2581==", "\u25810)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581or", "$$g.", "$$x", "$$m", "$$l", "$$p", "$$ull", "$$.", "$$v", "$$1.", "$$X", "$$m", "$$l", "$$P", "$$ull", "$$Parser", "$$Exception(\"", "$$No", "\u2581val", "$$id", "\u2581par", "$$ser", "\u2581c", "$$lass", "$$es", "\u2581f", "$$ound", "\u2581in", "\u2581\"+", "\u2581c", "$$lass", "$$Names", "$$Loc", "$$ation", "$$)", "$$;"], ["\u2581}"], ["\u2581java.lang.String", "$$Builder", "\u2581is", "$$s", "$$ues", "\u2581=", "\u2581new", "\u2581java.lang.String", "$$Builder", "$$()", "$$;"], ["\u2581{"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810;", "\u2581i", "\u2581<", "\u2581par", "$$ser", "$$Class", "$$es", "$$.size()", "$$;", "\u2581i++)", "\u2581{"], ["\u2581System.", "$$Type", "\u2581p", "$$p", "$$Class", "\u2581=", "\u2581(", "$$System", "$$.", "$$Type", "$$)", "$$par", "$$ser", "$$Class", "$$es", "$$.get", "$$(i", "$$)", "$$;"], ["\u2581try", "\u2581{"], ["\u2581or", "$$g.", "$$x", "$$m", "$$l", "$$p", "$$ull", "$$.", "$$v", "$$1.", "$$X", "$$m", "$$l", "$$P", "$$ull", "$$Parser", "\u2581p", "$$p", "\u2581=", "\u2581(", "$$or", "$$g.", "$$x", "$$m", "$$l", "$$p", "$$ull", "$$.", "$$v", "$$1.", "$$X", "$$m", "$$l", "$$P", "$$ull", "$$Parser", "$$)", "$$System", "$$.A", "$$c", "$$ti", "$$v", "$$ator", "$$.Create", "$$Instance", "$$(p", "$$p", "$$Clas", "$$s)", "$$;"], ["\u2581{"], ["\u2581for", "\u2581(", "$$java.util.", "$$Iterator", "$$<", "$$object", "$$>", "\u2581iter", "\u2581=", "\u2581f", "$$e", "$$atu", "$$res", "$$.", "$$key", "$$Set", "$$().", "$$iterator", "$$()", "$$;", "\u2581iter", "$$.has", "$$Next()", "$$;", "\u2581)", "\u2581{"], ["\u2581string", "\u2581key", "\u2581=", "\u2581(", "$$string", "$$)", "$$i", "$$ter", "$$.next", "$$()", "$$;"], ["\u2581bool", "\u2581value", "\u2581=", "\u2581(", "$$bo", "$$ol", "$$)", "$$f", "$$e", "$$atu", "$$res", "$$.get", "$$(key", "$$)", "$$;"], ["\u2581if", "\u2581(value", "\u2581!=", "\u2581null", "\u2581&&", "\u2581value)", "\u2581{"], ["\u2581p", "$$p", "$$.set", "$$F", "$$e", "$$atu", "$$re", "$$(key", "$$,", "\u2581true", "$$)", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581}"], ["\u2581return", "\u2581p", "$$p", "$$;"], ["\u2581}"], ["\u2581catch", "\u2581(", "$$System", "$$.", "$$Exception", "\u2581ex", "$$)", "\u2581{"], ["\u2581is", "$$s", "$$ues", "$$.append(", "$$p", "$$p", "$$Class.", "$$Full", "$$Name", "\u2581+", "\u2581\":", "\u2581\"", "\u2581+", "\u2581ex", "$$.ToString()", "\u2581+", "\u2581\"", "$$;", "\u2581\")", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581}"], ["\u2581throw", "\u2581new", "\u2581or", "$$g.", "$$x", "$$m", "$$l", "$$p", "$$ull", "$$.", "$$v", "$$1.", "$$X", "$$m", "$$l", "$$P", "$$ull", "$$Parser", "$$Exception(\"", "$$co", "$$uld", "\u2581not", "\u2581create", "\u2581par", "$$ser", "$$:", "\u2581\"", "\u2581+", "\u2581is", "$$s", "$$ues", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581", "$$X", "$$m", "$$l", "$$P", "$$ull", "$$Parser", "\u2581new", "$$P", "$$ull", "$$Parser", "$$()", "\u2581throws", "\u2581", "$$X", "$$m", "$$l", "$$P", "$$ull", "$$Parser", "$$Exception", "\u2581{"], ["\u2581if", "\u2581(", "$$par", "$$ser", "$$Class", "$$es", "\u2581==", "\u2581null)", "\u2581throw", "\u2581new", "\u2581", "$$X", "$$m", "$$l", "$$P", "$$ull", "$$Parser", "$$Exception(\"", "$$Factory", "\u2581in", "$$itial", "$$ization", "\u2581w", "$$as", "\u2581in", "$$comp", "$$lete", "\u2581-", "\u2581has", "\u2581not", "\u2581t", "$$ri", "$$ed", "\u2581\"+", "$$c", "$$lass", "$$Names", "$$Loc", "$$ation", "$$)", "$$;"], ["\u2581if", "\u2581(", "$$par", "$$ser", "$$Class", "$$es", "$$.size()", "\u2581==", "\u25810)", "\u2581throw", "\u2581new", "\u2581", "$$X", "$$m", "$$l", "$$P", "$$ull", "$$Parser", "$$Exception(\"", "$$No", "\u2581val", "$$id", "\u2581par", "$$ser", "\u2581c", "$$lass", "$$es", "\u2581f", "$$ound", "\u2581in", "\u2581\"+", "$$c", "$$lass", "$$Names", "$$Loc", "$$ation", "$$)", "$$;"], ["\u2581final", "\u2581StringBuilder", "\u2581is", "$$s", "$$ues", "\u2581=", "\u2581new", "\u2581StringBuilder", "$$()", "$$;"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810;", "\u2581i", "\u2581<", "\u2581par", "$$ser", "$$Class", "$$es", "$$.size()", "$$;", "\u2581i++)", "\u2581{"], ["\u2581final", "\u2581C", "$$lass", "\u2581p", "$$p", "$$Class", "\u2581=", "\u2581(", "$$Clas", "$$s)", "\u2581par", "$$ser", "$$Class", "$$es", "$$.get", "$$(i", "$$)", "$$;"], ["\u2581try", "\u2581{"], ["\u2581final", "\u2581", "$$X", "$$m", "$$l", "$$P", "$$ull", "$$Parser", "\u2581p", "$$p", "\u2581=", "\u2581(", "$$X", "$$m", "$$l", "$$P", "$$ull", "$$Parser", "$$)", "\u2581p", "$$p", "$$Class.", "$$new", "$$Instance", "$$()", "$$;"], ["\u2581for", "\u2581(", "$$Iterator", "\u2581iter", "\u2581=", "\u2581f", "$$e", "$$atu", "$$res", "$$.", "$$key", "$$Set", "$$().", "$$iterator", "$$()", "$$;", "\u2581iter", "$$.has", "$$Next()", "$$;", "\u2581)", "\u2581{"], ["\u2581final", "\u2581String", "\u2581key", "\u2581=", "\u2581(", "$$String", "$$)", "\u2581iter", "$$.next", "$$()", "$$;"], ["\u2581final", "\u2581Boolean", "\u2581value", "\u2581=", "\u2581(", "$$Boolean", "$$)", "\u2581f", "$$e", "$$atu", "$$res", "$$.get", "$$(key", "$$)", "$$;"], ["\u2581if", "$$(value", "\u2581!=", "\u2581null", "\u2581&&", "\u2581value", "$$.", "$$boolean", "$$Value", "$$())", "\u2581{"], ["\u2581p", "$$p", "$$.set", "$$F", "$$e", "$$atu", "$$re", "$$(key", "$$,", "\u2581true", "$$)", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581return", "\u2581p", "$$p", "$$;"], ["\u2581}"], ["\u2581catch", "$$(", "$$Exception", "\u2581ex", "$$)", "\u2581{"], ["\u2581is", "$$s", "$$ues", "$$.ap", "$$pend", "\u2581(p", "$$p", "$$Clas", "$$s.get", "$$Name", "\u2581(", "$$)", "\u2581+", "\u2581\":", "\u2581\"+", "\u2581ex", "$$.to", "$$String", "\u2581(", "$$)", "$$+\"", "$$;", "\u2581\")", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581throw", "\u2581new", "\u2581", "$$X", "$$m", "$$l", "$$P", "$$ull", "$$Parser", "$$Exception", "\u2581(\"", "$$co", "$$uld", "\u2581not", "\u2581create", "\u2581par", "$$ser", "$$:", "\u2581\"+", "$$is", "$$s", "$$ues", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DeleteAnalysisSchemeResponse DeleteAnalysisScheme(DeleteAnalysisSchemeRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DeleteAnalysisSchemeRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DeleteAnalysisSchemeResponseUnmarshaller.Instance;\n    return Invoke<DeleteAnalysisSchemeResponse>(request, options);\n}\n", "java": "public DeleteAnalysisSchemeResult deleteAnalysisScheme(DeleteAnalysisSchemeRequest request) {\n    request = beforeClientExecution(request);\n    return executeDeleteAnalysisScheme(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Delete", "$$An", "$$al", "$$ys", "$$is", "$$Sch", "$$eme", "$$Response", "\u2581Delete", "$$An", "$$al", "$$ys", "$$is", "$$Sch", "$$eme", "$$(Delete", "$$An", "$$al", "$$ys", "$$is", "$$Sch", "$$eme", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Delete", "$$An", "$$al", "$$ys", "$$is", "$$Sch", "$$eme", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Delete", "$$An", "$$al", "$$ys", "$$is", "$$Sch", "$$eme", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Delete", "$$An", "$$al", "$$ys", "$$is", "$$Sch", "$$eme", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Delete", "$$An", "$$al", "$$ys", "$$is", "$$Sch", "$$eme", "$$Result", "\u2581delete", "$$An", "$$al", "$$ys", "$$is", "$$Sch", "$$eme", "$$(Delete", "$$An", "$$al", "$$ys", "$$is", "$$Sch", "$$eme", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDelete", "$$An", "$$al", "$$ys", "$$is", "$$Sch", "$$eme", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public ExcelExtractor(HSSFWorkbook wb): base(wb) {\n    this.wb = wb;\n    _formatter = new HSSFDataFormatter();\n}\n", "java": "public ExcelExtractor(HSSFWorkbook wb) {\n    super(wb);\n    _wb = wb;\n    _formatter = new HSSFDataFormatter();\n}\n", "cs_t": [["\u2581public", "\u2581Ex", "$$ce", "$$l", "$$Ex", "$$tra", "$$ctor", "$$(HSSF", "$$Workbook", "\u2581w", "$$b", "$$):", "\u2581base", "$$(w", "$$b", "$$)", "\u2581{"], ["\u2581this.", "$$w", "$$b", "\u2581=", "\u2581w", "$$b", "$$;"], ["\u2581_", "$$format", "$$ter", "\u2581=", "\u2581new", "\u2581HSSF", "$$Data", "$$Format", "$$ter", "$$()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Ex", "$$ce", "$$l", "$$Ex", "$$tra", "$$ctor", "$$(HSSF", "$$Workbook", "\u2581w", "$$b", "$$)", "\u2581{"], ["\u2581super(", "$$w", "$$b", "$$)", "$$;"], ["\u2581_", "$$w", "$$b", "\u2581=", "\u2581w", "$$b", "$$;"], ["\u2581_", "$$format", "$$ter", "\u2581=", "\u2581new", "\u2581HSSF", "$$Data", "$$Format", "$$ter", "$$()", "$$;"], ["\u2581}"]]}, {"cs": "public override java.nio.IntBuffer put(int index, int c) {\n    checkIndex(index);\n    byteBuffer.putInt(index * libcore.io.SizeOf.INT, c);\n    return this;\n}\n", "java": "public IntBuffer put(int index, int c) {\n    checkIndex(index);\n    byteBuffer.putInt(index * SizeOf.INT, c);\n    return this;\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581java.nio.", "$$Int", "$$Buffer", "\u2581put", "$$(int", "\u2581index,", "\u2581int", "\u2581c)", "\u2581{"], ["\u2581check", "$$Index(index", "$$)", "$$;"], ["\u2581byteBuffer.", "$$put", "$$Int", "$$(index", "\u2581*", "\u2581libcore.io.SizeOf", "$$.IN", "$$T", "$$,", "\u2581c)", "$$;"], ["\u2581return", "\u2581this", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Int", "$$Buffer", "\u2581put", "$$(int", "\u2581index,", "\u2581int", "\u2581c)", "\u2581{"], ["\u2581check", "$$Index(index", "$$)", "$$;"], ["\u2581byteBuffer.", "$$put", "$$Int", "$$(index", "\u2581*", "\u2581SizeOf", "$$.IN", "$$T", "$$,", "\u2581c)", "$$;"], ["\u2581return", "\u2581this", "$$;"], ["\u2581}"]]}, {"cs": "public byte GetParameterClass(int index) {\n    if (index >= paramClass.Length) {\n        return paramClass[paramClass.Length - 1];\n    }\n    return paramClass[index];\n}\n", "java": "public final byte getParameterClass(int index) {\n    if (index >= paramClass.length) {\n        return paramClass[paramClass.length - 1];\n    }\n    return paramClass[index];\n}\n", "cs_t": [["\u2581public", "\u2581byte", "\u2581Get", "$$Parameter", "$$Clas", "$$s(", "$$int", "\u2581index)", "\u2581{"], ["\u2581if", "\u2581(index", "\u2581>=", "\u2581par", "$$am", "$$Clas", "$$s.Length", "$$)", "\u2581{"], ["\u2581return", "\u2581par", "$$am", "$$Clas", "$$s[", "$$param", "$$Clas", "$$s.Length", "\u2581-", "\u25811", "$$]", "$$;"], ["\u2581}"], ["\u2581return", "\u2581par", "$$am", "$$Clas", "$$s[index", "$$]", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581final", "\u2581byte", "\u2581get", "$$Parameter", "$$Clas", "$$s(", "$$int", "\u2581index)", "\u2581{"], ["\u2581if", "\u2581(index", "\u2581>=", "\u2581par", "$$am", "$$Clas", "$$s.length", "$$)", "\u2581{"], ["\u2581return", "\u2581par", "$$am", "$$Clas", "$$s[", "$$param", "$$Clas", "$$s.length", "\u2581-", "\u25811", "$$]", "$$;"], ["\u2581}"], ["\u2581return", "\u2581par", "$$am", "$$Clas", "$$s[index", "$$]", "$$;"], ["\u2581}"]]}, {"cs": "public virtual ListEndpointsResponse ListEndpoints(ListEndpointsRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = ListEndpointsRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = ListEndpointsResponseUnmarshaller.Instance;\n    return Invoke<ListEndpointsResponse>(request, options);\n}\n", "java": "public ListEndpointsResult listEndpoints(ListEndpointsRequest request) {\n    request = beforeClientExecution(request);\n    return executeListEndpoints(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581List", "$$Endpoint", "$$sResponse", "\u2581List", "$$Endpoint", "$$s(List", "$$Endpoint", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581List", "$$Endpoint", "$$s", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581List", "$$Endpoint", "$$s", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<List", "$$Endpoint", "$$sResponse>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581List", "$$Endpoint", "$$sResult", "\u2581list", "$$Endpoint", "$$s(List", "$$Endpoint", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeList", "$$Endpoint", "$$s", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public static CharsRef Join(string[] words, CharsRef reuse) {\n    int upto = 0;\n    char[] buffer = reuse.Chars;\n    foreach (string word in words) {\n        int wordLen = word.Length;\n        int needed = (0 == upto ? wordLen : 1 + upto + wordLen);\n        if (needed > buffer.Length) {\n            reuse.Grow(needed);\n            buffer = reuse.Chars;\n        }\n        if (upto > 0) {\n            buffer[upto++] = SynonymMap.WORD_SEPARATOR;\n        }\n        word.CopyTo(0, buffer, upto, wordLen - 0);\n        upto += wordLen;\n    }\n    reuse.Length = upto;\n    return reuse;\n}\n", "java": "public static CharsRef join(String[] words, CharsRefBuilder reuse) {\n    int upto = 0;\n    char[] buffer = reuse.chars();\n    for (String word : words) {\n        final int wordLen = word.length();\n        final int needed = (0 == upto ? wordLen : 1 + upto + wordLen);\n        if (needed > buffer.length) {\n            reuse.grow(needed);\n            buffer = reuse.chars();\n        }\n        if (upto > 0) {\n            buffer[upto++] = SynonymMap.WORD_SEPARATOR;\n        }\n        word.getChars(0, wordLen, buffer, upto);\n        upto += wordLen;\n    }\n    reuse.setLength(upto);\n    return reuse.get();\n}\n", "cs_t": [["\u2581public", "\u2581static", "\u2581CharsRef", "\u2581", "$$Jo", "$$in", "$$(string", "$$[]", "\u2581word", "$$s,", "\u2581CharsRef", "\u2581re", "$$use", "$$)", "\u2581{"], ["\u2581int", "\u2581upto", "\u2581=", "\u25810;"], ["\u2581char[]", "\u2581buffer", "\u2581=", "\u2581re", "$$use", "$$.", "$$Char", "$$s;"], ["\u2581foreach", "\u2581(", "$$string", "\u2581word", "\u2581in", "\u2581word", "$$s)", "\u2581{"], ["\u2581int", "\u2581word", "$$Len", "\u2581=", "\u2581word", "$$.Length;"], ["\u2581int", "\u2581n", "$$ee", "$$ded", "\u2581=", "\u2581(", "$$0", "\u2581==", "\u2581upto", "\u2581?", "\u2581word", "$$Len", "\u2581:", "\u25811", "\u2581+", "\u2581upto", "\u2581+", "\u2581word", "$$Len", "$$)", "$$;"], ["\u2581if", "\u2581(n", "$$ee", "$$ded", "\u2581>", "\u2581buffer", "$$.Length)", "\u2581{"], ["\u2581re", "$$use", "$$.", "$$G", "$$row", "$$(n", "$$ee", "$$ded", "$$)", "$$;"], ["\u2581buffer", "\u2581=", "\u2581re", "$$use", "$$.", "$$Char", "$$s;"], ["\u2581}"], ["\u2581if", "\u2581(", "$$upto", "\u2581>", "\u25810)", "\u2581{"], ["\u2581buffer", "$$[", "$$upto", "$$++]", "\u2581=", "\u2581S", "$$yn", "$$on", "$$ym", "$$Map.", "$$W", "$$ORD_", "$$SE", "$$P", "$$AR", "$$AT", "$$OR", "$$;"], ["\u2581}"], ["\u2581word", "$$.Copy", "$$To(", "$$0,", "\u2581buffer,", "\u2581upto", "$$,", "\u2581word", "$$Len", "\u2581-", "\u25810)", "$$;"], ["\u2581upto", "\u2581+=", "\u2581word", "$$Len", "$$;"], ["\u2581}"], ["\u2581re", "$$use", "$$.Length", "\u2581=", "\u2581upto", "$$;"], ["\u2581return", "\u2581re", "$$use", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581static", "\u2581CharsRef", "\u2581j", "$$o", "$$in", "$$(String", "$$[]", "\u2581word", "$$s,", "\u2581CharsRef", "$$Builder", "\u2581re", "$$use", "$$)", "\u2581{"], ["\u2581int", "\u2581upto", "\u2581=", "\u25810;"], ["\u2581char[]", "\u2581buffer", "\u2581=", "\u2581re", "$$use", "$$.char", "$$s()", "$$;"], ["\u2581for", "\u2581(", "$$String", "\u2581word", "\u2581:", "\u2581word", "$$s)", "\u2581{"], ["\u2581final", "\u2581int", "\u2581word", "$$Len", "\u2581=", "\u2581word", "$$.length()", "$$;"], ["\u2581final", "\u2581int", "\u2581n", "$$ee", "$$ded", "\u2581=", "\u2581(", "$$0", "\u2581==", "\u2581upto", "\u2581?", "\u2581word", "$$Len", "\u2581:", "\u25811", "\u2581+", "\u2581upto", "\u2581+", "\u2581word", "$$Len", "$$)", "$$;"], ["\u2581if", "\u2581(n", "$$ee", "$$ded", "\u2581>", "\u2581buffer", "$$.length)", "\u2581{"], ["\u2581re", "$$use", "$$.", "$$g", "$$row", "$$(n", "$$ee", "$$ded", "$$)", "$$;"], ["\u2581buffer", "\u2581=", "\u2581re", "$$use", "$$.char", "$$s()", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(", "$$upto", "\u2581>", "\u25810)", "\u2581{"], ["\u2581buffer", "$$[", "$$upto", "$$++]", "\u2581=", "\u2581S", "$$yn", "$$on", "$$ym", "$$Map.", "$$W", "$$ORD_", "$$SE", "$$P", "$$AR", "$$AT", "$$OR", "$$;"], ["\u2581}"], ["\u2581word", "$$.get", "$$Char", "$$s(", "$$0,", "\u2581word", "$$Len", "$$,", "\u2581buffer,", "\u2581upto", "$$)", "$$;"], ["\u2581upto", "\u2581+=", "\u2581word", "$$Len", "$$;"], ["\u2581}"], ["\u2581re", "$$use", "$$.set", "$$Length", "$$(", "$$upto", "$$)", "$$;"], ["\u2581return", "\u2581re", "$$use", "$$.get", "$$()", "$$;"], ["\u2581}"]]}, {"cs": "public java.lang.StringBuffer insert(int index, float f) {\n    return insert(index, System.Convert.ToString(f));\n}\n", "java": "public StringBuffer insert(int index, float f) {\n    return insert(index, Float.toString(f));\n}\n", "cs_t": [["\u2581public", "\u2581java.lang.String", "$$Buffer", "\u2581insert", "$$(int", "\u2581index,", "\u2581float", "\u2581f", "$$)", "\u2581{"], ["\u2581return", "\u2581insert", "$$(index", "$$,", "\u2581System.", "$$Con", "$$vert", "$$.To", "$$String(", "$$f", "$$))", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581String", "$$Buffer", "\u2581insert", "$$(int", "\u2581index,", "\u2581float", "\u2581f", "$$)", "\u2581{"], ["\u2581return", "\u2581insert", "$$(index", "$$,", "\u2581F", "$$loat", "$$.to", "$$String(", "$$f", "$$))", "$$;"], ["\u2581}"]]}, {"cs": "public override java.nio.ShortBuffer put(short[] src, int srcOffset, int shortCount) {\n    if (shortCount > remaining()) {\n        throw new java.nio.BufferOverflowException();\n    }\n    System.Array.Copy(src, srcOffset, backingArray, offset + _position, shortCount);\n    _position += shortCount;\n    return this;\n}\n", "java": "public ShortBuffer put(short[] src, int srcOffset, int shortCount) {\n    if (shortCount > remaining()) {\n        throw new BufferOverflowException();\n    }\n    System.arraycopy(src, srcOffset, backingArray, offset + position, shortCount);\n    position += shortCount;\n    return this;\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581java.nio.", "$$Short", "$$Buffer", "\u2581put", "$$(short", "$$[]", "\u2581src", "$$,", "\u2581int", "\u2581srcOffset,", "\u2581int", "\u2581short", "$$Count)", "\u2581{"], ["\u2581if", "\u2581(", "$$short", "$$Count", "\u2581>", "\u2581remaining", "$$())", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581java.nio.Buffer", "$$Over", "$$flow", "$$Exception", "$$()", "$$;"], ["\u2581}"], ["\u2581System.Array.Copy", "$$(src", "$$,", "\u2581srcOffset,", "\u2581b", "$$ackingArray,", "\u2581offset", "\u2581+", "\u2581_position", "$$,", "\u2581short", "$$Count)", "$$;"], ["\u2581_position", "\u2581+=", "\u2581short", "$$Count", "$$;"], ["\u2581return", "\u2581this", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Sh", "$$ort", "$$Buffer", "\u2581put", "$$(short", "$$[]", "\u2581src", "$$,", "\u2581int", "\u2581srcOffset,", "\u2581int", "\u2581short", "$$Count)", "\u2581{"], ["\u2581if", "\u2581(", "$$short", "$$Count", "\u2581>", "\u2581remaining", "$$())", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581Buffer", "$$Over", "$$flow", "$$Exception", "$$()", "$$;"], ["\u2581}"], ["\u2581System.arraycopy", "$$(src", "$$,", "\u2581srcOffset,", "\u2581b", "$$ackingArray,", "\u2581offset", "\u2581+", "\u2581position", "$$,", "\u2581short", "$$Count)", "$$;"], ["\u2581position", "\u2581+=", "\u2581short", "$$Count", "$$;"], ["\u2581return", "\u2581this", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DisassociateResolverEndpointIpAddressResponse DisassociateResolverEndpointIpAddress(DisassociateResolverEndpointIpAddressRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DisassociateResolverEndpointIpAddressRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DisassociateResolverEndpointIpAddressResponseUnmarshaller.Instance;\n    return Invoke<DisassociateResolverEndpointIpAddressResponse>(request, options);\n}\n", "java": "public DisassociateResolverEndpointIpAddressResult disassociateResolverEndpointIpAddress(DisassociateResolverEndpointIpAddressRequest request) {\n    request = beforeClientExecution(request);\n    return executeDisassociateResolverEndpointIpAddress(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Disassociate", "$$ResolverEndpoint", "$$Ip", "$$Addres", "$$sResponse", "\u2581Disassociate", "$$ResolverEndpoint", "$$Ip", "$$Addres", "$$s(", "$$Disassociate", "$$ResolverEndpoint", "$$Ip", "$$Addres", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Disassociate", "$$ResolverEndpoint", "$$Ip", "$$Address", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Disassociate", "$$ResolverEndpoint", "$$Ip", "$$Address", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<", "$$Disassociate", "$$ResolverEndpoint", "$$Ip", "$$Addres", "$$sResponse>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Disassociate", "$$ResolverEndpoint", "$$Ip", "$$Addres", "$$sResult", "\u2581dis", "$$associate", "$$ResolverEndpoint", "$$Ip", "$$Addres", "$$s(", "$$Disassociate", "$$ResolverEndpoint", "$$Ip", "$$Addres", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581execute", "$$Disassociate", "$$ResolverEndpoint", "$$Ip", "$$Address", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual AcceptDirectConnectGatewayAssociationProposalResponse AcceptDirectConnectGatewayAssociationProposal(AcceptDirectConnectGatewayAssociationProposalRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = AcceptDirectConnectGatewayAssociationProposalRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = AcceptDirectConnectGatewayAssociationProposalResponseUnmarshaller.Instance;\n    return Invoke<AcceptDirectConnectGatewayAssociationProposalResponse>(request, options);\n}\n", "java": "public AcceptDirectConnectGatewayAssociationProposalResult acceptDirectConnectGatewayAssociationProposal(AcceptDirectConnectGatewayAssociationProposalRequest request) {\n    request = beforeClientExecution(request);\n    return executeAcceptDirectConnectGatewayAssociationProposal(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Ac", "$$cept", "$$DirectConnectGatewayAssociation", "$$Proposal", "$$Response", "\u2581Ac", "$$cept", "$$DirectConnectGatewayAssociation", "$$Proposal", "$$(", "$$Ac", "$$cept", "$$DirectConnectGatewayAssociation", "$$Proposal", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Ac", "$$cept", "$$DirectConnectGatewayAssociation", "$$Proposal", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Ac", "$$cept", "$$DirectConnectGatewayAssociation", "$$Proposal", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<", "$$Ac", "$$cept", "$$DirectConnectGatewayAssociation", "$$Proposal", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Ac", "$$cept", "$$DirectConnectGatewayAssociation", "$$Proposal", "$$Result", "\u2581ac", "$$cept", "$$DirectConnectGatewayAssociation", "$$Proposal", "$$(", "$$Ac", "$$cept", "$$DirectConnectGatewayAssociation", "$$Proposal", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581execute", "$$Ac", "$$cept", "$$DirectConnectGatewayAssociation", "$$Proposal", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual StopStackSetOperationResponse StopStackSetOperation(StopStackSetOperationRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = StopStackSetOperationRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = StopStackSetOperationResponseUnmarshaller.Instance;\n    return Invoke<StopStackSetOperationResponse>(request, options);\n}\n", "java": "public StopStackSetOperationResult stopStackSetOperation(StopStackSetOperationRequest request) {\n    request = beforeClientExecution(request);\n    return executeStopStackSetOperation(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Stop", "$$StackSet", "$$Operation", "$$Response", "\u2581Stop", "$$StackSet", "$$Operation", "$$(", "$$Stop", "$$StackSet", "$$Operation", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Stop", "$$StackSet", "$$Operation", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Stop", "$$StackSet", "$$Operation", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<", "$$Stop", "$$StackSet", "$$Operation", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Stop", "$$StackSet", "$$Operation", "$$Result", "\u2581stop", "$$StackSet", "$$Operation", "$$(", "$$Stop", "$$StackSet", "$$Operation", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581execute", "$$Stop", "$$StackSet", "$$Operation", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual CreateCacheSubnetGroupResponse CreateCacheSubnetGroup(CreateCacheSubnetGroupRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = CreateCacheSubnetGroupRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = CreateCacheSubnetGroupResponseUnmarshaller.Instance;\n    return Invoke<CreateCacheSubnetGroupResponse>(request, options);\n}\n", "java": "public CacheSubnetGroup createCacheSubnetGroup(CreateCacheSubnetGroupRequest request) {\n    request = beforeClientExecution(request);\n    return executeCreateCacheSubnetGroup(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Create", "$$Cache", "$$SubnetGroup", "$$Response", "\u2581Create", "$$Cache", "$$SubnetGroup", "$$(Create", "$$Cache", "$$SubnetGroup", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Create", "$$Cache", "$$SubnetGroup", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Create", "$$Cache", "$$SubnetGroup", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Create", "$$Cache", "$$SubnetGroup", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581C", "$$ache", "$$SubnetGroup", "\u2581create", "$$Cache", "$$SubnetGroup", "$$(Create", "$$Cache", "$$SubnetGroup", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeCreate", "$$Cache", "$$SubnetGroup", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public CachedOrds(OrdinalsSegmentReader source, int maxDoc) {\n    Offsets = new int[maxDoc + 1];\n    int[] ords = new int[maxDoc];\n    long totOrds = 0;\n    Int32sRef values = new Int32sRef(32);\n    for (int docID = 0; docID < maxDoc; docID++) {\n        Offsets[docID] = (int)totOrds;\n        source.Get(docID, values);\n        long nextLength = totOrds + values.Length;\n        if (nextLength > ords.Length) {\n            if (nextLength > ArrayUtil.MAX_ARRAY_LENGTH) {\n                throw new ThreadStateException(\"too many ordinals (>= \" + nextLength + \") to cache\");\n            }\n            ords = ArrayUtil.Grow(ords, (int)nextLength);\n        }\n        Array.Copy(values.Int32s, 0, ords, (int)totOrds, values.Length);\n        totOrds = nextLength;\n    }\n    Offsets[maxDoc] = (int)totOrds;\n    if ((double)totOrds / ords.Length < 0.9) {\n        this.Ordinals = new int[(int)totOrds];\n        Array.Copy(ords, 0, this.Ordinals, 0, (int)totOrds);\n    }\n    else {\n        this.Ordinals = ords;\n    }\n}\n", "java": "public CachedOrds(OrdinalsSegmentReader source, int maxDoc) throws IOException {\n    offsets = new int[maxDoc + 1];\n    int[] ords = new int[maxDoc];\n    long totOrds = 0;\n    final IntsRef values = new IntsRef(32);\n    for (int docID = 0; docID < maxDoc; docID++) {\n        offsets[docID] = (int) totOrds;\n        source.get(docID, values);\n        long nextLength = totOrds + values.length;\n        if (nextLength > ords.length) {\n            if (nextLength > ArrayUtil.MAX_ARRAY_LENGTH) {\n                throw new IllegalStateException(\"too many ordinals (>= \" + nextLength + \") to cache\");\n            }\n            ords = ArrayUtil.grow(ords, (int) nextLength);\n        }\n        System.arraycopy(values.ints, 0, ords, (int) totOrds, values.length);\n        totOrds = nextLength;\n    }\n    offsets[maxDoc] = (int) totOrds;\n    if ((double) totOrds / ords.length < 0.9) {\n        this.ordinals = new int[(int) totOrds];\n        System.arraycopy(ords, 0, this.ordinals, 0, (int) totOrds);\n    }\n    else {\n        this.ordinals = ords;\n    }\n}\n", "cs_t": [["\u2581public", "\u2581C", "$$ached", "$$Ord", "$$s(", "$$Ordinal", "$$s", "$$Segment", "$$Reader", "\u2581source", "$$,", "\u2581int", "\u2581max", "$$Doc", "$$)", "\u2581{"], ["\u2581", "$$Offset", "$$s", "\u2581=", "\u2581new", "\u2581int[", "$$max", "$$Doc", "\u2581+", "\u25811", "$$]", "$$;"], ["\u2581int[]", "\u2581ord", "$$s", "\u2581=", "\u2581new", "\u2581int[", "$$max", "$$Doc", "$$]", "$$;"], ["\u2581long", "\u2581t", "$$ot", "$$Ord", "$$s", "\u2581=", "\u25810;"], ["\u2581Int", "$$32", "$$sRef", "\u2581values", "\u2581=", "\u2581new", "\u2581Int", "$$32", "$$sRef", "$$(", "$$32", "$$)", "$$;"], ["\u2581for", "\u2581(int", "\u2581doc", "$$ID", "\u2581=", "\u25810;", "\u2581doc", "$$ID", "\u2581<", "\u2581max", "$$Doc", "$$;", "\u2581doc", "$$ID", "$$++)", "\u2581{"], ["\u2581", "$$Offset", "$$s[", "$$d", "$$oc", "$$ID", "$$]", "\u2581=", "\u2581(int)", "$$t", "$$ot", "$$Ord", "$$s;"], ["\u2581source", "$$.Get", "$$(d", "$$oc", "$$ID", "$$,", "\u2581values", "$$)", "$$;"], ["\u2581long", "\u2581next", "$$Length", "\u2581=", "\u2581t", "$$ot", "$$Ord", "$$s", "\u2581+", "\u2581values", "$$.Length;"], ["\u2581if", "\u2581(", "$$next", "$$Length", "\u2581>", "\u2581ord", "$$s.Length", "$$)", "\u2581{"], ["\u2581if", "\u2581(", "$$next", "$$Length", "\u2581>", "\u2581Array", "$$Util.", "$$M", "$$AX_", "$$AR", "$$R", "$$A", "$$Y_", "$$LENGTH", "$$)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581", "$$Thread", "$$State", "$$Exception(\"", "$$to", "$$o", "\u2581m", "$$an", "$$y", "\u2581ord", "$$inal", "$$s", "\u2581(", "$$>", "$$=", "\u2581\"", "\u2581+", "\u2581next", "$$Length", "\u2581+", "\u2581\")", "\u2581to", "\u2581cache", "$$\")", "$$;"], ["\u2581}"], ["\u2581ord", "$$s", "\u2581=", "\u2581Array", "$$Util.", "$$G", "$$row", "$$(", "$$ord", "$$s,", "\u2581(int)", "$$next", "$$Length", "$$)", "$$;"], ["\u2581}"], ["\u2581Array.Copy", "$$(", "$$values", "$$.", "$$Int32", "$$s,", "\u25810,", "\u2581ord", "$$s,", "\u2581(int)", "$$t", "$$ot", "$$Ord", "$$s,", "\u2581values", "$$.Length)", "$$;"], ["\u2581t", "$$ot", "$$Ord", "$$s", "\u2581=", "\u2581next", "$$Length", "$$;"], ["\u2581}"], ["\u2581", "$$Offset", "$$s[", "$$max", "$$Doc", "$$]", "\u2581=", "\u2581(int)", "$$t", "$$ot", "$$Ord", "$$s;"], ["\u2581if", "\u2581(", "$$(double", "$$)", "$$t", "$$ot", "$$Ord", "$$s", "\u2581/", "\u2581ord", "$$s.Length", "\u2581<", "\u25810", "$$.", "$$9", "$$)", "\u2581{"], ["\u2581this.", "$$Ordinal", "$$s", "\u2581=", "\u2581new", "\u2581int[", "$$(int)", "$$t", "$$ot", "$$Ord", "$$s", "$$]", "$$;"], ["\u2581Array.Copy", "$$(", "$$ord", "$$s,", "\u25810,", "\u2581this.", "$$Ordinal", "$$s,", "\u25810,", "\u2581(int)", "$$t", "$$ot", "$$Ord", "$$s)", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581this.", "$$Ordinal", "$$s", "\u2581=", "\u2581ord", "$$s;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581C", "$$ached", "$$Ord", "$$s(", "$$Ordinal", "$$s", "$$Segment", "$$Reader", "\u2581source", "$$,", "\u2581int", "\u2581max", "$$Doc", "$$)", "\u2581throws", "\u2581IOException", "\u2581{"], ["\u2581offset", "$$s", "\u2581=", "\u2581new", "\u2581int[", "$$max", "$$Doc", "\u2581+", "\u25811", "$$]", "$$;"], ["\u2581int[]", "\u2581ord", "$$s", "\u2581=", "\u2581new", "\u2581int[", "$$max", "$$Doc", "$$]", "$$;"], ["\u2581long", "\u2581t", "$$ot", "$$Ord", "$$s", "\u2581=", "\u25810;"], ["\u2581final", "\u2581Int", "$$sRef", "\u2581values", "\u2581=", "\u2581new", "\u2581Int", "$$sRef", "$$(", "$$32", "$$)", "$$;"], ["\u2581for", "\u2581(int", "\u2581doc", "$$ID", "\u2581=", "\u25810;", "\u2581doc", "$$ID", "\u2581<", "\u2581max", "$$Doc", "$$;", "\u2581doc", "$$ID", "$$++)", "\u2581{"], ["\u2581offset", "$$s[", "$$d", "$$oc", "$$ID", "$$]", "\u2581=", "\u2581(int)", "\u2581t", "$$ot", "$$Ord", "$$s;"], ["\u2581source", "$$.get", "$$(d", "$$oc", "$$ID", "$$,", "\u2581values", "$$)", "$$;"], ["\u2581long", "\u2581next", "$$Length", "\u2581=", "\u2581t", "$$ot", "$$Ord", "$$s", "\u2581+", "\u2581values", "$$.length;"], ["\u2581if", "\u2581(", "$$next", "$$Length", "\u2581>", "\u2581ord", "$$s.length", "$$)", "\u2581{"], ["\u2581if", "\u2581(", "$$next", "$$Length", "\u2581>", "\u2581Array", "$$Util.", "$$M", "$$AX_", "$$AR", "$$R", "$$A", "$$Y_", "$$LENGTH", "$$)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581IllegalStateException(\"", "$$to", "$$o", "\u2581m", "$$an", "$$y", "\u2581ord", "$$inal", "$$s", "\u2581(", "$$>", "$$=", "\u2581\"", "\u2581+", "\u2581next", "$$Length", "\u2581+", "\u2581\")", "\u2581to", "\u2581cache", "$$\")", "$$;"], ["\u2581}"], ["\u2581ord", "$$s", "\u2581=", "\u2581Array", "$$Util.", "$$g", "$$row", "$$(", "$$ord", "$$s,", "\u2581(int)", "\u2581next", "$$Length", "$$)", "$$;"], ["\u2581}"], ["\u2581System.arraycopy", "$$(", "$$values", "$$.", "$$int", "$$s,", "\u25810,", "\u2581ord", "$$s,", "\u2581(int)", "\u2581t", "$$ot", "$$Ord", "$$s,", "\u2581values", "$$.length)", "$$;"], ["\u2581t", "$$ot", "$$Ord", "$$s", "\u2581=", "\u2581next", "$$Length", "$$;"], ["\u2581}"], ["\u2581offset", "$$s[", "$$max", "$$Doc", "$$]", "\u2581=", "\u2581(int)", "\u2581t", "$$ot", "$$Ord", "$$s;"], ["\u2581if", "\u2581(", "$$(double", "$$)", "\u2581t", "$$ot", "$$Ord", "$$s", "\u2581/", "\u2581ord", "$$s.length", "\u2581<", "\u25810", "$$.", "$$9", "$$)", "\u2581{"], ["\u2581this.", "$$ord", "$$inal", "$$s", "\u2581=", "\u2581new", "\u2581int[", "$$(int)", "\u2581t", "$$ot", "$$Ord", "$$s", "$$]", "$$;"], ["\u2581System.arraycopy", "$$(", "$$ord", "$$s,", "\u25810,", "\u2581this.", "$$ord", "$$inal", "$$s,", "\u25810,", "\u2581(int)", "\u2581t", "$$ot", "$$Ord", "$$s)", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581this.", "$$ord", "$$inal", "$$s", "\u2581=", "\u2581ord", "$$s;"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public string getRawUserInfo() {\n    return userInfo;\n}\n", "java": "public String getRawUserInfo() {\n    return userInfo;\n}\n", "cs_t": [["\u2581public", "\u2581string", "\u2581get", "$$Raw", "$$User", "$$Info", "$$()", "\u2581{"], ["\u2581return", "\u2581user", "$$Info", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581String", "\u2581get", "$$Raw", "$$User", "$$Info", "$$()", "\u2581{"], ["\u2581return", "\u2581user", "$$Info", "$$;"], ["\u2581}"]]}, {"cs": "public override object[] toArray() {\n    lock (this._enclosing) {\n        return base.toArray();\n    }\n}\n", "java": "@Override public Object[] toArray() {\n    return ObjectArrays.toArrayImpl(this);\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581object", "$$[]", "\u2581to", "$$Array", "$$()", "\u2581{"], ["\u2581lock", "\u2581(this", "$$._", "$$enclosing", "$$)", "\u2581{"], ["\u2581return", "\u2581base", "$$.to", "$$Array", "$$()", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581@Override", "\u2581public", "\u2581Object", "$$[]", "\u2581to", "$$Array", "$$()", "\u2581{"], ["\u2581return", "\u2581Object", "$$Array", "$$s.", "$$to", "$$Array", "$$Impl", "$$(this", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DescribeCompilationJobResponse DescribeCompilationJob(DescribeCompilationJobRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DescribeCompilationJobRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DescribeCompilationJobResponseUnmarshaller.Instance;\n    return Invoke<DescribeCompilationJobResponse>(request, options);\n}\n", "java": "public DescribeCompilationJobResult describeCompilationJob(DescribeCompilationJobRequest request) {\n    request = beforeClientExecution(request);\n    return executeDescribeCompilationJob(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Describe", "$$Comp", "$$il", "$$ation", "$$Job", "$$Response", "\u2581Describe", "$$Comp", "$$il", "$$ation", "$$Job", "$$(Describe", "$$Comp", "$$il", "$$ation", "$$Job", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Describe", "$$Comp", "$$il", "$$ation", "$$Job", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Describe", "$$Comp", "$$il", "$$ation", "$$Job", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Describe", "$$Comp", "$$il", "$$ation", "$$Job", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Describe", "$$Comp", "$$il", "$$ation", "$$Job", "$$Result", "\u2581describe", "$$Comp", "$$il", "$$ation", "$$Job", "$$(Describe", "$$Comp", "$$il", "$$ation", "$$Job", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDescribe", "$$Comp", "$$il", "$$ation", "$$Job", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public string getQuery() {\n    return decode(query);\n}\n", "java": "public String getQuery() {\n    return decode(query);\n}\n", "cs_t": [["\u2581public", "\u2581string", "\u2581get", "$$Query", "$$()", "\u2581{"], ["\u2581return", "\u2581decode", "$$(", "$$query", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581String", "\u2581get", "$$Query", "$$()", "\u2581{"], ["\u2581return", "\u2581decode", "$$(", "$$query", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual CreateEnvironmentResponse CreateEnvironment(CreateEnvironmentRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = CreateEnvironmentRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = CreateEnvironmentResponseUnmarshaller.Instance;\n    return Invoke<CreateEnvironmentResponse>(request, options);\n}\n", "java": "public CreateEnvironmentResult createEnvironment(CreateEnvironmentRequest request) {\n    request = beforeClientExecution(request);\n    return executeCreateEnvironment(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Create", "$$Environment", "$$Response", "\u2581Create", "$$Environment", "$$(Create", "$$Environment", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Create", "$$Environment", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Create", "$$Environment", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Create", "$$Environment", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Create", "$$Environment", "$$Result", "\u2581create", "$$Environment", "$$(Create", "$$Environment", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeCreate", "$$Environment", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual ParseTreeMatch Match(IParseTree tree) {\n    return matcher.Match(tree, this);\n}\n", "java": "public ParseTreeMatch match(ParseTree tree) {\n    return matcher.match(tree, this);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Parse", "$$Tree", "$$Match", "\u2581Match", "$$(I", "$$ParseTree", "\u2581t", "$$ree", "$$)", "\u2581{"], ["\u2581return", "\u2581match", "$$er.", "$$Match", "$$(t", "$$ree", "$$,", "\u2581this", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Parse", "$$Tree", "$$Match", "\u2581match", "$$(", "$$ParseTree", "\u2581t", "$$ree", "$$)", "\u2581{"], ["\u2581return", "\u2581match", "$$er.", "$$match", "$$(t", "$$ree", "$$,", "\u2581this", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual bool Contains(char[] text) {\n    return map.ContainsKey(text, 0, text.Length);\n}\n", "java": "public boolean contains(CharSequence cs) {\n    return map.containsKey(cs);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581bool", "\u2581", "$$Contain", "$$s(", "$$char", "$$[]", "\u2581text", "$$)", "\u2581{"], ["\u2581return", "\u2581map", "$$.", "$$Contain", "$$sKey", "$$(", "$$text", "$$,", "\u25810,", "\u2581text", "$$.Length)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581boolean", "\u2581contains(", "$$CharSequence", "\u2581c", "$$s)", "\u2581{"], ["\u2581return", "\u2581map", "$$.contain", "$$sKey", "$$(c", "$$s)", "$$;"], ["\u2581}"]]}, {"cs": "public QueryRequest(string tableName) {\n    _tableName = tableName;\n}\n", "java": "public QueryRequest(String tableName) {\n    setTableName(tableName);\n}\n", "cs_t": [["\u2581public", "\u2581Query", "$$Request(string", "\u2581table", "$$Name)", "\u2581{"], ["\u2581_", "$$table", "$$Name", "\u2581=", "\u2581table", "$$Name", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Query", "$$Request(String", "\u2581table", "$$Name)", "\u2581{"], ["\u2581set", "$$Table", "$$Name", "$$(t", "$$able", "$$Name)", "$$;"], ["\u2581}"]]}, {"cs": "public bool IsRowGroupHiddenByParent(int row) {\n    int endLevel;\n    bool endHidden;\n    int endOfOutlineGroupIdx = FindEndOfRowOutlineGroup(row);\n    if (GetRow(endOfOutlineGroupIdx + 1) == null) {\n        endLevel = 0;\n        endHidden = false;\n    }\n    else {\n        endLevel = GetRow(endOfOutlineGroupIdx + 1).OutlineLevel;\n        endHidden = GetRow(endOfOutlineGroupIdx + 1).ZeroHeight;\n    }\n    int startLevel;\n    bool startHidden;\n    int startOfOutlineGroupIdx = FindStartOfRowOutlineGroup(row);\n    if (startOfOutlineGroupIdx - 1 < 0 || GetRow(startOfOutlineGroupIdx - 1) == null) {\n        startLevel = 0;\n        startHidden = false;\n    }\n    else {\n        startLevel = GetRow(startOfOutlineGroupIdx - 1).OutlineLevel;\n        startHidden = GetRow(startOfOutlineGroupIdx - 1).ZeroHeight;\n    }\n    if (endLevel > startLevel) {\n        return endHidden;\n    }\n    else {\n        return startHidden;\n    }\n}\n", "java": "public boolean isRowGroupHiddenByParent(int row) {\n    int endLevel;\n    boolean endHidden;\n    int endOfOutlineGroupIdx = findEndOfRowOutlineGroup(row);\n    if (getRow(endOfOutlineGroupIdx + 1) == null) {\n        endLevel = 0;\n        endHidden = false;\n    }\n    else {\n        endLevel = getRow(endOfOutlineGroupIdx + 1).getOutlineLevel();\n        endHidden = getRow(endOfOutlineGroupIdx + 1).getZeroHeight();\n    }\n    int startLevel;\n    boolean startHidden;\n    int startOfOutlineGroupIdx = findStartOfRowOutlineGroup( row );\n    if (startOfOutlineGroupIdx - 1 < 0 || getRow(startOfOutlineGroupIdx - 1) == null) {\n        startLevel = 0;\n        startHidden = false;\n    }\n    else {\n        startLevel = getRow(startOfOutlineGroupIdx - 1).getOutlineLevel();\n        startHidden = getRow(startOfOutlineGroupIdx - 1).getZeroHeight();\n    }\n    if (endLevel > startLevel) {\n        return endHidden;\n    }\n    return startHidden;\n}\n", "cs_t": [["\u2581public", "\u2581bool", "\u2581Is", "$$Row", "$$Group", "$$H", "$$id", "$$d", "$$en", "$$By", "$$Parent", "$$(int", "\u2581row", "$$)", "\u2581{"], ["\u2581int", "\u2581end", "$$Level", "$$;"], ["\u2581bool", "\u2581end", "$$H", "$$id", "$$d", "$$en", "$$;"], ["\u2581int", "\u2581end", "$$Of", "$$Out", "$$line", "$$Group", "$$Idx", "\u2581=", "\u2581F", "$$ind", "$$End", "$$Of", "$$Row", "$$Out", "$$line", "$$Group", "$$(", "$$row", "$$)", "$$;"], ["\u2581if", "\u2581(", "$$Get", "$$Row", "$$(", "$$end", "$$Of", "$$Out", "$$line", "$$Group", "$$Idx", "\u2581+", "\u25811)", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581end", "$$Level", "\u2581=", "\u25810;"], ["\u2581end", "$$H", "$$id", "$$d", "$$en", "\u2581=", "\u2581false", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581end", "$$Level", "\u2581=", "\u2581Get", "$$Row", "$$(", "$$end", "$$Of", "$$Out", "$$line", "$$Group", "$$Idx", "\u2581+", "\u25811)", "$$.", "$$Out", "$$line", "$$Level", "$$;"], ["\u2581end", "$$H", "$$id", "$$d", "$$en", "\u2581=", "\u2581Get", "$$Row", "$$(", "$$end", "$$Of", "$$Out", "$$line", "$$Group", "$$Idx", "\u2581+", "\u25811)", "$$.", "$$Z", "$$er", "$$o", "$$H", "$$eight", "$$;"], ["\u2581}"], ["\u2581int", "\u2581start", "$$Level", "$$;"], ["\u2581bool", "\u2581start", "$$H", "$$id", "$$d", "$$en", "$$;"], ["\u2581int", "\u2581start", "$$Of", "$$Out", "$$line", "$$Group", "$$Idx", "\u2581=", "\u2581F", "$$ind", "$$Start", "$$Of", "$$Row", "$$Out", "$$line", "$$Group", "$$(", "$$row", "$$)", "$$;"], ["\u2581if", "\u2581(start", "$$Of", "$$Out", "$$line", "$$Group", "$$Idx", "\u2581-", "\u25811", "\u2581<", "\u25810", "\u2581||", "\u2581Get", "$$Row", "$$(start", "$$Of", "$$Out", "$$line", "$$Group", "$$Idx", "\u2581-", "\u25811)", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581start", "$$Level", "\u2581=", "\u25810;"], ["\u2581start", "$$H", "$$id", "$$d", "$$en", "\u2581=", "\u2581false", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581start", "$$Level", "\u2581=", "\u2581Get", "$$Row", "$$(start", "$$Of", "$$Out", "$$line", "$$Group", "$$Idx", "\u2581-", "\u25811)", "$$.", "$$Out", "$$line", "$$Level", "$$;"], ["\u2581start", "$$H", "$$id", "$$d", "$$en", "\u2581=", "\u2581Get", "$$Row", "$$(start", "$$Of", "$$Out", "$$line", "$$Group", "$$Idx", "\u2581-", "\u25811)", "$$.", "$$Z", "$$er", "$$o", "$$H", "$$eight", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(", "$$end", "$$Level", "\u2581>", "\u2581start", "$$Level", "$$)", "\u2581{"], ["\u2581return", "\u2581end", "$$H", "$$id", "$$d", "$$en", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581return", "\u2581start", "$$H", "$$id", "$$d", "$$en", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581boolean", "\u2581is", "$$Row", "$$Group", "$$H", "$$id", "$$d", "$$en", "$$By", "$$Parent", "$$(int", "\u2581row", "$$)", "\u2581{"], ["\u2581int", "\u2581end", "$$Level", "$$;"], ["\u2581boolean", "\u2581end", "$$H", "$$id", "$$d", "$$en", "$$;"], ["\u2581int", "\u2581end", "$$Of", "$$Out", "$$line", "$$Group", "$$Idx", "\u2581=", "\u2581find", "$$End", "$$Of", "$$Row", "$$Out", "$$line", "$$Group", "$$(", "$$row", "$$)", "$$;"], ["\u2581if", "\u2581(get", "$$Row", "$$(", "$$end", "$$Of", "$$Out", "$$line", "$$Group", "$$Idx", "\u2581+", "\u25811)", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581end", "$$Level", "\u2581=", "\u25810;"], ["\u2581end", "$$H", "$$id", "$$d", "$$en", "\u2581=", "\u2581false", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581end", "$$Level", "\u2581=", "\u2581get", "$$Row", "$$(", "$$end", "$$Of", "$$Out", "$$line", "$$Group", "$$Idx", "\u2581+", "\u25811)", "$$.get", "$$Out", "$$line", "$$Level", "$$()", "$$;"], ["\u2581end", "$$H", "$$id", "$$d", "$$en", "\u2581=", "\u2581get", "$$Row", "$$(", "$$end", "$$Of", "$$Out", "$$line", "$$Group", "$$Idx", "\u2581+", "\u25811)", "$$.get", "$$Z", "$$er", "$$o", "$$H", "$$eight", "$$()", "$$;"], ["\u2581}"], ["\u2581int", "\u2581start", "$$Level", "$$;"], ["\u2581boolean", "\u2581start", "$$H", "$$id", "$$d", "$$en", "$$;"], ["\u2581int", "\u2581start", "$$Of", "$$Out", "$$line", "$$Group", "$$Idx", "\u2581=", "\u2581find", "$$Start", "$$Of", "$$Row", "$$Out", "$$line", "$$Group", "$$(", "\u2581row", "\u2581)", "$$;"], ["\u2581if", "\u2581(start", "$$Of", "$$Out", "$$line", "$$Group", "$$Idx", "\u2581-", "\u25811", "\u2581<", "\u25810", "\u2581||", "\u2581get", "$$Row", "$$(start", "$$Of", "$$Out", "$$line", "$$Group", "$$Idx", "\u2581-", "\u25811)", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581start", "$$Level", "\u2581=", "\u25810;"], ["\u2581start", "$$H", "$$id", "$$d", "$$en", "\u2581=", "\u2581false", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581start", "$$Level", "\u2581=", "\u2581get", "$$Row", "$$(start", "$$Of", "$$Out", "$$line", "$$Group", "$$Idx", "\u2581-", "\u25811)", "$$.get", "$$Out", "$$line", "$$Level", "$$()", "$$;"], ["\u2581start", "$$H", "$$id", "$$d", "$$en", "\u2581=", "\u2581get", "$$Row", "$$(start", "$$Of", "$$Out", "$$line", "$$Group", "$$Idx", "\u2581-", "\u25811)", "$$.get", "$$Z", "$$er", "$$o", "$$H", "$$eight", "$$()", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(", "$$end", "$$Level", "\u2581>", "\u2581start", "$$Level", "$$)", "\u2581{"], ["\u2581return", "\u2581end", "$$H", "$$id", "$$d", "$$en", "$$;"], ["\u2581}"], ["\u2581return", "\u2581start", "$$H", "$$id", "$$d", "$$en", "$$;"], ["\u2581}"]]}, {"cs": "public override bool RetryFailedLockFileCommit() {\n    return true;\n}\n", "java": "public boolean retryFailedLockFileCommit() {\n    return true;\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581bool", "\u2581R", "$$et", "$$ry", "$$Fa", "$$iled", "$$Lock", "$$File", "$$Commit", "$$()", "\u2581{"], ["\u2581return", "\u2581true", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581boolean", "\u2581ret", "$$ry", "$$Fa", "$$iled", "$$Lock", "$$File", "$$Commit", "$$()", "\u2581{"], ["\u2581return", "\u2581true", "$$;"], ["\u2581}"]]}, {"cs": "public virtual ValidateMatchmakingRuleSetResponse ValidateMatchmakingRuleSet(ValidateMatchmakingRuleSetRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = ValidateMatchmakingRuleSetRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = ValidateMatchmakingRuleSetResponseUnmarshaller.Instance;\n    return Invoke<ValidateMatchmakingRuleSetResponse>(request, options);\n}\n", "java": "public ValidateMatchmakingRuleSetResult validateMatchmakingRuleSet(ValidateMatchmakingRuleSetRequest request) {\n    request = beforeClientExecution(request);\n    return executeValidateMatchmakingRuleSet(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581V", "$$al", "$$idate", "$$Matchmaking", "$$Rule", "$$Set", "$$Response", "\u2581V", "$$al", "$$idate", "$$Matchmaking", "$$Rule", "$$Set(", "$$Valid", "$$ate", "$$Matchmaking", "$$Rule", "$$Set", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581V", "$$al", "$$idate", "$$Matchmaking", "$$Rule", "$$Set", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581V", "$$al", "$$idate", "$$Matchmaking", "$$Rule", "$$Set", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<", "$$Valid", "$$ate", "$$Matchmaking", "$$Rule", "$$Set", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581V", "$$al", "$$idate", "$$Matchmaking", "$$Rule", "$$Set", "$$Result", "\u2581val", "$$idate", "$$Matchmaking", "$$Rule", "$$Set(", "$$Valid", "$$ate", "$$Matchmaking", "$$Rule", "$$Set", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581execute", "$$Valid", "$$ate", "$$Matchmaking", "$$Rule", "$$Set", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual bool Get(string name, bool dflt) {\n    bool[] vals;\n    object temp;\n    if (valByRound.TryGetValue(name, out temp) && temp != null) {\n        vals = (bool[])temp;\n        return vals[roundNumber % vals.Length];\n    }\n    string sval;\n    if (!props.TryGetValue(name, out sval)) {\n        sval = dflt.ToString();\n    }\n    if (sval.IndexOf(':') < 0) {\n        return bool.Parse(sval);\n    }\n    int k = sval.IndexOf(':');\n    string colName = sval.Substring(0, k - 0);\n    sval = sval.Substring(k + 1);\n    colForValByRound[name] = colName;\n    vals = PropToBooleanArray(sval);\n    valByRound[name] = vals;\n    return vals[roundNumber % vals.Length];\n}\n", "java": "public boolean get(String name, boolean dflt) {\n    boolean vals[] = (boolean[]) valByRound.get(name);\n    if (vals != null) {\n        return vals[roundNumber % vals.length];\n    }\n    String sval = props.getProperty(name, \"\" + dflt);\n    if (sval.indexOf(\":\") < 0) {\n        return Boolean.valueOf(sval).booleanValue();\n    }\n    int k = sval.indexOf(\":\");\n    String colName = sval.substring(0, k);\n    sval = sval.substring(k + 1);\n    colForValByRound.put(name, colName);\n    vals = propToBooleanArray(sval);\n    valByRound.put(name, vals);\n    return vals[roundNumber % vals.length];\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581bool", "\u2581Get", "$$(string", "\u2581name,", "\u2581bool", "\u2581d", "$$f", "$$l", "$$t", "$$)", "\u2581{"], ["\u2581bool", "$$[]", "\u2581val", "$$s;"], ["\u2581object", "\u2581temp", "$$;"], ["\u2581if", "\u2581(", "$$val", "$$By", "$$Round", "$$.", "$$TryGet", "$$Value", "$$(name,", "\u2581out", "\u2581temp", "$$)", "\u2581&&", "\u2581temp", "\u2581!=", "\u2581null)", "\u2581{"], ["\u2581val", "$$s", "\u2581=", "\u2581(", "$$bo", "$$ol", "$$[]", "$$)", "$$temp", "$$;"], ["\u2581return", "\u2581val", "$$s[", "$$round", "$$Number", "\u2581%", "\u2581val", "$$s.Length", "$$]", "$$;"], ["\u2581}"], ["\u2581string", "\u2581s", "$$val", "$$;"], ["\u2581if", "\u2581(!", "$$pro", "$$p", "$$s.", "$$TryGet", "$$Value", "$$(name,", "\u2581out", "\u2581s", "$$val", "$$))", "\u2581{"], ["\u2581s", "$$val", "\u2581=", "\u2581d", "$$f", "$$l", "$$t", "$$.ToString()", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(s", "$$val.", "$$Index", "$$Of(", "$$'", "$$:", "$$')", "\u2581<", "\u25810)", "\u2581{"], ["\u2581return", "\u2581bool", "$$.", "$$Parse", "$$(s", "$$val", "$$)", "$$;"], ["\u2581}"], ["\u2581int", "\u2581k", "\u2581=", "\u2581s", "$$val.", "$$Index", "$$Of(", "$$'", "$$:", "$$')", "$$;"], ["\u2581string", "\u2581col", "$$Name", "\u2581=", "\u2581s", "$$val.", "$$Sub", "$$string(", "$$0,", "\u2581k", "\u2581-", "\u25810)", "$$;"], ["\u2581s", "$$val", "\u2581=", "\u2581s", "$$val.", "$$Sub", "$$string(", "$$k", "\u2581+", "\u25811)", "$$;"], ["\u2581col", "$$For", "$$Val", "$$By", "$$Round", "$$[", "$$name", "$$]", "\u2581=", "\u2581col", "$$Name", "$$;"], ["\u2581val", "$$s", "\u2581=", "\u2581", "$$Prop", "$$To", "$$Boolean", "$$Array", "$$(s", "$$val", "$$)", "$$;"], ["\u2581val", "$$By", "$$Round", "$$[", "$$name", "$$]", "\u2581=", "\u2581val", "$$s;"], ["\u2581return", "\u2581val", "$$s[", "$$round", "$$Number", "\u2581%", "\u2581val", "$$s.Length", "$$]", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581boolean", "\u2581get", "$$(String", "\u2581name,", "\u2581boolean", "\u2581d", "$$f", "$$l", "$$t", "$$)", "\u2581{"], ["\u2581boolean", "\u2581val", "$$s", "$$[]", "\u2581=", "\u2581(", "$$boolean", "$$[]", "$$)", "\u2581val", "$$By", "$$Round", "$$.get", "$$(name", "$$)", "$$;"], ["\u2581if", "\u2581(", "$$val", "$$s", "\u2581!=", "\u2581null)", "\u2581{"], ["\u2581return", "\u2581val", "$$s[", "$$round", "$$Number", "\u2581%", "\u2581val", "$$s.length", "$$]", "$$;"], ["\u2581}"], ["\u2581String", "\u2581s", "$$val", "\u2581=", "\u2581pro", "$$p", "$$s.get", "$$Property", "$$(name,", "\u2581\"", "$$\"", "\u2581+", "\u2581d", "$$f", "$$l", "$$t", "$$)", "$$;"], ["\u2581if", "\u2581(s", "$$val.", "$$index", "$$Of", "$$(\"", "$$:", "$$\")", "\u2581<", "\u25810)", "\u2581{"], ["\u2581return", "\u2581Boolean", "$$.value", "$$Of", "$$(s", "$$val", "$$).", "$$boolean", "$$Value", "$$()", "$$;"], ["\u2581}"], ["\u2581int", "\u2581k", "\u2581=", "\u2581s", "$$val.", "$$index", "$$Of", "$$(\"", "$$:", "$$\")", "$$;"], ["\u2581String", "\u2581col", "$$Name", "\u2581=", "\u2581s", "$$val.", "$$sub", "$$string(", "$$0,", "\u2581k", "$$)", "$$;"], ["\u2581s", "$$val", "\u2581=", "\u2581s", "$$val.", "$$sub", "$$string(", "$$k", "\u2581+", "\u25811)", "$$;"], ["\u2581col", "$$For", "$$Val", "$$By", "$$Round", "$$.put", "$$(name,", "\u2581col", "$$Name)", "$$;"], ["\u2581val", "$$s", "\u2581=", "\u2581pro", "$$p", "$$To", "$$Boolean", "$$Array", "$$(s", "$$val", "$$)", "$$;"], ["\u2581val", "$$By", "$$Round", "$$.put", "$$(name,", "\u2581val", "$$s)", "$$;"], ["\u2581return", "\u2581val", "$$s[", "$$round", "$$Number", "\u2581%", "\u2581val", "$$s.length", "$$]", "$$;"], ["\u2581}"]]}, {"cs": "public virtual UpdateLinkAttributesResponse UpdateLinkAttributes(UpdateLinkAttributesRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = UpdateLinkAttributesRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = UpdateLinkAttributesResponseUnmarshaller.Instance;\n    return Invoke<UpdateLinkAttributesResponse>(request, options);\n}\n", "java": "public UpdateLinkAttributesResult updateLinkAttributes(UpdateLinkAttributesRequest request) {\n    request = beforeClientExecution(request);\n    return executeUpdateLinkAttributes(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Update", "$$Link", "$$Attributes", "$$Response", "\u2581Update", "$$Link", "$$Attributes", "$$(Update", "$$Link", "$$AttributesRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Update", "$$Link", "$$Attributes", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Update", "$$Link", "$$Attributes", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Update", "$$Link", "$$Attributes", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Update", "$$Link", "$$Attributes", "$$Result", "\u2581update", "$$Link", "$$Attributes", "$$(Update", "$$Link", "$$AttributesRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeUpdate", "$$Link", "$$Attributes", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public NumericPayloadTokenFilter(TokenStream input, float payload, string typeMatch): base(input) {\n    if (typeMatch == null) {\n        throw new ArgumentException(\"typeMatch cannot be null\");\n    }\n    thePayload = new BytesRef(PayloadHelper.EncodeSingle(payload));\n    this.typeMatch = typeMatch;\n    this.payloadAtt = AddAttribute<IPayloadAttribute>();\n    this.typeAtt = AddAttribute<ITypeAttribute>();\n}\n", "java": "public NumericPayloadTokenFilter(TokenStream input, float payload, String typeMatch) {\n    super(input);\n    if (typeMatch == null) {\n        throw new IllegalArgumentException(\"typeMatch must not be null\");\n    }\n    thePayload = new BytesRef(PayloadHelper.encodeFloat(payload));\n    this.typeMatch = typeMatch;\n}\n", "cs_t": [["\u2581public", "\u2581Numeric", "$$Payload", "$$Token", "$$Filter(TokenStream", "\u2581input,", "\u2581float", "\u2581payload", "$$,", "\u2581string", "\u2581type", "$$Match", "$$):", "\u2581base", "$$(input", "$$)", "\u2581{"], ["\u2581if", "\u2581(t", "$$ype", "$$Match", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581ArgumentException(\"", "$$type", "$$Match", "\u2581c", "$$annot", "\u2581be", "\u2581null", "$$\")", "$$;"], ["\u2581}"], ["\u2581the", "$$Payload", "\u2581=", "\u2581new", "\u2581BytesRef", "$$(", "$$Payload", "$$H", "$$el", "$$per", "$$.", "$$Encode", "$$Single", "$$(p", "$$ayload", "$$))", "$$;"], ["\u2581this.", "$$type", "$$Match", "\u2581=", "\u2581type", "$$Match", "$$;"], ["\u2581this.p", "$$ayload", "$$Att", "\u2581=", "\u2581Add", "$$Attribute", "$$<", "$$I", "$$Payload", "$$Attribute", "$$>", "$$()", "$$;"], ["\u2581this.", "$$type", "$$Att", "\u2581=", "\u2581Add", "$$Attribute", "$$<", "$$I", "$$Type", "$$Attribute", "$$>", "$$()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Numeric", "$$Payload", "$$Token", "$$Filter(TokenStream", "\u2581input,", "\u2581float", "\u2581payload", "$$,", "\u2581String", "\u2581type", "$$Match", "$$)", "\u2581{"], ["\u2581super(", "$$input", "$$)", "$$;"], ["\u2581if", "\u2581(t", "$$ype", "$$Match", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581IllegalArgumentException(\"", "$$type", "$$Match", "\u2581must", "\u2581not", "\u2581be", "\u2581null", "$$\")", "$$;"], ["\u2581}"], ["\u2581the", "$$Payload", "\u2581=", "\u2581new", "\u2581BytesRef", "$$(", "$$Payload", "$$H", "$$el", "$$per", "$$.", "$$en", "$$code", "$$Float", "$$(p", "$$ayload", "$$))", "$$;"], ["\u2581this.", "$$type", "$$Match", "\u2581=", "\u2581type", "$$Match", "$$;"], ["\u2581}"]]}, {"cs": "public override String ToString() {\n    StringBuilder buffer = new StringBuilder();\n    buffer.Append(\"[CALCCOUNT]\\n\");\n    buffer.Append(\"    .iterations     = \").Append(StringUtil.ToHexString(Iterations)).Append(\"\\n\");\n    buffer.Append(\"[/CALCCOUNT]\\n\");\n    return buffer.ToString();\n}\n", "java": "public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"[CALCCOUNT]\\n\");\n    buffer.append(\"    .iterations     = \").append(Integer.toHexString(getIterations())).append(\"\\n\");\n    buffer.append(\"[/CALCCOUNT]\\n\");\n    return buffer.toString();\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581String", "\u2581ToString()", "\u2581{"], ["\u2581StringBuilder", "\u2581buffer", "\u2581=", "\u2581new", "\u2581StringBuilder", "$$()", "$$;"], ["\u2581buffer.Append(\"[", "$$C", "$$AL", "$$C", "$$CO", "$$UN", "$$T", "$$]", "$$\\n", "$$\")", "$$;"], ["\u2581buffer.Append(\"", "\u2581", "\u2581", "\u2581", "\u2581.", "$$i", "$$ter", "$$ation", "$$s", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581=", "\u2581\").Append(", "$$String", "$$Util", "$$.To", "$$HexString(", "$$I", "$$ter", "$$ation", "$$s", "$$))", "$$.Append(\"", "$$\\n", "$$\")", "$$;"], ["\u2581buffer.Append(\"[/", "$$C", "$$AL", "$$C", "$$CO", "$$UN", "$$T", "$$]", "$$\\n", "$$\")", "$$;"], ["\u2581return", "\u2581buffer", "$$.ToString()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581String", "\u2581toString()", "\u2581{"], ["\u2581StringBuilder", "\u2581buffer", "\u2581=", "\u2581new", "\u2581StringBuilder", "$$()", "$$;"], ["\u2581buffer.append(\"[", "$$C", "$$AL", "$$C", "$$CO", "$$UN", "$$T", "$$]", "$$\\n", "$$\")", "$$;"], ["\u2581buffer.append(\"", "\u2581", "\u2581", "\u2581", "\u2581.", "$$i", "$$ter", "$$ation", "$$s", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581=", "\u2581\").append(", "$$Integ", "$$er.", "$$to", "$$HexString(", "$$get", "$$I", "$$ter", "$$ation", "$$s()", "$$))", "$$.append(\"", "$$\\n", "$$\")", "$$;"], ["\u2581buffer.append(\"[/", "$$C", "$$AL", "$$C", "$$CO", "$$UN", "$$T", "$$]", "$$\\n", "$$\")", "$$;"], ["\u2581return", "\u2581buffer", "$$.toString()", "$$;"], ["\u2581}"]]}, {"cs": "public virtual E push(E @object) {\n    addElement(@object);\n    return @object;\n}\n", "java": "public E push(E object) {\n    addElement(object);\n    return object;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581E", "\u2581p", "$$ush", "$$(", "$$E", "\u2581@object)", "\u2581{"], ["\u2581add", "$$Element", "$$(@", "$$object", "$$)", "$$;"], ["\u2581return", "\u2581@object", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581E", "\u2581p", "$$ush", "$$(", "$$E", "\u2581object)", "\u2581{"], ["\u2581add", "$$Element", "$$(object", "$$)", "$$;"], ["\u2581return", "\u2581object", "$$;"], ["\u2581}"]]}, {"cs": "public LinkedHashMap(int initialCapacity, float loadFactor, bool accessOrder) : base(initialCapacity, loadFactor) {\n    init();\n    this.accessOrder = accessOrder;\n}\n", "java": "public LinkedHashMap(int initialCapacity, float loadFactor, boolean accessOrder) {\n    super(initialCapacity, loadFactor);\n    init();\n    this.accessOrder = accessOrder;\n}\n", "cs_t": [["\u2581public", "\u2581L", "$$ink", "$$ed", "$$Hash", "$$Map", "$$(int", "\u2581in", "$$itial", "$$Capacity", "$$,", "\u2581float", "\u2581load", "$$Fa", "$$ctor", "$$,", "\u2581bool", "\u2581ac", "$$cess", "$$Order", "$$)", "\u2581:", "\u2581base", "$$(in", "$$itial", "$$Capacity", "$$,", "\u2581load", "$$Fa", "$$ctor", "$$)", "\u2581{"], ["\u2581in", "$$it", "$$()", "$$;"], ["\u2581this.", "$$ac", "$$cess", "$$Order", "\u2581=", "\u2581ac", "$$cess", "$$Order", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581L", "$$ink", "$$ed", "$$Hash", "$$Map", "$$(int", "\u2581in", "$$itial", "$$Capacity", "$$,", "\u2581float", "\u2581load", "$$Fa", "$$ctor", "$$,", "\u2581boolean", "\u2581ac", "$$cess", "$$Order", "$$)", "\u2581{"], ["\u2581super(", "$$in", "$$itial", "$$Capacity", "$$,", "\u2581load", "$$Fa", "$$ctor", "$$)", "$$;"], ["\u2581in", "$$it", "$$()", "$$;"], ["\u2581this.", "$$ac", "$$cess", "$$Order", "\u2581=", "\u2581ac", "$$cess", "$$Order", "$$;"], ["\u2581}"]]}, {"cs": "public TreeSet() {\n    backingMap = new java.util.TreeMap<E, object>();\n}\n", "java": "public TreeSet() {\n    backingMap = new TreeMap<E, Object>();\n}\n", "cs_t": [["\u2581public", "\u2581", "$$Tree", "$$Set", "$$()", "\u2581{"], ["\u2581b", "$$acking", "$$Map", "\u2581=", "\u2581new", "\u2581java.util.", "$$Tree", "$$Map<", "$$E", "$$,", "\u2581object", "$$>", "$$()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581", "$$Tree", "$$Set", "$$()", "\u2581{"], ["\u2581b", "$$acking", "$$Map", "\u2581=", "\u2581new", "\u2581", "$$Tree", "$$Map<", "$$E", "$$,", "\u2581Object", "$$>", "$$()", "$$;"], ["\u2581}"]]}, {"cs": "public virtual long skip(long charCount) {\n    if (charCount < 0) {\n        throw new System.ArgumentException(\"charCount < 0: \" + charCount);\n    }\n    lock (@lock) {\n        long skipped = 0;\n        int toRead = charCount < 512 ? (int)charCount : 512;\n        char[] charsSkipped = new char[toRead];\n        while (skipped < charCount) {\n            int read_1 = read(charsSkipped, 0, toRead);\n            if (read_1 == -1) {\n                return skipped;\n            }\n            skipped += read_1;\n            if (read_1 < toRead) {\n                return skipped;\n            }\n            if (charCount - skipped < toRead) {\n                toRead = (int)(charCount - skipped);\n            }\n        }\n        return skipped;\n    }\n}\n", "java": "public long skip(long charCount) throws IOException {\n    if (charCount < 0) {\n        throw new IllegalArgumentException(\"charCount < 0: \" + charCount);\n    }\n    synchronized (lock) {\n        long skipped = 0;\n        int toRead = charCount < 512 ? (int) charCount : 512;\n        char[] charsSkipped = new char[toRead];\n        while (skipped < charCount) {\n            int read = read(charsSkipped, 0, toRead);\n            if (read == -1) {\n                return skipped;\n            }\n            skipped += read;\n            if (read < toRead) {\n                return skipped;\n            }\n            if (charCount - skipped < toRead) {\n                toRead = (int) (charCount - skipped);\n            }\n        }\n        return skipped;\n    }\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581long", "\u2581skip", "$$(long", "\u2581char", "$$Count)", "\u2581{"], ["\u2581if", "\u2581(char", "$$Count", "\u2581<", "\u25810)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581System.ArgumentException(\"", "$$char", "$$Count", "\u2581<", "\u25810", "$$:", "\u2581\"", "\u2581+", "\u2581char", "$$Count)", "$$;"], ["\u2581}"], ["\u2581lock", "\u2581(@", "$$lock", "$$)", "\u2581{"], ["\u2581long", "\u2581skip", "$$p", "$$ed", "\u2581=", "\u25810;"], ["\u2581int", "\u2581to", "$$Read", "\u2581=", "\u2581char", "$$Count", "\u2581<", "\u25815", "$$1", "$$2", "\u2581?", "\u2581(int)", "$$char", "$$Count", "\u2581:", "\u25815", "$$1", "$$2", "$$;"], ["\u2581char[]", "\u2581char", "$$s", "$$Skip", "$$p", "$$ed", "\u2581=", "\u2581new", "\u2581char[", "$$to", "$$Read", "$$]", "$$;"], ["\u2581while", "\u2581(", "$$skip", "$$p", "$$ed", "\u2581<", "\u2581char", "$$Count)", "\u2581{"], ["\u2581int", "\u2581read", "$$_1", "\u2581=", "\u2581re", "$$ad(", "$$char", "$$s", "$$Skip", "$$p", "$$ed", "$$,", "\u25810,", "\u2581to", "$$Read", "$$)", "$$;"], ["\u2581if", "\u2581(", "$$read", "$$_1", "\u2581==", "\u2581-1)", "\u2581{"], ["\u2581return", "\u2581skip", "$$p", "$$ed", "$$;"], ["\u2581}"], ["\u2581skip", "$$p", "$$ed", "\u2581+=", "\u2581read", "$$_1", "$$;"], ["\u2581if", "\u2581(", "$$read", "$$_1", "\u2581<", "\u2581to", "$$Read", "$$)", "\u2581{"], ["\u2581return", "\u2581skip", "$$p", "$$ed", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(char", "$$Count", "\u2581-", "\u2581skip", "$$p", "$$ed", "\u2581<", "\u2581to", "$$Read", "$$)", "\u2581{"], ["\u2581to", "$$Read", "\u2581=", "\u2581(int)", "$$(char", "$$Count", "\u2581-", "\u2581skip", "$$p", "$$ed", "$$)", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581return", "\u2581skip", "$$p", "$$ed", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581long", "\u2581skip", "$$(long", "\u2581char", "$$Count)", "\u2581throws", "\u2581IOException", "\u2581{"], ["\u2581if", "\u2581(char", "$$Count", "\u2581<", "\u25810)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581IllegalArgumentException(\"", "$$char", "$$Count", "\u2581<", "\u25810", "$$:", "\u2581\"", "\u2581+", "\u2581char", "$$Count)", "$$;"], ["\u2581}"], ["\u2581synchronized", "\u2581(", "$$lock", "$$)", "\u2581{"], ["\u2581long", "\u2581skip", "$$p", "$$ed", "\u2581=", "\u25810;"], ["\u2581int", "\u2581to", "$$Read", "\u2581=", "\u2581char", "$$Count", "\u2581<", "\u25815", "$$1", "$$2", "\u2581?", "\u2581(int)", "\u2581char", "$$Count", "\u2581:", "\u25815", "$$1", "$$2", "$$;"], ["\u2581char[]", "\u2581char", "$$s", "$$Skip", "$$p", "$$ed", "\u2581=", "\u2581new", "\u2581char[", "$$to", "$$Read", "$$]", "$$;"], ["\u2581while", "\u2581(", "$$skip", "$$p", "$$ed", "\u2581<", "\u2581char", "$$Count)", "\u2581{"], ["\u2581int", "\u2581read", "\u2581=", "\u2581re", "$$ad(", "$$char", "$$s", "$$Skip", "$$p", "$$ed", "$$,", "\u25810,", "\u2581to", "$$Read", "$$)", "$$;"], ["\u2581if", "\u2581(", "$$read", "\u2581==", "\u2581-1)", "\u2581{"], ["\u2581return", "\u2581skip", "$$p", "$$ed", "$$;"], ["\u2581}"], ["\u2581skip", "$$p", "$$ed", "\u2581+=", "\u2581read", "$$;"], ["\u2581if", "\u2581(", "$$read", "\u2581<", "\u2581to", "$$Read", "$$)", "\u2581{"], ["\u2581return", "\u2581skip", "$$p", "$$ed", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(char", "$$Count", "\u2581-", "\u2581skip", "$$p", "$$ed", "\u2581<", "\u2581to", "$$Read", "$$)", "\u2581{"], ["\u2581to", "$$Read", "\u2581=", "\u2581(int)", "\u2581(char", "$$Count", "\u2581-", "\u2581skip", "$$p", "$$ed", "$$)", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581return", "\u2581skip", "$$p", "$$ed", "$$;"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public ValueEval GetRef3DEval(Ref3DPxg rptg) {\n    SheetRangeEvaluator sre = CreateExternSheetRefEvaluator(rptg.SheetName, rptg.LastSheetName, rptg.ExternalWorkbookNumber);\n    return new LazyRefEval(rptg.Row, rptg.Column, sre);\n}\n", "java": "public ValueEval getRef3DEval(Ref3DPxg rptg) {\n    SheetRangeEvaluator sre = createExternSheetRefEvaluator(rptg.getSheetName(), rptg.getLastSheetName(), rptg.getExternalWorkbookNumber());\n    return new LazyRefEval(rptg.getRow(), rptg.getColumn(), sre);\n}\n", "cs_t": [["\u2581public", "\u2581ValueEval", "\u2581Get", "$$Ref", "$$3D", "$$Eval", "$$(", "$$Ref", "$$3D", "$$P", "$$x", "$$g", "\u2581r", "$$ptg", "$$)", "\u2581{"], ["\u2581Sheet", "$$Range", "$$Evaluator", "\u2581s", "$$re", "\u2581=", "\u2581Create", "$$ExternSheet", "$$Ref", "$$Evaluator", "$$(r", "$$pt", "$$g.", "$$Sheet", "$$Name,", "\u2581r", "$$pt", "$$g.", "$$Last", "$$Sheet", "$$Name,", "\u2581r", "$$pt", "$$g.", "$$External", "$$Workbook", "$$Number", "$$)", "$$;"], ["\u2581return", "\u2581new", "\u2581L", "$$a", "$$z", "$$y", "$$Ref", "$$Eval", "$$(r", "$$pt", "$$g.", "$$Row,", "\u2581r", "$$pt", "$$g.", "$$Column", "$$,", "\u2581s", "$$re", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581ValueEval", "\u2581get", "$$Ref", "$$3D", "$$Eval", "$$(", "$$Ref", "$$3D", "$$P", "$$x", "$$g", "\u2581r", "$$ptg", "$$)", "\u2581{"], ["\u2581Sheet", "$$Range", "$$Evaluator", "\u2581s", "$$re", "\u2581=", "\u2581create", "$$ExternSheet", "$$Ref", "$$Evaluator", "$$(r", "$$ptg", "$$.get", "$$SheetName", "$$(),", "\u2581r", "$$ptg", "$$.get", "$$Last", "$$SheetName", "$$(),", "\u2581r", "$$ptg", "$$.get", "$$External", "$$Workbook", "$$Number", "$$())", "$$;"], ["\u2581return", "\u2581new", "\u2581L", "$$a", "$$z", "$$y", "$$Ref", "$$Eval", "$$(r", "$$ptg", "$$.get", "$$Row", "$$(),", "\u2581r", "$$ptg", "$$.get", "$$Column", "$$(),", "\u2581s", "$$re", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public NewAnalyzerTask(PerfRunData runData): base(runData) {\n    analyzerNames = new List<string>();\n}\n", "java": "public NewAnalyzerTask(PerfRunData runData) {\n    super(runData);\n    analyzerNames = new ArrayList<>();\n}\n", "cs_t": [["\u2581public", "\u2581N", "$$ew", "$$Analyzer", "$$Task", "$$(", "$$Per", "$$f", "$$Run", "$$Data", "\u2581r", "$$un", "$$Data", "$$):", "\u2581base", "$$(r", "$$un", "$$Data", "$$)", "\u2581{"], ["\u2581analyzer", "$$Names", "\u2581=", "\u2581new", "\u2581List<", "$$string>", "$$()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581N", "$$ew", "$$Analyzer", "$$Task", "$$(", "$$Per", "$$f", "$$Run", "$$Data", "\u2581r", "$$un", "$$Data", "$$)", "\u2581{"], ["\u2581super(", "$$r", "$$un", "$$Data", "$$)", "$$;"], ["\u2581analyzer", "$$Names", "\u2581=", "\u2581new", "\u2581ArrayList<", "$$>", "$$()", "$$;"], ["\u2581}"]]}, {"cs": "public override bool Equals(object o) {\n    return o is EnglishStemmer;\n}\n", "java": "public boolean equals( Object o ) {\n    return o instanceof EnglishStemmer;\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581bool", "\u2581Equals(object", "\u2581o)", "\u2581{"], ["\u2581return", "\u2581o", "\u2581is", "\u2581", "$$Eng", "$$lish", "$$Stem", "$$mer", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581boolean", "\u2581equals(", "\u2581Object", "\u2581o", "\u2581)", "\u2581{"], ["\u2581return", "\u2581o", "\u2581instanceof", "\u2581", "$$Eng", "$$lish", "$$Stem", "$$mer", "$$;"], ["\u2581}"]]}, {"cs": "public override void Decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n    for (int i = 0; i < iterations; ++i) {\n        long block = blocks[blocksOffset++];\n        valuesOffset = Decode(block, values, valuesOffset);\n    }\n}\n", "java": "public void decode(long[] blocks, int blocksOffset, long[] values,int valuesOffset, int iterations) {\n    for (int i = 0; i < iterations; ++i) {\n        final long block = blocks[blocksOffset++];\n        valuesOffset = decode(block, values, valuesOffset);\n    }\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581void", "\u2581D", "$$ecode", "$$(long[]", "\u2581blocks,", "\u2581int", "\u2581blocksOffset,", "\u2581long[]", "\u2581values,", "\u2581int", "\u2581valuesOffset,", "\u2581int", "\u2581iterations)", "\u2581{"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810;", "\u2581i", "\u2581<", "\u2581iterations;", "\u2581++i)", "\u2581{"], ["\u2581long", "\u2581block", "\u2581=", "\u2581blocks[blocksOffset++]", "$$;"], ["\u2581values", "$$Offset", "\u2581=", "\u2581D", "$$ecode", "$$(block", "$$,", "\u2581values,", "\u2581values", "$$Offset", "$$)", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581decode", "$$(long[]", "\u2581blocks,", "\u2581int", "\u2581blocksOffset,", "\u2581long[]", "\u2581values,", "$$int", "\u2581valuesOffset,", "\u2581int", "\u2581iterations)", "\u2581{"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810;", "\u2581i", "\u2581<", "\u2581iterations;", "\u2581++i)", "\u2581{"], ["\u2581final", "\u2581long", "\u2581block", "\u2581=", "\u2581blocks[blocksOffset++]", "$$;"], ["\u2581values", "$$Offset", "\u2581=", "\u2581decode", "$$(block", "$$,", "\u2581values,", "\u2581values", "$$Offset", "$$)", "$$;"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public void IncRef() {\n    EnsureOpen();\n    refCount.IncrementAndGet();\n}\n", "java": "public final void incRef() {\n    ensureOpen();\n    refCount.incrementAndGet();\n}\n", "cs_t": [["\u2581public", "\u2581void", "\u2581In", "$$c", "$$Ref", "$$()", "\u2581{"], ["\u2581", "$$En", "$$sure", "$$Open", "$$()", "$$;"], ["\u2581ref", "$$Count", "$$.", "$$Increment", "$$And", "$$Get", "$$()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581final", "\u2581void", "\u2581in", "$$c", "$$Ref", "$$()", "\u2581{"], ["\u2581en", "$$sure", "$$Open", "$$()", "$$;"], ["\u2581ref", "$$Count", "$$.", "$$in", "$$crement", "$$And", "$$Get", "$$()", "$$;"], ["\u2581}"]]}, {"cs": "public virtual TestFailoverResponse TestFailover(TestFailoverRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = TestFailoverRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = TestFailoverResponseUnmarshaller.Instance;\n    return Invoke<TestFailoverResponse>(request, options);\n}\n", "java": "public ReplicationGroup testFailover(TestFailoverRequest request) {\n    request = beforeClientExecution(request);\n    return executeTestFailover(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581T", "$$est", "$$Fa", "$$i", "$$lo", "$$ver", "$$Response", "\u2581T", "$$est", "$$Fa", "$$i", "$$lo", "$$ver", "$$(", "$$Test", "$$Fa", "$$i", "$$lo", "$$ver", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581T", "$$est", "$$Fa", "$$i", "$$lo", "$$ver", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581T", "$$est", "$$Fa", "$$i", "$$lo", "$$ver", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<", "$$Test", "$$Fa", "$$i", "$$lo", "$$ver", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Re", "$$plication", "$$Group", "\u2581t", "$$est", "$$Fa", "$$i", "$$lo", "$$ver", "$$(", "$$Test", "$$Fa", "$$i", "$$lo", "$$ver", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581execute", "$$Test", "$$Fa", "$$i", "$$lo", "$$ver", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public RefWriter(ICollection<Ref> refs) {\n    this.refs = RefComparator.Sort(refs);\n}\n", "java": "public RefWriter(Collection<Ref> refs) {\n    this.refs = RefComparator.sort(refs);\n}\n", "cs_t": [["\u2581public", "\u2581Ref", "$$Writer", "$$(I", "$$Collection<", "$$Ref", "$$>", "\u2581ref", "$$s)", "\u2581{"], ["\u2581this.", "$$ref", "$$s", "\u2581=", "\u2581Ref", "$$Compar", "$$ator", "$$.S", "$$ort", "$$(re", "$$f", "$$s)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Ref", "$$Writer", "$$(", "$$Collection<", "$$Ref", "$$>", "\u2581ref", "$$s)", "\u2581{"], ["\u2581this.", "$$ref", "$$s", "\u2581=", "\u2581Ref", "$$Compar", "$$ator", "$$.", "$$s", "$$ort", "$$(re", "$$f", "$$s)", "$$;"], ["\u2581}"]]}, {"cs": "public ByteVector(int capacity) {\n    if (capacity > 0) {\n        blockSize = capacity;\n    }\n    else {\n        blockSize = DEFAULT_BLOCK_SIZE;\n    }\n    array = new byte[blockSize];\n    n = 0;\n}\n", "java": "public ByteVector(int capacity) {\n    if (capacity > 0) {\n        blockSize = capacity;\n    }\n    else {\n        blockSize = DEFAULT_BLOCK_SIZE;\n    }\n    array = new byte[blockSize];\n    n = 0;\n}\n", "cs_t": [["\u2581public", "\u2581Byte", "$$Vector", "$$(int", "\u2581capacity", "$$)", "\u2581{"], ["\u2581if", "\u2581(c", "$$apacity", "\u2581>", "\u25810)", "\u2581{"], ["\u2581block", "$$Size", "\u2581=", "\u2581capacity", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581block", "$$Size", "\u2581=", "\u2581DEFAULT_", "$$B", "$$LOCK_SIZE", "$$;"], ["\u2581}"], ["\u2581array", "\u2581=", "\u2581new", "\u2581byte[", "$$block", "$$Size", "$$]", "$$;"], ["\u2581n", "\u2581=", "\u25810;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Byte", "$$Vector", "$$(int", "\u2581capacity", "$$)", "\u2581{"], ["\u2581if", "\u2581(c", "$$apacity", "\u2581>", "\u25810)", "\u2581{"], ["\u2581block", "$$Size", "\u2581=", "\u2581capacity", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581block", "$$Size", "\u2581=", "\u2581DEFAULT_", "$$B", "$$LOCK_SIZE", "$$;"], ["\u2581}"], ["\u2581array", "\u2581=", "\u2581new", "\u2581byte[", "$$block", "$$Size", "$$]", "$$;"], ["\u2581n", "\u2581=", "\u25810;"], ["\u2581}"]]}, {"cs": "public virtual void EndWorker() {\n    if (workers.DecrementAndGet() == 0) {\n        process.Release();\n    }\n}\n", "java": "public void endWorker() {\n    if (workers.decrementAndGet() == 0)process.release();\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581void", "\u2581", "$$End", "$$Worker", "$$()", "\u2581{"], ["\u2581if", "\u2581(", "$$work", "$$er", "$$s.", "$$Dec", "$$re", "$$ment", "$$And", "$$Get", "$$()", "\u2581==", "\u25810)", "\u2581{"], ["\u2581pro", "$$ces", "$$s.", "$$Re", "$$lease", "$$()", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581end", "$$Worker", "$$()", "\u2581{"], ["\u2581if", "\u2581(", "$$work", "$$er", "$$s.", "$$d", "$$ec", "$$re", "$$ment", "$$And", "$$Get", "$$()", "\u2581==", "\u25810)", "$$pro", "$$ces", "$$s.", "$$re", "$$lease", "$$()", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DescribeVolumeStatusResponse DescribeVolumeStatus(DescribeVolumeStatusRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DescribeVolumeStatusRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DescribeVolumeStatusResponseUnmarshaller.Instance;\n    return Invoke<DescribeVolumeStatusResponse>(request, options);\n}\n", "java": "public DescribeVolumeStatusResult describeVolumeStatus(DescribeVolumeStatusRequest request) {\n    request = beforeClientExecution(request);\n    return executeDescribeVolumeStatus(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Describe", "$$Volume", "$$Statu", "$$sResponse", "\u2581Describe", "$$Volume", "$$Statu", "$$s(Describe", "$$Volume", "$$Statu", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Describe", "$$Volume", "$$Status", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Describe", "$$Volume", "$$Status", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Describe", "$$Volume", "$$Statu", "$$sResponse>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Describe", "$$Volume", "$$Statu", "$$sResult", "\u2581describe", "$$Volume", "$$Statu", "$$s(Describe", "$$Volume", "$$Statu", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDescribe", "$$Volume", "$$Status", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public IntMapper(int InitialCapacity) {\n    elements = new List<T>(InitialCapacity);\n    valueKeyMap = new Dictionary<T, int>(InitialCapacity);\n}\n", "java": "public IntMapper(final int initialCapacity) {\n    elements = new ArrayList<>(initialCapacity);\n    valueKeyMap = new HashMap<>(initialCapacity);\n}\n", "cs_t": [["\u2581public", "\u2581Int", "$$Map", "$$per", "$$(int", "\u2581In", "$$itial", "$$Capacity", "$$)", "\u2581{"], ["\u2581element", "$$s", "\u2581=", "\u2581new", "\u2581List<", "$$T", "$$>(", "$$In", "$$itial", "$$Capacity", "$$)", "$$;"], ["\u2581value", "$$Key", "$$Map", "\u2581=", "\u2581new", "\u2581D", "$$ictionary", "$$<", "$$T", "$$,", "\u2581int", "$$>(", "$$In", "$$itial", "$$Capacity", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Int", "$$Map", "$$per", "$$(f", "$$inal", "\u2581int", "\u2581in", "$$itial", "$$Capacity", "$$)", "\u2581{"], ["\u2581element", "$$s", "\u2581=", "\u2581new", "\u2581ArrayList<", "$$>", "$$(in", "$$itial", "$$Capacity", "$$)", "$$;"], ["\u2581value", "$$Key", "$$Map", "\u2581=", "\u2581new", "\u2581Hash", "$$Map<", "$$>", "$$(in", "$$itial", "$$Capacity", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override void Serialize(ILittleEndianOutput out1) {\n    out1.WriteShort(field_1_borderType);\n    out1.WriteShort(field_2_options);\n}\n", "java": "public void serialize(LittleEndianOutput out) {\n    out.writeShort(field_1_borderType);\n    out.writeShort(field_2_options);\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581void", "\u2581Serialize(ILittleEndianOutput", "\u2581out1)", "\u2581{"], ["\u2581out1.WriteShort(", "$$field_1_", "$$b", "$$order", "$$Type", "$$)", "$$;"], ["\u2581out1.WriteShort(", "$$field_2_", "$$options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581serialize(LittleEndianOutput", "\u2581out)", "\u2581{"], ["\u2581out.writeShort(", "$$field_1_", "$$b", "$$order", "$$Type", "$$)", "$$;"], ["\u2581out.writeShort(", "$$field_2_", "$$options", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual void copyInto(object[] elements_1) {\n    lock (this) {\n        System.Array.Copy(elementData, 0, elements_1, 0, elementCount);\n    }\n}\n", "java": "public synchronized void copyInto(Object[] elements) {\n    System.arraycopy(elementData, 0, elements, 0, elementCount);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581void", "\u2581copy", "$$In", "$$to", "$$(object", "$$[]", "\u2581element", "$$s", "$$_", "$$1)", "\u2581{"], ["\u2581lock", "\u2581(this)", "\u2581{"], ["\u2581System.Array.Copy", "$$(e", "$$lement", "$$Data", "$$,", "\u25810,", "\u2581element", "$$s", "$$_", "$$1,", "\u25810,", "\u2581element", "$$Count)", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581synchronized", "\u2581void", "\u2581copy", "$$In", "$$to", "$$(Object", "$$[]", "\u2581element", "$$s)", "\u2581{"], ["\u2581System.arraycopy", "$$(e", "$$lement", "$$Data", "$$,", "\u25810,", "\u2581element", "$$s,", "\u25810,", "\u2581element", "$$Count)", "$$;"], ["\u2581}"]]}, {"cs": "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0,ValueEval arg1) {\n    String arg;\n    int index;\n    try {\n        arg = TextFunction.EvaluateStringArg(arg0, srcRowIndex, srcColumnIndex);\n        index = TextFunction.EvaluateIntArg(arg1, srcRowIndex, srcColumnIndex);\n    }\n    catch (EvaluationException e) {\n        return e.GetErrorEval();\n    }\n    if (index < 0) {\n        return ErrorEval.VALUE_INVALID;\n    }\n    String result;\n    if (_isLeft) {\n        result = arg.Substring(0, Math.Min(arg.Length, index));\n    }\n    else {\n        result = arg.Substring(Math.Max(0, arg.Length - index));\n    }\n    return new StringEval(result);\n}\n", "java": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1) {\n    double s0;\n    String s1;\n    try {\n        s0 = evaluateDoubleArg(arg0, srcRowIndex, srcColumnIndex);\n        s1 = evaluateStringArg(arg1, srcRowIndex, srcColumnIndex);\n    }\n    catch (EvaluationException e) {\n        return e.getErrorEval();\n    }\n    try {\n        String formattedStr = formatter.formatRawCellContents(s0, -1, s1);\n        return new StringEval(formattedStr);\n    }\n    catch (Exception e) {\n        return ErrorEval.VALUE_INVALID;\n    }\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581ValueEval", "\u2581Evaluate(int", "\u2581srcRowIndex,", "\u2581int", "\u2581srcColumnIndex,", "\u2581ValueEval", "\u2581arg0,", "$$ValueEval", "\u2581arg", "$$1)", "\u2581{"], ["\u2581String", "\u2581arg", "$$;"], ["\u2581int", "\u2581index", "$$;"], ["\u2581try", "\u2581{"], ["\u2581arg", "\u2581=", "\u2581", "$$Text", "$$Function", "$$.", "$$Evaluate", "$$String", "$$Arg", "$$(arg", "$$0,", "\u2581srcRowIndex,", "\u2581srcColumn", "$$Index)", "$$;"], ["\u2581index", "\u2581=", "\u2581", "$$Text", "$$Function", "$$.", "$$Evaluate", "$$Int", "$$Arg", "$$(arg", "$$1,", "\u2581srcRowIndex,", "\u2581srcColumn", "$$Index)", "$$;"], ["\u2581}"], ["\u2581catch", "\u2581(EvaluationException", "\u2581e)", "\u2581{"], ["\u2581return", "\u2581e", "$$.Get", "$$ErrorEval", "$$()", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(index", "\u2581<", "\u25810)", "\u2581{"], ["\u2581return", "\u2581ErrorEval.VALUE_INVALID", "$$;"], ["\u2581}"], ["\u2581String", "\u2581result", "$$;"], ["\u2581if", "\u2581(_", "$$is", "$$Left", "$$)", "\u2581{"], ["\u2581result", "\u2581=", "\u2581arg", "$$.Sub", "$$string(", "$$0,", "\u2581Math.", "$$Min", "$$(arg", "$$.Length", "$$,", "\u2581index", "$$))", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581result", "\u2581=", "\u2581arg", "$$.Sub", "$$string(", "$$Math.", "$$Max", "$$(", "$$0,", "\u2581arg", "$$.Length", "\u2581-", "\u2581index", "$$))", "$$;"], ["\u2581}"], ["\u2581return", "\u2581new", "\u2581String", "$$Eval", "$$(result", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581ValueEval", "\u2581evaluate(int", "\u2581srcRowIndex,", "\u2581int", "\u2581srcColumnIndex,", "\u2581ValueEval", "\u2581arg0,", "\u2581ValueEval", "\u2581arg", "$$1)", "\u2581{"], ["\u2581double", "\u2581s", "$$0", "$$;"], ["\u2581String", "\u2581s", "$$1", "$$;"], ["\u2581try", "\u2581{"], ["\u2581s", "$$0", "\u2581=", "\u2581evaluate", "$$Double", "$$Arg", "$$(arg", "$$0,", "\u2581srcRowIndex,", "\u2581srcColumn", "$$Index)", "$$;"], ["\u2581s", "$$1", "\u2581=", "\u2581evaluate", "$$String", "$$Arg", "$$(arg", "$$1,", "\u2581srcRowIndex,", "\u2581srcColumn", "$$Index)", "$$;"], ["\u2581}"], ["\u2581catch", "\u2581(EvaluationException", "\u2581e)", "\u2581{"], ["\u2581return", "\u2581e.get", "$$ErrorEval", "$$()", "$$;"], ["\u2581}"], ["\u2581try", "\u2581{"], ["\u2581String", "\u2581format", "$$ted", "$$Str", "\u2581=", "\u2581format", "$$ter", "$$.format", "$$Raw", "$$Cell", "$$Content", "$$s(", "$$s", "$$0,", "\u2581-1", "$$,", "\u2581s", "$$1)", "$$;"], ["\u2581return", "\u2581new", "\u2581String", "$$Eval", "$$(", "$$format", "$$ted", "$$Str", "$$)", "$$;"], ["\u2581}"], ["\u2581catch", "\u2581(", "$$Exception", "\u2581e)", "\u2581{"], ["\u2581return", "\u2581ErrorEval.VALUE_INVALID", "$$;"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public CustomViewSettingsRecordAggregate(RecordStream rs) {\n    _begin = rs.GetNext();\n    if (_begin.Sid != UserSViewBegin.sid) {\n        throw new InvalidOperationException(\"Bad begin record\");\n    }\n    List<RecordBase> temp = new List<RecordBase>();\n    while (rs.PeekNextSid() != UserSViewEnd.sid) {\n        if (PageSettingsBlock.IsComponentRecord(rs.PeekNextSid())) {\n            if (_psBlock != null) {\n                throw new InvalidOperationException(\"Found more than one PageSettingsBlock in custom view Settings sub-stream\");\n            }\n            _psBlock = new PageSettingsBlock(rs);\n            temp.Add(_psBlock);\n            continue;\n        }\n        temp.Add(rs.GetNext());\n    }\n    _recs = temp;\n    _end = rs.GetNext();\n    if (_end.Sid != UserSViewEnd.sid) {\n        throw new InvalidOperationException(\"Bad custom view Settings end record\");\n    }\n}\n", "java": "public CustomViewSettingsRecordAggregate(RecordStream rs) {\n    _begin = rs.getNext();\n    if (_begin.getSid() != UserSViewBegin.sid) {\n        throw new IllegalStateException(\"Bad begin record\");\n    }\n    List<RecordBase> temp = new ArrayList<>();\n    while (rs.peekNextSid() != UserSViewEnd.sid) {\n        if (PageSettingsBlock.isComponentRecord(rs.peekNextSid())) {\n            if (_psBlock != null) {\n                if (rs.peekNextSid() == HeaderFooterRecord.sid) {\n                    _psBlock.addLateHeaderFooter((HeaderFooterRecord)rs.getNext());\n                    continue;\n                }\n                throw new IllegalStateException(\"Found more than one PageSettingsBlock in chart sub-stream, had sid: \" + rs.peekNextSid());\n            }\n            _psBlock = new PageSettingsBlock(rs);\n            temp.add(_psBlock);\n            continue;\n        }\n        temp.add(rs.getNext());\n    }\n    _recs = temp;\n    _end = rs.getNext();\n    if (_end.getSid() != UserSViewEnd.sid) {\n        throw new IllegalStateException(\"Bad custom view settings end record\");\n    }\n}\n", "cs_t": [["\u2581public", "\u2581C", "$$ustom", "$$V", "$$iew", "$$Setting", "$$s", "$$Record", "$$Aggregate", "$$(", "$$Record", "$$Stream", "\u2581r", "$$s)", "\u2581{"], ["\u2581_", "$$be", "$$gin", "\u2581=", "\u2581r", "$$s.Get", "$$Next()", "$$;"], ["\u2581if", "\u2581(_", "$$be", "$$gin", "$$.S", "$$id", "\u2581!=", "\u2581", "$$User", "$$S", "$$V", "$$iew", "$$Be", "$$gin", "$$.", "$$sid", "$$)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581InvalidOperationException(\"", "$$B", "$$ad", "\u2581be", "$$gin", "\u2581record", "$$\")", "$$;"], ["\u2581}"], ["\u2581List<", "$$Record", "$$Base", "$$>", "\u2581temp", "\u2581=", "\u2581new", "\u2581List<", "$$Record", "$$Base", "$$>", "$$()", "$$;"], ["\u2581while", "\u2581(r", "$$s.", "$$P", "$$eek", "$$Next", "$$S", "$$id", "$$()", "\u2581!=", "\u2581", "$$User", "$$S", "$$V", "$$iew", "$$End", "$$.", "$$sid", "$$)", "\u2581{"], ["\u2581if", "\u2581(", "$$P", "$$age", "$$Setting", "$$s", "$$Block", "$$.Is", "$$Component", "$$Record(", "$$r", "$$s.", "$$P", "$$eek", "$$Next", "$$S", "$$id", "$$()))", "\u2581{"], ["\u2581if", "\u2581(_", "$$p", "$$s", "$$Block", "\u2581!=", "\u2581null)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581InvalidOperationException(\"", "$$Found", "\u2581m", "$$ore", "\u2581th", "$$an", "\u2581", "$$one", "\u2581P", "$$age", "$$Setting", "$$s", "$$Block", "\u2581in", "\u2581c", "$$ustom", "\u2581v", "$$iew", "\u2581Set", "$$ting", "$$s", "\u2581sub", "$$-", "$$stream", "$$\")", "$$;"], ["\u2581}"], ["\u2581_", "$$p", "$$s", "$$Block", "\u2581=", "\u2581new", "\u2581P", "$$age", "$$Setting", "$$s", "$$Block", "$$(r", "$$s)", "$$;"], ["\u2581temp", "$$.Add(", "$$_", "$$p", "$$s", "$$Block", "$$)", "$$;"], ["\u2581c", "$$ontinue", "$$;"], ["\u2581}"], ["\u2581temp", "$$.Add(", "$$r", "$$s.Get", "$$Next())", "$$;"], ["\u2581}"], ["\u2581_re", "$$c", "$$s", "\u2581=", "\u2581temp", "$$;"], ["\u2581_", "$$end", "\u2581=", "\u2581r", "$$s.Get", "$$Next()", "$$;"], ["\u2581if", "\u2581(_", "$$end", "$$.S", "$$id", "\u2581!=", "\u2581", "$$User", "$$S", "$$V", "$$iew", "$$End", "$$.", "$$sid", "$$)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581InvalidOperationException(\"", "$$B", "$$ad", "\u2581c", "$$ustom", "\u2581v", "$$iew", "\u2581Set", "$$ting", "$$s", "\u2581end", "\u2581record", "$$\")", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581C", "$$ustom", "$$V", "$$iew", "$$Setting", "$$s", "$$Record", "$$Aggregate", "$$(", "$$Record", "$$Stream", "\u2581r", "$$s)", "\u2581{"], ["\u2581_", "$$be", "$$gin", "\u2581=", "\u2581r", "$$s.get", "$$Next()", "$$;"], ["\u2581if", "\u2581(_", "$$be", "$$gin", "$$.get", "$$S", "$$id", "$$()", "\u2581!=", "\u2581", "$$User", "$$S", "$$V", "$$iew", "$$Be", "$$gin", "$$.", "$$sid", "$$)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581IllegalStateException(\"", "$$B", "$$ad", "\u2581be", "$$gin", "\u2581record", "$$\")", "$$;"], ["\u2581}"], ["\u2581List<", "$$Record", "$$Base", "$$>", "\u2581temp", "\u2581=", "\u2581new", "\u2581ArrayList<", "$$>", "$$()", "$$;"], ["\u2581while", "\u2581(r", "$$s.", "$$p", "$$eek", "$$Next", "$$S", "$$id", "$$()", "\u2581!=", "\u2581", "$$User", "$$S", "$$V", "$$iew", "$$End", "$$.", "$$sid", "$$)", "\u2581{"], ["\u2581if", "\u2581(", "$$P", "$$age", "$$Setting", "$$s", "$$Block", "$$.is", "$$Component", "$$Record(", "$$r", "$$s.", "$$p", "$$eek", "$$Next", "$$S", "$$id", "$$()))", "\u2581{"], ["\u2581if", "\u2581(_", "$$p", "$$s", "$$Block", "\u2581!=", "\u2581null)", "\u2581{"], ["\u2581if", "\u2581(r", "$$s.", "$$p", "$$eek", "$$Next", "$$S", "$$id", "$$()", "\u2581==", "\u2581H", "$$ead", "$$er", "$$Footer", "$$Record.sid", "$$)", "\u2581{"], ["\u2581_", "$$p", "$$s", "$$Block", "$$.add", "$$L", "$$ate", "$$Header", "$$Footer", "$$((", "$$Header", "$$Footer", "$$Record)", "$$r", "$$s.get", "$$Next())", "$$;"], ["\u2581c", "$$ontinue", "$$;"], ["\u2581}"], ["\u2581throw", "\u2581new", "\u2581IllegalStateException(\"", "$$Found", "\u2581m", "$$ore", "\u2581th", "$$an", "\u2581", "$$one", "\u2581P", "$$age", "$$Setting", "$$s", "$$Block", "\u2581in", "\u2581ch", "$$art", "\u2581sub", "$$-", "$$stream", "$$,", "\u2581h", "$$ad", "\u2581s", "$$id", "$$:", "\u2581\"", "\u2581+", "\u2581r", "$$s.", "$$p", "$$eek", "$$Next", "$$S", "$$id", "$$())", "$$;"], ["\u2581}"], ["\u2581_", "$$p", "$$s", "$$Block", "\u2581=", "\u2581new", "\u2581P", "$$age", "$$Setting", "$$s", "$$Block", "$$(r", "$$s)", "$$;"], ["\u2581temp", "$$.add(", "$$_", "$$p", "$$s", "$$Block", "$$)", "$$;"], ["\u2581c", "$$ontinue", "$$;"], ["\u2581}"], ["\u2581temp", "$$.add(", "$$r", "$$s.get", "$$Next())", "$$;"], ["\u2581}"], ["\u2581_re", "$$c", "$$s", "\u2581=", "\u2581temp", "$$;"], ["\u2581_", "$$end", "\u2581=", "\u2581r", "$$s.get", "$$Next()", "$$;"], ["\u2581if", "\u2581(_", "$$end", "$$.get", "$$S", "$$id", "$$()", "\u2581!=", "\u2581", "$$User", "$$S", "$$V", "$$iew", "$$End", "$$.", "$$sid", "$$)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581IllegalStateException(\"", "$$B", "$$ad", "\u2581c", "$$ustom", "\u2581v", "$$iew", "\u2581set", "$$ting", "$$s", "\u2581end", "\u2581record", "$$\")", "$$;"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public virtual DeleteSignalingChannelResponse DeleteSignalingChannel(DeleteSignalingChannelRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DeleteSignalingChannelRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DeleteSignalingChannelResponseUnmarshaller.Instance;\n    return Invoke<DeleteSignalingChannelResponse>(request, options);\n}\n", "java": "public DeleteSignalingChannelResult deleteSignalingChannel(DeleteSignalingChannelRequest request) {\n    request = beforeClientExecution(request);\n    return executeDeleteSignalingChannel(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Delete", "$$Sign", "$$aling", "$$Channel", "$$Response", "\u2581Delete", "$$Sign", "$$aling", "$$Channel", "$$(Delete", "$$Sign", "$$aling", "$$Channel", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Delete", "$$Sign", "$$aling", "$$Channel", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Delete", "$$Sign", "$$aling", "$$Channel", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Delete", "$$Sign", "$$aling", "$$Channel", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Delete", "$$Sign", "$$aling", "$$Channel", "$$Result", "\u2581delete", "$$Sign", "$$aling", "$$Channel", "$$(Delete", "$$Sign", "$$aling", "$$Channel", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDelete", "$$Sign", "$$aling", "$$Channel", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override bool remove(object o) {\n    if (!(o is java.util.MapClass.Entry<K, V>)) {\n        return false;\n    }\n    java.util.MapClass.Entry<object, object> e = (java.util.MapClass.Entry<object, object>)o;\n    return this._enclosing.removeMapping(e.getKey(), e.getValue());\n}\n", "java": "@Override public boolean remove(Object o) {\n    if (contains(o)) {\n        Entry<?> entry = (Entry<?>) o;\n        AtomicInteger frequency = backingMap.remove(entry.getElement());\n        int numberRemoved = frequency.getAndSet(0);\n        size -= numberRemoved;\n        return true;\n    }\n    return false;\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581bool", "\u2581remove", "$$(object", "\u2581o)", "\u2581{"], ["\u2581if", "\u2581(!(o", "\u2581is", "\u2581java.util.", "$$MapClass.", "$$Entry<K,", "\u2581V>", "$$))", "\u2581{"], ["\u2581return", "\u2581false", "$$;"], ["\u2581}"], ["\u2581java.util.", "$$MapClass.", "$$Entry<", "$$object", "$$,", "\u2581object", "$$>", "\u2581e", "\u2581=", "\u2581(", "$$java.util.", "$$MapClass.", "$$Entry<", "$$object", "$$,", "\u2581object", "$$>", "$$)o", "$$;"], ["\u2581return", "\u2581this._enclosing", "$$.remove", "$$Mapping", "$$(e", "$$.get", "$$Key", "$$(),", "\u2581e.get", "$$Value", "$$())", "$$;"], ["\u2581}"]], "java_t": [["\u2581@Override", "\u2581public", "\u2581boolean", "\u2581remove", "$$(Object", "\u2581o)", "\u2581{"], ["\u2581if", "\u2581(", "$$con", "$$tain", "$$s(", "$$o", "$$))", "\u2581{"], ["\u2581", "$$Entry<", "$$?", "$$>", "\u2581entry", "\u2581=", "\u2581(", "$$Entry<", "$$?", "$$>", "$$)", "\u2581o", "$$;"], ["\u2581", "$$At", "$$om", "$$ic", "$$Integ", "$$er", "\u2581f", "$$re", "$$qu", "$$enc", "$$y", "\u2581=", "\u2581b", "$$acking", "$$Map", "$$.remove", "$$(", "$$entry", "$$.get", "$$Element", "$$())", "$$;"], ["\u2581int", "\u2581number", "$$Re", "$$mo", "$$ved", "\u2581=", "\u2581f", "$$re", "$$qu", "$$enc", "$$y", "$$.get", "$$And", "$$Set(", "$$0)", "$$;"], ["\u2581size", "\u2581-=", "\u2581number", "$$Re", "$$mo", "$$ved", "$$;"], ["\u2581return", "\u2581true", "$$;"], ["\u2581}"], ["\u2581return", "\u2581false", "$$;"], ["\u2581}"]]}, {"cs": "public SnapshotDeletionPolicy(IndexDeletionPolicy primary) {\n    this.primary = primary;\n}\n", "java": "public SnapshotDeletionPolicy(IndexDeletionPolicy primary) {\n    this.primary = primary;\n}\n", "cs_t": [["\u2581public", "\u2581S", "$$napshot", "$$De", "$$letionPolicy", "$$(", "$$Index", "$$De", "$$letionPolicy", "\u2581pri", "$$mary", "$$)", "\u2581{"], ["\u2581this.p", "$$ri", "$$mary", "\u2581=", "\u2581pri", "$$mary", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581S", "$$napshot", "$$De", "$$letionPolicy", "$$(", "$$Index", "$$De", "$$letionPolicy", "\u2581pri", "$$mary", "$$)", "\u2581{"], ["\u2581this.p", "$$ri", "$$mary", "\u2581=", "\u2581pri", "$$mary", "$$;"], ["\u2581}"]]}, {"cs": "public virtual void throwException() {\n    switch (this.type) {\n    case TYPE_UNDERFLOW: {\n        throw new java.nio.BufferUnderflowException();\n    }\n    case TYPE_OVERFLOW: {\n        throw new java.nio.BufferOverflowException();\n    }\n    case TYPE_UNMAPPABLE_CHAR: {\n        throw new java.nio.charset.UnmappableCharacterException(this._length);\n    }\n    case TYPE_MALFORMED_INPUT: {\n        throw new java.nio.charset.MalformedInputException(this._length);\n    }\n    default: {\n        throw new java.nio.charset.CharacterCodingException();\n    }\n    }\n}\n", "java": "public void throwException() throws BufferUnderflowException,BufferOverflowException, UnmappableCharacterException,MalformedInputException, CharacterCodingException {\n    switch (this.type) {\n    case TYPE_UNDERFLOW:\n        throw new BufferUnderflowException();\n    case TYPE_OVERFLOW:\n        throw new BufferOverflowException();\n    case TYPE_UNMAPPABLE_CHAR:\n        throw new UnmappableCharacterException(this.length);\n    case TYPE_MALFORMED_INPUT:\n        throw new MalformedInputException(this.length);\n    default:\n        throw new CharacterCodingException();\n    }\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581void", "\u2581throw", "$$Exception", "$$()", "\u2581{"], ["\u2581switch", "\u2581(this", "$$.", "$$type", "$$)", "\u2581{"], ["\u2581case", "\u2581T", "$$YP", "$$E_", "$$UN", "$$D", "$$ER", "$$F", "$$LOW", "$$:", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581java.nio.Buffer", "$$Under", "$$flow", "$$Exception", "$$()", "$$;"], ["\u2581}"], ["\u2581case", "\u2581T", "$$YP", "$$E_", "$$O", "$$V", "$$ER", "$$F", "$$LOW", "$$:", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581java.nio.Buffer", "$$Over", "$$flow", "$$Exception", "$$()", "$$;"], ["\u2581}"], ["\u2581case", "\u2581T", "$$YP", "$$E_", "$$UN", "$$M", "$$AP", "$$P", "$$A", "$$BLE", "$$_", "$$CHAR", "$$:", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581java.nio.", "$$char", "$$set", "$$.", "$$Unm", "$$ap", "$$p", "$$able", "$$Character", "$$Exception(", "$$this", "$$._", "$$length", "$$)", "$$;"], ["\u2581}"], ["\u2581case", "\u2581T", "$$YP", "$$E_", "$$M", "$$AL", "$$F", "$$ORM", "$$E", "$$D_", "$$IN", "$$P", "$$UT", "$$:", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581java.nio.", "$$char", "$$set", "$$.M", "$$al", "$$form", "$$ed", "$$Input", "$$Exception(", "$$this", "$$._", "$$length", "$$)", "$$;"], ["\u2581}"], ["\u2581default", "$$:", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581java.nio.", "$$char", "$$set", "$$.", "$$Character", "$$Co", "$$d", "$$ing", "$$Exception", "$$()", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581throw", "$$Exception", "$$()", "\u2581throws", "\u2581Buffer", "$$Under", "$$flow", "$$Exception", "$$,", "$$Buffer", "$$Over", "$$flow", "$$Exception", "$$,", "\u2581", "$$Unm", "$$ap", "$$p", "$$able", "$$Character", "$$Exception", "$$,", "$$M", "$$al", "$$form", "$$ed", "$$Input", "$$Exception", "$$,", "\u2581Character", "$$Co", "$$d", "$$ing", "$$Exception", "\u2581{"], ["\u2581switch", "\u2581(this", "$$.", "$$type", "$$)", "\u2581{"], ["\u2581case", "\u2581T", "$$YP", "$$E_", "$$UN", "$$D", "$$ER", "$$F", "$$LOW", "$$:"], ["\u2581throw", "\u2581new", "\u2581Buffer", "$$Under", "$$flow", "$$Exception", "$$()", "$$;"], ["\u2581case", "\u2581T", "$$YP", "$$E_", "$$O", "$$V", "$$ER", "$$F", "$$LOW", "$$:"], ["\u2581throw", "\u2581new", "\u2581Buffer", "$$Over", "$$flow", "$$Exception", "$$()", "$$;"], ["\u2581case", "\u2581T", "$$YP", "$$E_", "$$UN", "$$M", "$$AP", "$$P", "$$A", "$$BLE", "$$_", "$$CHAR", "$$:"], ["\u2581throw", "\u2581new", "\u2581", "$$Unm", "$$ap", "$$p", "$$able", "$$Character", "$$Exception(", "$$this", "$$.length)", "$$;"], ["\u2581case", "\u2581T", "$$YP", "$$E_", "$$M", "$$AL", "$$F", "$$ORM", "$$E", "$$D_", "$$IN", "$$P", "$$UT", "$$:"], ["\u2581throw", "\u2581new", "\u2581M", "$$al", "$$form", "$$ed", "$$Input", "$$Exception(", "$$this", "$$.length)", "$$;"], ["\u2581default", "$$:"], ["\u2581throw", "\u2581new", "\u2581Character", "$$Co", "$$d", "$$ing", "$$Exception", "$$()", "$$;"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public StringPtg(ILittleEndianInput in1) {\n    int field_1_length = in1.ReadUByte();\n    field_2_options = (byte)in1.ReadByte();\n    _is16bitUnicode = (field_2_options & 0x01) != 0;\n    if (_is16bitUnicode) {\n        field_3_string = StringUtil.ReadUnicodeLE(in1, field_1_length);\n    }\n    else {\n        field_3_string = StringUtil.ReadCompressedUnicode(in1, field_1_length);\n    }\n}\n", "java": "public StringPtg(LittleEndianInput in)  {\n    int nChars = in.readUByte();\n    _is16bitUnicode = (in.readByte() & 0x01) != 0;\n    if (_is16bitUnicode) {\n        field_3_string = StringUtil.readUnicodeLE(in, nChars);\n    }\n    else {\n        field_3_string = StringUtil.readCompressedUnicode(in, nChars);\n    }\n}\n", "cs_t": [["\u2581public", "\u2581String", "$$Ptg", "$$(I", "$$LittleEndian", "$$Input", "\u2581in1)", "\u2581{"], ["\u2581int", "\u2581field_1_", "$$length", "\u2581=", "\u2581in1.Read", "$$U", "$$Byte", "$$()", "$$;"], ["\u2581field_2_", "$$options", "\u2581=", "\u2581(byte)", "$$in", "$$1.Read", "$$Byte", "$$()", "$$;"], ["\u2581_", "$$is", "$$16", "$$bit", "$$Unicode", "\u2581=", "\u2581(", "$$field_2_", "$$options", "\u2581&", "\u25810x0", "$$1)", "\u2581!=", "\u25810;"], ["\u2581if", "\u2581(_", "$$is", "$$16", "$$bit", "$$Unicode", "$$)", "\u2581{"], ["\u2581field_3_", "$$string", "\u2581=", "\u2581StringUtil.", "$$Read", "$$Unicode", "$$LE", "$$(in", "$$1,", "\u2581field_1_", "$$length", "$$)", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581field_3_", "$$string", "\u2581=", "\u2581StringUtil.", "$$Read", "$$Comp", "$$ressed", "$$Unicode", "$$(in", "$$1,", "\u2581field_1_", "$$length", "$$)", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581String", "$$Ptg", "$$(", "$$LittleEndian", "$$Input", "\u2581in)", "\u2581", "\u2581{"], ["\u2581int", "\u2581n", "$$Char", "$$s", "\u2581=", "\u2581in.read", "$$U", "$$Byte", "$$()", "$$;"], ["\u2581_", "$$is", "$$16", "$$bit", "$$Unicode", "\u2581=", "\u2581(in", "$$.read", "$$Byte", "$$()", "\u2581&", "\u25810x0", "$$1)", "\u2581!=", "\u25810;"], ["\u2581if", "\u2581(_", "$$is", "$$16", "$$bit", "$$Unicode", "$$)", "\u2581{"], ["\u2581field_3_", "$$string", "\u2581=", "\u2581String", "$$Util", "$$.read", "$$Unicode", "$$LE", "$$(in", "$$,", "\u2581n", "$$Char", "$$s)", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581field_3_", "$$string", "\u2581=", "\u2581String", "$$Util", "$$.read", "$$Comp", "$$ressed", "$$Unicode", "$$(in", "$$,", "\u2581n", "$$Char", "$$s)", "$$;"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public GetPublicAccessUrlsRequest(): base(\"CloudPhoto\", \"2017-07-11\", \"GetPublicAccessUrls\", \"cloudphoto\", \"openAPI\") {\n    Protocol = ProtocolType.HTTPS;\n}\n", "java": "public GetPublicAccessUrlsRequest() {\n    super(\"CloudPhoto\", \"2017-07-11\", \"GetPublicAccessUrls\", \"cloudphoto\");\n    setProtocol(ProtocolType.HTTPS);\n}\n", "cs_t": [["\u2581public", "\u2581Get", "$$Public", "$$Access", "$$Url", "$$sRequest", "$$():", "\u2581base(\"", "$$CloudPhoto\",", "\u2581\"2017-07-11\",", "\u2581\"Get", "$$Public", "$$Access", "$$Url", "$$s\",", "\u2581\"cloudphoto", "$$\",", "\u2581\"openAPI\")", "\u2581{"], ["\u2581Protocol", "\u2581=", "\u2581ProtocolType.HTTPS", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Get", "$$Public", "$$Access", "$$Url", "$$sRequest", "$$()", "\u2581{"], ["\u2581super(\"", "$$CloudPhoto\",", "\u2581\"2017-07-11\",", "\u2581\"Get", "$$Public", "$$Access", "$$Url", "$$s\",", "\u2581\"cloudphoto", "$$\")", "$$;"], ["\u2581setProtocol(ProtocolType.HTTPS", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual CleanCommand Clean() {\n    return new CleanCommand(repo);\n}\n", "java": "public CleanCommand clean() {\n    return new CleanCommand(repo);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581C", "$$le", "$$an", "$$Command", "\u2581C", "$$le", "$$an", "$$()", "\u2581{"], ["\u2581return", "\u2581new", "\u2581C", "$$le", "$$an", "$$Command", "$$(repo", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581C", "$$le", "$$an", "$$Command", "\u2581c", "$$le", "$$an", "$$()", "\u2581{"], ["\u2581return", "\u2581new", "\u2581C", "$$le", "$$an", "$$Command", "$$(repo", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual ICollection<PackFile> GetPacks() {\n    ObjectDirectory.PackList list = packList.Get();\n    if (list == NO_PACKS) {\n        list = ScanPacks(list);\n    }\n    PackFile[] packs = list.packs;\n    return Sharpen.Collections.UnmodifiableCollection(Arrays.AsList(packs));\n}\n", "java": "public Collection<PackFile> getPacks() {\n    PackList list = packList.get();\n    if (list == NO_PACKS)list = scanPacks(list);\n    PackFile[] packs = list.packs;\n    return Collections.unmodifiableCollection(Arrays.asList(packs));\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581I", "$$Collection<", "$$Pack", "$$File", "$$>", "\u2581Get", "$$Pack", "$$s()", "\u2581{"], ["\u2581Object", "$$Directory", "$$.", "$$Pack", "$$List", "\u2581list", "\u2581=", "\u2581p", "$$ack", "$$List", "$$.Get", "$$()", "$$;"], ["\u2581if", "\u2581(", "$$list", "\u2581==", "\u2581N", "$$O", "$$_P", "$$A", "$$CK", "$$S", "$$)", "\u2581{"], ["\u2581list", "\u2581=", "\u2581S", "$$c", "$$an", "$$Pack", "$$s(", "$$list", "$$)", "$$;"], ["\u2581}"], ["\u2581P", "$$ack", "$$File", "$$[]", "\u2581p", "$$ack", "$$s", "\u2581=", "\u2581list", "$$.p", "$$ack", "$$s;"], ["\u2581return", "\u2581Sharpen.", "$$Collections.", "$$Unm", "$$od", "$$ifi", "$$able", "$$Collection", "$$(", "$$Array", "$$s", "$$.As", "$$List", "$$(p", "$$ack", "$$s", "$$))", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581", "$$Collection<", "$$Pack", "$$File", "$$>", "\u2581get", "$$Pack", "$$s()", "\u2581{"], ["\u2581P", "$$ack", "$$List", "\u2581list", "\u2581=", "\u2581p", "$$ack", "$$List", "$$.get", "$$()", "$$;"], ["\u2581if", "\u2581(", "$$list", "\u2581==", "\u2581N", "$$O", "$$_P", "$$A", "$$CK", "$$S", "$$)", "$$list", "\u2581=", "\u2581s", "$$c", "$$an", "$$Pack", "$$s(", "$$list", "$$)", "$$;"], ["\u2581P", "$$ack", "$$File", "$$[]", "\u2581p", "$$ack", "$$s", "\u2581=", "\u2581list", "$$.p", "$$ack", "$$s;"], ["\u2581return", "\u2581", "$$Collections.", "$$un", "$$mod", "$$ifi", "$$able", "$$Collection", "$$(", "$$Array", "$$s.", "$$as", "$$List", "$$(p", "$$ack", "$$s", "$$))", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DescribeStackDriftDetectionStatusResponse DescribeStackDriftDetectionStatus(DescribeStackDriftDetectionStatusRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DescribeStackDriftDetectionStatusRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DescribeStackDriftDetectionStatusResponseUnmarshaller.Instance;\n    return Invoke<DescribeStackDriftDetectionStatusResponse>(request, options);\n}\n", "java": "public DescribeStackDriftDetectionStatusResult describeStackDriftDetectionStatus(DescribeStackDriftDetectionStatusRequest request) {\n    request = beforeClientExecution(request);\n    return executeDescribeStackDriftDetectionStatus(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Describe", "$$Stack", "$$D", "$$ri", "$$ft", "$$Detection", "$$Statu", "$$sResponse", "\u2581Describe", "$$Stack", "$$D", "$$ri", "$$ft", "$$Detection", "$$Statu", "$$s(Describe", "$$Stack", "$$D", "$$ri", "$$ft", "$$Detection", "$$Statu", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Describe", "$$Stack", "$$D", "$$ri", "$$ft", "$$Detection", "$$Status", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Describe", "$$Stack", "$$D", "$$ri", "$$ft", "$$Detection", "$$Status", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Describe", "$$Stack", "$$D", "$$ri", "$$ft", "$$Detection", "$$Statu", "$$sResponse>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Describe", "$$Stack", "$$D", "$$ri", "$$ft", "$$Detection", "$$Statu", "$$sResult", "\u2581describe", "$$Stack", "$$D", "$$ri", "$$ft", "$$Detection", "$$Statu", "$$s(Describe", "$$Stack", "$$D", "$$ri", "$$ft", "$$Detection", "$$Statu", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDescribe", "$$Stack", "$$D", "$$ri", "$$ft", "$$Detection", "$$Status", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual ListCloudFrontOriginAccessIdentitiesResponse ListCloudFrontOriginAccessIdentities(ListCloudFrontOriginAccessIdentitiesRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = ListCloudFrontOriginAccessIdentitiesRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = ListCloudFrontOriginAccessIdentitiesResponseUnmarshaller.Instance;\n    return Invoke<ListCloudFrontOriginAccessIdentitiesResponse>(request, options);\n}\n", "java": "public ListCloudFrontOriginAccessIdentitiesResult listCloudFrontOriginAccessIdentities(ListCloudFrontOriginAccessIdentitiesRequest request) {\n    request = beforeClientExecution(request);\n    return executeListCloudFrontOriginAccessIdentities(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581List", "$$Cloud", "$$Fr", "$$ont", "$$Origin", "$$Access", "$$Identi", "$$ties", "$$Response", "\u2581List", "$$Cloud", "$$Fr", "$$ont", "$$Origin", "$$Access", "$$Identi", "$$ties", "$$(List", "$$Cloud", "$$Fr", "$$ont", "$$Origin", "$$Access", "$$Identi", "$$ties", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581List", "$$Cloud", "$$Fr", "$$ont", "$$Origin", "$$Access", "$$Identi", "$$ties", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581List", "$$Cloud", "$$Fr", "$$ont", "$$Origin", "$$Access", "$$Identi", "$$ties", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<List", "$$Cloud", "$$Fr", "$$ont", "$$Origin", "$$Access", "$$Identi", "$$ties", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581List", "$$Cloud", "$$Fr", "$$ont", "$$Origin", "$$Access", "$$Identi", "$$ties", "$$Result", "\u2581list", "$$Cloud", "$$Fr", "$$ont", "$$Origin", "$$Access", "$$Identi", "$$ties", "$$(List", "$$Cloud", "$$Fr", "$$ont", "$$Origin", "$$Access", "$$Identi", "$$ties", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeList", "$$Cloud", "$$Fr", "$$ont", "$$Origin", "$$Access", "$$Identi", "$$ties", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public static SshSessionFactory GetInstance() {\n    return INSTANCE;\n}\n", "java": "public static SshSessionFactory getInstance() {\n    return INSTANCE;\n}\n", "cs_t": [["\u2581public", "\u2581static", "\u2581S", "$$sh", "$$Session", "$$Factory", "\u2581Get", "$$Instance", "$$()", "\u2581{"], ["\u2581return", "\u2581I", "$$N", "$$ST", "$$AN", "$$CE", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581static", "\u2581S", "$$sh", "$$Session", "$$Factory", "\u2581get", "$$Instance", "$$()", "\u2581{"], ["\u2581return", "\u2581I", "$$N", "$$ST", "$$AN", "$$CE", "$$;"], ["\u2581}"]]}, {"cs": "public virtual ListConferenceProvidersResponse ListConferenceProviders(ListConferenceProvidersRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = ListConferenceProvidersRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = ListConferenceProvidersResponseUnmarshaller.Instance;\n    return Invoke<ListConferenceProvidersResponse>(request, options);\n}\n", "java": "public ListConferenceProvidersResult listConferenceProviders(ListConferenceProvidersRequest request) {\n    request = beforeClientExecution(request);\n    return executeListConferenceProviders(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581List", "$$Conference", "$$Provider", "$$sResponse", "\u2581List", "$$Conference", "$$Provider", "$$s(List", "$$Conference", "$$Provider", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581List", "$$Conference", "$$Provider", "$$s", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581List", "$$Conference", "$$Provider", "$$s", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<List", "$$Conference", "$$Provider", "$$sResponse>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581List", "$$Conference", "$$Provider", "$$sResult", "\u2581list", "$$Conference", "$$Provider", "$$s(List", "$$Conference", "$$Provider", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeList", "$$Conference", "$$Provider", "$$s", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual UpdateReceiptRuleResponse UpdateReceiptRule(UpdateReceiptRuleRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = UpdateReceiptRuleRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = UpdateReceiptRuleResponseUnmarshaller.Instance;\n    return Invoke<UpdateReceiptRuleResponse>(request, options);\n}\n", "java": "public UpdateReceiptRuleResult updateReceiptRule(UpdateReceiptRuleRequest request) {\n    request = beforeClientExecution(request);\n    return executeUpdateReceiptRule(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Update", "$$ReceiptRule", "$$Response", "\u2581Update", "$$ReceiptRule", "$$(Update", "$$ReceiptRule", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Update", "$$ReceiptRule", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Update", "$$ReceiptRule", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Update", "$$ReceiptRule", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Update", "$$ReceiptRule", "$$Result", "\u2581update", "$$ReceiptRule", "$$(Update", "$$ReceiptRule", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeUpdate", "$$ReceiptRule", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override string ToString() {\n    StringBuilder r = new StringBuilder();\n    r.Append(\"(\");\n    for (int i = 0; i < subfilters.Length; i++) {\n        if (i > 0) {\n            r.Append(\" OR \");\n        }\n        r.Append(subfilters[i].ToString());\n    }\n    r.Append(\")\");\n    return r.ToString();\n}\n", "java": "public String toString() {\n    final StringBuilder r = new StringBuilder();\n    r.append(\"(\");\n    for (int i = 0; i < subfilters.length; i++) {\n        if (i > 0)r.append(\" OR \");\n        r.append(subfilters[i].toString());\n    }\n    r.append(\")\");\n    return r.toString();\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581string", "\u2581ToString()", "\u2581{"], ["\u2581StringBuilder", "\u2581r", "\u2581=", "\u2581new", "\u2581StringBuilder", "$$()", "$$;"], ["\u2581r", "$$.Append(\"", "$$(\"", "$$)", "$$;"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810;", "\u2581i", "\u2581<", "\u2581subfilter", "$$s.Length;", "\u2581i++)", "\u2581{"], ["\u2581if", "\u2581(i", "\u2581>", "\u25810)", "\u2581{"], ["\u2581r", "$$.Append(\"", "\u2581", "$$OR", "\u2581\")", "$$;"], ["\u2581}"], ["\u2581r", "$$.Append(", "$$sub", "$$filter", "$$s[i]", "$$.ToString()", "$$)", "$$;"], ["\u2581}"], ["\u2581r", "$$.Append(\"", "$$)", "$$\")", "$$;"], ["\u2581return", "\u2581r", "$$.ToString()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581String", "\u2581toString()", "\u2581{"], ["\u2581final", "\u2581StringBuilder", "\u2581r", "\u2581=", "\u2581new", "\u2581StringBuilder", "$$()", "$$;"], ["\u2581r", "$$.append(\"", "$$(\"", "$$)", "$$;"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810;", "\u2581i", "\u2581<", "\u2581subfilter", "$$s.length;", "\u2581i++)", "\u2581{"], ["\u2581if", "\u2581(i", "\u2581>", "\u25810)", "$$r", "$$.append(\"", "\u2581", "$$OR", "\u2581\")", "$$;"], ["\u2581r", "$$.append(", "$$sub", "$$filter", "$$s[i]", "$$.toString()", "$$)", "$$;"], ["\u2581}"], ["\u2581r", "$$.append(\"", "$$)", "$$\")", "$$;"], ["\u2581return", "\u2581r", "$$.toString()", "$$;"], ["\u2581}"]]}, {"cs": "public override void Serialize(ILittleEndianOutput out1) {\n    out1.WriteShort(sid);\n    out1.WriteShort(length);\n    out1.WriteShort(flags);\n}\n", "java": "public void serialize(LittleEndianOutput out) {\n    out.writeShort(sid);\n    out.writeShort(length);\n    out.writeShort(flags);\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581void", "\u2581Serialize(ILittleEndianOutput", "\u2581out1)", "\u2581{"], ["\u2581out1.WriteShort(", "$$sid", "$$)", "$$;"], ["\u2581out1.WriteShort(", "$$length", "$$)", "$$;"], ["\u2581out1.WriteShort(", "$$flag", "$$s)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581serialize(LittleEndianOutput", "\u2581out)", "\u2581{"], ["\u2581out.writeShort(", "$$sid", "$$)", "$$;"], ["\u2581out.writeShort(", "$$length", "$$)", "$$;"], ["\u2581out.writeShort(", "$$flag", "$$s)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual UpdateHealthCheckResponse UpdateHealthCheck(UpdateHealthCheckRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = UpdateHealthCheckRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = UpdateHealthCheckResponseUnmarshaller.Instance;\n    return Invoke<UpdateHealthCheckResponse>(request, options);\n}\n", "java": "public UpdateHealthCheckResult updateHealthCheck(UpdateHealthCheckRequest request) {\n    request = beforeClientExecution(request);\n    return executeUpdateHealthCheck(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Update", "$$HealthCheck", "$$Response", "\u2581Update", "$$HealthCheck", "$$(Update", "$$HealthCheck", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Update", "$$HealthCheck", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Update", "$$HealthCheck", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Update", "$$HealthCheck", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Update", "$$HealthCheck", "$$Result", "\u2581update", "$$HealthCheck", "$$(Update", "$$HealthCheck", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeUpdate", "$$HealthCheck", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public long RamBytesUsed() {\n    long mem = RamUsageEstimator.ShallowSizeOf(this) + RamUsageEstimator.SizeOf(Offsets);\n    if (Offsets != Ordinals) {\n        mem += RamUsageEstimator.SizeOf(Ordinals);\n    }\n    return mem;\n}\n", "java": "public synchronized long ramBytesUsed() {\n    long bytes = 0;\n    for(CachedOrds ords : ordsCache.values()) {\n        bytes += ords.ramBytesUsed();\n    }\n    return bytes;\n}\n", "cs_t": [["\u2581public", "\u2581long", "\u2581Ram", "$$BytesUsed()", "\u2581{"], ["\u2581long", "\u2581m", "$$em", "\u2581=", "\u2581RamUsageEstimator", "$$.", "$$Sh", "$$all", "$$ow", "$$SizeOf", "$$(this", "$$)", "\u2581+", "\u2581RamUsageEstimator", "$$.", "$$Size", "$$Of(", "$$Offset", "$$s)", "$$;"], ["\u2581if", "\u2581(", "$$Offset", "$$s", "\u2581!=", "\u2581", "$$Ordinal", "$$s)", "\u2581{"], ["\u2581m", "$$em", "\u2581+=", "\u2581RamUsageEstimator", "$$.", "$$Size", "$$Of(", "$$Ordinal", "$$s)", "$$;"], ["\u2581}"], ["\u2581return", "\u2581m", "$$em", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581synchronized", "\u2581long", "\u2581ram", "$$BytesUsed()", "\u2581{"], ["\u2581long", "\u2581bytes", "\u2581=", "\u25810;"], ["\u2581for", "$$(", "$$Cached", "$$Ord", "$$s", "\u2581ord", "$$s", "\u2581:", "\u2581ord", "$$s", "$$Cache", "$$.", "$$values", "$$())", "\u2581{"], ["\u2581bytes", "\u2581+=", "\u2581ord", "$$s.", "$$ram", "$$BytesUsed()", "$$;"], ["\u2581}"], ["\u2581return", "\u2581bytes", "$$;"], ["\u2581}"]]}, {"cs": "public virtual UpdateWorkforceResponse UpdateWorkforce(UpdateWorkforceRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = UpdateWorkforceRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = UpdateWorkforceResponseUnmarshaller.Instance;\n    return Invoke<UpdateWorkforceResponse>(request, options);\n}\n", "java": "public UpdateWorkforceResult updateWorkforce(UpdateWorkforceRequest request) {\n    request = beforeClientExecution(request);\n    return executeUpdateWorkforce(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Update", "$$Work", "$$f", "$$or", "$$ce", "$$Response", "\u2581Update", "$$Work", "$$f", "$$or", "$$ce", "$$(Update", "$$Work", "$$f", "$$or", "$$ce", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Update", "$$Work", "$$f", "$$or", "$$ce", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Update", "$$Work", "$$f", "$$or", "$$ce", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Update", "$$Work", "$$f", "$$or", "$$ce", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Update", "$$Work", "$$f", "$$or", "$$ce", "$$Result", "\u2581update", "$$Work", "$$f", "$$or", "$$ce", "$$(Update", "$$Work", "$$f", "$$or", "$$ce", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeUpdate", "$$Work", "$$f", "$$or", "$$ce", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual void SetObjectId(AnyObjectId id) {\n    id.CopyRawTo(IdBuffer, IdOffset);\n}\n", "java": "public void setObjectId(AnyObjectId id) {\n    id.copyRawTo(idBuffer(), idOffset());\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581void", "\u2581Set", "$$Object", "$$Id(", "$$AnyObjectId", "\u2581id)", "\u2581{"], ["\u2581id", "$$.Copy", "$$Raw", "$$To(", "$$Id", "$$Buffer", "$$,", "\u2581", "$$Id", "$$Offset", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581set", "$$Object", "$$Id(", "$$AnyObjectId", "\u2581id)", "\u2581{"], ["\u2581id", "$$.", "$$copy", "$$Raw", "$$To", "$$(id", "$$Buffer", "$$(),", "\u2581id", "$$Offset", "$$())", "$$;"], ["\u2581}"]]}, {"cs": "public virtual void write(byte[] buffer, int byteOffset, int byteCount) {\n    throw new System.NotImplementedException();\n}\n", "java": "public void write(byte[] buffer, int byteOffset, int byteCount) throws IOException {\n    IoBridge.write(fd, buffer, byteOffset, byteCount);\n    if (syncMetadata) {\n        fd.sync();\n    }\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581void", "\u2581write", "$$(byte[]", "\u2581buffer,", "\u2581int", "\u2581byte", "$$Offset,", "\u2581int", "\u2581byte", "$$Count)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581System.NotImplemented", "$$Exception", "$$()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581write", "$$(byte[]", "\u2581buffer,", "\u2581int", "\u2581byte", "$$Offset,", "\u2581int", "\u2581byte", "$$Count)", "\u2581throws", "\u2581IOException", "\u2581{"], ["\u2581I", "$$o", "$$B", "$$ri", "$$d", "$$ge", "$$.write", "$$(f", "$$d", "$$,", "\u2581buffer,", "\u2581byte", "$$Offset,", "\u2581byte", "$$Count)", "$$;"], ["\u2581if", "\u2581(s", "$$yn", "$$c", "$$Metadata", "$$)", "\u2581{"], ["\u2581f", "$$d", "$$.", "$$s", "$$yn", "$$c", "$$()", "$$;"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public virtual GetBlockResponse GetBlock(GetBlockRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = GetBlockRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = GetBlockResponseUnmarshaller.Instance;\n    return Invoke<GetBlockResponse>(request, options);\n}\n", "java": "public GetBlockResult getBlock(GetBlockRequest request) {\n    request = beforeClientExecution(request);\n    return executeGetBlock(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Get", "$$Block", "$$Response", "\u2581Get", "$$Block", "$$(Get", "$$Block", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Get", "$$Block", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Get", "$$Block", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Get", "$$Block", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Get", "$$Block", "$$Result", "\u2581get", "$$Block", "$$(Get", "$$Block", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeGet", "$$Block", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual void ExportDirectory(FilePath dir) {\n    exportBase.AddItem(dir);\n}\n", "java": "public void exportDirectory(File dir) {\n    exportBase.add(dir);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581void", "\u2581Ex", "$$port", "$$Directory", "$$(", "$$File", "$$Path", "\u2581dir", "$$)", "\u2581{"], ["\u2581ex", "$$port", "$$Base", "$$.Add", "$$Item", "$$(d", "$$ir", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581ex", "$$port", "$$Directory", "$$(", "$$File", "\u2581dir", "$$)", "\u2581{"], ["\u2581ex", "$$port", "$$Base", "$$.add(", "$$d", "$$ir", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual CreateReservedInstancesListingResponse CreateReservedInstancesListing(CreateReservedInstancesListingRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = CreateReservedInstancesListingRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = CreateReservedInstancesListingResponseUnmarshaller.Instance;\n    return Invoke<CreateReservedInstancesListingResponse>(request, options);\n}\n", "java": "public CreateReservedInstancesListingResult createReservedInstancesListing(CreateReservedInstancesListingRequest request) {\n    request = beforeClientExecution(request);\n    return executeCreateReservedInstancesListing(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Create", "$$ReservedInstances", "$$List", "$$ing", "$$Response", "\u2581Create", "$$ReservedInstances", "$$List", "$$ing", "$$(Create", "$$ReservedInstances", "$$List", "$$ing", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Create", "$$ReservedInstances", "$$List", "$$ing", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Create", "$$ReservedInstances", "$$List", "$$ing", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Create", "$$ReservedInstances", "$$List", "$$ing", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Create", "$$ReservedInstances", "$$List", "$$ing", "$$Result", "\u2581create", "$$ReservedInstances", "$$List", "$$ing", "$$(Create", "$$ReservedInstances", "$$List", "$$ing", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeCreate", "$$ReservedInstances", "$$List", "$$ing", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override java.nio.ByteBuffer put(byte b) {\n    throw new java.nio.ReadOnlyBufferException();\n}\n", "java": "public ByteBuffer put(byte b) {\n    throw new ReadOnlyBufferException();\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581java.nio.ByteBuffer", "\u2581put", "$$(byte", "\u2581b)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581java.nio.Read", "$$OnlyBuffer", "$$Exception", "$$()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581ByteBuffer", "\u2581put", "$$(byte", "\u2581b)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581Read", "$$OnlyBuffer", "$$Exception", "$$()", "$$;"], ["\u2581}"]]}, {"cs": "public ValueEval Evaluate(ValueEval[] args, int srcCellRow, int srcCellCol) {\n    double result;\n    try {\n        IList temp = new ArrayList();\n        for (int i = 0; i < args.Length; i++) {\n            CollectValues(args[i], temp);\n        }\n        double[] values = new double[temp.Count];\n        for (int i = 0; i < values.Length; i++) {\n            values[i] = (Double)temp[i];\n        }\n        result = Evaluate(values);\n    }\n    catch (EvaluationException e) {\n        return e.GetErrorEval();\n    }\n    return new NumberEval(result);\n}\n", "java": "public ValueEval evaluate(ValueEval[] args, int srcCellRow, int srcCellCol) {\n    double result;\n    try {\n        List<Double> temp = new ArrayList<>();\n        for (ValueEval arg : args) {\n            collectValues(arg, temp);\n        }\n        double[] values = new double[temp.size()];\n        for (int i = 0; i < values.length; i++) {\n            values[i] = temp.get(i).doubleValue();\n        }\n        result = evaluate(values);\n    }\n    catch (EvaluationException e) {\n        return e.getErrorEval();\n    }\n    return new NumberEval(result);\n}\n", "cs_t": [["\u2581public", "\u2581ValueEval", "\u2581Evaluate", "$$(ValueEval", "$$[]", "\u2581args,", "\u2581int", "\u2581srcCell", "$$Row,", "\u2581int", "\u2581srcCell", "$$Col", "$$)", "\u2581{"], ["\u2581double", "\u2581result", "$$;"], ["\u2581try", "\u2581{"], ["\u2581I", "$$List", "\u2581temp", "\u2581=", "\u2581new", "\u2581Array", "$$List", "$$()", "$$;"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810;", "\u2581i", "\u2581<", "\u2581arg", "$$s.Length;", "\u2581i++)", "\u2581{"], ["\u2581", "$$Col", "$$le", "$$ct", "$$Values", "$$(arg", "$$s[i]", "$$,", "\u2581temp", "$$)", "$$;"], ["\u2581}"], ["\u2581double", "$$[]", "\u2581values", "\u2581=", "\u2581new", "\u2581double", "$$[", "$$temp", "$$.Count", "$$]", "$$;"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810;", "\u2581i", "\u2581<", "\u2581values", "$$.Length;", "\u2581i++)", "\u2581{"], ["\u2581values", "$$[i]", "\u2581=", "\u2581(", "$$Double", "$$)", "$$temp", "$$[i]", "$$;"], ["\u2581}"], ["\u2581result", "\u2581=", "\u2581Evaluate", "$$(", "$$values", "$$)", "$$;"], ["\u2581}"], ["\u2581catch", "\u2581(EvaluationException", "\u2581e)", "\u2581{"], ["\u2581return", "\u2581e", "$$.Get", "$$ErrorEval", "$$()", "$$;"], ["\u2581}"], ["\u2581return", "\u2581new", "\u2581NumberEval", "$$(result", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581ValueEval", "\u2581evaluate", "$$(ValueEval", "$$[]", "\u2581args,", "\u2581int", "\u2581srcCell", "$$Row,", "\u2581int", "\u2581srcCell", "$$Col", "$$)", "\u2581{"], ["\u2581double", "\u2581result", "$$;"], ["\u2581try", "\u2581{"], ["\u2581List<", "$$Double", "$$>", "\u2581temp", "\u2581=", "\u2581new", "\u2581ArrayList<", "$$>", "$$()", "$$;"], ["\u2581for", "\u2581(", "$$ValueEval", "\u2581arg", "\u2581:", "\u2581args)", "\u2581{"], ["\u2581col", "$$le", "$$ct", "$$Values", "$$(arg", "$$,", "\u2581temp", "$$)", "$$;"], ["\u2581}"], ["\u2581double", "$$[]", "\u2581values", "\u2581=", "\u2581new", "\u2581double", "$$[", "$$temp", "$$.size()", "$$]", "$$;"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810;", "\u2581i", "\u2581<", "\u2581values", "$$.length;", "\u2581i++)", "\u2581{"], ["\u2581values", "$$[i]", "\u2581=", "\u2581temp", "$$.get", "$$(i", "$$).", "$$d", "$$ouble", "$$Value", "$$()", "$$;"], ["\u2581}"], ["\u2581result", "\u2581=", "\u2581evaluate", "$$(", "$$values", "$$)", "$$;"], ["\u2581}"], ["\u2581catch", "\u2581(EvaluationException", "\u2581e)", "\u2581{"], ["\u2581return", "\u2581e.get", "$$ErrorEval", "$$()", "$$;"], ["\u2581}"], ["\u2581return", "\u2581new", "\u2581NumberEval", "$$(result", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public static CharType GetCharType(char ch) {\n    if (ch >= 0x4E00 && ch <= 0x9FA5)return CharType.HANZI;\n    if ((ch >= 0x0041 && ch <= 0x005A) || (ch >= 0x0061 && ch <= 0x007A))return CharType.LETTER;\n    if (ch >= 0x0030 && ch <= 0x0039)return CharType.DIGIT;\n    if (ch == ' ' || ch == '\\t' || ch == '\\r' || ch == '\\n' || ch == '\u3000')return CharType.SPACE_LIKE;\n    if ((ch >= 0x0021 && ch <= 0x00BB) || (ch >= 0x2010 && ch <= 0x2642)|| (ch >= 0x3001 && ch <= 0x301E))return CharType.DELIMITER;\n    if ((ch >= 0xFF21 && ch <= 0xFF3A) || (ch >= 0xFF41 && ch <= 0xFF5A))return CharType.FULLWIDTH_LETTER;\n    if (ch >= 0xFF10 && ch <= 0xFF19)return CharType.FULLWIDTH_DIGIT;\n    if (ch >= 0xFE30 && ch <= 0xFF63)return CharType.DELIMITER;\n    return CharType.OTHER;\n}\n", "java": "public static int getCharType(char ch) {\n    if (isSurrogate(ch))return CharType.SURROGATE;\n    if (ch >= 0x4E00 && ch <= 0x9FA5)return CharType.HANZI;\n    if ((ch >= 0x0041 && ch <= 0x005A) || (ch >= 0x0061 && ch <= 0x007A))return CharType.LETTER;\n    if (ch >= 0x0030 && ch <= 0x0039)return CharType.DIGIT;\n    if (ch == ' ' || ch == '\\t' || ch == '\\r' || ch == '\\n' || ch == '\u3000')return CharType.SPACE_LIKE;\n    if ((ch >= 0x0021 && ch <= 0x00BB) || (ch >= 0x2010 && ch <= 0x2642)|| (ch >= 0x3001 && ch <= 0x301E))return CharType.DELIMITER;\n    if ((ch >= 0xFF21 && ch <= 0xFF3A) || (ch >= 0xFF41 && ch <= 0xFF5A))return CharType.FULLWIDTH_LETTER;\n    if (ch >= 0xFF10 && ch <= 0xFF19)return CharType.FULLWIDTH_DIGIT;\n    if (ch >= 0xFE30 && ch <= 0xFF63)return CharType.DELIMITER;\n    return CharType.OTHER;\n}\n", "cs_t": [["\u2581public", "\u2581static", "\u2581Char", "$$Type", "\u2581Get", "$$Char", "$$Type", "$$(char", "\u2581ch", "$$)", "\u2581{"], ["\u2581if", "\u2581(", "$$ch", "\u2581>=", "\u25810x", "$$4", "$$E", "$$00", "\u2581&&", "\u2581ch", "\u2581<=", "\u25810x", "$$9", "$$FA", "$$5", "$$)return", "\u2581Char", "$$Type.", "$$H", "$$AN", "$$Z", "$$I", "$$;"], ["\u2581if", "\u2581((", "$$ch", "\u2581>=", "\u25810x00", "$$4", "$$1", "\u2581&&", "\u2581ch", "\u2581<=", "\u25810x00", "$$5", "$$A", "$$)", "\u2581||", "\u2581(", "$$ch", "\u2581>=", "\u25810x00", "$$6", "$$1", "\u2581&&", "\u2581ch", "\u2581<=", "\u25810x00", "$$7", "$$A", "$$))return", "\u2581Char", "$$Type.", "$$LE", "$$T", "$$TER", "$$;"], ["\u2581if", "\u2581(", "$$ch", "\u2581>=", "\u25810x00", "$$3", "$$0", "\u2581&&", "\u2581ch", "\u2581<=", "\u25810x00", "$$3", "$$9", "$$)return", "\u2581Char", "$$Type.", "$$DI", "$$G", "$$IT", "$$;"], ["\u2581if", "\u2581(", "$$ch", "\u2581==", "\u2581'", "\u2581'", "\u2581||", "\u2581ch", "\u2581==", "\u2581'", "$$\\", "$$t", "$$'", "\u2581||", "\u2581ch", "\u2581==", "\u2581'", "$$\\", "$$r", "$$'", "\u2581||", "\u2581ch", "\u2581==", "\u2581'", "$$\\n", "$$'", "\u2581||", "\u2581ch", "\u2581==", "\u2581'", "=", "$$')", "$$return", "\u2581Char", "$$Type.", "$$S", "$$P", "$$A", "$$C", "$$E_", "$$L", "$$I", "$$K", "$$E", "$$;"], ["\u2581if", "\u2581((", "$$ch", "\u2581>=", "\u25810x00", "$$2", "$$1", "\u2581&&", "\u2581ch", "\u2581<=", "\u25810x00", "$$B", "$$B", "$$)", "\u2581||", "\u2581(", "$$ch", "\u2581>=", "\u25810x", "$$20", "$$10", "\u2581&&", "\u2581ch", "\u2581<=", "\u25810x", "$$2", "$$64", "$$2)", "$$|", "$$|", "\u2581(", "$$ch", "\u2581>=", "\u25810x", "$$3", "$$00", "$$1", "\u2581&&", "\u2581ch", "\u2581<=", "\u25810x", "$$3", "$$0", "$$1", "$$E", "$$))return", "\u2581Char", "$$Type.", "$$DE", "$$L", "$$IM", "$$I", "$$TER", "$$;"], ["\u2581if", "\u2581((", "$$ch", "\u2581>=", "\u25810xFF", "$$2", "$$1", "\u2581&&", "\u2581ch", "\u2581<=", "\u25810xFF", "$$3", "$$A", "$$)", "\u2581||", "\u2581(", "$$ch", "\u2581>=", "\u25810xFF", "$$4", "$$1", "\u2581&&", "\u2581ch", "\u2581<=", "\u25810xFF", "$$5", "$$A", "$$))return", "\u2581Char", "$$Type.", "$$F", "$$UL", "$$L", "$$W", "$$ID", "$$TH", "$$_", "$$LE", "$$T", "$$TER", "$$;"], ["\u2581if", "\u2581(", "$$ch", "\u2581>=", "\u25810xFF", "$$10", "\u2581&&", "\u2581ch", "\u2581<=", "\u25810xFF", "$$19", "$$)return", "\u2581Char", "$$Type.", "$$F", "$$UL", "$$L", "$$W", "$$ID", "$$TH", "$$_", "$$DI", "$$G", "$$IT", "$$;"], ["\u2581if", "\u2581(", "$$ch", "\u2581>=", "\u25810x", "$$F", "$$E", "$$3", "$$0", "\u2581&&", "\u2581ch", "\u2581<=", "\u25810xFF", "$$6", "$$3", "$$)return", "\u2581Char", "$$Type.", "$$DE", "$$L", "$$IM", "$$I", "$$TER", "$$;"], ["\u2581return", "\u2581Char", "$$Type.", "$$O", "$$TH", "$$ER", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581static", "\u2581int", "\u2581get", "$$Char", "$$Type", "$$(char", "\u2581ch", "$$)", "\u2581{"], ["\u2581if", "\u2581(is", "$$S", "$$ur", "$$ro", "$$gate", "$$(", "$$ch", "$$))return", "\u2581Char", "$$Type.", "$$S", "$$UR", "$$RO", "$$G", "$$ATE", "$$;"], ["\u2581if", "\u2581(", "$$ch", "\u2581>=", "\u25810x", "$$4", "$$E", "$$00", "\u2581&&", "\u2581ch", "\u2581<=", "\u25810x", "$$9", "$$FA", "$$5", "$$)return", "\u2581Char", "$$Type.", "$$H", "$$AN", "$$Z", "$$I", "$$;"], ["\u2581if", "\u2581((", "$$ch", "\u2581>=", "\u25810x00", "$$4", "$$1", "\u2581&&", "\u2581ch", "\u2581<=", "\u25810x00", "$$5", "$$A", "$$)", "\u2581||", "\u2581(", "$$ch", "\u2581>=", "\u25810x00", "$$6", "$$1", "\u2581&&", "\u2581ch", "\u2581<=", "\u25810x00", "$$7", "$$A", "$$))return", "\u2581Char", "$$Type.", "$$LE", "$$T", "$$TER", "$$;"], ["\u2581if", "\u2581(", "$$ch", "\u2581>=", "\u25810x00", "$$3", "$$0", "\u2581&&", "\u2581ch", "\u2581<=", "\u25810x00", "$$3", "$$9", "$$)return", "\u2581Char", "$$Type.", "$$DI", "$$G", "$$IT", "$$;"], ["\u2581if", "\u2581(", "$$ch", "\u2581==", "\u2581'", "\u2581'", "\u2581||", "\u2581ch", "\u2581==", "\u2581'", "$$\\", "$$t", "$$'", "\u2581||", "\u2581ch", "\u2581==", "\u2581'", "$$\\", "$$r", "$$'", "\u2581||", "\u2581ch", "\u2581==", "\u2581'", "$$\\n", "$$'", "\u2581||", "\u2581ch", "\u2581==", "\u2581'", "=", "$$')", "$$return", "\u2581Char", "$$Type.", "$$S", "$$P", "$$A", "$$C", "$$E_", "$$L", "$$I", "$$K", "$$E", "$$;"], ["\u2581if", "\u2581((", "$$ch", "\u2581>=", "\u25810x00", "$$2", "$$1", "\u2581&&", "\u2581ch", "\u2581<=", "\u25810x00", "$$B", "$$B", "$$)", "\u2581||", "\u2581(", "$$ch", "\u2581>=", "\u25810x", "$$20", "$$10", "\u2581&&", "\u2581ch", "\u2581<=", "\u25810x", "$$2", "$$64", "$$2)", "$$|", "$$|", "\u2581(", "$$ch", "\u2581>=", "\u25810x", "$$3", "$$00", "$$1", "\u2581&&", "\u2581ch", "\u2581<=", "\u25810x", "$$3", "$$0", "$$1", "$$E", "$$))return", "\u2581Char", "$$Type.", "$$DE", "$$L", "$$IM", "$$I", "$$TER", "$$;"], ["\u2581if", "\u2581((", "$$ch", "\u2581>=", "\u25810xFF", "$$2", "$$1", "\u2581&&", "\u2581ch", "\u2581<=", "\u25810xFF", "$$3", "$$A", "$$)", "\u2581||", "\u2581(", "$$ch", "\u2581>=", "\u25810xFF", "$$4", "$$1", "\u2581&&", "\u2581ch", "\u2581<=", "\u25810xFF", "$$5", "$$A", "$$))return", "\u2581Char", "$$Type.", "$$F", "$$UL", "$$L", "$$W", "$$ID", "$$TH", "$$_", "$$LE", "$$T", "$$TER", "$$;"], ["\u2581if", "\u2581(", "$$ch", "\u2581>=", "\u25810xFF", "$$10", "\u2581&&", "\u2581ch", "\u2581<=", "\u25810xFF", "$$19", "$$)return", "\u2581Char", "$$Type.", "$$F", "$$UL", "$$L", "$$W", "$$ID", "$$TH", "$$_", "$$DI", "$$G", "$$IT", "$$;"], ["\u2581if", "\u2581(", "$$ch", "\u2581>=", "\u25810x", "$$F", "$$E", "$$3", "$$0", "\u2581&&", "\u2581ch", "\u2581<=", "\u25810xFF", "$$6", "$$3", "$$)return", "\u2581Char", "$$Type.", "$$DE", "$$L", "$$IM", "$$I", "$$TER", "$$;"], ["\u2581return", "\u2581Char", "$$Type.", "$$O", "$$TH", "$$ER", "$$;"], ["\u2581}"]]}, {"cs": "public StopJumpserverRequest(): base(\"HPC\", \"2016-06-03\", \"StopJumpserver\") {\n    Method = MethodType.POST;\n}\n", "java": "public StopJumpserverRequest() {\n    super(\"HPC\", \"2016-06-03\", \"StopJumpserver\", \"hpc\");\n    setMethod(MethodType.POST);\n}\n", "cs_t": [["\u2581public", "\u2581Stop", "$$J", "$$ump", "$$ser", "$$ver", "$$Request():", "\u2581base(\"", "$$H", "$$P", "$$C", "$$\",", "\u2581\"2016-0", "$$6-0", "$$3", "$$\",", "\u2581\"", "$$Stop", "$$J", "$$ump", "$$ser", "$$ver", "$$\")", "\u2581{"], ["\u2581Method", "\u2581=", "\u2581MethodType.POST", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Stop", "$$J", "$$ump", "$$ser", "$$ver", "$$Request()", "\u2581{"], ["\u2581super(\"", "$$H", "$$P", "$$C", "$$\",", "\u2581\"2016-0", "$$6-0", "$$3", "$$\",", "\u2581\"", "$$Stop", "$$J", "$$ump", "$$ser", "$$ver", "$$\",", "\u2581\"", "$$h", "$$p", "$$c", "$$\")", "$$;"], ["\u2581setMethod(Method", "$$Type.POST", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual CreateDirectoryConfigResponse CreateDirectoryConfig(CreateDirectoryConfigRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = CreateDirectoryConfigRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = CreateDirectoryConfigResponseUnmarshaller.Instance;\n    return Invoke<CreateDirectoryConfigResponse>(request, options);\n}\n", "java": "public CreateDirectoryConfigResult createDirectoryConfig(CreateDirectoryConfigRequest request) {\n    request = beforeClientExecution(request);\n    return executeCreateDirectoryConfig(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Create", "$$Directory", "$$Config", "$$Response", "\u2581Create", "$$Directory", "$$Config", "$$(Create", "$$Directory", "$$Config", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Create", "$$Directory", "$$Config", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Create", "$$Directory", "$$Config", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Create", "$$Directory", "$$Config", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Create", "$$Directory", "$$Config", "$$Result", "\u2581create", "$$Directory", "$$Config", "$$(Create", "$$Directory", "$$Config", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeCreate", "$$Directory", "$$Config", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DescribeExportTasksResponse DescribeExportTasks() {\n    return DescribeExportTasks(new DescribeExportTasksRequest());\n}\n", "java": "public DescribeExportTasksResult describeExportTasks() {\n    return describeExportTasks(new DescribeExportTasksRequest());\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Describe", "$$Export", "$$Task", "$$sResponse", "\u2581Describe", "$$Export", "$$Task", "$$s()", "\u2581{"], ["\u2581return", "\u2581Describe", "$$Export", "$$Task", "$$s(new", "\u2581Describe", "$$Export", "$$Task", "$$sRequest", "$$())", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Describe", "$$Export", "$$Task", "$$sResult", "\u2581describe", "$$Export", "$$Task", "$$s()", "\u2581{"], ["\u2581return", "\u2581describe", "$$Export", "$$Task", "$$s(new", "\u2581Describe", "$$Export", "$$Task", "$$sRequest", "$$())", "$$;"], ["\u2581}"]]}, {"cs": "public virtual ExportClientVpnClientCertificateRevocationListResponse ExportClientVpnClientCertificateRevocationList(ExportClientVpnClientCertificateRevocationListRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = ExportClientVpnClientCertificateRevocationListRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = ExportClientVpnClientCertificateRevocationListResponseUnmarshaller.Instance;\n    return Invoke<ExportClientVpnClientCertificateRevocationListResponse>(request, options);\n}\n", "java": "public ExportClientVpnClientCertificateRevocationListResult exportClientVpnClientCertificateRevocationList(ExportClientVpnClientCertificateRevocationListRequest request) {\n    request = beforeClientExecution(request);\n    return executeExportClientVpnClientCertificateRevocationList(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Ex", "$$port", "$$ClientVpn", "$$ClientCertificate", "$$Rev", "$$oc", "$$ation", "$$List", "$$Response", "\u2581Ex", "$$port", "$$ClientVpn", "$$ClientCertificate", "$$Rev", "$$oc", "$$ation", "$$List", "$$(", "$$Export", "$$ClientVpn", "$$ClientCertificate", "$$Rev", "$$oc", "$$ation", "$$List", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Ex", "$$port", "$$ClientVpn", "$$ClientCertificate", "$$Rev", "$$oc", "$$ation", "$$List", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Ex", "$$port", "$$ClientVpn", "$$ClientCertificate", "$$Rev", "$$oc", "$$ation", "$$List", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<", "$$Export", "$$ClientVpn", "$$ClientCertificate", "$$Rev", "$$oc", "$$ation", "$$List", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Ex", "$$port", "$$ClientVpn", "$$ClientCertificate", "$$Rev", "$$oc", "$$ation", "$$List", "$$Result", "\u2581ex", "$$port", "$$ClientVpn", "$$ClientCertificate", "$$Rev", "$$oc", "$$ation", "$$List", "$$(", "$$Export", "$$ClientVpn", "$$ClientCertificate", "$$Rev", "$$oc", "$$ation", "$$List", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581execute", "$$Export", "$$ClientVpn", "$$ClientCertificate", "$$Rev", "$$oc", "$$ation", "$$List", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual CompleteMultipartUploadResponse CompleteMultipartUpload(CompleteMultipartUploadRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = CompleteMultipartUploadRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = CompleteMultipartUploadResponseUnmarshaller.Instance;\n    return Invoke<CompleteMultipartUploadResponse>(request, options);\n}\n", "java": "public CompleteMultipartUploadResult completeMultipartUpload(CompleteMultipartUploadRequest request) {\n    request = beforeClientExecution(request);\n    return executeCompleteMultipartUpload(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Comp", "$$lete", "$$Multi", "$$p", "$$art", "$$Upload", "$$Response", "\u2581Comp", "$$lete", "$$Multi", "$$p", "$$art", "$$Up", "$$lo", "$$ad(", "$$Comp", "$$lete", "$$Multi", "$$p", "$$art", "$$Upload", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Comp", "$$lete", "$$Multi", "$$p", "$$art", "$$Upload", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Comp", "$$lete", "$$Multi", "$$p", "$$art", "$$Upload", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<", "$$Comp", "$$lete", "$$Multi", "$$p", "$$art", "$$Upload", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Comp", "$$lete", "$$Multi", "$$p", "$$art", "$$Upload", "$$Result", "\u2581comp", "$$lete", "$$Multi", "$$p", "$$art", "$$Up", "$$lo", "$$ad(", "$$Comp", "$$lete", "$$Multi", "$$p", "$$art", "$$Upload", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581execute", "$$Comp", "$$lete", "$$Multi", "$$p", "$$art", "$$Upload", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public long RamBytesUsed() {\n    long sizeInBytes = 0;\n    sizeInBytes += RamUsageEstimator.SizeOf(minValues);\n    sizeInBytes += RamUsageEstimator.SizeOf(averages);\n    foreach (PackedInt32s.Reader reader in subReaders) {\n        sizeInBytes += reader.RamBytesUsed();\n    }\n    return sizeInBytes;\n}\n", "java": "public long ramBytesUsed() {\n    long sizeInBytes = 0;\n    sizeInBytes += RamUsageEstimator.sizeOf(minValues);\n    sizeInBytes += RamUsageEstimator.sizeOf(averages);\n    for(PackedInts.Reader reader: subReaders) {\n        sizeInBytes += reader.ramBytesUsed();\n    }\n    return sizeInBytes;\n}\n", "cs_t": [["\u2581public", "\u2581long", "\u2581Ram", "$$BytesUsed()", "\u2581{"], ["\u2581long", "\u2581sizeInBytes", "\u2581=", "\u25810;"], ["\u2581sizeInBytes", "\u2581+=", "\u2581RamUsageEstimator", "$$.", "$$Size", "$$Of(", "$$min", "$$Values", "$$)", "$$;"], ["\u2581sizeInBytes", "\u2581+=", "\u2581RamUsageEstimator", "$$.", "$$Size", "$$Of(", "$$a", "$$ver", "$$ages", "$$)", "$$;"], ["\u2581foreach", "\u2581(", "$$Pack", "$$ed", "$$Int32", "$$s.", "$$Reader", "\u2581read", "$$er", "\u2581in", "\u2581sub", "$$Reader", "$$s)", "\u2581{"], ["\u2581sizeInBytes", "\u2581+=", "\u2581read", "$$er.", "$$R", "$$am", "$$BytesUsed()", "$$;"], ["\u2581}"], ["\u2581return", "\u2581sizeInBytes", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581long", "\u2581ram", "$$BytesUsed()", "\u2581{"], ["\u2581long", "\u2581sizeInBytes", "\u2581=", "\u25810;"], ["\u2581sizeInBytes", "\u2581+=", "\u2581RamUsageEstimator", "$$.size", "$$Of(", "$$min", "$$Values", "$$)", "$$;"], ["\u2581sizeInBytes", "\u2581+=", "\u2581RamUsageEstimator", "$$.size", "$$Of(", "$$a", "$$ver", "$$ages", "$$)", "$$;"], ["\u2581for", "$$(", "$$Pack", "$$ed", "$$Int", "$$s.", "$$Reader", "\u2581read", "$$er", "$$:", "\u2581sub", "$$Reader", "$$s)", "\u2581{"], ["\u2581sizeInBytes", "\u2581+=", "\u2581read", "$$er.", "$$ram", "$$BytesUsed()", "$$;"], ["\u2581}"], ["\u2581return", "\u2581sizeInBytes", "$$;"], ["\u2581}"]]}, {"cs": "public static void fill(object[] array, object value) {\n    {\n        for (int i = 0; i < array.Length; i++) {\n            array[i] = value;\n        }\n    }\n}\n", "java": "public static void fill(Object[] array, Object value) {\n    for (int i = 0; i < array.length; i++) {\n        array[i] = value;\n    }\n}\n", "cs_t": [["\u2581public", "\u2581static", "\u2581void", "\u2581fill", "$$(object", "$$[]", "\u2581array,", "\u2581object", "\u2581value)", "\u2581{"], ["\u2581{"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810;", "\u2581i", "\u2581<", "\u2581array", "$$.Length;", "\u2581i++)", "\u2581{"], ["\u2581array", "$$[i]", "\u2581=", "\u2581value", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581static", "\u2581void", "\u2581fill", "$$(Object", "$$[]", "\u2581array,", "\u2581Object", "\u2581value)", "\u2581{"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810;", "\u2581i", "\u2581<", "\u2581array", "$$.length;", "\u2581i++)", "\u2581{"], ["\u2581array", "$$[i]", "\u2581=", "\u2581value", "$$;"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public override java.nio.ByteBuffer putDouble(int index, double value) {\n    throw new System.NotImplementedException();\n}\n", "java": "public ByteBuffer putDouble(int index, double value) {\n    throw new ReadOnlyBufferException();\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581java.nio.ByteBuffer", "\u2581put", "$$Double", "$$(int", "\u2581index,", "\u2581double", "\u2581value)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581System.NotImplemented", "$$Exception", "$$()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581ByteBuffer", "\u2581put", "$$Double", "$$(int", "\u2581index,", "\u2581double", "\u2581value)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581Read", "$$OnlyBuffer", "$$Exception", "$$()", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DescribeAdjustmentTypesResponse DescribeAdjustmentTypes() {\n    return DescribeAdjustmentTypes(new DescribeAdjustmentTypesRequest());\n}\n", "java": "public DescribeAdjustmentTypesResult describeAdjustmentTypes() {\n    return describeAdjustmentTypes(new DescribeAdjustmentTypesRequest());\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Describe", "$$Ad", "$$j", "$$ust", "$$ment", "$$Types", "$$Response", "\u2581Describe", "$$Ad", "$$j", "$$ust", "$$ment", "$$Types", "$$()", "\u2581{"], ["\u2581return", "\u2581Describe", "$$Ad", "$$j", "$$ust", "$$ment", "$$Types", "$$(new", "\u2581Describe", "$$Ad", "$$j", "$$ust", "$$ment", "$$Types", "$$Request", "$$())", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Describe", "$$Ad", "$$j", "$$ust", "$$ment", "$$Types", "$$Result", "\u2581describe", "$$Ad", "$$j", "$$ust", "$$ment", "$$Types", "$$()", "\u2581{"], ["\u2581return", "\u2581describe", "$$Ad", "$$j", "$$ust", "$$ment", "$$Types", "$$(new", "\u2581Describe", "$$Ad", "$$j", "$$ust", "$$ment", "$$Types", "$$Request", "$$())", "$$;"], ["\u2581}"]]}, {"cs": "public virtual PersonIdent GetSourceCommitter() {\n    RevCommit c = GetSourceCommit();\n    return c != null ? c.GetCommitterIdent() : null;\n}\n", "java": "public PersonIdent getSourceCommitter() {\n    RevCommit c = getSourceCommit();\n    return c != null ? c.getCommitterIdent() : null;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581P", "$$er", "$$son", "$$Ident", "\u2581Get", "$$Source", "$$Commit", "$$ter", "$$()", "\u2581{"], ["\u2581Rev", "$$Commit", "\u2581c", "\u2581=", "\u2581Get", "$$Source", "$$Commit", "$$()", "$$;"], ["\u2581return", "\u2581c", "\u2581!=", "\u2581null", "\u2581?", "\u2581c", "$$.Get", "$$Commit", "$$ter", "$$Ident", "$$()", "\u2581:", "\u2581null", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581P", "$$er", "$$son", "$$Ident", "\u2581get", "$$Source", "$$Commit", "$$ter", "$$()", "\u2581{"], ["\u2581Rev", "$$Commit", "\u2581c", "\u2581=", "\u2581get", "$$Source", "$$Commit", "$$()", "$$;"], ["\u2581return", "\u2581c", "\u2581!=", "\u2581null", "\u2581?", "\u2581c", "$$.get", "$$Commit", "$$ter", "$$Ident", "$$()", "\u2581:", "\u2581null", "$$;"], ["\u2581}"]]}, {"cs": "public override object[] toArray() {\n    int index = 0;\n    object[] contents = new object[_size];\n    java.util.LinkedList.Link<E> link = voidLink.next;\n    while (link != voidLink) {\n        contents[index++] = link.data;\n        link = link.next;\n    }\n    return contents;\n}\n", "java": "public Object[] toArray() {\n    int index = 0;\n    Object[] contents = new Object[size];\n    Link<E> link = voidLink.next;\n    while (link != voidLink) {\n        contents[index++] = link.data;\n        link = link.next;\n    }\n    return contents;\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581object", "$$[]", "\u2581to", "$$Array", "$$()", "\u2581{"], ["\u2581int", "\u2581index", "\u2581=", "\u25810;"], ["\u2581object", "$$[]", "\u2581con", "$$tent", "$$s", "\u2581=", "\u2581new", "\u2581object", "$$[", "$$_", "$$size", "$$]", "$$;"], ["\u2581java.util.", "$$Link", "$$ed", "$$List", "$$.", "$$Link", "$$<E>", "\u2581link", "\u2581=", "\u2581void", "$$Link", "$$.next", "$$;"], ["\u2581while", "\u2581(", "$$link", "\u2581!=", "\u2581void", "$$Link", "$$)", "\u2581{"], ["\u2581con", "$$tent", "$$s[index", "$$++]", "\u2581=", "\u2581link", "$$.d", "$$ata", "$$;"], ["\u2581link", "\u2581=", "\u2581link", "$$.next", "$$;"], ["\u2581}"], ["\u2581return", "\u2581con", "$$tent", "$$s;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Object", "$$[]", "\u2581to", "$$Array", "$$()", "\u2581{"], ["\u2581int", "\u2581index", "\u2581=", "\u25810;"], ["\u2581Object", "$$[]", "\u2581con", "$$tent", "$$s", "\u2581=", "\u2581new", "\u2581Object", "$$[", "$$size", "$$]", "$$;"], ["\u2581L", "$$ink", "$$<E>", "\u2581link", "\u2581=", "\u2581void", "$$Link", "$$.next", "$$;"], ["\u2581while", "\u2581(", "$$link", "\u2581!=", "\u2581void", "$$Link", "$$)", "\u2581{"], ["\u2581con", "$$tent", "$$s[index", "$$++]", "\u2581=", "\u2581link", "$$.d", "$$ata", "$$;"], ["\u2581link", "\u2581=", "\u2581link", "$$.next", "$$;"], ["\u2581}"], ["\u2581return", "\u2581con", "$$tent", "$$s;"], ["\u2581}"]]}, {"cs": "public override string ToString() {\n    return \"Provider{\" + Sharpen.Util.IntToHexString(Sharpen.Util.IdentityHashCode(this)) + \" \" + info.name + \"}\";\n}\n", "java": "public String toString() {\n    return name + \" version \" + version;\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581string", "\u2581ToString()", "\u2581{"], ["\u2581return", "\u2581\"", "$$Provider", "$${", "$$\"", "\u2581+", "\u2581Sharpen.", "$$Util.", "$$Int", "$$ToHex", "$$String(", "$$Sh", "$$arpen.", "$$Util.", "$$Identity", "$$Hash", "$$Code", "$$(this", "$$))", "\u2581+", "\u2581\"", "\u2581\"", "\u2581+", "\u2581info", "$$.", "$$name", "\u2581+", "\u2581\"", "$$}", "$$\"", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581String", "\u2581toString()", "\u2581{"], ["\u2581return", "\u2581name", "\u2581+", "\u2581\"", "\u2581version", "\u2581\"", "\u2581+", "\u2581version", "$$;"], ["\u2581}"]]}, {"cs": "public virtual NGit.Api.PushCommand SetRefSpecs(params RefSpec[] specs) {\n    CheckCallable();\n    this.refSpecs.Clear();\n    Sharpen.Collections.AddAll(refSpecs, specs);\n    return this;\n}\n", "java": "public PushCommand setRefSpecs(RefSpec... specs) {\n    checkCallable();\n    this.refSpecs.clear();\n    Collections.addAll(refSpecs, specs);\n    return this;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581NGit.Api.", "$$Push", "$$Command", "\u2581Set", "$$Ref", "$$Spec", "$$s(", "$$param", "$$s", "\u2581Ref", "$$Spec", "$$[]", "\u2581spec", "$$s)", "\u2581{"], ["\u2581Check", "$$Callable", "$$()", "$$;"], ["\u2581this.", "$$ref", "$$Spec", "$$s.", "$$C", "$$lear()", "$$;"], ["\u2581Sharpen.", "$$Collection", "$$s", "$$.Add", "$$All", "$$(re", "$$f", "$$Spec", "$$s,", "\u2581spec", "$$s)", "$$;"], ["\u2581return", "\u2581this", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581P", "$$ush", "$$Command", "\u2581set", "$$Ref", "$$Spec", "$$s(", "$$Ref", "$$Spec", "$$..", "$$.", "\u2581spec", "$$s)", "\u2581{"], ["\u2581check", "$$Callable", "$$()", "$$;"], ["\u2581this.", "$$ref", "$$Spec", "$$s.", "$$c", "$$lear()", "$$;"], ["\u2581", "$$Collections.", "$$add", "$$All", "$$(re", "$$f", "$$Spec", "$$s,", "\u2581spec", "$$s)", "$$;"], ["\u2581return", "\u2581this", "$$;"], ["\u2581}"]]}, {"cs": "public override string ToString(string field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.Append(\"spanFirst(\");\n    buffer.Append(m_match.ToString(field));\n    buffer.Append(\", \");\n    buffer.Append(m_end);\n    buffer.Append(\")\");\n    buffer.Append(ToStringUtils.Boost(Boost));\n    return buffer.ToString();\n}\n", "java": "public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"spanFirst(\");\n    buffer.append(match.toString(field));\n    buffer.append(\", \");\n    buffer.append(end);\n    buffer.append(\")\");\n    return buffer.toString();\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581string", "\u2581To", "$$String", "$$(string", "\u2581field)", "\u2581{"], ["\u2581StringBuilder", "\u2581buffer", "\u2581=", "\u2581new", "\u2581StringBuilder", "$$()", "$$;"], ["\u2581buffer.Append(\"", "$$sp", "$$an", "$$First", "$$(\"", "$$)", "$$;"], ["\u2581buffer.Append(", "$$m_", "$$match", "$$.To", "$$String(", "$$field", "$$))", "$$;"], ["\u2581buffer.Append(\"", "$$,", "\u2581\")", "$$;"], ["\u2581buffer.Append(", "$$m_", "$$end", "$$)", "$$;"], ["\u2581buffer.Append(\"", "$$)", "$$\")", "$$;"], ["\u2581buffer.Append(", "$$To", "$$String", "$$Utils.", "$$Boost", "$$(", "$$Boost", "$$))", "$$;"], ["\u2581return", "\u2581buffer", "$$.ToString()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581String", "\u2581to", "$$String(String", "\u2581field)", "\u2581{"], ["\u2581StringBuilder", "\u2581buffer", "\u2581=", "\u2581new", "\u2581StringBuilder", "$$()", "$$;"], ["\u2581buffer.append(\"", "$$sp", "$$an", "$$First", "$$(\"", "$$)", "$$;"], ["\u2581buffer.append(", "$$match", "$$.to", "$$String(", "$$field", "$$))", "$$;"], ["\u2581buffer.append(\"", "$$,", "\u2581\")", "$$;"], ["\u2581buffer.append(", "$$end", "$$)", "$$;"], ["\u2581buffer.append(\"", "$$)", "$$\")", "$$;"], ["\u2581return", "\u2581buffer", "$$.toString()", "$$;"], ["\u2581}"]]}, {"cs": "public virtual X509Certificate[] GetAcceptedIssuers() {\n    return null;\n}\n", "java": "public X509Certificate[] getAcceptedIssuers() {\n    return null;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581", "$$X", "$$5", "$$0", "$$9", "$$Certificate", "$$[]", "\u2581Get", "$$Ac", "$$ce", "$$p", "$$ted", "$$Is", "$$s", "$$u", "$$er", "$$s()", "\u2581{"], ["\u2581return", "\u2581null", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581", "$$X", "$$5", "$$0", "$$9", "$$Certificate", "$$[]", "\u2581get", "$$Ac", "$$ce", "$$p", "$$ted", "$$Is", "$$s", "$$u", "$$er", "$$s()", "\u2581{"], ["\u2581return", "\u2581null", "$$;"], ["\u2581}"]]}, {"cs": "public override int Read() {\n    if (pos < size) {\n        return s[pos++];\n    }\n    else {\n        s = null;\n        return -1;\n    }\n}\n", "java": "public int read() {\n    if (pos < size) {\n        return s.charAt(pos++);\n    }\n    else {\n        s = null;\n        return -1;\n    }\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581int", "\u2581Read", "$$()", "\u2581{"], ["\u2581if", "\u2581(pos", "\u2581<", "\u2581size)", "\u2581{"], ["\u2581return", "\u2581s", "$$[", "$$pos", "$$++]", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581s", "\u2581=", "\u2581null", "$$;"], ["\u2581return", "\u2581-1", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581int", "\u2581read", "$$()", "\u2581{"], ["\u2581if", "\u2581(pos", "\u2581<", "\u2581size)", "\u2581{"], ["\u2581return", "\u2581s", "$$.char", "$$At(", "$$pos", "$$++)", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581s", "\u2581=", "\u2581null", "$$;"], ["\u2581return", "\u2581-1", "$$;"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public virtual PersonIdent GetRefLogIdent() {\n    return destination.GetRefLogIdent();\n}\n", "java": "public PersonIdent getRefLogIdent() {\n    return destination.getRefLogIdent();\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581P", "$$er", "$$son", "$$Ident", "\u2581Get", "$$Ref", "$$Log", "$$Ident", "$$()", "\u2581{"], ["\u2581return", "\u2581d", "$$estination", "$$.Get", "$$Ref", "$$Log", "$$Ident", "$$()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581P", "$$er", "$$son", "$$Ident", "\u2581get", "$$Ref", "$$Log", "$$Ident", "$$()", "\u2581{"], ["\u2581return", "\u2581d", "$$estination", "$$.get", "$$Ref", "$$Log", "$$Ident", "$$()", "$$;"], ["\u2581}"]]}, {"cs": "public override int size() {\n    return _size;\n}\n", "java": "@Override public int size() {\n    return size;\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581int", "\u2581size()", "\u2581{"], ["\u2581return", "\u2581_", "$$size", "$$;"], ["\u2581}"]], "java_t": [["\u2581@Override", "\u2581public", "\u2581int", "\u2581size()", "\u2581{"], ["\u2581return", "\u2581size", "$$;"], ["\u2581}"]]}, {"cs": "public virtual GetRequestValidatorsResponse GetRequestValidators(GetRequestValidatorsRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = GetRequestValidatorsRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = GetRequestValidatorsResponseUnmarshaller.Instance;\n    return Invoke<GetRequestValidatorsResponse>(request, options);\n}\n", "java": "public GetRequestValidatorsResult getRequestValidators(GetRequestValidatorsRequest request) {\n    request = beforeClientExecution(request);\n    return executeGetRequestValidators(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Get", "$$Request", "$$Valid", "$$ator", "$$sResponse", "\u2581Get", "$$Request", "$$Valid", "$$ator", "$$s(Get", "$$Request", "$$Valid", "$$ator", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Get", "$$Request", "$$Valid", "$$ator", "$$s", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Get", "$$Request", "$$Valid", "$$ator", "$$s", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Get", "$$Request", "$$Valid", "$$ator", "$$sResponse>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Get", "$$Request", "$$Valid", "$$ator", "$$sResult", "\u2581get", "$$Request", "$$Valid", "$$ator", "$$s(Get", "$$Request", "$$Valid", "$$ator", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeGet", "$$Request", "$$Valid", "$$ator", "$$s", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override string ToString() {\n    return \"I(F)\";\n}\n", "java": "public String toString() {\n    return \"I(F)\";\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581string", "\u2581ToString()", "\u2581{"], ["\u2581return", "\u2581\"", "$$I", "$$(", "$$F", "$$)", "$$\"", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581String", "\u2581toString()", "\u2581{"], ["\u2581return", "\u2581\"", "$$I", "$$(", "$$F", "$$)", "$$\"", "$$;"], ["\u2581}"]]}, {"cs": "public override bool Equals(object obj) {\n    if (this == obj)return true;\n    if (obj == null)return false;\n    if (GetType() != obj.GetType())return false;\n    SegToken other = (SegToken)obj;\n    if (!Arrays.Equals(CharArray, other.CharArray))return false;\n    if (EndOffset != other.EndOffset)return false;\n    if (Index != other.Index)return false;\n    if (StartOffset != other.StartOffset)return false;\n    if (Weight != other.Weight)return false;\n    if (WordType != other.WordType)return false;\n    return true;\n}\n", "java": "public boolean equals(Object obj) {\n    if (this == obj)return true;\n    if (obj == null)return false;\n    if (getClass() != obj.getClass())return false;\n    SegToken other = (SegToken) obj;\n    if (!Arrays.equals(charArray, other.charArray))return false;\n    if (endOffset != other.endOffset)return false;\n    if (index != other.index)return false;\n    if (startOffset != other.startOffset)return false;\n    if (weight != other.weight)return false;\n    if (wordType != other.wordType)return false;\n    return true;\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581bool", "\u2581Equals(object", "\u2581obj)", "\u2581{"], ["\u2581if", "\u2581(this", "\u2581==", "\u2581obj)", "$$return", "\u2581true", "$$;"], ["\u2581if", "\u2581(obj", "\u2581==", "\u2581null)", "$$return", "\u2581false", "$$;"], ["\u2581if", "\u2581(", "$$Get", "$$Type()", "\u2581!=", "\u2581obj", "$$.Get", "$$Type", "$$())", "$$return", "\u2581false", "$$;"], ["\u2581Se", "$$g", "$$Token", "\u2581other", "\u2581=", "\u2581(", "$$Se", "$$g", "$$Token", "$$)", "$$obj", "$$;"], ["\u2581if", "\u2581(!", "$$Array", "$$s.", "$$E", "$$quals(", "$$CharArray", "$$,", "\u2581other.", "$$CharArray", "$$))return", "\u2581false", "$$;"], ["\u2581if", "\u2581(", "$$End", "$$Offset", "\u2581!=", "\u2581other.", "$$End", "$$Offset", "$$)return", "\u2581false", "$$;"], ["\u2581if", "\u2581(", "$$Index", "\u2581!=", "\u2581other.", "$$Index)", "$$return", "\u2581false", "$$;"], ["\u2581if", "\u2581(", "$$Start", "$$Offset", "\u2581!=", "\u2581other.", "$$Start", "$$Offset", "$$)return", "\u2581false", "$$;"], ["\u2581if", "\u2581(", "$$Weight", "\u2581!=", "\u2581other.", "$$Weight", "$$)return", "\u2581false", "$$;"], ["\u2581if", "\u2581(", "$$Word", "$$Type", "\u2581!=", "\u2581other.", "$$Word", "$$Type", "$$)return", "\u2581false", "$$;"], ["\u2581return", "\u2581true", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581boolean", "\u2581equals(Object", "\u2581obj)", "\u2581{"], ["\u2581if", "\u2581(this", "\u2581==", "\u2581obj)", "$$return", "\u2581true", "$$;"], ["\u2581if", "\u2581(obj", "\u2581==", "\u2581null)", "$$return", "\u2581false", "$$;"], ["\u2581if", "\u2581(get", "$$Class", "$$()", "\u2581!=", "\u2581obj", "$$.get", "$$Class", "$$())", "$$return", "\u2581false", "$$;"], ["\u2581Se", "$$g", "$$Token", "\u2581other", "\u2581=", "\u2581(", "$$Se", "$$g", "$$Token", "$$)", "\u2581obj", "$$;"], ["\u2581if", "\u2581(!", "$$Array", "$$s.", "$$equals(", "$$char", "$$Array", "$$,", "\u2581other.", "$$char", "$$Array", "$$))return", "\u2581false", "$$;"], ["\u2581if", "\u2581(", "$$end", "$$Offset", "\u2581!=", "\u2581other.", "$$end", "$$Offset", "$$)return", "\u2581false", "$$;"], ["\u2581if", "\u2581(index", "\u2581!=", "\u2581other.", "$$index", "$$)return", "\u2581false", "$$;"], ["\u2581if", "\u2581(start", "$$Offset", "\u2581!=", "\u2581other.", "$$start", "$$Offset", "$$)return", "\u2581false", "$$;"], ["\u2581if", "\u2581(", "$$w", "$$eight", "\u2581!=", "\u2581other.", "$$w", "$$eight", "$$)return", "\u2581false", "$$;"], ["\u2581if", "\u2581(", "$$word", "$$Type", "\u2581!=", "\u2581other.", "$$word", "$$Type", "$$)return", "\u2581false", "$$;"], ["\u2581return", "\u2581true", "$$;"], ["\u2581}"]]}, {"cs": "public override int FillFields(byte[] data, int offset, IEscherRecordFactory recordFactory) {\n    int bytesRemaining = ReadHeader(data, offset);\n    int pos = offset + 8;\n    int size = 0;\n    field_1_shapeId = LittleEndian.GetInt(data, pos + size);\n    size += 4;\n    field_2_flags = LittleEndian.GetInt(data, pos + size);\n    size += 4;\n    return RecordSize;\n}\n", "java": "public int fillFields(byte[] data, int offset, EscherRecordFactory recordFactory) {\n    readHeader( data, offset );\n    int pos            = offset + 8;\n    int size           = 0;\n    field_1_shapeId    =  LittleEndian.getInt( data, pos + size );\n    size += 4;\n    field_2_flags      =  LittleEndian.getInt( data, pos + size );\n    size += 4;\n    return getRecordSize();\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581int", "\u2581", "$$Fill", "$$Field", "$$s(", "$$byte[]", "\u2581data,", "\u2581int", "\u2581offset,", "\u2581I", "$$Escher", "$$Record", "$$Factory", "\u2581record", "$$Factory", "$$)", "\u2581{"], ["\u2581int", "\u2581bytesRemaining", "\u2581=", "\u2581Read", "$$Header", "$$(data,", "\u2581offset", "$$)", "$$;"], ["\u2581int", "\u2581pos", "\u2581=", "\u2581offset", "\u2581+", "\u25818", "$$;"], ["\u2581int", "\u2581size", "\u2581=", "\u25810;"], ["\u2581field_1_", "$$shape", "$$Id", "\u2581=", "\u2581LittleEndian", "$$.Get", "$$Int(data,", "\u2581pos", "\u2581+", "\u2581size)", "$$;"], ["\u2581size", "\u2581+=", "\u25814", "$$;"], ["\u2581field_2_", "$$flag", "$$s", "\u2581=", "\u2581LittleEndian", "$$.Get", "$$Int(data,", "\u2581pos", "\u2581+", "\u2581size)", "$$;"], ["\u2581size", "\u2581+=", "\u25814", "$$;"], ["\u2581return", "\u2581Record", "$$Size", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581int", "\u2581fill", "$$Field", "$$s(", "$$byte[]", "\u2581data,", "\u2581int", "\u2581offset,", "\u2581Escher", "$$Record", "$$Factory", "\u2581record", "$$Factory", "$$)", "\u2581{"], ["\u2581read", "$$Head", "$$er(", "\u2581data,", "\u2581offset", "\u2581)", "$$;"], ["\u2581int", "\u2581pos", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581=", "\u2581offset", "\u2581+", "\u25818", "$$;"], ["\u2581int", "\u2581size", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581=", "\u25810;"], ["\u2581field_1_", "$$shape", "$$Id", "\u2581", "\u2581", "\u2581", "\u2581=", "\u2581", "\u2581LittleEndian", "$$.get", "$$Int(", "\u2581data,", "\u2581pos", "\u2581+", "\u2581size", "\u2581)", "$$;"], ["\u2581size", "\u2581+=", "\u25814", "$$;"], ["\u2581field_2_", "$$flag", "$$s", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581=", "\u2581", "\u2581LittleEndian", "$$.get", "$$Int(", "\u2581data,", "\u2581pos", "\u2581+", "\u2581size", "\u2581)", "$$;"], ["\u2581size", "\u2581+=", "\u25814", "$$;"], ["\u2581return", "\u2581getRecord", "$$Size()", "$$;"], ["\u2581}"]]}, {"cs": "public override string GetSignerName() {\n    return ALGORITHM_NAME;\n}\n", "java": "public String getSignerName() {\n    return ALGORITHM_NAME;\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581string", "\u2581Get", "$$Sign", "$$er", "$$Name()", "\u2581{"], ["\u2581return", "\u2581A", "$$L", "$$G", "$$OR", "$$IT", "$$H", "$$M", "$$_", "$$N", "$$AM", "$$E", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581String", "\u2581get", "$$Sign", "$$er", "$$Name()", "\u2581{"], ["\u2581return", "\u2581A", "$$L", "$$G", "$$OR", "$$IT", "$$H", "$$M", "$$_", "$$N", "$$AM", "$$E", "$$;"], ["\u2581}"]]}, {"cs": "public virtual void clear() {\n    lock (this) {\n        if (_size != 0) {\n            java.util.Arrays.fill(table, null);\n            modCount++;\n            _size = 0;\n        }\n    }\n}\n", "java": "public synchronized void clear() {\n    if (size != 0) {\n        Arrays.fill(table, null);\n        modCount++;\n        size = 0;\n    }\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581void", "\u2581clear()", "\u2581{"], ["\u2581lock", "\u2581(this)", "\u2581{"], ["\u2581if", "\u2581(_", "$$size", "\u2581!=", "\u25810)", "\u2581{"], ["\u2581java.", "$$u", "$$til", "$$.Ar", "$$ray", "$$s.", "$$fill", "$$(t", "$$able", "$$,", "\u2581null)", "$$;"], ["\u2581mod", "$$Count", "$$++", "$$;"], ["\u2581_", "$$size", "\u2581=", "\u25810;"], ["\u2581}"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581synchronized", "\u2581void", "\u2581clear()", "\u2581{"], ["\u2581if", "\u2581(", "$$size", "\u2581!=", "\u25810)", "\u2581{"], ["\u2581Arrays.", "$$fill", "$$(t", "$$able", "$$,", "\u2581null)", "$$;"], ["\u2581mod", "$$Count", "$$++", "$$;"], ["\u2581size", "\u2581=", "\u25810;"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public virtual CancelCapacityReservationResponse CancelCapacityReservation(CancelCapacityReservationRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = CancelCapacityReservationRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = CancelCapacityReservationResponseUnmarshaller.Instance;\n    return Invoke<CancelCapacityReservationResponse>(request, options);\n}\n", "java": "public CancelCapacityReservationResult cancelCapacityReservation(CancelCapacityReservationRequest request) {\n    request = beforeClientExecution(request);\n    return executeCancelCapacityReservation(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Cancel", "$$Capacity", "$$Reserv", "$$ation", "$$Response", "\u2581Cancel", "$$Capacity", "$$Reserv", "$$ation", "$$(", "$$Cancel", "$$Capacity", "$$Reserv", "$$ation", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Cancel", "$$Capacity", "$$Reserv", "$$ation", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Cancel", "$$Capacity", "$$Reserv", "$$ation", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<", "$$Cancel", "$$Capacity", "$$Reserv", "$$ation", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Cancel", "$$Capacity", "$$Reserv", "$$ation", "$$Result", "\u2581c", "$$ancel", "$$Capacity", "$$Reserv", "$$ation", "$$(", "$$Cancel", "$$Capacity", "$$Reserv", "$$ation", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581execute", "$$Cancel", "$$Capacity", "$$Reserv", "$$ation", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual ImportDocumentationPartsResponse ImportDocumentationParts(ImportDocumentationPartsRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = ImportDocumentationPartsRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = ImportDocumentationPartsResponseUnmarshaller.Instance;\n    return Invoke<ImportDocumentationPartsResponse>(request, options);\n}\n", "java": "public ImportDocumentationPartsResult importDocumentationParts(ImportDocumentationPartsRequest request) {\n    request = beforeClientExecution(request);\n    return executeImportDocumentationParts(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581I", "$$mport", "$$Documentation", "$$Part", "$$sResponse", "\u2581I", "$$mport", "$$Documentation", "$$Part", "$$s(", "$$Import", "$$Documentation", "$$Part", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581I", "$$mport", "$$Documentation", "$$Part", "$$s", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581I", "$$mport", "$$Documentation", "$$Part", "$$s", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<", "$$Import", "$$Documentation", "$$Part", "$$sResponse>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581I", "$$mport", "$$Documentation", "$$Part", "$$sResult", "\u2581i", "$$mport", "$$Documentation", "$$Part", "$$s(", "$$Import", "$$Documentation", "$$Part", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581execute", "$$Import", "$$Documentation", "$$Part", "$$s", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual SuggestResponse Suggest(SuggestRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = SuggestRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = SuggestResponseUnmarshaller.Instance;\n    return Invoke<SuggestResponse>(request, options);\n}\n", "java": "public SuggestResult suggest(SuggestRequest request) {\n    request = beforeClientExecution(request);\n    return executeSuggest(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581S", "$$u", "$$gg", "$$est", "$$Response", "\u2581S", "$$u", "$$gg", "$$est", "$$(", "$$Su", "$$gg", "$$est", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581S", "$$u", "$$gg", "$$est", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581S", "$$u", "$$gg", "$$est", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<", "$$Su", "$$gg", "$$est", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581S", "$$u", "$$gg", "$$est", "$$Result", "\u2581s", "$$u", "$$gg", "$$est", "$$(", "$$Su", "$$gg", "$$est", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581execute", "$$Su", "$$gg", "$$est", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual Explanation Explain(int docId, string field, int numPayloadsSeen, float payloadScore) {\n    Explanation result = new Explanation();\n    result.Description = this.GetType().Name + \".docScore()\";\n    result.Value = DocScore(docId, field, numPayloadsSeen, payloadScore);\n    return result;\n}\n", "java": "public Explanation explain(int docId, String field, int numPayloadsSeen, float payloadScore) {\n    return Explanation.match(docScore(docId, field, numPayloadsSeen, payloadScore),getClass().getSimpleName() + \".docScore()\");\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Exp", "$$lanation", "\u2581Exp", "$$la", "$$in", "$$(int", "\u2581doc", "$$Id,", "\u2581string", "\u2581field", "$$,", "\u2581int", "\u2581num", "$$Payload", "$$s", "$$Se", "$$en", "$$,", "\u2581float", "\u2581payload", "$$Score", "$$)", "\u2581{"], ["\u2581Exp", "$$lanation", "\u2581result", "\u2581=", "\u2581new", "\u2581Exp", "$$lanation", "$$()", "$$;"], ["\u2581result", "$$.D", "$$escription", "\u2581=", "\u2581this.", "$$Get", "$$Type().", "$$Name", "\u2581+", "\u2581\"", "$$.d", "$$oc", "$$Score", "$$()", "$$\"", "$$;"], ["\u2581result", "$$.", "$$Value", "\u2581=", "\u2581Doc", "$$Score", "$$(d", "$$oc", "$$Id,", "\u2581field", "$$,", "\u2581num", "$$Payload", "$$s", "$$Se", "$$en", "$$,", "\u2581payload", "$$Score", "$$)", "$$;"], ["\u2581return", "\u2581result", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Exp", "$$lanation", "\u2581exp", "$$la", "$$in", "$$(int", "\u2581doc", "$$Id,", "\u2581String", "\u2581field", "$$,", "\u2581int", "\u2581num", "$$Payload", "$$s", "$$Se", "$$en", "$$,", "\u2581float", "\u2581payload", "$$Score", "$$)", "\u2581{"], ["\u2581return", "\u2581Exp", "$$lanation", "$$.", "$$match", "$$(d", "$$oc", "$$Score", "$$(d", "$$oc", "$$Id,", "\u2581field", "$$,", "\u2581num", "$$Payload", "$$s", "$$Se", "$$en", "$$,", "\u2581payload", "$$Score", "$$),", "$$get", "$$Class().get", "$$Simple", "$$Name()", "\u2581+", "\u2581\"", "$$.d", "$$oc", "$$Score", "$$()", "$$\")", "$$;"], ["\u2581}"]]}, {"cs": "public int Serialize(int offset, byte[] data) {\n    int result = 0;\n    int nRecs = _list.Count;\n    for (int i = 0; i < nRecs; i++) {\n        Record rec = (Record)_list[i];\n        result += rec.Serialize(offset + result, data);\n    }\n    return result;\n}\n", "java": "public int serialize(int offset, byte[] data) {\n    int result = 0;\n    for (org.apache.poi.hssf.record.Record rec : _list) {\n        result += rec.serialize(offset + result, data);\n    }\n    return result;\n}\n", "cs_t": [["\u2581public", "\u2581int", "\u2581Serialize", "$$(int", "\u2581offset,", "\u2581byte[]", "\u2581data", "$$)", "\u2581{"], ["\u2581int", "\u2581result", "\u2581=", "\u25810;"], ["\u2581int", "\u2581n", "$$Rec", "$$s", "\u2581=", "\u2581_", "$$list", "$$.Count", "$$;"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810;", "\u2581i", "\u2581<", "\u2581n", "$$Rec", "$$s;", "\u2581i++)", "\u2581{"], ["\u2581Record", "\u2581rec", "\u2581=", "\u2581(", "$$Record)", "$$_", "$$list", "$$[i]", "$$;"], ["\u2581result", "\u2581+=", "\u2581rec", "$$.S", "$$erialize", "$$(offset", "\u2581+", "\u2581result", "$$,", "\u2581data", "$$)", "$$;"], ["\u2581}"], ["\u2581return", "\u2581result", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581int", "\u2581serialize", "$$(int", "\u2581offset,", "\u2581byte[]", "\u2581data", "$$)", "\u2581{"], ["\u2581int", "\u2581result", "\u2581=", "\u25810;"], ["\u2581for", "\u2581(", "$$or", "$$g", "$$.ap", "$$ache", "$$.", "$$po", "$$i.", "$$h", "$$ss", "$$f", "$$.re", "$$cord", "$$.", "$$Record", "\u2581rec", "\u2581:", "\u2581_", "$$list", "$$)", "\u2581{"], ["\u2581result", "\u2581+=", "\u2581rec", "$$.", "$$ser", "$$ial", "$$ize", "$$(offset", "\u2581+", "\u2581result", "$$,", "\u2581data", "$$)", "$$;"], ["\u2581}"], ["\u2581return", "\u2581result", "$$;"], ["\u2581}"]]}, {"cs": "public override String ToString() {\n    return _string.ToString();\n}\n", "java": "public String toString() {\n    return _string.toString();\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581String", "\u2581ToString()", "\u2581{"], ["\u2581return", "\u2581_", "$$string", "$$.ToString()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581String", "\u2581toString()", "\u2581{"], ["\u2581return", "\u2581_", "$$string", "$$.toString()", "$$;"], ["\u2581}"]]}, {"cs": "public static long[] copyOfRange(long[] original, int start, int end) {\n    if (start > end) {\n        throw new System.ArgumentException();\n    }\n    int originalLength = original.Length;\n    if (start < 0 || start > originalLength) {\n        throw new System.IndexOutOfRangeException();\n    }\n    int resultLength = end - start;\n    int copyLength = System.Math.Min(resultLength, originalLength - start);\n    long[] result = new long[resultLength];\n    System.Array.Copy(original, start, result, 0, copyLength);\n    return result;\n}\n", "java": "public static long[] copyOfRange(long[] original, int start, int end) {\n    if (start > end) {\n        throw new IllegalArgumentException();\n    }\n    int originalLength = original.length;\n    if (start < 0 || start > originalLength) {\n        throw new ArrayIndexOutOfBoundsException();\n    }\n    int resultLength = end - start;\n    int copyLength = Math.min(resultLength, originalLength - start);\n    long[] result = new long[resultLength];\n    System.arraycopy(original, start, result, 0, copyLength);\n    return result;\n}\n", "cs_t": [["\u2581public", "\u2581static", "\u2581long[]", "\u2581copy", "$$Of", "$$Range", "$$(long[]", "\u2581original", "$$,", "\u2581int", "\u2581start,", "\u2581int", "\u2581end)", "\u2581{"], ["\u2581if", "\u2581(start", "\u2581>", "\u2581end)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581System.Ar", "$$gumentException", "$$()", "$$;"], ["\u2581}"], ["\u2581int", "\u2581original", "$$Length", "\u2581=", "\u2581original", "$$.Length;"], ["\u2581if", "\u2581(start", "\u2581<", "\u25810", "\u2581||", "\u2581start", "\u2581>", "\u2581original", "$$Length", "$$)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581System.", "$$IndexOutOf", "$$Range", "$$Exception", "$$()", "$$;"], ["\u2581}"], ["\u2581int", "\u2581result", "$$Length", "\u2581=", "\u2581end", "\u2581-", "\u2581start", "$$;"], ["\u2581int", "\u2581copy", "$$Length", "\u2581=", "\u2581System.", "$$Math.", "$$Min", "$$(result", "$$Length", "$$,", "\u2581original", "$$Length", "\u2581-", "\u2581start", "$$)", "$$;"], ["\u2581long[]", "\u2581result", "\u2581=", "\u2581new", "\u2581long", "$$[", "$$result", "$$Length", "$$]", "$$;"], ["\u2581System.Array.Copy", "$$(", "$$original", "$$,", "\u2581start,", "\u2581result", "$$,", "\u25810,", "\u2581copy", "$$Length", "$$)", "$$;"], ["\u2581return", "\u2581result", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581static", "\u2581long[]", "\u2581copy", "$$Of", "$$Range", "$$(long[]", "\u2581original", "$$,", "\u2581int", "\u2581start,", "\u2581int", "\u2581end)", "\u2581{"], ["\u2581if", "\u2581(start", "\u2581>", "\u2581end)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581IllegalArgumentException", "$$()", "$$;"], ["\u2581}"], ["\u2581int", "\u2581original", "$$Length", "\u2581=", "\u2581original", "$$.length;"], ["\u2581if", "\u2581(start", "\u2581<", "\u25810", "\u2581||", "\u2581start", "\u2581>", "\u2581original", "$$Length", "$$)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581Array", "$$IndexOutOf", "$$Bounds", "$$Exception", "$$()", "$$;"], ["\u2581}"], ["\u2581int", "\u2581result", "$$Length", "\u2581=", "\u2581end", "\u2581-", "\u2581start", "$$;"], ["\u2581int", "\u2581copy", "$$Length", "\u2581=", "\u2581Math.", "$$min", "$$(result", "$$Length", "$$,", "\u2581original", "$$Length", "\u2581-", "\u2581start", "$$)", "$$;"], ["\u2581long[]", "\u2581result", "\u2581=", "\u2581new", "\u2581long", "$$[", "$$result", "$$Length", "$$]", "$$;"], ["\u2581System.arraycopy", "$$(", "$$original", "$$,", "\u2581start,", "\u2581result", "$$,", "\u25810,", "\u2581copy", "$$Length", "$$)", "$$;"], ["\u2581return", "\u2581result", "$$;"], ["\u2581}"]]}, {"cs": "public static byte[] ToByteArray(ByteBuffer buffer, int length) {\n    if (buffer.HasBuffer && buffer.Offset == 0) {\n        return buffer.Buffer;\n    }\n    byte[] data = new byte[length];\n    buffer.Read(data);\n    return data;\n}\n", "java": "public static byte[] toByteArray(ByteBuffer buffer, int length) {\n    if(buffer.hasArray() && buffer.arrayOffset() == 0) {\n        return buffer.array();\n    }\n    checkByteSizeLimit(length);\n    byte[] data = new byte[length];\n    buffer.get(data);\n    return data;\n}\n", "cs_t": [["\u2581public", "\u2581static", "\u2581byte[]", "\u2581To", "$$ByteArray", "$$(", "$$ByteBuffer", "\u2581buffer,", "\u2581int", "\u2581length)", "\u2581{"], ["\u2581if", "\u2581(b", "$$uffer", "$$.", "$$Has", "$$Buffer", "\u2581&&", "\u2581buffer", "$$.", "$$Offset", "\u2581==", "\u25810)", "\u2581{"], ["\u2581return", "\u2581buffer", "$$.", "$$Buffer", "$$;"], ["\u2581}"], ["\u2581byte[]", "\u2581data", "\u2581=", "\u2581new", "\u2581byte[", "$$length", "$$]", "$$;"], ["\u2581buffer", "$$.", "$$Re", "$$ad(", "$$d", "$$ata", "$$)", "$$;"], ["\u2581return", "\u2581data", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581static", "\u2581byte[]", "\u2581to", "$$ByteArray", "$$(", "$$ByteBuffer", "\u2581buffer,", "\u2581int", "\u2581length)", "\u2581{"], ["\u2581if", "$$(buffer", "$$.has", "$$Array", "$$()", "\u2581&&", "\u2581buffer", "$$.", "$$array", "$$Offset", "$$()", "\u2581==", "\u25810)", "\u2581{"], ["\u2581return", "\u2581buffer", "$$.", "$$array", "$$()", "$$;"], ["\u2581}"], ["\u2581check", "$$Byte", "$$Size", "$$Limit", "$$(", "$$length", "$$)", "$$;"], ["\u2581byte[]", "\u2581data", "\u2581=", "\u2581new", "\u2581byte[", "$$length", "$$]", "$$;"], ["\u2581buffer", "$$.get", "$$(d", "$$ata", "$$)", "$$;"], ["\u2581return", "\u2581data", "$$;"], ["\u2581}"]]}, {"cs": "public virtual void setProgress(int progress) {\n    lock (this) {\n        setProgress(progress, false);\n    }\n}\n", "java": "public synchronized void setProgress(int progress) {\n    setProgress(progress, false);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581void", "\u2581set", "$$Pro", "$$gres", "$$s(", "$$int", "\u2581pro", "$$gres", "$$s)", "\u2581{"], ["\u2581lock", "\u2581(this)", "\u2581{"], ["\u2581set", "$$Pro", "$$gres", "$$s(", "$$pro", "$$gres", "$$s,", "\u2581false", "$$)", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581synchronized", "\u2581void", "\u2581set", "$$Pro", "$$gres", "$$s(", "$$int", "\u2581pro", "$$gres", "$$s)", "\u2581{"], ["\u2581set", "$$Pro", "$$gres", "$$s(", "$$pro", "$$gres", "$$s,", "\u2581false", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public void RemoveCell(CellValueRecordInterface cell) {\n    if (cell == null) {\n        throw new ArgumentException(\"cell must not be null\");\n    }\n    int row = cell.Row;\n    if (row >= records.Length) {\n        throw new Exception(\"cell row is out of range\");\n    }\n    CellValueRecordInterface[] rowCells = records[row];\n    if (rowCells == null) {\n        throw new Exception(\"cell row is already empty\");\n    }\n    int column = cell.Column;\n    if (column >= rowCells.Length) {\n        throw new Exception(\"cell column is out of range\");\n    }\n    rowCells[column] = null;\n}\n", "java": "public void removeCell(CellValueRecordInterface cell) {\n    if (cell == null) {\n        throw new IllegalArgumentException(\"cell must not be null\");\n    }\n    int row = cell.getRow();\n    if (row >= records.length) {\n        throw new RuntimeException(\"cell row is out of range\");\n    }\n    CellValueRecordInterface[] rowCells = records[row];\n    if (rowCells == null) {\n        throw new RuntimeException(\"cell row is already empty\");\n    }\n    short column = cell.getColumn();\n    if (column >= rowCells.length) {\n        throw new RuntimeException(\"cell column is out of range\");\n    }\n    rowCells[column] = null;\n}\n", "cs_t": [["\u2581public", "\u2581void", "\u2581Remove", "$$Cell(", "$$Cell", "$$Value", "$$Record", "$$Interface", "\u2581cell", "$$)", "\u2581{"], ["\u2581if", "\u2581(", "$$cell", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581ArgumentException(\"", "$$cell", "\u2581must", "\u2581not", "\u2581be", "\u2581null", "$$\")", "$$;"], ["\u2581}"], ["\u2581int", "\u2581row", "\u2581=", "\u2581cell", "$$.", "$$Row", "$$;"], ["\u2581if", "\u2581(", "$$row", "\u2581>=", "\u2581record", "$$s.Length", "$$)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581Exception(\"", "$$cell", "\u2581row", "\u2581is", "\u2581out", "\u2581of", "\u2581range", "$$\")", "$$;"], ["\u2581}"], ["\u2581Cell", "$$Value", "$$Record", "$$Interface", "$$[]", "\u2581row", "$$Cells", "\u2581=", "\u2581record", "$$s[", "$$row", "$$]", "$$;"], ["\u2581if", "\u2581(", "$$row", "$$Cells", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581Exception(\"", "$$cell", "\u2581row", "\u2581is", "\u2581", "$$al", "$$read", "$$y", "\u2581e", "$$mpty", "$$\")", "$$;"], ["\u2581}"], ["\u2581int", "\u2581column", "\u2581=", "\u2581cell", "$$.", "$$Column", "$$;"], ["\u2581if", "\u2581(c", "$$ol", "$$umn", "\u2581>=", "\u2581row", "$$Cell", "$$s.Length", "$$)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581Exception(\"", "$$cell", "\u2581column", "\u2581is", "\u2581out", "\u2581of", "\u2581range", "$$\")", "$$;"], ["\u2581}"], ["\u2581row", "$$Cell", "$$s[", "$$col", "$$umn", "$$]", "\u2581=", "\u2581null", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581remove", "$$Cell(", "$$Cell", "$$Value", "$$Record", "$$Interface", "\u2581cell", "$$)", "\u2581{"], ["\u2581if", "\u2581(", "$$cell", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581IllegalArgumentException(\"", "$$cell", "\u2581must", "\u2581not", "\u2581be", "\u2581null", "$$\")", "$$;"], ["\u2581}"], ["\u2581int", "\u2581row", "\u2581=", "\u2581cell", "$$.get", "$$Row", "$$()", "$$;"], ["\u2581if", "\u2581(", "$$row", "\u2581>=", "\u2581record", "$$s.length", "$$)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581RuntimeException(\"", "$$cell", "\u2581row", "\u2581is", "\u2581out", "\u2581of", "\u2581range", "$$\")", "$$;"], ["\u2581}"], ["\u2581Cell", "$$Value", "$$Record", "$$Interface", "$$[]", "\u2581row", "$$Cells", "\u2581=", "\u2581record", "$$s[", "$$row", "$$]", "$$;"], ["\u2581if", "\u2581(", "$$row", "$$Cells", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581RuntimeException(\"", "$$cell", "\u2581row", "\u2581is", "\u2581", "$$al", "$$read", "$$y", "\u2581e", "$$mpty", "$$\")", "$$;"], ["\u2581}"], ["\u2581short", "\u2581column", "\u2581=", "\u2581cell", "$$.get", "$$Column", "$$()", "$$;"], ["\u2581if", "\u2581(c", "$$ol", "$$umn", "\u2581>=", "\u2581row", "$$Cell", "$$s.length", "$$)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581RuntimeException(\"", "$$cell", "\u2581column", "\u2581is", "\u2581out", "\u2581of", "\u2581range", "$$\")", "$$;"], ["\u2581}"], ["\u2581row", "$$Cell", "$$s[", "$$col", "$$umn", "$$]", "\u2581=", "\u2581null", "$$;"], ["\u2581}"]]}, {"cs": "public static string canonicalizePath(string path, bool discardRelativePrefix) {\n    int segmentStart = 0;\n    int deletableSegments = 0;\n    {\n        for (int i = 0; i <= path.Length; ) {\n            int nextSegmentStart;\n            if (i == path.Length) {\n                nextSegmentStart = i;\n            }\n            else {\n                if (path[i] == '/') {\n                    nextSegmentStart = i + 1;\n                }\n                else {\n                    i++;\n                    continue;\n                }\n            }\n            if (i == segmentStart + 1 && Sharpen.StringHelper.RegionMatches(path, segmentStart, \".\", 0, 1)) {\n                path = Sharpen.StringHelper.Substring(path, 0, segmentStart) + Sharpen.StringHelper.Substring(path, nextSegmentStart);\n                i = segmentStart;\n            }\n            else {\n                if (i == segmentStart + 2 && Sharpen.StringHelper.RegionMatches(path, segmentStart, \"..\", 0, 2)) {\n                    if (deletableSegments > 0 || discardRelativePrefix) {\n                        deletableSegments--;\n                        int prevSegmentStart = path.LastIndexOf('/', segmentStart - 2) + 1;\n                        path = Sharpen.StringHelper.Substring(path, 0, prevSegmentStart) + Sharpen.StringHelper.Substring(path, nextSegmentStart);\n                        i = segmentStart = prevSegmentStart;\n                    }\n                    else {\n                        i++;\n                        segmentStart = i;\n                    }\n                }\n                else {\n                    if (i > 0) {\n                        deletableSegments++;\n                    }\n                    i++;\n                    segmentStart = i;\n                }\n            }\n        }\n    }\n    return path;\n}\n", "java": "public static String canonicalizePath(String path, boolean discardRelativePrefix) {\n    int segmentStart = 0;\n    int deletableSegments = 0;\n    for (int i = 0; i <= path.length(); ) {\n        int nextSegmentStart;\n        if (i == path.length()) {\n            nextSegmentStart = i;\n        }\n        else if (path.charAt(i) == '/') {\n            nextSegmentStart = i + 1;\n        }\n        else {\n            i++;\n            continue;\n        }\n        if (i == segmentStart + 1 && path.regionMatches(segmentStart, \".\", 0, 1)) {\n            path = path.substring(0, segmentStart) + path.substring(nextSegmentStart);\n            i = segmentStart;\n        }\n        else if (i == segmentStart + 2 && path.regionMatches(segmentStart, \"..\", 0, 2)) {\n            if (deletableSegments > 0 || discardRelativePrefix) {\n                deletableSegments--;\n                int prevSegmentStart = path.lastIndexOf('/', segmentStart - 2) + 1;\n                path = path.substring(0, prevSegmentStart) + path.substring(nextSegmentStart);\n                i = segmentStart = prevSegmentStart;\n            }\n            else {\n                i++;\n                segmentStart = i;\n            }\n        }\n        else {\n            if (i > 0) {\n                deletableSegments++;\n            }\n            i++;\n            segmentStart = i;\n        }\n    }\n    return path;\n}\n", "cs_t": [["\u2581public", "\u2581static", "\u2581string", "\u2581c", "$$an", "$$on", "$$ical", "$$ize", "$$Path", "$$(string", "\u2581path", "$$,", "\u2581bool", "\u2581dis", "$$c", "$$ard", "$$Re", "$$lative", "$$Prefix", "$$)", "\u2581{"], ["\u2581int", "\u2581se", "$$gment", "$$Start", "\u2581=", "\u25810;"], ["\u2581int", "\u2581d", "$$el", "$$et", "$$able", "$$Segment", "$$s", "\u2581=", "\u25810;"], ["\u2581{"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810;", "\u2581i", "\u2581<=", "\u2581path", "$$.Length;", "\u2581)", "\u2581{"], ["\u2581int", "\u2581next", "$$Segment", "$$Start", "$$;"], ["\u2581if", "\u2581(i", "\u2581==", "\u2581path", "$$.Length)", "\u2581{"], ["\u2581next", "$$Segment", "$$Start", "\u2581=", "\u2581i", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581if", "\u2581(p", "$$ath", "$$[i]", "\u2581==", "\u2581'", "$$/", "$$')", "\u2581{"], ["\u2581next", "$$Segment", "$$Start", "\u2581=", "\u2581i", "\u2581+", "\u25811", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581i", "$$++", "$$;"], ["\u2581c", "$$ontinue", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581if", "\u2581(i", "\u2581==", "\u2581se", "$$gment", "$$Start", "\u2581+", "\u25811", "\u2581&&", "\u2581Sharpen.", "$$String", "$$H", "$$el", "$$per", "$$.", "$$Region", "$$Match", "$$es", "$$(path", "$$,", "\u2581se", "$$gment", "$$Start", "$$,", "\u2581\"", "$$.", "$$\",", "\u25810,", "\u25811", "$$))", "\u2581{"], ["\u2581path", "\u2581=", "\u2581Sharpen.", "$$String", "$$H", "$$el", "$$per", "$$.Sub", "$$string", "$$(path", "$$,", "\u25810,", "\u2581se", "$$gment", "$$Start", "$$)", "\u2581+", "\u2581Sharpen.", "$$String", "$$H", "$$el", "$$per", "$$.Sub", "$$string", "$$(path", "$$,", "\u2581next", "$$Segment", "$$Start", "$$)", "$$;"], ["\u2581i", "\u2581=", "\u2581se", "$$gment", "$$Start", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581if", "\u2581(i", "\u2581==", "\u2581se", "$$gment", "$$Start", "\u2581+", "\u25812", "\u2581&&", "\u2581Sharpen.", "$$String", "$$H", "$$el", "$$per", "$$.", "$$Region", "$$Match", "$$es", "$$(path", "$$,", "\u2581se", "$$gment", "$$Start", "$$,", "\u2581\"", "$$..", "$$\",", "\u25810,", "\u25812", "$$))", "\u2581{"], ["\u2581if", "\u2581(d", "$$el", "$$et", "$$able", "$$Segment", "$$s", "\u2581>", "\u25810", "\u2581||", "\u2581dis", "$$c", "$$ard", "$$Re", "$$lative", "$$Prefix", "$$)", "\u2581{"], ["\u2581d", "$$el", "$$et", "$$able", "$$Segment", "$$s", "$$--", "$$;"], ["\u2581int", "\u2581pre", "$$v", "$$Segment", "$$Start", "\u2581=", "\u2581p", "$$ath.", "$$Last", "$$Index", "$$Of(", "$$'", "$$/", "$$'", "$$,", "\u2581se", "$$gment", "$$Start", "\u2581-", "\u25812)", "\u2581+", "\u25811", "$$;"], ["\u2581path", "\u2581=", "\u2581Sharpen.", "$$String", "$$H", "$$el", "$$per", "$$.Sub", "$$string", "$$(path", "$$,", "\u25810,", "\u2581pre", "$$v", "$$Segment", "$$Start", "$$)", "\u2581+", "\u2581Sharpen.", "$$String", "$$H", "$$el", "$$per", "$$.Sub", "$$string", "$$(path", "$$,", "\u2581next", "$$Segment", "$$Start", "$$)", "$$;"], ["\u2581i", "\u2581=", "\u2581se", "$$gment", "$$Start", "\u2581=", "\u2581pre", "$$v", "$$Segment", "$$Start", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581i", "$$++", "$$;"], ["\u2581se", "$$gment", "$$Start", "\u2581=", "\u2581i", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581if", "\u2581(i", "\u2581>", "\u25810)", "\u2581{"], ["\u2581d", "$$el", "$$et", "$$able", "$$Segment", "$$s", "$$++", "$$;"], ["\u2581}"], ["\u2581i", "$$++", "$$;"], ["\u2581se", "$$gment", "$$Start", "\u2581=", "\u2581i", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581}"], ["\u2581}"], ["\u2581return", "\u2581path", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581static", "\u2581String", "\u2581c", "$$an", "$$on", "$$ical", "$$ize", "$$Path", "$$(String", "\u2581path", "$$,", "\u2581boolean", "\u2581dis", "$$c", "$$ard", "$$Re", "$$lative", "$$Prefix", "$$)", "\u2581{"], ["\u2581int", "\u2581se", "$$gment", "$$Start", "\u2581=", "\u25810;"], ["\u2581int", "\u2581d", "$$el", "$$et", "$$able", "$$Segment", "$$s", "\u2581=", "\u25810;"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810;", "\u2581i", "\u2581<=", "\u2581path", "$$.length()", "$$;", "\u2581)", "\u2581{"], ["\u2581int", "\u2581next", "$$Segment", "$$Start", "$$;"], ["\u2581if", "\u2581(i", "\u2581==", "\u2581path", "$$.length", "$$())", "\u2581{"], ["\u2581next", "$$Segment", "$$Start", "\u2581=", "\u2581i", "$$;"], ["\u2581}"], ["\u2581else", "\u2581if", "\u2581(p", "$$ath.", "$$char", "$$At", "$$(i", "$$)", "\u2581==", "\u2581'", "$$/", "$$')", "\u2581{"], ["\u2581next", "$$Segment", "$$Start", "\u2581=", "\u2581i", "\u2581+", "\u25811", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581i", "$$++", "$$;"], ["\u2581c", "$$ontinue", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(i", "\u2581==", "\u2581se", "$$gment", "$$Start", "\u2581+", "\u25811", "\u2581&&", "\u2581path", "$$.re", "$$gion", "$$Match", "$$es", "$$(", "$$se", "$$gment", "$$Start", "$$,", "\u2581\"", "$$.", "$$\",", "\u25810,", "\u25811", "$$))", "\u2581{"], ["\u2581path", "\u2581=", "\u2581p", "$$ath.", "$$sub", "$$string(", "$$0,", "\u2581se", "$$gment", "$$Start", "$$)", "\u2581+", "\u2581p", "$$ath.", "$$sub", "$$string", "$$(n", "$$ext", "$$Segment", "$$Start", "$$)", "$$;"], ["\u2581i", "\u2581=", "\u2581se", "$$gment", "$$Start", "$$;"], ["\u2581}"], ["\u2581else", "\u2581if", "\u2581(i", "\u2581==", "\u2581se", "$$gment", "$$Start", "\u2581+", "\u25812", "\u2581&&", "\u2581path", "$$.re", "$$gion", "$$Match", "$$es", "$$(", "$$se", "$$gment", "$$Start", "$$,", "\u2581\"", "$$..", "$$\",", "\u25810,", "\u25812", "$$))", "\u2581{"], ["\u2581if", "\u2581(d", "$$el", "$$et", "$$able", "$$Segment", "$$s", "\u2581>", "\u25810", "\u2581||", "\u2581dis", "$$c", "$$ard", "$$Re", "$$lative", "$$Prefix", "$$)", "\u2581{"], ["\u2581d", "$$el", "$$et", "$$able", "$$Segment", "$$s", "$$--", "$$;"], ["\u2581int", "\u2581pre", "$$v", "$$Segment", "$$Start", "\u2581=", "\u2581p", "$$ath.", "$$last", "$$Index", "$$Of(", "$$'", "$$/", "$$'", "$$,", "\u2581se", "$$gment", "$$Start", "\u2581-", "\u25812)", "\u2581+", "\u25811", "$$;"], ["\u2581path", "\u2581=", "\u2581p", "$$ath.", "$$sub", "$$string(", "$$0,", "\u2581pre", "$$v", "$$Segment", "$$Start", "$$)", "\u2581+", "\u2581p", "$$ath.", "$$sub", "$$string", "$$(n", "$$ext", "$$Segment", "$$Start", "$$)", "$$;"], ["\u2581i", "\u2581=", "\u2581se", "$$gment", "$$Start", "\u2581=", "\u2581pre", "$$v", "$$Segment", "$$Start", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581i", "$$++", "$$;"], ["\u2581se", "$$gment", "$$Start", "\u2581=", "\u2581i", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581if", "\u2581(i", "\u2581>", "\u25810)", "\u2581{"], ["\u2581d", "$$el", "$$et", "$$able", "$$Segment", "$$s", "$$++", "$$;"], ["\u2581}"], ["\u2581i", "$$++", "$$;"], ["\u2581se", "$$gment", "$$Start", "\u2581=", "\u2581i", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581return", "\u2581path", "$$;"], ["\u2581}"]]}, {"cs": "public ApostropheFilterFactory(IDictionary<string, string> args): base(args) {\n    if (args.Count > 0) {\n        throw new System.ArgumentException(\"Unknown parameter(s): \" + args);\n    }\n}\n", "java": "public ApostropheFilterFactory(Map<String, String> args) {\n    super(args);\n    if (!args.isEmpty()) {\n        throw new IllegalArgumentException(\"Unknown parameter(s): \" + args);\n    }\n}\n", "cs_t": [["\u2581public", "\u2581A", "$$po", "$$st", "$$ro", "$$ph", "$$e", "$$FilterFactory(IDictionary<string,", "\u2581string>", "\u2581args):", "\u2581base(args)", "\u2581{"], ["\u2581if", "\u2581(args.Count", "\u2581>", "\u25810)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581System.ArgumentException(\"Unknown", "\u2581parameter", "$$(", "$$s)", "$$:", "\u2581\"", "\u2581+", "\u2581args)", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581A", "$$po", "$$st", "$$ro", "$$ph", "$$e", "$$FilterFactory(Map<String,", "\u2581String", "$$>", "\u2581args)", "\u2581{"], ["\u2581super(", "$$arg", "$$s)", "$$;"], ["\u2581if", "\u2581(!args.isEmpty())", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581IllegalArgumentException(\"Unknown", "\u2581parameter", "$$(", "$$s)", "$$:", "\u2581\"", "\u2581+", "\u2581args)", "$$;"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public virtual Ent Peek() {\n    if (this.packedIdx < this._enclosing.packed.Size() && this.looseIdx < this._enclosing.loose.Size()) {\n        Ref p = this._enclosing.packed.Get(this.packedIdx);\n        Ref l = this._enclosing.loose.Get(this.looseIdx);\n        int cmp = RefComparator.CompareTo(p, l);\n        if (cmp < 0) {\n            this.packedIdx++;\n            return this.ToEntry(p);\n        }\n        if (cmp == 0) {\n            this.packedIdx++;\n        }\n        this.looseIdx++;\n        return this.ToEntry(this.ResolveLoose(l));\n    }\n    if (this.looseIdx < this._enclosing.loose.Size()) {\n        return this.ToEntry(this.ResolveLoose(this._enclosing.loose.Get(this.looseIdx++)));\n    }\n    if (this.packedIdx < this._enclosing.packed.Size()) {\n        return this.ToEntry(this._enclosing.packed.Get(this.packedIdx++));\n    }\n    return null;\n}\n", "java": "public Entry<String, Ref> peek() {\n    if (packedIdx < packed.size() && looseIdx < loose.size()) {\n        Ref p = packed.get(packedIdx);\n        Ref l = loose.get(looseIdx);\n        int cmp = RefComparator.compareTo(p, l);\n        if (cmp < 0) {\n            packedIdx++;\n            return toEntry(p);\n        }\n        if (cmp == 0)packedIdx++;\n        looseIdx++;\n        return toEntry(resolveLoose(l));\n    }\n    if (looseIdx < loose.size())return toEntry(resolveLoose(loose.get(looseIdx++)));\n    if (packedIdx < packed.size())return toEntry(packed.get(packedIdx++));\n    return null;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581", "$$Ent", "\u2581P", "$$eek", "$$()", "\u2581{"], ["\u2581if", "\u2581(this", "$$.p", "$$acked", "$$Idx", "\u2581<", "\u2581this._enclosing", "$$.p", "$$acked", "$$.", "$$Size()", "\u2581&&", "\u2581this.", "$$lo", "$$ose", "$$Idx", "\u2581<", "\u2581this._enclosing", "$$.", "$$lo", "$$ose", "$$.", "$$Size", "$$())", "\u2581{"], ["\u2581Ref", "\u2581p", "\u2581=", "\u2581this._enclosing", "$$.p", "$$acked", "$$.Get", "$$(this", "$$.p", "$$acked", "$$Idx", "$$)", "$$;"], ["\u2581Ref", "\u2581l", "\u2581=", "\u2581this._enclosing", "$$.", "$$lo", "$$ose", "$$.Get", "$$(this", "$$.", "$$lo", "$$ose", "$$Idx", "$$)", "$$;"], ["\u2581int", "\u2581cmp", "\u2581=", "\u2581Ref", "$$Compar", "$$ator", "$$.Compare", "$$To", "$$(p", "$$,", "\u2581l", "$$)", "$$;"], ["\u2581if", "\u2581(c", "$$mp", "\u2581<", "\u25810)", "\u2581{"], ["\u2581this.p", "$$acked", "$$Idx", "$$++", "$$;"], ["\u2581return", "\u2581this.", "$$To", "$$Entry", "$$(p", "$$)", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(c", "$$mp", "\u2581==", "\u25810)", "\u2581{"], ["\u2581this.p", "$$acked", "$$Idx", "$$++", "$$;"], ["\u2581}"], ["\u2581this.", "$$lo", "$$ose", "$$Idx", "$$++", "$$;"], ["\u2581return", "\u2581this.", "$$To", "$$Entry", "$$(this", "$$.", "$$Resol", "$$ve", "$$Lo", "$$ose", "$$(", "$$l", "$$))", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(this", "$$.", "$$lo", "$$ose", "$$Idx", "\u2581<", "\u2581this._enclosing", "$$.", "$$lo", "$$ose", "$$.", "$$Size", "$$())", "\u2581{"], ["\u2581return", "\u2581this.", "$$To", "$$Entry", "$$(this", "$$.", "$$Resol", "$$ve", "$$Lo", "$$ose", "$$(this", "$$._", "$$enclosing", "$$.", "$$lo", "$$ose", "$$.Get", "$$(this", "$$.", "$$lo", "$$ose", "$$Idx", "$$++", "$$))", "$$)", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(this", "$$.p", "$$acked", "$$Idx", "\u2581<", "\u2581this._enclosing", "$$.p", "$$acked", "$$.", "$$Size", "$$())", "\u2581{"], ["\u2581return", "\u2581this.", "$$To", "$$Entry", "$$(this", "$$._", "$$enclosing", "$$.p", "$$acked", "$$.Get", "$$(this", "$$.p", "$$acked", "$$Idx", "$$++", "$$))", "$$;"], ["\u2581}"], ["\u2581return", "\u2581null", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581", "$$Entry<", "$$String,", "\u2581Ref", "$$>", "\u2581p", "$$eek", "$$()", "\u2581{"], ["\u2581if", "\u2581(p", "$$acked", "$$Idx", "\u2581<", "\u2581p", "$$acked", "$$.size()", "\u2581&&", "\u2581lo", "$$ose", "$$Idx", "\u2581<", "\u2581lo", "$$ose", "$$.size", "$$())", "\u2581{"], ["\u2581Ref", "\u2581p", "\u2581=", "\u2581p", "$$acked", "$$.get", "$$(p", "$$acked", "$$Idx", "$$)", "$$;"], ["\u2581Ref", "\u2581l", "\u2581=", "\u2581lo", "$$ose", "$$.get(", "$$lo", "$$ose", "$$Idx", "$$)", "$$;"], ["\u2581int", "\u2581cmp", "\u2581=", "\u2581Ref", "$$Compar", "$$ator", "$$.compare", "$$To", "$$(p", "$$,", "\u2581l", "$$)", "$$;"], ["\u2581if", "\u2581(c", "$$mp", "\u2581<", "\u25810)", "\u2581{"], ["\u2581p", "$$acked", "$$Idx", "$$++", "$$;"], ["\u2581return", "\u2581to", "$$Entry", "$$(p", "$$)", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(c", "$$mp", "\u2581==", "\u25810)", "$$p", "$$acked", "$$Idx", "$$++", "$$;"], ["\u2581lo", "$$ose", "$$Idx", "$$++", "$$;"], ["\u2581return", "\u2581to", "$$Entry", "$$(", "$$res", "$$ol", "$$ve", "$$Lo", "$$ose", "$$(", "$$l", "$$))", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(", "$$lo", "$$ose", "$$Idx", "\u2581<", "\u2581lo", "$$ose", "$$.size", "$$())", "$$return", "\u2581to", "$$Entry", "$$(", "$$res", "$$ol", "$$ve", "$$Lo", "$$ose", "$$(", "$$lo", "$$ose", "$$.get(", "$$lo", "$$ose", "$$Idx", "$$++", "$$))", "$$)", "$$;"], ["\u2581if", "\u2581(p", "$$acked", "$$Idx", "\u2581<", "\u2581p", "$$acked", "$$.size", "$$())", "$$return", "\u2581to", "$$Entry", "$$(p", "$$acked", "$$.get", "$$(p", "$$acked", "$$Idx", "$$++", "$$))", "$$;"], ["\u2581return", "\u2581null", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DeleteEnvironmentResponse DeleteEnvironment(DeleteEnvironmentRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DeleteEnvironmentRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DeleteEnvironmentResponseUnmarshaller.Instance;\n    return Invoke<DeleteEnvironmentResponse>(request, options);\n}\n", "java": "public DeleteEnvironmentResult deleteEnvironment(DeleteEnvironmentRequest request) {\n    request = beforeClientExecution(request);\n    return executeDeleteEnvironment(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Delete", "$$Environment", "$$Response", "\u2581Delete", "$$Environment", "$$(Delete", "$$Environment", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Delete", "$$Environment", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Delete", "$$Environment", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Delete", "$$Environment", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Delete", "$$Environment", "$$Result", "\u2581delete", "$$Environment", "$$(Delete", "$$Environment", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDelete", "$$Environment", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual int Stem(char[] s, int len) {\n    for (int i = 0; i < len; i++) {\n        switch (s[i]) {\n        case '\u00e1':\n            s[i] = 'a';\n            break;\n        case '\u00eb':\n        case '\u00e9':\n            s[i] = 'e';\n            break;\n        case '\u00ed':\n            s[i] = 'i';\n            break;\n        case '\u00f3':\n        case '\u0151':\n        case '\u00f5':\n        case '\u00f6':\n            s[i] = 'o';\n            break;\n        case '\u00fa':\n        case '\u0171':\n        case '\u0169':\n        case '\u00fb':\n        case '\u00fc':\n            s[i] = 'u';\n            break;\n        }\n    }\n    len = RemoveCase(s, len);\n    len = RemovePossessive(s, len);\n    len = RemovePlural(s, len);\n    return Normalize(s, len);\n}\n", "java": "public int stem(char s[], int len) {\n    for (int i = 0; i < len; i++)switch(s[i]) {\n        case '\u00e1':\n            s[i] = 'a';\n            break;\n        case '\u00eb':\n        case '\u00e9':\n            s[i] = 'e';\n            break;\n        case '\u00ed':\n            s[i] = 'i';\n            break;\n        case '\u00f3':\n        case '\u0151':\n        case '\u00f5':\n        case '\u00f6':\n            s[i] = 'o';\n            break;\n        case '\u00fa':\n        case '\u0171':\n        case '\u0169':\n        case '\u00fb':\n        case '\u00fc':\n            s[i] = 'u';\n            break;\n        }\n    len = removeCase(s, len);\n    len = removePossessive(s, len);\n    len = removePlural(s, len);\n    return normalize(s, len);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581int", "\u2581S", "$$tem", "$$(char[]", "\u2581s", "$$,", "\u2581int", "\u2581len)", "\u2581{"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810;", "\u2581i", "\u2581<", "\u2581len", "$$;", "\u2581i++)", "\u2581{"], ["\u2581switch", "\u2581(", "$$s[i]", "$$)", "\u2581{"], ["\u2581case", "\u2581'", "$$\u00e1", "$$'", "$$:"], ["\u2581s", "$$[i]", "\u2581=", "\u2581'", "$$a", "$$'", "$$;"], ["\u2581break", "$$;"], ["\u2581case", "\u2581'", " ", "$$'", "$$:"], ["\u2581case", "\u2581'", "$$\u00e9", "$$'", "$$:"], ["\u2581s", "$$[i]", "\u2581=", "\u2581'", "$$e", "$$'", "$$;"], ["\u2581break", "$$;"], ["\u2581case", "\u2581'", "$$\u00ed", "$$'", "$$:"], ["\u2581s", "$$[i]", "\u2581=", "\u2581'", "$$i", "$$'", "$$;"], ["\u2581break", "$$;"], ["\u2581case", "\u2581'", "$$\u00f3", "$$'", "$$:"], ["\u2581case", "\u2581'", " ", "$$'", "$$:"], ["\u2581case", "\u2581'", " ", "$$'", "$$:"], ["\u2581case", "\u2581'", "$$\u00f6", "$$'", "$$:"], ["\u2581s", "$$[i]", "\u2581=", "\u2581'", "$$o", "$$'", "$$;"], ["\u2581break", "$$;"], ["\u2581case", "\u2581'", "$$\u00fa", "$$'", "$$:"], ["\u2581case", "\u2581'", " ", "$$'", "$$:"], ["\u2581case", "\u2581'", " ", "$$'", "$$:"], ["\u2581case", "\u2581'", "$$\u00fb", "$$'", "$$:"], ["\u2581case", "\u2581'", "$$\u00fc", "$$'", "$$:"], ["\u2581s", "$$[i]", "\u2581=", "\u2581'", "$$u", "$$'", "$$;"], ["\u2581break", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581len", "\u2581=", "\u2581Remove", "$$Case", "$$(s,", "\u2581len)", "$$;"], ["\u2581len", "\u2581=", "\u2581Remove", "$$Po", "$$ss", "$$es", "$$sive", "$$(s,", "\u2581len)", "$$;"], ["\u2581len", "\u2581=", "\u2581Remove", "$$P", "$$l", "$$ur", "$$al", "$$(s,", "\u2581len)", "$$;"], ["\u2581return", "\u2581N", "$$ormal", "$$ize", "$$(s,", "\u2581len)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581int", "\u2581s", "$$tem", "$$(char", "\u2581s", "$$[]", "$$,", "\u2581int", "\u2581len)", "\u2581{"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810;", "\u2581i", "\u2581<", "\u2581len", "$$;", "\u2581i++)", "$$s", "$$witch", "$$(", "$$s[i]", "$$)", "\u2581{"], ["\u2581case", "\u2581'", "$$\u00e1", "$$'", "$$:"], ["\u2581s", "$$[i]", "\u2581=", "\u2581'", "$$a", "$$'", "$$;"], ["\u2581break", "$$;"], ["\u2581case", "\u2581'", " ", "$$'", "$$:"], ["\u2581case", "\u2581'", "$$\u00e9", "$$'", "$$:"], ["\u2581s", "$$[i]", "\u2581=", "\u2581'", "$$e", "$$'", "$$;"], ["\u2581break", "$$;"], ["\u2581case", "\u2581'", "$$\u00ed", "$$'", "$$:"], ["\u2581s", "$$[i]", "\u2581=", "\u2581'", "$$i", "$$'", "$$;"], ["\u2581break", "$$;"], ["\u2581case", "\u2581'", "$$\u00f3", "$$'", "$$:"], ["\u2581case", "\u2581'", " ", "$$'", "$$:"], ["\u2581case", "\u2581'", " ", "$$'", "$$:"], ["\u2581case", "\u2581'", "$$\u00f6", "$$'", "$$:"], ["\u2581s", "$$[i]", "\u2581=", "\u2581'", "$$o", "$$'", "$$;"], ["\u2581break", "$$;"], ["\u2581case", "\u2581'", "$$\u00fa", "$$'", "$$:"], ["\u2581case", "\u2581'", " ", "$$'", "$$:"], ["\u2581case", "\u2581'", " ", "$$'", "$$:"], ["\u2581case", "\u2581'", "$$\u00fb", "$$'", "$$:"], ["\u2581case", "\u2581'", "$$\u00fc", "$$'", "$$:"], ["\u2581s", "$$[i]", "\u2581=", "\u2581'", "$$u", "$$'", "$$;"], ["\u2581break", "$$;"], ["\u2581}"], ["\u2581len", "\u2581=", "\u2581remove", "$$Case", "$$(s,", "\u2581len)", "$$;"], ["\u2581len", "\u2581=", "\u2581remove", "$$Po", "$$ss", "$$es", "$$sive", "$$(s,", "\u2581len)", "$$;"], ["\u2581len", "\u2581=", "\u2581remove", "$$P", "$$l", "$$ur", "$$al", "$$(s,", "\u2581len)", "$$;"], ["\u2581return", "\u2581normal", "$$ize", "$$(s,", "\u2581len)", "$$;"], ["\u2581}"]]}, {"cs": "public void AddChildBefore(EscherRecord record, int insertBeforeRecordId) {\n    for (int i = 0; i < _childRecords.Count; i++) {\n        EscherRecord rec = _childRecords[(i)];\n        if (rec.RecordId == insertBeforeRecordId) {\n            _childRecords.Insert(i++, record);\n        }\n    }\n}\n", "java": "public void addChildBefore(EscherRecord record, int insertBeforeRecordId) {\n    int idx = 0;\n    for (EscherRecord rec : this) {\n        if(rec.getRecordId() == (short)insertBeforeRecordId) {\n            break;\n        }\n        idx++;\n    }\n    _childRecords.add(idx, record);\n}\n", "cs_t": [["\u2581public", "\u2581void", "\u2581Add", "$$Child", "$$Be", "$$fore", "$$(", "$$Escher", "$$Record", "\u2581record", "$$,", "\u2581int", "\u2581insert", "$$Be", "$$fore", "$$Record", "$$Id)", "\u2581{"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810;", "\u2581i", "\u2581<", "\u2581_", "$$child", "$$Record", "$$s.Count", "$$;", "\u2581i++)", "\u2581{"], ["\u2581Escher", "$$Record", "\u2581rec", "\u2581=", "\u2581_", "$$child", "$$Record", "$$s[", "$$(i", "$$)", "$$]", "$$;"], ["\u2581if", "\u2581(re", "$$c.", "$$Record", "$$Id", "\u2581==", "\u2581insert", "$$Be", "$$fore", "$$Record", "$$Id)", "\u2581{"], ["\u2581_", "$$child", "$$Record", "$$s.", "$$In", "$$sert", "$$(i", "$$++", "$$,", "\u2581record", "$$)", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581add", "$$Child", "$$Be", "$$fore", "$$(", "$$Escher", "$$Record", "\u2581record", "$$,", "\u2581int", "\u2581insert", "$$Be", "$$fore", "$$Record", "$$Id)", "\u2581{"], ["\u2581int", "\u2581idx", "\u2581=", "\u25810;"], ["\u2581for", "\u2581(", "$$Escher", "$$Record", "\u2581rec", "\u2581:", "\u2581this", "$$)", "\u2581{"], ["\u2581if", "$$(re", "$$c", "$$.get", "$$Record", "$$Id()", "\u2581==", "\u2581(short)", "$$in", "$$sert", "$$Be", "$$fore", "$$Record", "$$Id)", "\u2581{"], ["\u2581break", "$$;"], ["\u2581}"], ["\u2581idx", "$$++", "$$;"], ["\u2581}"], ["\u2581_", "$$child", "$$Record", "$$s.add(", "$$idx", "$$,", "\u2581record", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public ListAlbumsRequest(): base(\"CloudPhoto\", \"2017-07-11\", \"ListAlbums\", \"cloudphoto\", \"openAPI\") {\n    Protocol = ProtocolType.HTTPS;\n}\n", "java": "public ListAlbumsRequest() {\n    super(\"CloudPhoto\", \"2017-07-11\", \"ListAlbums\", \"cloudphoto\");\n    setProtocol(ProtocolType.HTTPS);\n}\n", "cs_t": [["\u2581public", "\u2581List", "$$Al", "$$b", "$$um", "$$sRequest", "$$():", "\u2581base(\"", "$$CloudPhoto\",", "\u2581\"2017-07-11\",", "\u2581\"", "$$List", "$$Al", "$$b", "$$um", "$$s\",", "\u2581\"cloudphoto", "$$\",", "\u2581\"openAPI\")", "\u2581{"], ["\u2581Protocol", "\u2581=", "\u2581ProtocolType.HTTPS", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581List", "$$Al", "$$b", "$$um", "$$sRequest", "$$()", "\u2581{"], ["\u2581super(\"", "$$CloudPhoto\",", "\u2581\"2017-07-11\",", "\u2581\"", "$$List", "$$Al", "$$b", "$$um", "$$s\",", "\u2581\"cloudphoto", "$$\")", "$$;"], ["\u2581setProtocol(ProtocolType.HTTPS", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public SaveTaskForUpdatingRegistrantInfoByIdentityCredentialRequest(): base(\"Domain-intl\", \"2017-12-18\", \"SaveTaskForUpdatingRegistrantInfoByIdentityCredential\", \"domain\", \"openAPI\") {\n    Method = MethodType.POST;\n}\n", "java": "public SaveTaskForUpdatingRegistrantInfoByIdentityCredentialRequest() {\n    super(\"Domain-intl\", \"2017-12-18\", \"SaveTaskForUpdatingRegistrantInfoByIdentityCredential\", \"domain\");\n    setMethod(MethodType.POST);\n}\n", "cs_t": [["\u2581public", "\u2581S", "$$a", "$$ve", "$$Task", "$$For", "$$Up", "$$d", "$$at", "$$ing", "$$Re", "$$gist", "$$ran", "$$t", "$$Info", "$$By", "$$Identity", "$$Credential", "$$Request():", "\u2581base(\"", "$$Domain", "$$-", "$$int", "$$l", "$$\",", "\u2581\"2017", "$$-1", "$$2", "$$-1", "$$8", "$$\",", "\u2581\"", "$$S", "$$a", "$$ve", "$$Task", "$$For", "$$Up", "$$d", "$$at", "$$ing", "$$Re", "$$gist", "$$ran", "$$t", "$$Info", "$$By", "$$Identity", "$$Credential", "$$\",", "\u2581\"", "$$d", "$$omain", "$$\",", "\u2581\"openAPI\")", "\u2581{"], ["\u2581Method", "\u2581=", "\u2581MethodType.POST", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581S", "$$a", "$$ve", "$$Task", "$$For", "$$Up", "$$d", "$$at", "$$ing", "$$Re", "$$gist", "$$ran", "$$t", "$$Info", "$$By", "$$Identity", "$$Credential", "$$Request()", "\u2581{"], ["\u2581super(\"", "$$Domain", "$$-", "$$int", "$$l", "$$\",", "\u2581\"2017", "$$-1", "$$2", "$$-1", "$$8", "$$\",", "\u2581\"", "$$S", "$$a", "$$ve", "$$Task", "$$For", "$$Up", "$$d", "$$at", "$$ing", "$$Re", "$$gist", "$$ran", "$$t", "$$Info", "$$By", "$$Identity", "$$Credential", "$$\",", "\u2581\"", "$$d", "$$omain", "$$\")", "$$;"], ["\u2581setMethod(Method", "$$Type.POST", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {\n    int result;\n    if (arg0 is TwoDEval) {\n        result = ((TwoDEval)arg0).Height;\n    }\n    else if (arg0 is RefEval) {\n        result = 1;\n    }\n    else {\n        return ErrorEval.VALUE_INVALID;\n    }\n    return new NumberEval(result);\n}\n", "java": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {\n    int result;\n    if (arg0 instanceof TwoDEval) {\n        result = ((TwoDEval) arg0).getHeight();\n    }\n    else if (arg0 instanceof RefEval) {\n        result = 1;\n    }\n    else {\n        return ErrorEval.VALUE_INVALID;\n    }\n    return new NumberEval(result);\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581ValueEval", "\u2581Evaluate(int", "\u2581srcRowIndex,", "\u2581int", "\u2581srcColumnIndex,", "\u2581ValueEval", "\u2581arg", "$$0)", "\u2581{"], ["\u2581int", "\u2581result", "$$;"], ["\u2581if", "\u2581(arg", "$$0", "\u2581is", "\u2581T", "$$wo", "$$D", "$$Eval)", "\u2581{"], ["\u2581result", "\u2581=", "\u2581((", "$$T", "$$wo", "$$D", "$$Eval)", "$$arg", "$$0", "$$).", "$$H", "$$eight", "$$;"], ["\u2581}"], ["\u2581else", "\u2581if", "\u2581(arg", "$$0", "\u2581is", "\u2581Ref", "$$Eval)", "\u2581{"], ["\u2581result", "\u2581=", "\u25811", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581return", "\u2581ErrorEval.VALUE_INVALID", "$$;"], ["\u2581}"], ["\u2581return", "\u2581new", "\u2581NumberEval", "$$(result", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581ValueEval", "\u2581evaluate(int", "\u2581srcRowIndex,", "\u2581int", "\u2581srcColumnIndex,", "\u2581ValueEval", "\u2581arg", "$$0)", "\u2581{"], ["\u2581int", "\u2581result", "$$;"], ["\u2581if", "\u2581(arg", "$$0", "\u2581instanceof", "\u2581T", "$$wo", "$$D", "$$Eval)", "\u2581{"], ["\u2581result", "\u2581=", "\u2581((", "$$T", "$$wo", "$$D", "$$Eval)", "\u2581arg", "$$0)", "$$.get", "$$H", "$$eight", "$$()", "$$;"], ["\u2581}"], ["\u2581else", "\u2581if", "\u2581(arg", "$$0", "\u2581instanceof", "\u2581Ref", "$$Eval)", "\u2581{"], ["\u2581result", "\u2581=", "\u25811", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581return", "\u2581ErrorEval.VALUE_INVALID", "$$;"], ["\u2581}"], ["\u2581return", "\u2581new", "\u2581NumberEval", "$$(result", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DescribeReservedInstancesResponse DescribeReservedInstances() {\n    return DescribeReservedInstances(new DescribeReservedInstancesRequest());\n}\n", "java": "public DescribeReservedInstancesResult describeReservedInstances() {\n    return describeReservedInstances(new DescribeReservedInstancesRequest());\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Describe", "$$ReservedInstances", "$$Response", "\u2581Describe", "$$ReservedInstances", "$$()", "\u2581{"], ["\u2581return", "\u2581Describe", "$$ReservedInstances", "$$(new", "\u2581Describe", "$$ReservedInstances", "$$Request", "$$())", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Describe", "$$ReservedInstances", "$$Result", "\u2581describe", "$$ReservedInstances", "$$()", "\u2581{"], ["\u2581return", "\u2581describe", "$$ReservedInstances", "$$(new", "\u2581Describe", "$$ReservedInstances", "$$Request", "$$())", "$$;"], ["\u2581}"]]}, {"cs": "public virtual void SetPackedGitMMAP(bool usemmap) {\n    packedGitMMAP = usemmap;\n}\n", "java": "public void setPackedGitMMAP(boolean usemmap) {\n    packedGitMMAP = usemmap;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581void", "\u2581Set", "$$Pack", "$$ed", "$$Git", "$$M", "$$M", "$$AP", "$$(bool", "\u2581use", "$$m", "$$map", "$$)", "\u2581{"], ["\u2581p", "$$acked", "$$Git", "$$M", "$$M", "$$AP", "\u2581=", "\u2581use", "$$m", "$$map", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581set", "$$Pack", "$$ed", "$$Git", "$$M", "$$M", "$$AP", "$$(boolean", "\u2581use", "$$m", "$$map", "$$)", "\u2581{"], ["\u2581p", "$$acked", "$$Git", "$$M", "$$M", "$$AP", "\u2581=", "\u2581use", "$$m", "$$map", "$$;"], ["\u2581}"]]}, {"cs": "public POIFSDocumentPath() {\n    this.components = new string[0];\n}\n", "java": "public POIFSDocumentPath() {\n    this.components = new String[ 0 ];\n}\n", "cs_t": [["\u2581public", "\u2581P", "$$O", "$$I", "$$F", "$$S", "$$Document", "$$Path", "$$()", "\u2581{"], ["\u2581this.", "$$com", "$$ponent", "$$s", "\u2581=", "\u2581new", "\u2581string", "$$[0]", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581P", "$$O", "$$I", "$$F", "$$S", "$$Document", "$$Path", "$$()", "\u2581{"], ["\u2581this.", "$$com", "$$ponent", "$$s", "\u2581=", "\u2581new", "\u2581String", "$$[", "\u25810", "\u2581", "$$]", "$$;"], ["\u2581}"]]}, {"cs": "public override string ToString() {\n    return Key + \"/\" + Value;\n}\n", "java": "public String toString() {\n    return key + \"/\" + value;\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581string", "\u2581ToString()", "\u2581{"], ["\u2581return", "\u2581", "$$Key", "\u2581+", "\u2581\"/", "$$\"", "\u2581+", "\u2581", "$$Value", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581String", "\u2581toString()", "\u2581{"], ["\u2581return", "\u2581key", "\u2581+", "\u2581\"/", "$$\"", "\u2581+", "\u2581value", "$$;"], ["\u2581}"]]}, {"cs": "public override void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\n    for (int i = 0; i < iterations; ++i) {\n        int byte0 = blocks[blocksOffset++] & 0xFF;\n        int byte1 = blocks[blocksOffset++] & 0xFF;\n        int byte2 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 12) | (byte1 << 4) | ((int)((uint)byte2 >> 4));\n        int byte3 = blocks[blocksOffset++] & 0xFF;\n        int byte4 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte2 & 15) << 16) | (byte3 << 8) | byte4;\n    }\n}\n", "java": "public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\n    for (int i = 0; i < iterations; ++i) {\n        final int byte0 = blocks[blocksOffset++] & 0xFF;\n        final int byte1 = blocks[blocksOffset++] & 0xFF;\n        final int byte2 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 12) | (byte1 << 4) | (byte2 >>> 4);\n        final int byte3 = blocks[blocksOffset++] & 0xFF;\n        final int byte4 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte2 & 15) << 16) | (byte3 << 8) | byte4;\n    }\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581void", "\u2581D", "$$ecode", "$$(byte[]", "\u2581blocks,", "\u2581int", "\u2581blocksOffset,", "\u2581int[]", "\u2581values,", "\u2581int", "\u2581valuesOffset,", "\u2581int", "\u2581iterations)", "\u2581{"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810;", "\u2581i", "\u2581<", "\u2581iterations;", "\u2581++i)", "\u2581{"], ["\u2581int", "\u2581byte", "$$0", "\u2581=", "\u2581blocks[blocksOffset++]", "\u2581&", "\u25810xFF", "$$;"], ["\u2581int", "\u2581byte", "$$1", "\u2581=", "\u2581blocks[blocksOffset++]", "\u2581&", "\u25810xFF", "$$;"], ["\u2581int", "\u2581byte", "$$2", "\u2581=", "\u2581blocks[blocksOffset++]", "\u2581&", "\u25810xFF", "$$;"], ["\u2581values[valuesOffset++]", "\u2581=", "\u2581(byte", "$$0", "\u2581<<", "\u25811", "$$2)", "\u2581|", "\u2581(byte", "$$1", "\u2581<<", "\u25814)", "\u2581|", "\u2581((int)((", "$$uint)", "$$byte", "$$2", "\u2581>>", "\u25814", "$$))", "$$;"], ["\u2581int", "\u2581byte", "$$3", "\u2581=", "\u2581blocks[blocksOffset++]", "\u2581&", "\u25810xFF", "$$;"], ["\u2581int", "\u2581byte", "$$4", "\u2581=", "\u2581blocks[blocksOffset++]", "\u2581&", "\u25810xFF", "$$;"], ["\u2581values[valuesOffset++]", "\u2581=", "\u2581((byte", "$$2", "\u2581&", "\u25811", "$$5", "$$)", "\u2581<<", "\u258116", "$$)", "\u2581|", "\u2581(byte", "$$3", "\u2581<<", "\u25818)", "\u2581|", "\u2581byte", "$$4", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581decode", "$$(byte[]", "\u2581blocks,", "\u2581int", "\u2581blocksOffset,", "\u2581int[]", "\u2581values,", "\u2581int", "\u2581valuesOffset,", "\u2581int", "\u2581iterations)", "\u2581{"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810;", "\u2581i", "\u2581<", "\u2581iterations;", "\u2581++i)", "\u2581{"], ["\u2581final", "\u2581int", "\u2581byte", "$$0", "\u2581=", "\u2581blocks[blocksOffset++]", "\u2581&", "\u25810xFF", "$$;"], ["\u2581final", "\u2581int", "\u2581byte", "$$1", "\u2581=", "\u2581blocks[blocksOffset++]", "\u2581&", "\u25810xFF", "$$;"], ["\u2581final", "\u2581int", "\u2581byte", "$$2", "\u2581=", "\u2581blocks[blocksOffset++]", "\u2581&", "\u25810xFF", "$$;"], ["\u2581values[valuesOffset++]", "\u2581=", "\u2581(byte", "$$0", "\u2581<<", "\u25811", "$$2)", "\u2581|", "\u2581(byte", "$$1", "\u2581<<", "\u25814)", "\u2581|", "\u2581(byte", "$$2", "\u2581>>>", "\u25814)", "$$;"], ["\u2581final", "\u2581int", "\u2581byte", "$$3", "\u2581=", "\u2581blocks[blocksOffset++]", "\u2581&", "\u25810xFF", "$$;"], ["\u2581final", "\u2581int", "\u2581byte", "$$4", "\u2581=", "\u2581blocks[blocksOffset++]", "\u2581&", "\u25810xFF", "$$;"], ["\u2581values[valuesOffset++]", "\u2581=", "\u2581((byte", "$$2", "\u2581&", "\u25811", "$$5", "$$)", "\u2581<<", "\u258116", "$$)", "\u2581|", "\u2581(byte", "$$3", "\u2581<<", "\u25818)", "\u2581|", "\u2581byte", "$$4", "$$;"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public void Serialize(ILittleEndianOutput out1) {\n    out1.WriteShort(_extBookIndex);\n    out1.WriteShort(_firstSheetIndex);\n    out1.WriteShort(_lastSheetIndex);\n}\n", "java": "public void serialize(LittleEndianOutput out) {\n    out.writeShort(_extBookIndex);\n    out.writeShort(_firstSheetIndex);\n    out.writeShort(_lastSheetIndex);\n}\n", "cs_t": [["\u2581public", "\u2581void", "\u2581Serialize(ILittleEndianOutput", "\u2581out1)", "\u2581{"], ["\u2581out1.WriteShort(", "$$_", "$$ext", "$$Book", "$$Index)", "$$;"], ["\u2581out1.WriteShort(", "$$_", "$$first", "$$Sheet", "$$Index)", "$$;"], ["\u2581out1.WriteShort(", "$$_", "$$last", "$$Sheet", "$$Index)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581serialize(LittleEndianOutput", "\u2581out)", "\u2581{"], ["\u2581out.writeShort(", "$$_", "$$ext", "$$Book", "$$Index)", "$$;"], ["\u2581out.writeShort(", "$$_", "$$first", "$$Sheet", "$$Index)", "$$;"], ["\u2581out.writeShort(", "$$_", "$$last", "$$Sheet", "$$Index)", "$$;"], ["\u2581}"]]}, {"cs": "public PatternParser(IPatternConsumer consumer): this() {\n    this.consumer = consumer;\n}\n", "java": "public PatternParser(PatternConsumer consumer) {\n    this();\n    this.consumer = consumer;\n}\n", "cs_t": [["\u2581public", "\u2581P", "$$attern", "$$Parser", "$$(I", "$$Pattern", "$$Consum", "$$er", "\u2581con", "$$sum", "$$er)", "$$:", "\u2581this", "$$()", "\u2581{"], ["\u2581this.", "$$con", "$$sum", "$$er", "\u2581=", "\u2581con", "$$sum", "$$er", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581P", "$$attern", "$$Parser", "$$(", "$$Pattern", "$$Consum", "$$er", "\u2581con", "$$sum", "$$er)", "\u2581{"], ["\u2581this", "$$()", "$$;"], ["\u2581this.", "$$con", "$$sum", "$$er", "\u2581=", "\u2581con", "$$sum", "$$er", "$$;"], ["\u2581}"]]}, {"cs": "public string[] GetValues(string name) {\n    var result = new List<string>();\n    foreach (IIndexableField field in fields) {\n        if (field.Name.Equals(name, StringComparison.Ordinal) && field.GetStringValue() != null) {\n            result.Add(field.GetStringValue());\n        }\n    }\n    if (result.Count == 0) {\n        return NO_STRINGS;\n    }\n    return result.ToArray();\n}\n", "java": "public final String[] getValues(String name) {\n    List<String> result = new ArrayList<>();\n    for (IndexableField field : fields) {\n        if (field.name().equals(name) && field.stringValue() != null) {\n            result.add(field.stringValue());\n        }\n    }\n    if (result.size() == 0) {\n        return NO_STRINGS;\n    }\n    return result.toArray(new String[result.size()]);\n}\n", "cs_t": [["\u2581public", "\u2581string[]", "\u2581Get", "$$Values", "$$(string", "\u2581name)", "\u2581{"], ["\u2581var", "\u2581result", "\u2581=", "\u2581new", "\u2581List<", "$$string>", "$$()", "$$;"], ["\u2581foreach", "\u2581(I", "$$Index", "$$able", "$$Field", "\u2581field", "\u2581in", "\u2581field", "$$s)", "\u2581{"], ["\u2581if", "\u2581(", "$$field", "$$.", "$$Name", "$$.Equals(", "$$name", "$$,", "\u2581StringComparison.Ordinal", "$$)", "\u2581&&", "\u2581field", "$$.Get", "$$String", "$$Value", "$$()", "\u2581!=", "\u2581null)", "\u2581{"], ["\u2581result", "$$.Add(", "$$field", "$$.Get", "$$String", "$$Value", "$$())", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581if", "\u2581(result", "$$.Count", "\u2581==", "\u25810)", "\u2581{"], ["\u2581return", "\u2581N", "$$O_", "$$ST", "$$R", "$$ING", "$$S", "$$;"], ["\u2581}"], ["\u2581return", "\u2581result", "$$.To", "$$Array", "$$()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581final", "\u2581String[]", "\u2581get", "$$Values", "$$(String", "\u2581name)", "\u2581{"], ["\u2581List<", "$$String>", "\u2581result", "\u2581=", "\u2581new", "\u2581ArrayList<", "$$>", "$$()", "$$;"], ["\u2581for", "\u2581(", "$$Index", "$$able", "$$Field", "\u2581field", "\u2581:", "\u2581field", "$$s)", "\u2581{"], ["\u2581if", "\u2581(", "$$field", "$$.", "$$name", "$$().", "$$equals(", "$$name", "$$)", "\u2581&&", "\u2581field", "$$.", "$$string", "$$Value", "$$()", "\u2581!=", "\u2581null)", "\u2581{"], ["\u2581result", "$$.add(", "$$field", "$$.", "$$string", "$$Value", "$$())", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581if", "\u2581(result", "$$.size()", "\u2581==", "\u25810)", "\u2581{"], ["\u2581return", "\u2581N", "$$O_", "$$ST", "$$R", "$$ING", "$$S", "$$;"], ["\u2581}"], ["\u2581return", "\u2581result", "$$.to", "$$Array", "$$(new", "\u2581String", "$$[", "$$result", "$$.size()", "$$]", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual ListIdentityPoolUsageResponse ListIdentityPoolUsage(ListIdentityPoolUsageRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = ListIdentityPoolUsageRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = ListIdentityPoolUsageResponseUnmarshaller.Instance;\n    return Invoke<ListIdentityPoolUsageResponse>(request, options);\n}\n", "java": "public ListIdentityPoolUsageResult listIdentityPoolUsage(ListIdentityPoolUsageRequest request) {\n    request = beforeClientExecution(request);\n    return executeListIdentityPoolUsage(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581List", "$$IdentityPool", "$$Usage", "$$Response", "\u2581List", "$$IdentityPool", "$$Usage", "$$(List", "$$IdentityPool", "$$Usage", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581List", "$$IdentityPool", "$$Usage", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581List", "$$IdentityPool", "$$Usage", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<List", "$$IdentityPool", "$$Usage", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581List", "$$IdentityPool", "$$Usage", "$$Result", "\u2581list", "$$IdentityPool", "$$Usage", "$$(List", "$$IdentityPool", "$$Usage", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeList", "$$IdentityPool", "$$Usage", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public ValueEval Evaluate(ValueEval[] args, int srcCellRow, int srcCellCol) {\n    if (args.Length < 3 || args.Length > 5) {\n        return ErrorEval.VALUE_INVALID;\n    }\n    try {\n        BaseRef baseRef = EvaluateBaseRef(args[0]);\n        int rowOffset = EvaluateIntArg(args[1], srcCellRow, srcCellCol);\n        int columnOffset = EvaluateIntArg(args[2], srcCellRow, srcCellCol);\n        int height = baseRef.Height;\n        int width = baseRef.Width;\n        switch (args.Length) {\n        case 5:\n            width = EvaluateIntArg(args[4], srcCellRow, srcCellCol);\n            break;\n        case 4:\n            height = EvaluateIntArg(args[3], srcCellRow, srcCellCol);\n            break;\n        }\n        if (height == 0 || width == 0) {\n            return ErrorEval.REF_INVALID;\n        }\n        LinearOffsetRange rowOffsetRange = new LinearOffsetRange(rowOffset, height);\n        LinearOffsetRange colOffsetRange = new LinearOffsetRange(columnOffset, width);\n        return CreateOffset(baseRef, rowOffsetRange, colOffsetRange);\n    }\n    catch (EvaluationException e) {\n        return e.GetErrorEval();\n    }\n}\n", "java": "public ValueEval evaluate(ValueEval[] args, int srcCellRow, int srcCellCol) {\n    if(args.length < 1 || args.length > 5) {\n        return ErrorEval.VALUE_INVALID;\n    }\n    try {\n        BaseRef baseRef = evaluateBaseRef(args[0]);\n        int rowOffset = (args[1] instanceof MissingArgEval) ? 0 : evaluateIntArg(args[1], srcCellRow, srcCellCol);\n        int columnOffset = (args[2] instanceof MissingArgEval) ? 0 : evaluateIntArg(args[2], srcCellRow, srcCellCol);\n        int height = baseRef.getHeight();\n        int width = baseRef.getWidth();\n        switch(args.length) {\n        case 5:\n            if(!(args[4] instanceof MissingArgEval)) {\n                width = evaluateIntArg(args[4], srcCellRow, srcCellCol);\n            }\n        case 4:\n            if(!(args[3] instanceof MissingArgEval)) {\n                height = evaluateIntArg(args[3], srcCellRow, srcCellCol);\n            }\n            break;\n        default:\n            break;\n        }\n        if(height == 0 || width == 0) {\n            return ErrorEval.REF_INVALID;\n        }\n        LinearOffsetRange rowOffsetRange = new LinearOffsetRange(rowOffset, height);\n        LinearOffsetRange colOffsetRange = new LinearOffsetRange(columnOffset, width);\n        return createOffset(baseRef, rowOffsetRange, colOffsetRange);\n    }\n    catch (EvaluationException e) {\n        return e.getErrorEval();\n    }\n}\n", "cs_t": [["\u2581public", "\u2581ValueEval", "\u2581Evaluate", "$$(ValueEval", "$$[]", "\u2581args,", "\u2581int", "\u2581srcCell", "$$Row,", "\u2581int", "\u2581srcCell", "$$Col", "$$)", "\u2581{"], ["\u2581if", "\u2581(arg", "$$s.Length", "\u2581<", "\u25813", "\u2581||", "\u2581arg", "$$s.Length", "\u2581>", "\u25815", "$$)", "\u2581{"], ["\u2581return", "\u2581ErrorEval.VALUE_INVALID", "$$;"], ["\u2581}"], ["\u2581try", "\u2581{"], ["\u2581B", "$$ase", "$$Ref", "\u2581base", "$$Ref", "\u2581=", "\u2581Evaluate", "$$Base", "$$Ref", "$$(arg", "$$s[0]", "$$)", "$$;"], ["\u2581int", "\u2581row", "$$Offset", "\u2581=", "\u2581Evaluate", "$$Int", "$$Arg", "$$(arg", "$$s[", "$$1", "$$],", "\u2581srcCell", "$$Row,", "\u2581srcCell", "$$Col", "$$)", "$$;"], ["\u2581int", "\u2581column", "$$Offset", "\u2581=", "\u2581Evaluate", "$$Int", "$$Arg", "$$(arg", "$$s[", "$$2", "$$],", "\u2581srcCell", "$$Row,", "\u2581srcCell", "$$Col", "$$)", "$$;"], ["\u2581int", "\u2581h", "$$eight", "\u2581=", "\u2581base", "$$Ref", "$$.", "$$H", "$$eight", "$$;"], ["\u2581int", "\u2581width", "\u2581=", "\u2581base", "$$Ref", "$$.", "$$Width", "$$;"], ["\u2581switch", "\u2581(arg", "$$s.Length", "$$)", "\u2581{"], ["\u2581case", "\u25815", "$$:"], ["\u2581width", "\u2581=", "\u2581Evaluate", "$$Int", "$$Arg", "$$(arg", "$$s[", "$$4", "$$],", "\u2581srcCell", "$$Row,", "\u2581srcCell", "$$Col", "$$)", "$$;"], ["\u2581break", "$$;"], ["\u2581case", "\u25814", "$$:"], ["\u2581h", "$$eight", "\u2581=", "\u2581Evaluate", "$$Int", "$$Arg", "$$(arg", "$$s[", "$$3", "$$],", "\u2581srcCell", "$$Row,", "\u2581srcCell", "$$Col", "$$)", "$$;"], ["\u2581break", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(", "$$h", "$$eight", "\u2581==", "\u25810", "\u2581||", "\u2581width", "\u2581==", "\u25810)", "\u2581{"], ["\u2581return", "\u2581Error", "$$Eval.", "$$REF", "$$_", "$$INVALID", "$$;"], ["\u2581}"], ["\u2581L", "$$ine", "$$ar", "$$Offset", "$$Range", "\u2581row", "$$Offset", "$$Range", "\u2581=", "\u2581new", "\u2581L", "$$ine", "$$ar", "$$Offset", "$$Range", "$$(", "$$row", "$$Offset,", "\u2581h", "$$eight", "$$)", "$$;"], ["\u2581L", "$$ine", "$$ar", "$$Offset", "$$Range", "\u2581col", "$$Offset", "$$Range", "\u2581=", "\u2581new", "\u2581L", "$$ine", "$$ar", "$$Offset", "$$Range", "$$(c", "$$ol", "$$umn", "$$Offset,", "\u2581width", "$$)", "$$;"], ["\u2581return", "\u2581Create", "$$Offset", "$$(b", "$$ase", "$$Ref", "$$,", "\u2581row", "$$Offset", "$$Range", "$$,", "\u2581col", "$$Offset", "$$Range", "$$)", "$$;"], ["\u2581}"], ["\u2581catch", "\u2581(EvaluationException", "\u2581e)", "\u2581{"], ["\u2581return", "\u2581e", "$$.Get", "$$ErrorEval", "$$()", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581ValueEval", "\u2581evaluate", "$$(ValueEval", "$$[]", "\u2581args,", "\u2581int", "\u2581srcCell", "$$Row,", "\u2581int", "\u2581srcCell", "$$Col", "$$)", "\u2581{"], ["\u2581if", "$$(arg", "$$s.length", "\u2581<", "\u25811", "\u2581||", "\u2581arg", "$$s.length", "\u2581>", "\u25815", "$$)", "\u2581{"], ["\u2581return", "\u2581ErrorEval.VALUE_INVALID", "$$;"], ["\u2581}"], ["\u2581try", "\u2581{"], ["\u2581B", "$$ase", "$$Ref", "\u2581base", "$$Ref", "\u2581=", "\u2581evaluate", "$$Base", "$$Ref", "$$(arg", "$$s[0]", "$$)", "$$;"], ["\u2581int", "\u2581row", "$$Offset", "\u2581=", "\u2581(arg", "$$s[", "$$1", "$$]", "\u2581instanceof", "\u2581M", "$$issing", "$$Arg", "$$Eval)", "\u2581?", "\u25810", "\u2581:", "\u2581evaluate", "$$Int", "$$Arg", "$$(arg", "$$s[", "$$1", "$$],", "\u2581srcCell", "$$Row,", "\u2581srcCell", "$$Col", "$$)", "$$;"], ["\u2581int", "\u2581column", "$$Offset", "\u2581=", "\u2581(arg", "$$s[", "$$2", "$$]", "\u2581instanceof", "\u2581M", "$$issing", "$$Arg", "$$Eval)", "\u2581?", "\u25810", "\u2581:", "\u2581evaluate", "$$Int", "$$Arg", "$$(arg", "$$s[", "$$2", "$$],", "\u2581srcCell", "$$Row,", "\u2581srcCell", "$$Col", "$$)", "$$;"], ["\u2581int", "\u2581h", "$$eight", "\u2581=", "\u2581base", "$$Ref", "$$.get", "$$H", "$$eight", "$$()", "$$;"], ["\u2581int", "\u2581width", "\u2581=", "\u2581base", "$$Ref", "$$.get", "$$Width", "$$()", "$$;"], ["\u2581switch", "$$(arg", "$$s.length", "$$)", "\u2581{"], ["\u2581case", "\u25815", "$$:"], ["\u2581if(", "$$!", "$$(arg", "$$s[", "$$4", "$$]", "\u2581instanceof", "\u2581M", "$$issing", "$$Arg", "$$Eval", "$$))", "\u2581{"], ["\u2581width", "\u2581=", "\u2581evaluate", "$$Int", "$$Arg", "$$(arg", "$$s[", "$$4", "$$],", "\u2581srcCell", "$$Row,", "\u2581srcCell", "$$Col", "$$)", "$$;"], ["\u2581}"], ["\u2581case", "\u25814", "$$:"], ["\u2581if(", "$$!", "$$(arg", "$$s[", "$$3", "$$]", "\u2581instanceof", "\u2581M", "$$issing", "$$Arg", "$$Eval", "$$))", "\u2581{"], ["\u2581h", "$$eight", "\u2581=", "\u2581evaluate", "$$Int", "$$Arg", "$$(arg", "$$s[", "$$3", "$$],", "\u2581srcCell", "$$Row,", "\u2581srcCell", "$$Col", "$$)", "$$;"], ["\u2581}"], ["\u2581break", "$$;"], ["\u2581default", "$$:"], ["\u2581break", "$$;"], ["\u2581}"], ["\u2581if(", "$$h", "$$eight", "\u2581==", "\u25810", "\u2581||", "\u2581width", "\u2581==", "\u25810)", "\u2581{"], ["\u2581return", "\u2581Error", "$$Eval.", "$$REF", "$$_", "$$INVALID", "$$;"], ["\u2581}"], ["\u2581L", "$$ine", "$$ar", "$$Offset", "$$Range", "\u2581row", "$$Offset", "$$Range", "\u2581=", "\u2581new", "\u2581L", "$$ine", "$$ar", "$$Offset", "$$Range", "$$(", "$$row", "$$Offset,", "\u2581h", "$$eight", "$$)", "$$;"], ["\u2581L", "$$ine", "$$ar", "$$Offset", "$$Range", "\u2581col", "$$Offset", "$$Range", "\u2581=", "\u2581new", "\u2581L", "$$ine", "$$ar", "$$Offset", "$$Range", "$$(c", "$$ol", "$$umn", "$$Offset,", "\u2581width", "$$)", "$$;"], ["\u2581return", "\u2581create", "$$Offset", "$$(b", "$$ase", "$$Ref", "$$,", "\u2581row", "$$Offset", "$$Range", "$$,", "\u2581col", "$$Offset", "$$Range", "$$)", "$$;"], ["\u2581}"], ["\u2581catch", "\u2581(EvaluationException", "\u2581e)", "\u2581{"], ["\u2581return", "\u2581e.get", "$$ErrorEval", "$$()", "$$;"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public virtual int[] GetCountsByTime() {\n    return countsByTime;\n}\n", "java": "public int[] getCountsByTime() {\n    return countsByTime;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581int[]", "\u2581Get", "$$Count", "$$sBy", "$$Time", "$$()", "\u2581{"], ["\u2581return", "\u2581count", "$$sBy", "$$Time", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581int[]", "\u2581get", "$$Count", "$$sBy", "$$Time", "$$()", "\u2581{"], ["\u2581return", "\u2581count", "$$sBy", "$$Time", "$$;"], ["\u2581}"]]}, {"cs": "public virtual UpdateAccountResponse UpdateAccount(UpdateAccountRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = UpdateAccountRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = UpdateAccountResponseUnmarshaller.Instance;\n    return Invoke<UpdateAccountResponse>(request, options);\n}\n", "java": "public UpdateAccountResult updateAccount(UpdateAccountRequest request) {\n    request = beforeClientExecution(request);\n    return executeUpdateAccount(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Update", "$$Account", "$$Response", "\u2581Update", "$$Account", "$$(Update", "$$Account", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Update", "$$Account", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Update", "$$Account", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Update", "$$Account", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Update", "$$Account", "$$Result", "\u2581update", "$$Account", "$$(Update", "$$Account", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeUpdate", "$$Account", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DescribeTrainingJobResponse DescribeTrainingJob(DescribeTrainingJobRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DescribeTrainingJobRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DescribeTrainingJobResponseUnmarshaller.Instance;\n    return Invoke<DescribeTrainingJobResponse>(request, options);\n}\n", "java": "public DescribeTrainingJobResult describeTrainingJob(DescribeTrainingJobRequest request) {\n    request = beforeClientExecution(request);\n    return executeDescribeTrainingJob(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Describe", "$$Tra", "$$in", "$$ingJob", "$$Response", "\u2581Describe", "$$Tra", "$$in", "$$ingJob", "$$(Describe", "$$Tra", "$$in", "$$ingJob", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Describe", "$$Tra", "$$in", "$$ingJob", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Describe", "$$Tra", "$$in", "$$ingJob", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Describe", "$$Tra", "$$in", "$$ingJob", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Describe", "$$Tra", "$$in", "$$ingJob", "$$Result", "\u2581describe", "$$Tra", "$$in", "$$ingJob", "$$(Describe", "$$Tra", "$$in", "$$ingJob", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDescribe", "$$Tra", "$$in", "$$ingJob", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DeleteGroupResponse DeleteGroup(DeleteGroupRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DeleteGroupRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DeleteGroupResponseUnmarshaller.Instance;\n    return Invoke<DeleteGroupResponse>(request, options);\n}\n", "java": "public DeleteGroupResult deleteGroup(DeleteGroupRequest request) {\n    request = beforeClientExecution(request);\n    return executeDeleteGroup(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Delete", "$$Group", "$$Response", "\u2581Delete", "$$Group", "$$(Delete", "$$GroupRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Delete", "$$Group", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Delete", "$$Group", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Delete", "$$Group", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Delete", "$$Group", "$$Result", "\u2581delete", "$$Group", "$$(Delete", "$$GroupRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDelete", "$$Group", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override int Advance(int target) {\n    upto++;\n    if (upto == docIDs.Length) {\n        return docID_Renamed = NO_MORE_DOCS;\n    }\n    int inc = 10;\n    int nextUpto = upto + 10;\n    int low;\n    int high;\n    while (true) {\n        if (nextUpto >= docIDs.Length) {\n            low = nextUpto - inc;\n            high = docIDs.Length - 1;\n            break;\n        }\n        if (target <= docIDs[nextUpto]) {\n            low = nextUpto - inc;\n            high = nextUpto;\n            break;\n        }\n        inc *= 2;\n        nextUpto += inc;\n    }\n    while (true) {\n        if (low > high) {\n            upto = low;\n            break;\n        }\n        int mid = (int) ((uint) (low + high) >> 1);\n        int cmp = docIDs[mid] - target;\n        if (cmp < 0) {\n            low = mid + 1;\n        }\n        else if (cmp > 0) {\n            high = mid - 1;\n        }\n        else {\n            upto = mid;\n            break;\n        }\n    }\n    if (liveDocs != null) {\n        while (upto < docIDs.Length) {\n            if (liveDocs.Get(docIDs[upto])) {\n                break;\n            }\n            upto++;\n        }\n    }\n    if (upto == docIDs.Length) {\n        return docID_Renamed = NO_MORE_DOCS;\n    }\n    else {\n        return docID_Renamed = docIDs[upto];\n    }\n}\n", "java": "public int advance(int target) {\n    upto++;\n    if (upto == docIDs.length) {\n        return docID = NO_MORE_DOCS;\n    }\n    int inc = 10;\n    int nextUpto = upto+10;\n    int low;\n    int high;\n    while (true) {\n        if (nextUpto >= docIDs.length) {\n            low = nextUpto-inc;\n            high = docIDs.length-1;\n            break;\n        }\n        if (target <= docIDs[nextUpto]) {\n            low = nextUpto-inc;\n            high = nextUpto;\n            break;\n        }\n        inc *= 2;\n        nextUpto += inc;\n    }\n    while (true) {\n        if (low > high) {\n            upto = low;\n            break;\n        }\n        int mid = (low + high) >>> 1;\n        int cmp = docIDs[mid] - target;\n        if (cmp < 0) {\n            low = mid + 1;\n        }\n        else if (cmp > 0) {\n            high = mid - 1;\n        }\n        else {\n            upto = mid;\n            break;\n        }\n    }\n    if (upto == docIDs.length) {\n        return docID = NO_MORE_DOCS;\n    }\n    else {\n        return docID = docIDs[upto];\n    }\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581int", "\u2581A", "$$d", "$$v", "$$ance", "$$(int", "\u2581target", "$$)", "\u2581{"], ["\u2581upto", "$$++", "$$;"], ["\u2581if", "\u2581(", "$$upto", "\u2581==", "\u2581doc", "$$ID", "$$s.Length", "$$)", "\u2581{"], ["\u2581return", "\u2581doc", "$$ID_", "$$Ren", "$$ame", "$$d", "\u2581=", "\u2581N", "$$O", "$$_M", "$$O", "$$RE", "$$_", "$$D", "$$O", "$$C", "$$S", "$$;"], ["\u2581}"], ["\u2581int", "\u2581in", "$$c", "\u2581=", "\u258110", "$$;"], ["\u2581int", "\u2581next", "$$Upto", "\u2581=", "\u2581upto", "\u2581+", "\u258110", "$$;"], ["\u2581int", "\u2581", "$$low", "$$;"], ["\u2581int", "\u2581h", "$$igh", "$$;"], ["\u2581while", "\u2581(true)", "\u2581{"], ["\u2581if", "\u2581(", "$$next", "$$Upto", "\u2581>=", "\u2581doc", "$$ID", "$$s.Length", "$$)", "\u2581{"], ["\u2581", "$$low", "\u2581=", "\u2581next", "$$Upto", "\u2581-", "\u2581in", "$$c", "$$;"], ["\u2581h", "$$igh", "\u2581=", "\u2581doc", "$$ID", "$$s.Length", "\u2581-", "\u25811", "$$;"], ["\u2581break", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(t", "$$arget", "\u2581<=", "\u2581doc", "$$ID", "$$s[", "$$next", "$$Upto", "$$]", "$$)", "\u2581{"], ["\u2581", "$$low", "\u2581=", "\u2581next", "$$Upto", "\u2581-", "\u2581in", "$$c", "$$;"], ["\u2581h", "$$igh", "\u2581=", "\u2581next", "$$Upto", "$$;"], ["\u2581break", "$$;"], ["\u2581}"], ["\u2581in", "$$c", "\u2581*", "$$=", "\u25812", "$$;"], ["\u2581next", "$$Upto", "\u2581+=", "\u2581in", "$$c", "$$;"], ["\u2581}"], ["\u2581while", "\u2581(true)", "\u2581{"], ["\u2581if", "\u2581(", "$$low", "\u2581>", "\u2581h", "$$igh", "$$)", "\u2581{"], ["\u2581upto", "\u2581=", "\u2581", "$$low", "$$;"], ["\u2581break", "$$;"], ["\u2581}"], ["\u2581int", "\u2581m", "$$id", "\u2581=", "\u2581(int)", "\u2581((", "$$uint)", "\u2581(", "$$low", "\u2581+", "\u2581h", "$$igh", "$$)", "\u2581>>", "\u25811)", "$$;"], ["\u2581int", "\u2581cmp", "\u2581=", "\u2581doc", "$$ID", "$$s[", "$$m", "$$id", "$$]", "\u2581-", "\u2581target", "$$;"], ["\u2581if", "\u2581(c", "$$mp", "\u2581<", "\u25810)", "\u2581{"], ["\u2581", "$$low", "\u2581=", "\u2581m", "$$id", "\u2581+", "\u25811", "$$;"], ["\u2581}"], ["\u2581else", "\u2581if", "\u2581(c", "$$mp", "\u2581>", "\u25810)", "\u2581{"], ["\u2581h", "$$igh", "\u2581=", "\u2581m", "$$id", "\u2581-", "\u25811", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581upto", "\u2581=", "\u2581m", "$$id", "$$;"], ["\u2581break", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581if", "\u2581(", "$$li", "$$ve", "$$Docs", "\u2581!=", "\u2581null)", "\u2581{"], ["\u2581while", "\u2581(", "$$upto", "\u2581<", "\u2581doc", "$$ID", "$$s.Length", "$$)", "\u2581{"], ["\u2581if", "\u2581(", "$$li", "$$ve", "$$Doc", "$$s.Get", "$$(d", "$$oc", "$$ID", "$$s[", "$$upto", "$$]", "$$))", "\u2581{"], ["\u2581break", "$$;"], ["\u2581}"], ["\u2581upto", "$$++", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581if", "\u2581(", "$$upto", "\u2581==", "\u2581doc", "$$ID", "$$s.Length", "$$)", "\u2581{"], ["\u2581return", "\u2581doc", "$$ID_", "$$Ren", "$$ame", "$$d", "\u2581=", "\u2581N", "$$O", "$$_M", "$$O", "$$RE", "$$_", "$$D", "$$O", "$$C", "$$S", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581return", "\u2581doc", "$$ID_", "$$Ren", "$$ame", "$$d", "\u2581=", "\u2581doc", "$$ID", "$$s[", "$$upto", "$$]", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581int", "\u2581", "$$ad", "$$v", "$$ance", "$$(int", "\u2581target", "$$)", "\u2581{"], ["\u2581upto", "$$++", "$$;"], ["\u2581if", "\u2581(", "$$upto", "\u2581==", "\u2581doc", "$$ID", "$$s.length", "$$)", "\u2581{"], ["\u2581return", "\u2581doc", "$$ID", "\u2581=", "\u2581N", "$$O", "$$_M", "$$O", "$$RE", "$$_", "$$D", "$$O", "$$C", "$$S", "$$;"], ["\u2581}"], ["\u2581int", "\u2581in", "$$c", "\u2581=", "\u258110", "$$;"], ["\u2581int", "\u2581next", "$$Upto", "\u2581=", "\u2581upto", "$$+", "$$10", "$$;"], ["\u2581int", "\u2581", "$$low", "$$;"], ["\u2581int", "\u2581h", "$$igh", "$$;"], ["\u2581while", "\u2581(true)", "\u2581{"], ["\u2581if", "\u2581(", "$$next", "$$Upto", "\u2581>=", "\u2581doc", "$$ID", "$$s.length", "$$)", "\u2581{"], ["\u2581", "$$low", "\u2581=", "\u2581next", "$$Upto", "$$-", "$$in", "$$c", "$$;"], ["\u2581h", "$$igh", "\u2581=", "\u2581doc", "$$ID", "$$s.length", "$$-1", "$$;"], ["\u2581break", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(t", "$$arget", "\u2581<=", "\u2581doc", "$$ID", "$$s[", "$$next", "$$Upto", "$$]", "$$)", "\u2581{"], ["\u2581", "$$low", "\u2581=", "\u2581next", "$$Upto", "$$-", "$$in", "$$c", "$$;"], ["\u2581h", "$$igh", "\u2581=", "\u2581next", "$$Upto", "$$;"], ["\u2581break", "$$;"], ["\u2581}"], ["\u2581in", "$$c", "\u2581*", "$$=", "\u25812", "$$;"], ["\u2581next", "$$Upto", "\u2581+=", "\u2581in", "$$c", "$$;"], ["\u2581}"], ["\u2581while", "\u2581(true)", "\u2581{"], ["\u2581if", "\u2581(", "$$low", "\u2581>", "\u2581h", "$$igh", "$$)", "\u2581{"], ["\u2581upto", "\u2581=", "\u2581", "$$low", "$$;"], ["\u2581break", "$$;"], ["\u2581}"], ["\u2581int", "\u2581m", "$$id", "\u2581=", "\u2581(", "$$low", "\u2581+", "\u2581h", "$$igh", "$$)", "\u2581>>>", "\u25811", "$$;"], ["\u2581int", "\u2581cmp", "\u2581=", "\u2581doc", "$$ID", "$$s[", "$$m", "$$id", "$$]", "\u2581-", "\u2581target", "$$;"], ["\u2581if", "\u2581(c", "$$mp", "\u2581<", "\u25810)", "\u2581{"], ["\u2581", "$$low", "\u2581=", "\u2581m", "$$id", "\u2581+", "\u25811", "$$;"], ["\u2581}"], ["\u2581else", "\u2581if", "\u2581(c", "$$mp", "\u2581>", "\u25810)", "\u2581{"], ["\u2581h", "$$igh", "\u2581=", "\u2581m", "$$id", "\u2581-", "\u25811", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581upto", "\u2581=", "\u2581m", "$$id", "$$;"], ["\u2581break", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581if", "\u2581(", "$$upto", "\u2581==", "\u2581doc", "$$ID", "$$s.length", "$$)", "\u2581{"], ["\u2581return", "\u2581doc", "$$ID", "\u2581=", "\u2581N", "$$O", "$$_M", "$$O", "$$RE", "$$_", "$$D", "$$O", "$$C", "$$S", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581return", "\u2581doc", "$$ID", "\u2581=", "\u2581doc", "$$ID", "$$s[", "$$upto", "$$]", "$$;"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public void RegisterListener(POIFSReaderListener listener) {\n    if (listener == null) {\n        throw new NullReferenceException();\n    }\n    if (registryClosed) {\n        throw new InvalidOperationException();\n    }\n    registry.RegisterListener(listener);\n}\n", "java": "public void registerListener(final POIFSReaderListener listener) {\n    if (listener == null) {\n        throw new NullPointerException();\n    }\n    if (registryClosed) {\n        throw new IllegalStateException();\n    }\n    registry.registerListener(listener);\n}\n", "cs_t": [["\u2581public", "\u2581void", "\u2581Register", "$$Lis", "$$ten", "$$er(", "$$POI", "$$F", "$$S", "$$Reader", "$$Listener", "\u2581listener", "$$)", "\u2581{"], ["\u2581if", "\u2581(", "$$li", "$$s", "$$tener", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581Null", "$$Reference", "$$Exception", "$$()", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(re", "$$gist", "$$ry", "$$C", "$$lo", "$$sed", "$$)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581InvalidOperation", "$$Exception", "$$()", "$$;"], ["\u2581}"], ["\u2581re", "$$gist", "$$ry", "$$.", "$$Re", "$$gister", "$$Lis", "$$ten", "$$er(", "$$li", "$$s", "$$tener", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581re", "$$gister", "$$Lis", "$$ten", "$$er(", "$$f", "$$inal", "\u2581P", "$$O", "$$I", "$$F", "$$S", "$$Reader", "$$Listener", "\u2581listener", "$$)", "\u2581{"], ["\u2581if", "\u2581(", "$$li", "$$s", "$$tener", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581Null", "$$Pointer", "$$Exception", "$$()", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(re", "$$gist", "$$ry", "$$C", "$$lo", "$$sed", "$$)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581IllegalState", "$$Exception", "$$()", "$$;"], ["\u2581}"], ["\u2581re", "$$gist", "$$ry", "$$.re", "$$gister", "$$Lis", "$$ten", "$$er(", "$$li", "$$s", "$$tener", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public static int[] Grow(int[] array, int minSize) {\n    Debug.Assert(minSize >= 0, \"size must be positive (got \" + minSize + \"): likely integer overflow?\");\n    if (array.Length < minSize) {\n        int[] newArray = new int[Oversize(minSize, RamUsageEstimator.NUM_BYTES_INT32)];\n        Array.Copy(array, 0, newArray, 0, array.Length);\n        return newArray;\n    }\n    else {\n        return array;\n    }\n}\n", "java": "public static int[] grow(int[] array, int minSize) {\n    assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";\n    if (array.length < minSize) {\n        return growExact(array, oversize(minSize, Integer.BYTES));\n    }\n    elsereturn array;\n}\n", "cs_t": [["\u2581public", "\u2581static", "\u2581int[]", "\u2581Grow", "$$(int[]", "\u2581array,", "\u2581int", "\u2581minSize)", "\u2581{"], ["\u2581Debug.Assert(", "$$min", "$$Size", "\u2581>=", "\u25810,", "\u2581\"", "$$size", "\u2581must", "\u2581be", "\u2581po", "$$sitive", "\u2581(", "$$g", "$$ot", "\u2581\"", "\u2581+", "\u2581min", "$$Size", "\u2581+", "\u2581\")", "$$:", "\u2581li", "$$k", "$$el", "$$y", "\u2581in", "$$teg", "$$er", "\u2581over", "$$flow", "$$?", "$$\")", "$$;"], ["\u2581if", "\u2581(array", "$$.Length", "\u2581<", "\u2581minSize)", "\u2581{"], ["\u2581int[]", "\u2581newArray", "\u2581=", "\u2581new", "\u2581int[", "$$Over", "$$size", "$$(", "$$min", "$$Size,", "\u2581RamUsageEstimator.NUM_BYTES_", "$$IN", "$$T", "$$32", "$$)", "$$]", "$$;"], ["\u2581Array.Copy", "$$(array,", "\u25810,", "\u2581newArray", "$$,", "\u25810,", "\u2581array", "$$.Length)", "$$;"], ["\u2581return", "\u2581newArray", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581return", "\u2581array", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581static", "\u2581int[]", "\u2581grow", "$$(int[]", "\u2581array,", "\u2581int", "\u2581minSize)", "\u2581{"], ["\u2581assert", "\u2581min", "$$Size", "\u2581>=", "\u25810", "$$:", "\u2581\"", "$$size", "\u2581must", "\u2581be", "\u2581po", "$$sitive", "\u2581(", "$$g", "$$ot", "\u2581\"", "\u2581+", "\u2581min", "$$Size", "\u2581+", "\u2581\")", "$$:", "\u2581li", "$$k", "$$el", "$$y", "\u2581in", "$$teg", "$$er", "\u2581over", "$$flow", "$$?", "$$\"", "$$;"], ["\u2581if", "\u2581(array", "$$.length", "\u2581<", "\u2581minSize)", "\u2581{"], ["\u2581return", "\u2581grow", "$$Exact", "$$(array,", "\u2581over", "$$size", "$$(", "$$min", "$$Size,", "\u2581Integ", "$$er.", "$$B", "$$YTE", "$$S", "$$))", "$$;"], ["\u2581}"], ["\u2581else", "$$return", "\u2581array", "$$;"], ["\u2581}"]]}, {"cs": "public virtual void VisitTerminal(ITerminalNode node) {\n    ParserRuleContext parent = (ParserRuleContext)((IRuleNode)node.Parent).RuleContext;\n    IToken token = node.Symbol;\n    Output.WriteLine(\"consume \" + token + \" rule \" + this._enclosing.RuleNames[parent.RuleIndex]);\n}\n", "java": "public void visitTerminal(TerminalNode node) {\n    System.out.println(\"consume \"+node.getSymbol()+\" rule \"+getRuleNames()[_ctx.getRuleIndex()]);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581void", "\u2581V", "$$is", "$$it", "$$Term", "$$inal", "$$(I", "$$Term", "$$inal", "$$Node", "\u2581n", "$$ode", "$$)", "\u2581{"], ["\u2581Par", "$$ser", "$$RuleContext", "\u2581parent", "\u2581=", "\u2581(", "$$Parser", "$$RuleContext", "$$)((", "$$I", "$$Rule", "$$Node", "$$)", "$$n", "$$ode", "$$.", "$$Parent", "$$).", "$$RuleContext", "$$;"], ["\u2581I", "$$Token", "\u2581token", "\u2581=", "\u2581n", "$$ode", "$$.S", "$$ymbol", "$$;"], ["\u2581", "$$Output", "$$.Write", "$$Line", "$$(\"", "$$con", "$$sume", "\u2581\"", "\u2581+", "\u2581token", "\u2581+", "\u2581\"", "\u2581rule", "\u2581\"", "\u2581+", "\u2581this._enclosing", "$$.", "$$Rule", "$$Names", "$$[", "$$parent", "$$.", "$$Rule", "$$Index", "$$]", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581v", "$$is", "$$it", "$$Term", "$$inal", "$$(", "$$Term", "$$inal", "$$Node", "\u2581n", "$$ode", "$$)", "\u2581{"], ["\u2581System.", "$$out", "$$.p", "$$rint", "$$ln", "$$(\"", "$$con", "$$sume", "\u2581\"+", "$$n", "$$ode", "$$.get", "$$S", "$$ymbol", "$$()", "$$+\"", "\u2581rule", "\u2581\"+", "$$get", "$$Rule", "$$Names", "$$()", "$$[", "$$_", "$$ctx", "$$.get", "$$Rule", "$$Index", "$$()", "$$]", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override TokenStream Create(TokenStream input) {\n    return new LatvianStemFilter(input);\n}\n", "java": "public TokenStream create(TokenStream input) {\n    return new LatvianStemFilter(input);\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581TokenStream", "\u2581Create(TokenStream", "\u2581input)", "\u2581{"], ["\u2581return", "\u2581new", "\u2581L", "$$at", "$$v", "$$ian", "$$Stem", "$$Filter(input", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581TokenStream", "\u2581create(TokenStream", "\u2581input)", "\u2581{"], ["\u2581return", "\u2581new", "\u2581L", "$$at", "$$v", "$$ian", "$$Stem", "$$Filter(input", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual IncreaseReplicaCountResponse IncreaseReplicaCount(IncreaseReplicaCountRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = IncreaseReplicaCountRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = IncreaseReplicaCountResponseUnmarshaller.Instance;\n    return Invoke<IncreaseReplicaCountResponse>(request, options);\n}\n", "java": "public ReplicationGroup increaseReplicaCount(IncreaseReplicaCountRequest request) {\n    request = beforeClientExecution(request);\n    return executeIncreaseReplicaCount(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581In", "$$cre", "$$ase", "$$Re", "$$plic", "$$a", "$$Count", "$$Response", "\u2581In", "$$cre", "$$ase", "$$Re", "$$plic", "$$a", "$$Count", "$$(", "$$In", "$$cre", "$$ase", "$$Re", "$$plic", "$$a", "$$Count", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581In", "$$cre", "$$ase", "$$Re", "$$plic", "$$a", "$$Count", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581In", "$$cre", "$$ase", "$$Re", "$$plic", "$$a", "$$Count", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<", "$$In", "$$cre", "$$ase", "$$Re", "$$plic", "$$a", "$$Count", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Re", "$$plication", "$$Group", "\u2581in", "$$cre", "$$ase", "$$Re", "$$plic", "$$a", "$$Count", "$$(", "$$In", "$$cre", "$$ase", "$$Re", "$$plic", "$$a", "$$Count", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581execute", "$$In", "$$cre", "$$ase", "$$Re", "$$plic", "$$a", "$$Count", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\n    for (int i = 0; i < iterations; ++i) {\n        int byte0 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (int)((uint)byte0 >> 5);\n        values[valuesOffset++] = ((int)((uint)byte0 >> 2)) & 7;\n        int byte1 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte0 & 3) << 1) | ((int)((uint)byte1 >> 7));\n        values[valuesOffset++] = ((int)((uint)byte1 >> 4)) & 7;\n        values[valuesOffset++] = ((int)((uint)byte1 >> 1)) & 7;\n        int byte2 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte1 & 1) << 2) | ((int)((uint)byte2 >> 6));\n        values[valuesOffset++] = ((int)((uint)byte2 >> 3)) & 7;\n        values[valuesOffset++] = byte2 & 7;\n    }\n}\n", "java": "public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n    for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte0 >>> 5;\n        values[valuesOffset++] = (byte0 >>> 2) & 7;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte0 & 3) << 1) | (byte1 >>> 7);\n        values[valuesOffset++] = (byte1 >>> 4) & 7;\n        values[valuesOffset++] = (byte1 >>> 1) & 7;\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte1 & 1) << 2) | (byte2 >>> 6);\n        values[valuesOffset++] = (byte2 >>> 3) & 7;\n        values[valuesOffset++] = byte2 & 7;\n    }\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581void", "\u2581D", "$$ecode", "$$(byte[]", "\u2581blocks,", "\u2581int", "\u2581blocksOffset,", "\u2581int[]", "\u2581values,", "\u2581int", "\u2581valuesOffset,", "\u2581int", "\u2581iterations)", "\u2581{"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810;", "\u2581i", "\u2581<", "\u2581iterations;", "\u2581++i)", "\u2581{"], ["\u2581int", "\u2581byte", "$$0", "\u2581=", "\u2581blocks[blocksOffset++]", "\u2581&", "\u25810xFF", "$$;"], ["\u2581values[valuesOffset++]", "\u2581=", "\u2581(int", "$$)((", "$$uint)", "$$byte", "$$0", "\u2581>>", "\u25815", "$$)", "$$;"], ["\u2581values[valuesOffset++]", "\u2581=", "\u2581((int)((", "$$uint)", "$$byte", "$$0", "\u2581>>", "\u25812", "$$))", "\u2581&", "\u25817", "$$;"], ["\u2581int", "\u2581byte", "$$1", "\u2581=", "\u2581blocks[blocksOffset++]", "\u2581&", "\u25810xFF", "$$;"], ["\u2581values[valuesOffset++]", "\u2581=", "\u2581((byte", "$$0", "\u2581&", "\u25813", "$$)", "\u2581<<", "\u25811)", "\u2581|", "\u2581((int)((", "$$uint)", "$$byte", "$$1", "\u2581>>", "\u25817", "$$))", "$$;"], ["\u2581values[valuesOffset++]", "\u2581=", "\u2581((int)((", "$$uint)", "$$byte", "$$1", "\u2581>>", "\u25814", "$$))", "\u2581&", "\u25817", "$$;"], ["\u2581values[valuesOffset++]", "\u2581=", "\u2581((int)((", "$$uint)", "$$byte", "$$1", "\u2581>>", "\u25811", "$$))", "\u2581&", "\u25817", "$$;"], ["\u2581int", "\u2581byte", "$$2", "\u2581=", "\u2581blocks[blocksOffset++]", "\u2581&", "\u25810xFF", "$$;"], ["\u2581values[valuesOffset++]", "\u2581=", "\u2581((byte", "$$1", "\u2581&", "\u25811)", "\u2581<<", "\u25812)", "\u2581|", "\u2581((int)((", "$$uint)", "$$byte", "$$2", "\u2581>>", "\u25816", "$$))", "$$;"], ["\u2581values[valuesOffset++]", "\u2581=", "\u2581((int)((", "$$uint)", "$$byte", "$$2", "\u2581>>", "\u25813", "$$))", "\u2581&", "\u25817", "$$;"], ["\u2581values[valuesOffset++]", "\u2581=", "\u2581byte", "$$2", "\u2581&", "\u25817", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581decode", "$$(byte[]", "\u2581blocks,", "\u2581int", "\u2581blocksOffset,", "\u2581long[]", "\u2581values,", "\u2581int", "\u2581valuesOffset,", "\u2581int", "\u2581iterations)", "\u2581{"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810;", "\u2581i", "\u2581<", "\u2581iterations;", "\u2581++i)", "\u2581{"], ["\u2581final", "\u2581long", "\u2581byte", "$$0", "\u2581=", "\u2581blocks[blocksOffset++]", "\u2581&", "\u25810xFF", "$$;"], ["\u2581values[valuesOffset++]", "\u2581=", "\u2581byte", "$$0", "\u2581>>>", "\u25815", "$$;"], ["\u2581values[valuesOffset++]", "\u2581=", "\u2581(byte", "$$0", "\u2581>>>", "\u25812)", "\u2581&", "\u25817", "$$;"], ["\u2581final", "\u2581long", "\u2581byte", "$$1", "\u2581=", "\u2581blocks[blocksOffset++]", "\u2581&", "\u25810xFF", "$$;"], ["\u2581values[valuesOffset++]", "\u2581=", "\u2581((byte", "$$0", "\u2581&", "\u25813", "$$)", "\u2581<<", "\u25811)", "\u2581|", "\u2581(byte", "$$1", "\u2581>>>", "\u25817", "$$)", "$$;"], ["\u2581values[valuesOffset++]", "\u2581=", "\u2581(byte", "$$1", "\u2581>>>", "\u25814)", "\u2581&", "\u25817", "$$;"], ["\u2581values[valuesOffset++]", "\u2581=", "\u2581(byte", "$$1", "\u2581>>>", "\u25811)", "\u2581&", "\u25817", "$$;"], ["\u2581final", "\u2581long", "\u2581byte", "$$2", "\u2581=", "\u2581blocks[blocksOffset++]", "\u2581&", "\u25810xFF", "$$;"], ["\u2581values[valuesOffset++]", "\u2581=", "\u2581((byte", "$$1", "\u2581&", "\u25811)", "\u2581<<", "\u25812)", "\u2581|", "\u2581(byte", "$$2", "\u2581>>>", "\u25816", "$$)", "$$;"], ["\u2581values[valuesOffset++]", "\u2581=", "\u2581(byte", "$$2", "\u2581>>>", "\u25813", "$$)", "\u2581&", "\u25817", "$$;"], ["\u2581values[valuesOffset++]", "\u2581=", "\u2581byte", "$$2", "\u2581&", "\u25817", "$$;"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public virtual StopHyperParameterTuningJobResponse StopHyperParameterTuningJob(StopHyperParameterTuningJobRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = StopHyperParameterTuningJobRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = StopHyperParameterTuningJobResponseUnmarshaller.Instance;\n    return Invoke<StopHyperParameterTuningJobResponse>(request, options);\n}\n", "java": "public StopHyperParameterTuningJobResult stopHyperParameterTuningJob(StopHyperParameterTuningJobRequest request) {\n    request = beforeClientExecution(request);\n    return executeStopHyperParameterTuningJob(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Stop", "$$H", "$$yper", "$$Parameter", "$$T", "$$un", "$$ingJob", "$$Response", "\u2581Stop", "$$H", "$$yper", "$$Parameter", "$$T", "$$un", "$$ingJob", "$$(", "$$Stop", "$$H", "$$yper", "$$Parameter", "$$T", "$$un", "$$ingJob", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Stop", "$$H", "$$yper", "$$Parameter", "$$T", "$$un", "$$ingJob", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Stop", "$$H", "$$yper", "$$Parameter", "$$T", "$$un", "$$ingJob", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<", "$$Stop", "$$H", "$$yper", "$$Parameter", "$$T", "$$un", "$$ingJob", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Stop", "$$H", "$$yper", "$$Parameter", "$$T", "$$un", "$$ingJob", "$$Result", "\u2581stop", "$$H", "$$yper", "$$Parameter", "$$T", "$$un", "$$ingJob", "$$(", "$$Stop", "$$H", "$$yper", "$$Parameter", "$$T", "$$un", "$$ingJob", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581execute", "$$Stop", "$$H", "$$yper", "$$Parameter", "$$T", "$$un", "$$ingJob", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual ResetNetworkInterfaceAttributeResponse ResetNetworkInterfaceAttribute(ResetNetworkInterfaceAttributeRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = ResetNetworkInterfaceAttributeRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = ResetNetworkInterfaceAttributeResponseUnmarshaller.Instance;\n    return Invoke<ResetNetworkInterfaceAttributeResponse>(request, options);\n}\n", "java": "public ResetNetworkInterfaceAttributeResult resetNetworkInterfaceAttribute(ResetNetworkInterfaceAttributeRequest request) {\n    request = beforeClientExecution(request);\n    return executeResetNetworkInterfaceAttribute(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Reset", "$$NetworkInterface", "$$Attribute", "$$Response", "\u2581Reset", "$$NetworkInterface", "$$Attribute", "$$(", "$$Reset", "$$NetworkInterface", "$$Attribute", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Reset", "$$NetworkInterface", "$$Attribute", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Reset", "$$NetworkInterface", "$$Attribute", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<", "$$Reset", "$$NetworkInterface", "$$Attribute", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Reset", "$$NetworkInterface", "$$Attribute", "$$Result", "\u2581reset", "$$NetworkInterface", "$$Attribute", "$$(", "$$Reset", "$$NetworkInterface", "$$Attribute", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581execute", "$$Reset", "$$NetworkInterface", "$$Attribute", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual RevBlob LookupBlob(AnyObjectId id) {\n    RevBlob c = (RevBlob)objects.Get(id);\n    if (c == null) {\n        c = new RevBlob(id);\n        objects.Add(c);\n    }\n    return c;\n}\n", "java": "public RevBlob lookupBlob(AnyObjectId id) {\n    RevBlob c = (RevBlob) objects.get(id);\n    if (c == null) {\n        c = new RevBlob(id);\n        objects.add(c);\n    }\n    return c;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Rev", "$$B", "$$lob", "\u2581", "$$Lookup", "$$B", "$$lob", "$$(", "$$AnyObjectId", "\u2581id)", "\u2581{"], ["\u2581Rev", "$$B", "$$lob", "\u2581c", "\u2581=", "\u2581(", "$$Rev", "$$B", "$$lob", "$$)", "$$object", "$$s.Get", "$$(id", "$$)", "$$;"], ["\u2581if", "\u2581(c", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581c", "\u2581=", "\u2581new", "\u2581Rev", "$$B", "$$lob", "$$(id", "$$)", "$$;"], ["\u2581object", "$$s.Add(", "$$c", "$$)", "$$;"], ["\u2581}"], ["\u2581return", "\u2581c", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Rev", "$$B", "$$lob", "\u2581lo", "$$okup", "$$B", "$$lob", "$$(", "$$AnyObjectId", "\u2581id)", "\u2581{"], ["\u2581Rev", "$$B", "$$lob", "\u2581c", "\u2581=", "\u2581(", "$$Rev", "$$B", "$$lob", "$$)", "\u2581object", "$$s.get", "$$(id", "$$)", "$$;"], ["\u2581if", "\u2581(c", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581c", "\u2581=", "\u2581new", "\u2581Rev", "$$B", "$$lob", "$$(id", "$$)", "$$;"], ["\u2581object", "$$s.add(", "$$c", "$$)", "$$;"], ["\u2581}"], ["\u2581return", "\u2581c", "$$;"], ["\u2581}"]]}, {"cs": "public virtual ListGroupMembershipsResponse ListGroupMemberships(ListGroupMembershipsRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = ListGroupMembershipsRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = ListGroupMembershipsResponseUnmarshaller.Instance;\n    return Invoke<ListGroupMembershipsResponse>(request, options);\n}\n", "java": "public ListGroupMembershipsResult listGroupMemberships(ListGroupMembershipsRequest request) {\n    request = beforeClientExecution(request);\n    return executeListGroupMemberships(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581List", "$$Group", "$$Membership", "$$sResponse", "\u2581List", "$$Group", "$$Membership", "$$s(List", "$$Group", "$$Membership", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581List", "$$Group", "$$Membership", "$$s", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581List", "$$Group", "$$Membership", "$$s", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<List", "$$Group", "$$Membership", "$$sResponse>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581List", "$$Group", "$$Membership", "$$sResult", "\u2581list", "$$Group", "$$Membership", "$$s(List", "$$Group", "$$Membership", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeList", "$$Group", "$$Membership", "$$s", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public static void Mkdir(FilePath d, bool skipExisting) {\n    if (!d.Mkdir()) {\n        if (skipExisting && d.IsDirectory()) {\n            return;\n        }\n        throw new IOException(MessageFormat.Format(JGitText.Get().mkDirFailed, d.GetAbsolutePath()));\n    }\n}\n", "java": "public static void mkdir(File d, boolean skipExisting)throws IOException {\n    if (!d.mkdir()) {\n        if (skipExisting && d.isDirectory())return;\n        throw new IOException(MessageFormat.format(JGitText.get().mkDirFailed, d.getAbsolutePath()));\n    }\n}\n", "cs_t": [["\u2581public", "\u2581static", "\u2581void", "\u2581M", "$$k", "$$d", "$$ir", "$$(", "$$File", "$$Path", "\u2581d", "$$,", "\u2581bool", "\u2581skip", "$$Ex", "$$ist", "$$ing", "$$)", "\u2581{"], ["\u2581if", "\u2581(!", "$$d", "$$.M", "$$k", "$$d", "$$ir", "$$())", "\u2581{"], ["\u2581if", "\u2581(", "$$skip", "$$Ex", "$$ist", "$$ing", "\u2581&&", "\u2581d", "$$.Is", "$$Directory", "$$())", "\u2581{"], ["\u2581return", "$$;"], ["\u2581}"], ["\u2581throw", "\u2581new", "\u2581IOException", "$$(", "$$MessageFormat", "$$.Format", "$$(JGitText.Get", "$$().", "$$m", "$$k", "$$Dir", "$$Fa", "$$iled", "$$,", "\u2581d", "$$.Get", "$$A", "$$bs", "$$ol", "$$ute", "$$Path", "$$()))", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581static", "\u2581void", "\u2581m", "$$k", "$$d", "$$ir", "$$(", "$$File", "\u2581d", "$$,", "\u2581boolean", "\u2581skip", "$$Ex", "$$ist", "$$ing", "$$)", "$$throw", "$$s", "\u2581IOException", "\u2581{"], ["\u2581if", "\u2581(!", "$$d", "$$.", "$$m", "$$k", "$$d", "$$ir", "$$())", "\u2581{"], ["\u2581if", "\u2581(", "$$skip", "$$Ex", "$$ist", "$$ing", "\u2581&&", "\u2581d", "$$.is", "$$Directory", "$$())", "$$return", "$$;"], ["\u2581throw", "\u2581new", "\u2581IOException", "$$(", "$$MessageFormat", "$$.format", "$$(JGitText", "$$.get().", "$$m", "$$k", "$$Dir", "$$Fa", "$$iled", "$$,", "\u2581d", "$$.get", "$$A", "$$bs", "$$ol", "$$ute", "$$Path", "$$()))", "$$;"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public virtual UpdateDetectorVersionMetadataResponse UpdateDetectorVersionMetadata(UpdateDetectorVersionMetadataRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = UpdateDetectorVersionMetadataRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = UpdateDetectorVersionMetadataResponseUnmarshaller.Instance;\n    return Invoke<UpdateDetectorVersionMetadataResponse>(request, options);\n}\n", "java": "public UpdateDetectorVersionMetadataResult updateDetectorVersionMetadata(UpdateDetectorVersionMetadataRequest request) {\n    request = beforeClientExecution(request);\n    return executeUpdateDetectorVersionMetadata(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Update", "$$Detector", "$$Version", "$$Metadata", "$$Response", "\u2581Update", "$$Detector", "$$Version", "$$Metadata", "$$(Update", "$$Detector", "$$Version", "$$Metadata", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Update", "$$Detector", "$$Version", "$$Metadata", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Update", "$$Detector", "$$Version", "$$Metadata", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Update", "$$Detector", "$$Version", "$$Metadata", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Update", "$$Detector", "$$Version", "$$Metadata", "$$Result", "\u2581update", "$$Detector", "$$Version", "$$Metadata", "$$(Update", "$$Detector", "$$Version", "$$Metadata", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeUpdate", "$$Detector", "$$Version", "$$Metadata", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual void write(string str, int offset, int count) {\n    if ((offset | count) < 0 || offset > str.Length - count) {\n        throw new java.lang.StringIndexOutOfBoundsException(str, offset, count);\n    }\n    char[] buf = new char[count];\n    Sharpen.StringHelper.GetCharsForString(str, offset, offset + count, buf, 0);\n    lock (@lock) {\n        write(buf, 0, buf.Length);\n    }\n}\n", "java": "public void write(String str, int offset, int count) throws IOException {\n    if ((offset | count) < 0 || offset > str.length() - count) {\n        throw new StringIndexOutOfBoundsException(str, offset, count);\n    }\n    char[] buf = new char[count];\n    str.getChars(offset, offset + count, buf, 0);\n    synchronized (lock) {\n        write(buf, 0, buf.length);\n    }\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581void", "\u2581write", "$$(string", "\u2581str", "$$,", "\u2581int", "\u2581offset,", "\u2581int", "\u2581count)", "\u2581{"], ["\u2581if", "\u2581(", "$$(offset", "\u2581|", "\u2581count)", "\u2581<", "\u25810", "\u2581||", "\u2581offset", "\u2581>", "\u2581str", "$$.Length", "\u2581-", "\u2581count)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581java.lang.String", "$$IndexOutOf", "$$Bounds", "$$Exception(", "$$str", "$$,", "\u2581offset,", "\u2581count)", "$$;"], ["\u2581}"], ["\u2581char[]", "\u2581buf", "\u2581=", "\u2581new", "\u2581char[", "$$count", "$$]", "$$;"], ["\u2581Sharpen.", "$$String", "$$H", "$$el", "$$per", "$$.Get", "$$Char", "$$sFor", "$$String(", "$$str", "$$,", "\u2581offset,", "\u2581offset", "\u2581+", "\u2581count", "$$,", "\u2581buf", "$$,", "\u25810)", "$$;"], ["\u2581lock", "\u2581(@", "$$lock", "$$)", "\u2581{"], ["\u2581write", "$$(b", "$$uf", "$$,", "\u25810,", "\u2581buf", "$$.Length)", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581write", "$$(String", "\u2581str", "$$,", "\u2581int", "\u2581offset,", "\u2581int", "\u2581count)", "\u2581throws", "\u2581IOException", "\u2581{"], ["\u2581if", "\u2581(", "$$(offset", "\u2581|", "\u2581count)", "\u2581<", "\u25810", "\u2581||", "\u2581offset", "\u2581>", "\u2581str", "$$.length()", "\u2581-", "\u2581count)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581String", "$$IndexOutOf", "$$Bounds", "$$Exception(", "$$str", "$$,", "\u2581offset,", "\u2581count)", "$$;"], ["\u2581}"], ["\u2581char[]", "\u2581buf", "\u2581=", "\u2581new", "\u2581char[", "$$count", "$$]", "$$;"], ["\u2581str", "$$.get", "$$Char", "$$s(", "$$offset", "$$,", "\u2581offset", "\u2581+", "\u2581count", "$$,", "\u2581buf", "$$,", "\u25810)", "$$;"], ["\u2581synchronized", "\u2581(", "$$lock", "$$)", "\u2581{"], ["\u2581write", "$$(b", "$$uf", "$$,", "\u25810,", "\u2581buf", "$$.length)", "$$;"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public override void ensureCapacity(int min) {\n    lock (this) {\n        base.ensureCapacity(min);\n    }\n}\n", "java": "public synchronized void ensureCapacity(int min) {\n    super.ensureCapacity(min);\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581void", "\u2581en", "$$sure", "$$Capacity", "$$(int", "\u2581min", "$$)", "\u2581{"], ["\u2581lock", "\u2581(this)", "\u2581{"], ["\u2581base", "$$.", "$$en", "$$sure", "$$Capacity", "$$(", "$$min", "$$)", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581synchronized", "\u2581void", "\u2581en", "$$sure", "$$Capacity", "$$(int", "\u2581min", "$$)", "\u2581{"], ["\u2581super.", "$$en", "$$sure", "$$Capacity", "$$(", "$$min", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DescribeRecipeResponse DescribeRecipe(DescribeRecipeRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DescribeRecipeRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DescribeRecipeResponseUnmarshaller.Instance;\n    return Invoke<DescribeRecipeResponse>(request, options);\n}\n", "java": "public DescribeRecipeResult describeRecipe(DescribeRecipeRequest request) {\n    request = beforeClientExecution(request);\n    return executeDescribeRecipe(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Describe", "$$Rec", "$$ip", "$$e", "$$Response", "\u2581Describe", "$$Rec", "$$ip", "$$e", "$$(Describe", "$$Rec", "$$ip", "$$e", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Describe", "$$Rec", "$$ip", "$$e", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Describe", "$$Rec", "$$ip", "$$e", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Describe", "$$Rec", "$$ip", "$$e", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Describe", "$$Rec", "$$ip", "$$e", "$$Result", "\u2581describe", "$$Rec", "$$ip", "$$e", "$$(Describe", "$$Rec", "$$ip", "$$e", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDescribe", "$$Rec", "$$ip", "$$e", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DisassociateRouteTableResponse DisassociateRouteTable(DisassociateRouteTableRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DisassociateRouteTableRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DisassociateRouteTableResponseUnmarshaller.Instance;\n    return Invoke<DisassociateRouteTableResponse>(request, options);\n}\n", "java": "public DisassociateRouteTableResult disassociateRouteTable(DisassociateRouteTableRequest request) {\n    request = beforeClientExecution(request);\n    return executeDisassociateRouteTable(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Disassociate", "$$RouteTable", "$$Response", "\u2581Disassociate", "$$RouteTable", "$$(", "$$Disassociate", "$$RouteTable", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Disassociate", "$$RouteTable", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Disassociate", "$$RouteTable", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<", "$$Disassociate", "$$RouteTable", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Disassociate", "$$RouteTable", "$$Result", "\u2581dis", "$$associate", "$$RouteTable", "$$(", "$$Disassociate", "$$RouteTable", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581execute", "$$Disassociate", "$$RouteTable", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public SetTopicAttributesRequest(string topicArn, string attributeName, string attributeValue) {\n    _topicArn = topicArn;\n    _attributeName = attributeName;\n    _attributeValue = attributeValue;\n}\n", "java": "public SetTopicAttributesRequest(String topicArn, String attributeName, String attributeValue) {\n    setTopicArn(topicArn);\n    setAttributeName(attributeName);\n    setAttributeValue(attributeValue);\n}\n", "cs_t": [["\u2581public", "\u2581Set", "$$To", "$$pic", "$$Attributes", "$$Request(string", "\u2581to", "$$pic", "$$Arn", "$$,", "\u2581string", "\u2581at", "$$tribute", "$$Name,", "\u2581string", "\u2581at", "$$tribute", "$$Value)", "\u2581{"], ["\u2581_", "$$to", "$$pic", "$$Arn", "\u2581=", "\u2581to", "$$pic", "$$Arn", "$$;"], ["\u2581_", "$$at", "$$tribute", "$$Name", "\u2581=", "\u2581at", "$$tribute", "$$Name", "$$;"], ["\u2581_", "$$at", "$$tribute", "$$Value", "\u2581=", "\u2581at", "$$tribute", "$$Value", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Set", "$$To", "$$pic", "$$Attributes", "$$Request(String", "\u2581to", "$$pic", "$$Arn", "$$,", "\u2581String", "\u2581at", "$$tribute", "$$Name,", "\u2581String", "\u2581at", "$$tribute", "$$Value)", "\u2581{"], ["\u2581set", "$$To", "$$pic", "$$Arn", "$$(", "$$to", "$$pic", "$$Arn", "$$)", "$$;"], ["\u2581set", "$$Attribute", "$$Name(", "$$at", "$$tribute", "$$Name)", "$$;"], ["\u2581set", "$$Attribute", "$$Value(", "$$at", "$$tribute", "$$Value)", "$$;"], ["\u2581}"]]}, {"cs": "public static float[] Grow(float[] array, int minSize) {\n    Debug.Assert(minSize >= 0, \"size must be positive (got \" + minSize + \"): likely integer overflow?\");\n    if (array.Length < minSize) {\n        float[] newArray = new float[Oversize(minSize, RamUsageEstimator.NUM_BYTES_SINGLE)];\n        Array.Copy(array, 0, newArray, 0, array.Length);\n        return newArray;\n    }\n    else {\n        return array;\n    }\n}\n", "java": "public static char[] grow(char[] array, int minSize) {\n    assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";\n    if (array.length < minSize) {\n        return growExact(array, oversize(minSize, Character.BYTES));\n    }\n    elsereturn array;\n}\n", "cs_t": [["\u2581public", "\u2581static", "\u2581float", "$$[]", "\u2581Grow", "$$(float", "$$[]", "\u2581array,", "\u2581int", "\u2581minSize)", "\u2581{"], ["\u2581Debug.Assert(", "$$min", "$$Size", "\u2581>=", "\u25810,", "\u2581\"", "$$size", "\u2581must", "\u2581be", "\u2581po", "$$sitive", "\u2581(", "$$g", "$$ot", "\u2581\"", "\u2581+", "\u2581min", "$$Size", "\u2581+", "\u2581\")", "$$:", "\u2581li", "$$k", "$$el", "$$y", "\u2581in", "$$teg", "$$er", "\u2581over", "$$flow", "$$?", "$$\")", "$$;"], ["\u2581if", "\u2581(array", "$$.Length", "\u2581<", "\u2581minSize)", "\u2581{"], ["\u2581float", "$$[]", "\u2581newArray", "\u2581=", "\u2581new", "\u2581float", "$$[", "$$Over", "$$size", "$$(", "$$min", "$$Size,", "\u2581RamUsageEstimator.NUM_BYTES_", "$$S", "$$ING", "$$LE", "$$)", "$$]", "$$;"], ["\u2581Array.Copy", "$$(array,", "\u25810,", "\u2581newArray", "$$,", "\u25810,", "\u2581array", "$$.Length)", "$$;"], ["\u2581return", "\u2581newArray", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581return", "\u2581array", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581static", "\u2581char[]", "\u2581grow", "$$(char[]", "\u2581array,", "\u2581int", "\u2581minSize)", "\u2581{"], ["\u2581assert", "\u2581min", "$$Size", "\u2581>=", "\u25810", "$$:", "\u2581\"", "$$size", "\u2581must", "\u2581be", "\u2581po", "$$sitive", "\u2581(", "$$g", "$$ot", "\u2581\"", "\u2581+", "\u2581min", "$$Size", "\u2581+", "\u2581\")", "$$:", "\u2581li", "$$k", "$$el", "$$y", "\u2581in", "$$teg", "$$er", "\u2581over", "$$flow", "$$?", "$$\"", "$$;"], ["\u2581if", "\u2581(array", "$$.length", "\u2581<", "\u2581minSize)", "\u2581{"], ["\u2581return", "\u2581grow", "$$Exact", "$$(array,", "\u2581over", "$$size", "$$(", "$$min", "$$Size,", "\u2581Character", "$$.B", "$$YTE", "$$S", "$$))", "$$;"], ["\u2581}"], ["\u2581else", "$$return", "\u2581array", "$$;"], ["\u2581}"]]}, {"cs": "public virtual NGit.Api.StashCreateCommand SetRef(string @ref) {\n    this.@ref = @ref;\n    return this;\n}\n", "java": "public StashCreateCommand setRef(String ref) {\n    this.ref = ref;\n    return this;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581NGit.Api.", "$$St", "$$ash", "$$Create", "$$Command", "\u2581Set", "$$Ref", "$$(string", "\u2581@", "$$ref", "$$)", "\u2581{"], ["\u2581this.", "$$@", "$$ref", "\u2581=", "\u2581@", "$$ref", "$$;"], ["\u2581return", "\u2581this", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581St", "$$ash", "$$Create", "$$Command", "\u2581set", "$$Ref", "$$(String", "\u2581ref", "$$)", "\u2581{"], ["\u2581this.", "$$ref", "\u2581=", "\u2581ref", "$$;"], ["\u2581return", "\u2581this", "$$;"], ["\u2581}"]]}, {"cs": "public FormulaRecord(RecordInputStream in1):base(in1) {\n    long valueLongBits  = in1.ReadLong();\n    field_5_options = in1.ReadShort();\n    specialCachedValue = SpecialCachedValue.Create(valueLongBits);\n    if (specialCachedValue == null) {\n        field_4_value = BitConverter.Int64BitsToDouble(valueLongBits);\n    }\n    field_6_zero = in1.ReadInt();\n    int field_7_expression_len = in1.ReadShort();\n    field_8_parsed_expr = NPOI.SS.Formula.Formula.Read(field_7_expression_len, in1,in1.Available());\n}\n", "java": "public FormulaRecord(RecordInputStream ris) {\n    super(ris);\n    long valueLongBits  = ris.readLong();\n    field_5_options = ris.readShort();\n    specialCachedValue = FormulaSpecialCachedValue.create(valueLongBits);\n    if (specialCachedValue == null) {\n        field_4_value = Double.longBitsToDouble(valueLongBits);\n    }\n    field_6_zero = ris.readInt();\n    int field_7_expression_len = ris.readShort();\n    int nBytesAvailable = ris.available();\n    field_8_parsed_expr = Formula.read(field_7_expression_len, ris, nBytesAvailable);\n}\n", "cs_t": [["\u2581public", "\u2581Formula", "$$Record(RecordInputStream", "\u2581in1)", "$$:", "$$base", "$$(in", "$$1)", "\u2581{"], ["\u2581long", "\u2581value", "$$Long", "$$Bits", "\u2581", "\u2581=", "\u2581in1.Read", "$$Long", "$$()", "$$;"], ["\u2581field_5_", "$$options", "\u2581=", "\u2581in1.Read", "$$Short", "$$()", "$$;"], ["\u2581spec", "$$ial", "$$Cached", "$$Value", "\u2581=", "\u2581Sp", "$$ec", "$$ial", "$$Cached", "$$Value", "$$.Create", "$$(value", "$$Long", "$$Bit", "$$s)", "$$;"], ["\u2581if", "\u2581(s", "$$p", "$$ec", "$$ial", "$$Cached", "$$Value", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581field_4_", "$$value", "\u2581=", "\u2581B", "$$it", "$$Con", "$$ver", "$$ter", "$$.", "$$Int", "$$64", "$$Bit", "$$sTo", "$$Double", "$$(value", "$$Long", "$$Bit", "$$s)", "$$;"], ["\u2581}"], ["\u2581field_6_", "$$zero", "\u2581=", "\u2581in1.Read", "$$Int", "$$()", "$$;"], ["\u2581int", "\u2581field_", "$$7_", "$$exp", "$$ression", "$$_len", "\u2581=", "\u2581in1.Read", "$$Short", "$$()", "$$;"], ["\u2581field_", "$$8", "$$_", "$$par", "$$sed", "$$_", "$$exp", "$$r", "\u2581=", "\u2581N", "$$POI", "$$.", "$$SS", "$$.", "$$Formula", "$$.", "$$Formula", "$$.", "$$Re", "$$ad(", "$$field_", "$$7_", "$$exp", "$$ression", "$$_len", "$$,", "\u2581in", "$$1,", "$$in", "$$1", "$$.A", "$$vail", "$$able", "$$())", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Formula", "$$Record(RecordInputStream", "\u2581", "$$ri", "$$s)", "\u2581{"], ["\u2581super(", "$$ri", "$$s)", "$$;"], ["\u2581long", "\u2581value", "$$Long", "$$Bits", "\u2581", "\u2581=", "\u2581", "$$ri", "$$s.", "$$read", "$$Long", "$$()", "$$;"], ["\u2581field_5_", "$$options", "\u2581=", "\u2581", "$$ri", "$$s.", "$$read", "$$Short", "$$()", "$$;"], ["\u2581spec", "$$ial", "$$Cached", "$$Value", "\u2581=", "\u2581Formula", "$$Spec", "$$ial", "$$Cached", "$$Value", "$$.create", "$$(value", "$$Long", "$$Bit", "$$s)", "$$;"], ["\u2581if", "\u2581(s", "$$p", "$$ec", "$$ial", "$$Cached", "$$Value", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581field_4_", "$$value", "\u2581=", "\u2581Double", "$$.", "$$long", "$$Bit", "$$sTo", "$$Double", "$$(value", "$$Long", "$$Bit", "$$s)", "$$;"], ["\u2581}"], ["\u2581field_6_", "$$zero", "\u2581=", "\u2581", "$$ri", "$$s.", "$$read", "$$Int", "$$()", "$$;"], ["\u2581int", "\u2581field_", "$$7_", "$$exp", "$$ression", "$$_len", "\u2581=", "\u2581", "$$ri", "$$s.", "$$read", "$$Short", "$$()", "$$;"], ["\u2581int", "\u2581n", "$$Bytes", "$$Avail", "$$able", "\u2581=", "\u2581", "$$ri", "$$s.", "$$avail", "$$able", "$$()", "$$;"], ["\u2581field_", "$$8", "$$_", "$$par", "$$sed", "$$_", "$$exp", "$$r", "\u2581=", "\u2581Formula", "$$.re", "$$ad(", "$$field_", "$$7_", "$$exp", "$$ression", "$$_len", "$$,", "\u2581", "$$ri", "$$s,", "\u2581n", "$$Bytes", "$$Avail", "$$able", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override WAH8DocIdSet Build() {\n    if (this.wordNum != -1) {\n        AddWord(wordNum, (byte)word);\n    }\n    return base.Build();\n}\n", "java": "public SynonymQuery build() {\n    Collections.sort(terms, Comparator.comparing(a -> a.term));\n    return new SynonymQuery(terms.toArray(new TermAndBoost[0]), field);\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581W", "$$A", "$$H", "$$8", "$$Doc", "$$Id", "$$Set", "\u2581", "$$Build", "$$()", "\u2581{"], ["\u2581if", "\u2581(this", "$$.w", "$$ord", "$$Num", "\u2581!=", "\u2581-1)", "\u2581{"], ["\u2581Add", "$$W", "$$ord(", "$$word", "$$Num", "$$,", "\u2581(byte)", "$$word", "$$)", "$$;"], ["\u2581}"], ["\u2581return", "\u2581base", "$$.", "$$Build", "$$()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581S", "$$yn", "$$on", "$$ym", "$$Query", "\u2581build", "$$()", "\u2581{"], ["\u2581", "$$Collections.", "$$s", "$$ort", "$$(", "$$term", "$$s,", "\u2581", "$$Compar", "$$ator", "$$.", "$$comp", "$$ar", "$$ing", "$$(a", "\u2581-", "$$>", "\u2581a", "$$.term", "$$))", "$$;"], ["\u2581return", "\u2581new", "\u2581S", "$$yn", "$$on", "$$ym", "$$Query(", "$$term", "$$s.", "$$to", "$$Array", "$$(new", "\u2581Term", "$$And", "$$Boost", "$$[0]", "$$),", "\u2581field)", "$$;"], ["\u2581}"]]}, {"cs": "public PasswordRev4Record(RecordInputStream in1) {\n    field_1_password = in1.ReadShort();\n}\n", "java": "public PasswordRev4Record(RecordInputStream in) {\n    field_1_password = in.readShort();\n}\n", "cs_t": [["\u2581public", "\u2581P", "$$assword", "$$Rev", "$$4", "$$Record(RecordInputStream", "\u2581in1)", "\u2581{"], ["\u2581field_1_", "$$p", "$$assword", "\u2581=", "\u2581in1.Read", "$$Short", "$$()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581P", "$$assword", "$$Rev", "$$4", "$$Record(RecordInputStream", "\u2581in)", "\u2581{"], ["\u2581field_1_", "$$p", "$$assword", "\u2581=", "\u2581in.read", "$$Short", "$$()", "$$;"], ["\u2581}"]]}, {"cs": "public override bool isReadOnly() {\n    return false;\n}\n", "java": "public boolean isReadOnly() {\n    return false;\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581bool", "\u2581is", "$$Read", "$$Only", "$$()", "\u2581{"], ["\u2581return", "\u2581false", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581boolean", "\u2581is", "$$Read", "$$Only", "$$()", "\u2581{"], ["\u2581return", "\u2581false", "$$;"], ["\u2581}"]]}, {"cs": "public override int Preceding(int pos) {\n    if (pos < start || pos > end) {\n        throw new ArgumentException(\"offset out of bounds\");\n    }\n    else if (pos == start) {\n        current = start;\n        return Done;\n    }\n    else {\n        return First();\n    }\n}\n", "java": "public int preceding(int pos) {\n    if (pos < start || pos > end) {\n        throw new IllegalArgumentException(\"offset out of bounds\");\n    }\n    else if (pos == start) {\n        current = start;\n        return DONE;\n    }\n    else {\n        return first();\n    }\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581int", "\u2581P", "$$re", "$$ced", "$$ing", "$$(int", "\u2581po", "$$s)", "\u2581{"], ["\u2581if", "\u2581(pos", "\u2581<", "\u2581start", "\u2581||", "\u2581pos", "\u2581>", "\u2581end)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581ArgumentException(\"", "$$offset", "\u2581out", "\u2581of", "\u2581bo", "$$und", "$$s", "$$\")", "$$;"], ["\u2581}"], ["\u2581else", "\u2581if", "\u2581(pos", "\u2581==", "\u2581start", "$$)", "\u2581{"], ["\u2581current", "\u2581=", "\u2581start", "$$;"], ["\u2581return", "\u2581D", "$$one", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581return", "\u2581F", "$$irst", "$$()", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581int", "\u2581pre", "$$ced", "$$ing", "$$(int", "\u2581po", "$$s)", "\u2581{"], ["\u2581if", "\u2581(pos", "\u2581<", "\u2581start", "\u2581||", "\u2581pos", "\u2581>", "\u2581end)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581IllegalArgumentException(\"", "$$offset", "\u2581out", "\u2581of", "\u2581bo", "$$und", "$$s", "$$\")", "$$;"], ["\u2581}"], ["\u2581else", "\u2581if", "\u2581(pos", "\u2581==", "\u2581start", "$$)", "\u2581{"], ["\u2581current", "\u2581=", "\u2581start", "$$;"], ["\u2581return", "\u2581D", "$$ONE", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581return", "\u2581first", "$$()", "$$;"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public CodepageRecord(RecordInputStream in1) {\n    field_1_codepage = in1.ReadShort();\n}\n", "java": "public CodepageRecord(RecordInputStream in) {\n    field_1_codepage = in.readShort();\n}\n", "cs_t": [["\u2581public", "\u2581", "$$Code", "$$p", "$$age", "$$Record(RecordInputStream", "\u2581in1)", "\u2581{"], ["\u2581field_1_", "$$code", "$$p", "$$age", "\u2581=", "\u2581in1.Read", "$$Short", "$$()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581", "$$Code", "$$p", "$$age", "$$Record(RecordInputStream", "\u2581in)", "\u2581{"], ["\u2581field_1_", "$$code", "$$p", "$$age", "\u2581=", "\u2581in.read", "$$Short", "$$()", "$$;"], ["\u2581}"]]}, {"cs": "public virtual ApproveAssignmentResponse ApproveAssignment(ApproveAssignmentRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = ApproveAssignmentRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = ApproveAssignmentResponseUnmarshaller.Instance;\n    return Invoke<ApproveAssignmentResponse>(request, options);\n}\n", "java": "public ApproveAssignmentResult approveAssignment(ApproveAssignmentRequest request) {\n    request = beforeClientExecution(request);\n    return executeApproveAssignment(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Ap", "$$pro", "$$ve", "$$Assignment", "$$Response", "\u2581Ap", "$$pro", "$$ve", "$$Assignment", "$$(", "$$Ap", "$$pro", "$$ve", "$$Assignment", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Ap", "$$pro", "$$ve", "$$Assignment", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Ap", "$$pro", "$$ve", "$$Assignment", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<", "$$Ap", "$$pro", "$$ve", "$$Assignment", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Ap", "$$pro", "$$ve", "$$Assignment", "$$Result", "\u2581ap", "$$pro", "$$ve", "$$Assignment", "$$(", "$$Ap", "$$pro", "$$ve", "$$Assignment", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581execute", "$$Ap", "$$pro", "$$ve", "$$Assignment", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DescribeVpnConnectionsResponse DescribeVpnConnections() {\n    return DescribeVpnConnections(new DescribeVpnConnectionsRequest());\n}\n", "java": "public DescribeVpnConnectionsResult describeVpnConnections() {\n    return describeVpnConnections(new DescribeVpnConnectionsRequest());\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Describe", "$$Vpn", "$$Connection", "$$sResponse", "\u2581Describe", "$$Vpn", "$$Connection", "$$s()", "\u2581{"], ["\u2581return", "\u2581Describe", "$$Vpn", "$$Connection", "$$s(new", "\u2581Describe", "$$Vpn", "$$Connection", "$$sRequest", "$$())", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Describe", "$$Vpn", "$$Connection", "$$sResult", "\u2581describe", "$$Vpn", "$$Connection", "$$s()", "\u2581{"], ["\u2581return", "\u2581describe", "$$Vpn", "$$Connection", "$$s(new", "\u2581Describe", "$$Vpn", "$$Connection", "$$sRequest", "$$())", "$$;"], ["\u2581}"]]}, {"cs": "public override V next() {\n    return this.nextEntry().value;\n}\n", "java": "public final V next() {\n    return nextEntry().value;\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581V", "\u2581next", "$$()", "\u2581{"], ["\u2581return", "\u2581this.", "$$next", "$$Entry", "$$().", "$$value", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581final", "\u2581V", "\u2581next", "$$()", "\u2581{"], ["\u2581return", "\u2581next", "$$Entry", "$$().", "$$value", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DescribeInstanceHealthResponse DescribeInstanceHealth(DescribeInstanceHealthRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DescribeInstanceHealthRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DescribeInstanceHealthResponseUnmarshaller.Instance;\n    return Invoke<DescribeInstanceHealthResponse>(request, options);\n}\n", "java": "public DescribeInstanceHealthResult describeInstanceHealth(DescribeInstanceHealthRequest request) {\n    request = beforeClientExecution(request);\n    return executeDescribeInstanceHealth(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Describe", "$$Instance", "$$Health", "$$Response", "\u2581Describe", "$$Instance", "$$Health", "$$(Describe", "$$Instance", "$$Health", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Describe", "$$Instance", "$$Health", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Describe", "$$Instance", "$$Health", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Describe", "$$Instance", "$$Health", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Describe", "$$Instance", "$$Health", "$$Result", "\u2581describe", "$$Instance", "$$Health", "$$(Describe", "$$Instance", "$$Health", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDescribe", "$$Instance", "$$Health", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public static void Register(TransportProtocol proto) {\n    protocols.Add(0, new JavaWeakReference<TransportProtocol>(proto));\n}\n", "java": "public static void register(TransportProtocol proto) {\n    protocols.add(0, new WeakReference<>(proto));\n}\n", "cs_t": [["\u2581public", "\u2581static", "\u2581void", "\u2581Re", "$$gist", "$$er(", "$$Transport", "$$Protocol", "\u2581pro", "$$to", "$$)", "\u2581{"], ["\u2581pro", "$$tocol", "$$s.Add(", "$$0,", "\u2581new", "\u2581J", "$$ava", "$$W", "$$e", "$$a", "$$k", "$$Reference", "$$<", "$$Transport", "$$Protocol", "$$>", "$$(p", "$$ro", "$$to", "$$))", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581static", "\u2581void", "\u2581re", "$$gist", "$$er(", "$$Transport", "$$Protocol", "\u2581pro", "$$to", "$$)", "\u2581{"], ["\u2581pro", "$$tocol", "$$s.add(", "$$0,", "\u2581new", "\u2581W", "$$e", "$$a", "$$k", "$$Reference", "$$<", "$$>", "$$(p", "$$ro", "$$to", "$$))", "$$;"], ["\u2581}"]]}, {"cs": "public static char[] copyOfRange(char[] original, int start, int end) {\n    if (start > end) {\n        throw new System.ArgumentException();\n    }\n    int originalLength = original.Length;\n    if (start < 0 || start > originalLength) {\n        throw new System.IndexOutOfRangeException();\n    }\n    int resultLength = end - start;\n    int copyLength = System.Math.Min(resultLength, originalLength - start);\n    char[] result = new char[resultLength];\n    System.Array.Copy(original, start, result, 0, copyLength);\n    return result;\n}\n", "java": "public static char[] copyOfRange(char[] original, int start, int end) {\n    if (start > end) {\n        throw new IllegalArgumentException();\n    }\n    int originalLength = original.length;\n    if (start < 0 || start > originalLength) {\n        throw new ArrayIndexOutOfBoundsException();\n    }\n    int resultLength = end - start;\n    int copyLength = Math.min(resultLength, originalLength - start);\n    char[] result = new char[resultLength];\n    System.arraycopy(original, start, result, 0, copyLength);\n    return result;\n}\n", "cs_t": [["\u2581public", "\u2581static", "\u2581char[]", "\u2581copy", "$$Of", "$$Range", "$$(char[]", "\u2581original", "$$,", "\u2581int", "\u2581start,", "\u2581int", "\u2581end)", "\u2581{"], ["\u2581if", "\u2581(start", "\u2581>", "\u2581end)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581System.Ar", "$$gumentException", "$$()", "$$;"], ["\u2581}"], ["\u2581int", "\u2581original", "$$Length", "\u2581=", "\u2581original", "$$.Length;"], ["\u2581if", "\u2581(start", "\u2581<", "\u25810", "\u2581||", "\u2581start", "\u2581>", "\u2581original", "$$Length", "$$)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581System.", "$$IndexOutOf", "$$Range", "$$Exception", "$$()", "$$;"], ["\u2581}"], ["\u2581int", "\u2581result", "$$Length", "\u2581=", "\u2581end", "\u2581-", "\u2581start", "$$;"], ["\u2581int", "\u2581copy", "$$Length", "\u2581=", "\u2581System.", "$$Math.", "$$Min", "$$(result", "$$Length", "$$,", "\u2581original", "$$Length", "\u2581-", "\u2581start", "$$)", "$$;"], ["\u2581char[]", "\u2581result", "\u2581=", "\u2581new", "\u2581char[", "$$result", "$$Length", "$$]", "$$;"], ["\u2581System.Array.Copy", "$$(", "$$original", "$$,", "\u2581start,", "\u2581result", "$$,", "\u25810,", "\u2581copy", "$$Length", "$$)", "$$;"], ["\u2581return", "\u2581result", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581static", "\u2581char[]", "\u2581copy", "$$Of", "$$Range", "$$(char[]", "\u2581original", "$$,", "\u2581int", "\u2581start,", "\u2581int", "\u2581end)", "\u2581{"], ["\u2581if", "\u2581(start", "\u2581>", "\u2581end)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581IllegalArgumentException", "$$()", "$$;"], ["\u2581}"], ["\u2581int", "\u2581original", "$$Length", "\u2581=", "\u2581original", "$$.length;"], ["\u2581if", "\u2581(start", "\u2581<", "\u25810", "\u2581||", "\u2581start", "\u2581>", "\u2581original", "$$Length", "$$)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581Array", "$$IndexOutOf", "$$Bounds", "$$Exception", "$$()", "$$;"], ["\u2581}"], ["\u2581int", "\u2581result", "$$Length", "\u2581=", "\u2581end", "\u2581-", "\u2581start", "$$;"], ["\u2581int", "\u2581copy", "$$Length", "\u2581=", "\u2581Math.", "$$min", "$$(result", "$$Length", "$$,", "\u2581original", "$$Length", "\u2581-", "\u2581start", "$$)", "$$;"], ["\u2581char[]", "\u2581result", "\u2581=", "\u2581new", "\u2581char[", "$$result", "$$Length", "$$]", "$$;"], ["\u2581System.arraycopy", "$$(", "$$original", "$$,", "\u2581start,", "\u2581result", "$$,", "\u25810,", "\u2581copy", "$$Length", "$$)", "$$;"], ["\u2581return", "\u2581result", "$$;"], ["\u2581}"]]}, {"cs": "public static void fill(int[] array, int value) {\n    {\n        for (int i = 0; i < array.Length; i++) {\n            array[i] = value;\n        }\n    }\n}\n", "java": "public static void fill(int[] array, int value) {\n    for (int i = 0; i < array.length; i++) {\n        array[i] = value;\n    }\n}\n", "cs_t": [["\u2581public", "\u2581static", "\u2581void", "\u2581fill", "$$(int[]", "\u2581array,", "\u2581int", "\u2581value)", "\u2581{"], ["\u2581{"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810;", "\u2581i", "\u2581<", "\u2581array", "$$.Length;", "\u2581i++)", "\u2581{"], ["\u2581array", "$$[i]", "\u2581=", "\u2581value", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581static", "\u2581void", "\u2581fill", "$$(int[]", "\u2581array,", "\u2581int", "\u2581value)", "\u2581{"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810;", "\u2581i", "\u2581<", "\u2581array", "$$.length;", "\u2581i++)", "\u2581{"], ["\u2581array", "$$[i]", "\u2581=", "\u2581value", "$$;"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public Type PeekNextClass() {\n    if (_nextIndex >= _list.Count) {\n        return null;\n    }\n    return _list[_nextIndex].GetType();\n}\n", "java": "public Class<? extends Record> peekNextClass() {\n    if(!hasNext()) {\n        return null;\n    }\n    return _list.get(_nextIndex).getClass();\n}\n", "cs_t": [["\u2581public", "\u2581", "$$Type", "\u2581P", "$$eek", "$$Next", "$$Class", "$$()", "\u2581{"], ["\u2581if", "\u2581(_", "$$next", "$$Index", "\u2581>=", "\u2581_", "$$list", "$$.", "$$Count)", "\u2581{"], ["\u2581return", "\u2581null", "$$;"], ["\u2581}"], ["\u2581return", "\u2581_", "$$list", "$$[", "$$_", "$$next", "$$Index", "$$]", "$$.Get", "$$Type()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581C", "$$lass", "$$<", "$$?", "\u2581ex", "$$ten", "$$d", "$$s", "\u2581Record", "$$>", "\u2581p", "$$eek", "$$Next", "$$Class", "$$()", "\u2581{"], ["\u2581if(", "$$!", "$$has", "$$Next())", "\u2581{"], ["\u2581return", "\u2581null", "$$;"], ["\u2581}"], ["\u2581return", "\u2581_", "$$list", "$$.get", "$$(_", "$$next", "$$Index)", "$$.get", "$$Class", "$$()", "$$;"], ["\u2581}"]]}, {"cs": "public static char[] copyOf(char[] original, int newLength) {\n    if (newLength < 0) {\n        throw new java.lang.NegativeArraySizeException();\n    }\n    return copyOfRange(original, 0, newLength);\n}\n", "java": "public static char[] copyOf(char[] original, int newLength) {\n    if (newLength < 0) {\n        throw new NegativeArraySizeException();\n    }\n    return copyOfRange(original, 0, newLength);\n}\n", "cs_t": [["\u2581public", "\u2581static", "\u2581char[]", "\u2581copy", "$$Of", "$$(char[]", "\u2581original", "$$,", "\u2581int", "\u2581new", "$$Length", "$$)", "\u2581{"], ["\u2581if", "\u2581(new", "$$Length", "\u2581<", "\u25810)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581java.", "$$lan", "$$g", "$$.N", "$$eg", "$$ative", "$$Array", "$$Size", "$$Exception", "$$()", "$$;"], ["\u2581}"], ["\u2581return", "\u2581copy", "$$Of", "$$Range", "$$(", "$$original", "$$,", "\u25810,", "\u2581new", "$$Length", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581static", "\u2581char[]", "\u2581copy", "$$Of", "$$(char[]", "\u2581original", "$$,", "\u2581int", "\u2581new", "$$Length", "$$)", "\u2581{"], ["\u2581if", "\u2581(new", "$$Length", "\u2581<", "\u25810)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581N", "$$eg", "$$ative", "$$Array", "$$Size", "$$Exception", "$$()", "$$;"], ["\u2581}"], ["\u2581return", "\u2581copy", "$$Of", "$$Range", "$$(", "$$original", "$$,", "\u25810,", "\u2581new", "$$Length", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DeleteRelationalDatabaseResponse DeleteRelationalDatabase(DeleteRelationalDatabaseRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DeleteRelationalDatabaseRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DeleteRelationalDatabaseResponseUnmarshaller.Instance;\n    return Invoke<DeleteRelationalDatabaseResponse>(request, options);\n}\n", "java": "public DeleteRelationalDatabaseResult deleteRelationalDatabase(DeleteRelationalDatabaseRequest request) {\n    request = beforeClientExecution(request);\n    return executeDeleteRelationalDatabase(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Delete", "$$RelationalDatabase", "$$Response", "\u2581Delete", "$$RelationalDatabase", "$$(Delete", "$$RelationalDatabase", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Delete", "$$RelationalDatabase", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Delete", "$$RelationalDatabase", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Delete", "$$RelationalDatabase", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Delete", "$$RelationalDatabase", "$$Result", "\u2581delete", "$$RelationalDatabase", "$$(Delete", "$$RelationalDatabase", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDelete", "$$RelationalDatabase", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override bool Equals(object obj) {\n    if (this == obj) {\n        return true;\n    }\n    if (obj == null) {\n        return false;\n    }\n    if (GetType() != obj.GetType()) {\n        return false;\n    }\n    WeightedPhraseInfo other = (WeightedPhraseInfo)obj;\n    if (StartOffset != other.StartOffset) {\n        return false;\n    }\n    if (EndOffset != other.EndOffset) {\n        return false;\n    }\n    if (Boost != other.Boost) {\n        return false;\n    }\n    return true;\n}\n", "java": "public boolean equals(Object obj) {\n    if (this == obj) {\n        return true;\n    }\n    if (obj == null) {\n        return false;\n    }\n    if (getClass() != obj.getClass()) {\n        return false;\n    }\n    WeightedPhraseInfo other = (WeightedPhraseInfo) obj;\n    if (getStartOffset() != other.getStartOffset()) {\n        return false;\n    }\n    if (getEndOffset() != other.getEndOffset()) {\n        return false;\n    }\n    if (getBoost() != other.getBoost()) {\n        return false;\n    }\n    return true;\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581bool", "\u2581Equals(object", "\u2581obj)", "\u2581{"], ["\u2581if", "\u2581(this", "\u2581==", "\u2581obj)", "\u2581{"], ["\u2581return", "\u2581true", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(obj", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581return", "\u2581false", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(", "$$Get", "$$Type()", "\u2581!=", "\u2581obj", "$$.Get", "$$Type", "$$())", "\u2581{"], ["\u2581return", "\u2581false", "$$;"], ["\u2581}"], ["\u2581W", "$$eighted", "$$Phrase", "$$Info", "\u2581other", "\u2581=", "\u2581(", "$$W", "$$eighted", "$$Phrase", "$$Info", "$$)", "$$obj", "$$;"], ["\u2581if", "\u2581(", "$$Start", "$$Offset", "\u2581!=", "\u2581other.", "$$Start", "$$Offset", "$$)", "\u2581{"], ["\u2581return", "\u2581false", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(", "$$End", "$$Offset", "\u2581!=", "\u2581other.", "$$End", "$$Offset", "$$)", "\u2581{"], ["\u2581return", "\u2581false", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(", "$$Boost", "\u2581!=", "\u2581other.", "$$Boost", "$$)", "\u2581{"], ["\u2581return", "\u2581false", "$$;"], ["\u2581}"], ["\u2581return", "\u2581true", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581boolean", "\u2581equals(Object", "\u2581obj)", "\u2581{"], ["\u2581if", "\u2581(this", "\u2581==", "\u2581obj)", "\u2581{"], ["\u2581return", "\u2581true", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(obj", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581return", "\u2581false", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(get", "$$Class", "$$()", "\u2581!=", "\u2581obj", "$$.get", "$$Class", "$$())", "\u2581{"], ["\u2581return", "\u2581false", "$$;"], ["\u2581}"], ["\u2581W", "$$eighted", "$$Phrase", "$$Info", "\u2581other", "\u2581=", "\u2581(", "$$W", "$$eighted", "$$Phrase", "$$Info", "$$)", "\u2581obj", "$$;"], ["\u2581if", "\u2581(get", "$$Start", "$$Offset", "$$()", "\u2581!=", "\u2581other", "$$.get", "$$Start", "$$Offset", "$$())", "\u2581{"], ["\u2581return", "\u2581false", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(get", "$$End", "$$Offset", "$$()", "\u2581!=", "\u2581other", "$$.get", "$$End", "$$Offset", "$$())", "\u2581{"], ["\u2581return", "\u2581false", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(get", "$$Boost", "$$()", "\u2581!=", "\u2581other", "$$.get", "$$Boost", "$$())", "\u2581{"], ["\u2581return", "\u2581false", "$$;"], ["\u2581}"], ["\u2581return", "\u2581true", "$$;"], ["\u2581}"]]}, {"cs": "public bool HasNext() {\n    if (nextBlock == POIFSConstants.END_OF_CHAIN) {\n        return false;\n    }\n    return true;\n}\n", "java": "public boolean hasNext() {\n    return nextBlock != POIFSConstants.END_OF_CHAIN;\n}\n", "cs_t": [["\u2581public", "\u2581bool", "\u2581H", "$$as", "$$Next()", "\u2581{"], ["\u2581if", "\u2581(", "$$next", "$$Block", "\u2581==", "\u2581P", "$$O", "$$I", "$$F", "$$S", "$$Constants.", "$$EN", "$$D_", "$$OF", "$$_", "$$CH", "$$A", "$$IN", "$$)", "\u2581{"], ["\u2581return", "\u2581false", "$$;"], ["\u2581}"], ["\u2581return", "\u2581true", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581boolean", "\u2581has", "$$Next()", "\u2581{"], ["\u2581return", "\u2581next", "$$Block", "\u2581!=", "\u2581P", "$$O", "$$I", "$$F", "$$S", "$$Constants.", "$$EN", "$$D_", "$$OF", "$$_", "$$CH", "$$A", "$$IN", "$$;"], ["\u2581}"]]}, {"cs": "public virtual void Write(char b) {\n    if (m_len >= m_buf.Length) {\n        Resize(m_len + 1);\n    }\n    UnsafeWrite(b);\n}\n", "java": "public void write(char b) {\n    if (len >= buf.length) {\n        resize(len +1);\n    }\n    unsafeWrite(b);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581void", "\u2581Write", "$$(char", "\u2581b)", "\u2581{"], ["\u2581if", "\u2581(m", "$$_len", "\u2581>=", "\u2581m_", "$$buf", "$$.Length)", "\u2581{"], ["\u2581", "$$Res", "$$ize", "$$(", "$$m_", "$$len", "\u2581+", "\u25811)", "$$;"], ["\u2581}"], ["\u2581Un", "$$s", "$$af", "$$e", "$$Write", "$$(b", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581write", "$$(char", "\u2581b)", "\u2581{"], ["\u2581if", "\u2581(", "$$len", "\u2581>=", "\u2581buf", "$$.length)", "\u2581{"], ["\u2581res", "$$ize", "$$(", "$$len", "\u2581+", "$$1)", "$$;"], ["\u2581}"], ["\u2581un", "$$s", "$$af", "$$e", "$$Write", "$$(b", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override void Serialize(ILittleEndianOutput out1) {\n    futureHeader.Serialize(out1);\n    out1.WriteShort(isf_sharedFeatureType);\n    out1.WriteByte(reserved);\n    out1.WriteInt((int)cbHdrData);\n    out1.Write(rgbHdrData);\n}\n", "java": "public void serialize(LittleEndianOutput out) {\n    futureHeader.serialize(out);\n    out.writeShort(isf_sharedFeatureType);\n    out.writeByte(reserved);\n    out.writeInt((int)cbHdrData);\n    out.write(rgbHdrData);\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581void", "\u2581Serialize(ILittleEndianOutput", "\u2581out1)", "\u2581{"], ["\u2581f", "$$u", "$$ture", "$$Head", "$$er.", "$$S", "$$erialize", "$$(out", "$$1)", "$$;"], ["\u2581out1.WriteShort(", "$$is", "$$f", "$$_", "$$sh", "$$ared", "$$F", "$$e", "$$atu", "$$re", "$$Type", "$$)", "$$;"], ["\u2581out1.WriteByte(", "$$reserved", "$$)", "$$;"], ["\u2581out1.WriteInt(", "$$(int)", "$$c", "$$b", "$$H", "$$d", "$$r", "$$Data", "$$)", "$$;"], ["\u2581out1.Write", "$$(r", "$$g", "$$b", "$$H", "$$d", "$$r", "$$Data", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581serialize(LittleEndianOutput", "\u2581out)", "\u2581{"], ["\u2581f", "$$u", "$$ture", "$$Head", "$$er.", "$$ser", "$$ial", "$$ize", "$$(out", "$$)", "$$;"], ["\u2581out.writeShort(", "$$is", "$$f", "$$_", "$$sh", "$$ared", "$$F", "$$e", "$$atu", "$$re", "$$Type", "$$)", "$$;"], ["\u2581out.writeByte(", "$$reserved", "$$)", "$$;"], ["\u2581out.writeInt(", "$$(int)", "$$c", "$$b", "$$H", "$$d", "$$r", "$$Data", "$$)", "$$;"], ["\u2581out.write", "$$(r", "$$g", "$$b", "$$H", "$$d", "$$r", "$$Data", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual ListUserHierarchyGroupsResponse ListUserHierarchyGroups(ListUserHierarchyGroupsRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = ListUserHierarchyGroupsRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = ListUserHierarchyGroupsResponseUnmarshaller.Instance;\n    return Invoke<ListUserHierarchyGroupsResponse>(request, options);\n}\n", "java": "public ListUserHierarchyGroupsResult listUserHierarchyGroups(ListUserHierarchyGroupsRequest request) {\n    request = beforeClientExecution(request);\n    return executeListUserHierarchyGroups(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581List", "$$User", "$$H", "$$i", "$$er", "$$arch", "$$y", "$$Group", "$$sResponse", "\u2581List", "$$User", "$$H", "$$i", "$$er", "$$arch", "$$y", "$$Group", "$$s(List", "$$User", "$$H", "$$i", "$$er", "$$arch", "$$y", "$$Group", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581List", "$$User", "$$H", "$$i", "$$er", "$$arch", "$$y", "$$Group", "$$s", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581List", "$$User", "$$H", "$$i", "$$er", "$$arch", "$$y", "$$Group", "$$s", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<List", "$$User", "$$H", "$$i", "$$er", "$$arch", "$$y", "$$Group", "$$sResponse>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581List", "$$User", "$$H", "$$i", "$$er", "$$arch", "$$y", "$$Group", "$$sResult", "\u2581list", "$$User", "$$H", "$$i", "$$er", "$$arch", "$$y", "$$Group", "$$s(List", "$$User", "$$H", "$$i", "$$er", "$$arch", "$$y", "$$Group", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeList", "$$User", "$$H", "$$i", "$$er", "$$arch", "$$y", "$$Group", "$$s", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public GetTopicAttributesRequest(string topicArn) {\n    _topicArn = topicArn;\n}\n", "java": "public GetTopicAttributesRequest(String topicArn) {\n    setTopicArn(topicArn);\n}\n", "cs_t": [["\u2581public", "\u2581Get", "$$To", "$$pic", "$$Attributes", "$$Request(string", "\u2581to", "$$pic", "$$Arn", "$$)", "\u2581{"], ["\u2581_", "$$to", "$$pic", "$$Arn", "\u2581=", "\u2581to", "$$pic", "$$Arn", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Get", "$$To", "$$pic", "$$Attributes", "$$Request(String", "\u2581to", "$$pic", "$$Arn", "$$)", "\u2581{"], ["\u2581set", "$$To", "$$pic", "$$Arn", "$$(", "$$to", "$$pic", "$$Arn", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual CreateTrafficPolicyVersionResponse CreateTrafficPolicyVersion(CreateTrafficPolicyVersionRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = CreateTrafficPolicyVersionRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = CreateTrafficPolicyVersionResponseUnmarshaller.Instance;\n    return Invoke<CreateTrafficPolicyVersionResponse>(request, options);\n}\n", "java": "public CreateTrafficPolicyVersionResult createTrafficPolicyVersion(CreateTrafficPolicyVersionRequest request) {\n    request = beforeClientExecution(request);\n    return executeCreateTrafficPolicyVersion(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Create", "$$TrafficPolicy", "$$Version", "$$Response", "\u2581Create", "$$TrafficPolicy", "$$Version", "$$(Create", "$$TrafficPolicy", "$$Version", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Create", "$$TrafficPolicy", "$$Version", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Create", "$$TrafficPolicy", "$$Version", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Create", "$$TrafficPolicy", "$$Version", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Create", "$$TrafficPolicy", "$$Version", "$$Result", "\u2581create", "$$TrafficPolicy", "$$Version", "$$(Create", "$$TrafficPolicy", "$$Version", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeCreate", "$$TrafficPolicy", "$$Version", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override bool Equals(object @object) {\n    if (this == @object) {\n        return true;\n    }\n    if (@object is java.util.MapClass.Entry<K, V>) {\n        java.util.MapClass.Entry<object, object> entry = (java.util.MapClass.Entry<object, object>)@object;\n        return ((object)key == null ? entry.getKey() == null : key.Equals(entry.getKey())) && ((object)value == null ? entry.getValue() == null : value.Equals(entry.getValue()));\n    }\n    return false;\n}\n", "java": "@Override public boolean equals(Object object) {\n    if (this == object) {\n        return true;\n    }\n    if (object instanceof Map.Entry) {\n        Map.Entry<?, ?> entry = (Map.Entry<?, ?>) object;\n        return (key == null ? entry.getKey() == null : key.equals(entry.getKey()))&& (value == null ? entry.getValue() == null : value.equals(entry.getValue()));\n    }\n    return false;\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581bool", "\u2581Equals(object", "\u2581@object)", "\u2581{"], ["\u2581if", "\u2581(this", "\u2581==", "\u2581@object)", "\u2581{"], ["\u2581return", "\u2581true", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(@", "$$object", "\u2581is", "\u2581java.util.", "$$MapClass.", "$$Entry<K,", "\u2581V>", "$$)", "\u2581{"], ["\u2581java.util.", "$$MapClass.", "$$Entry<", "$$object", "$$,", "\u2581object", "$$>", "\u2581entry", "\u2581=", "\u2581(", "$$java.util.", "$$MapClass.", "$$Entry<", "$$object", "$$,", "\u2581object", "$$>", "$$)", "$$@", "$$object", "$$;"], ["\u2581return", "\u2581(", "$$(object", "$$)", "$$key", "\u2581==", "\u2581null", "\u2581?", "\u2581entry", "$$.get", "$$Key", "$$()", "\u2581==", "\u2581null", "\u2581:", "\u2581key", "$$.Equals(", "$$entry", "$$.get", "$$Key", "$$()))", "\u2581&&", "\u2581(", "$$(object", "$$)", "$$value", "\u2581==", "\u2581null", "\u2581?", "\u2581entry", "$$.get", "$$Value", "$$()", "\u2581==", "\u2581null", "\u2581:", "\u2581value", "$$.Equals(", "$$entry", "$$.get", "$$Value", "$$()))", "$$;"], ["\u2581}"], ["\u2581return", "\u2581false", "$$;"], ["\u2581}"]], "java_t": [["\u2581@Override", "\u2581public", "\u2581boolean", "\u2581equals(Object", "\u2581object)", "\u2581{"], ["\u2581if", "\u2581(this", "\u2581==", "\u2581object)", "\u2581{"], ["\u2581return", "\u2581true", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(", "$$object", "\u2581instanceof", "\u2581M", "$$ap", "$$.", "$$Entry", "$$)", "\u2581{"], ["\u2581M", "$$ap", "$$.", "$$Entry<", "$$?", "$$,", "\u2581?", "$$>", "\u2581entry", "\u2581=", "\u2581(", "$$Map.", "$$Entry<", "$$?", "$$,", "\u2581?", "$$>", "$$)", "\u2581object", "$$;"], ["\u2581return", "\u2581(", "$$key", "\u2581==", "\u2581null", "\u2581?", "\u2581entry", "$$.get", "$$Key", "$$()", "\u2581==", "\u2581null", "\u2581:", "\u2581key", "$$.equals(", "$$entry", "$$.get", "$$Key", "$$()))", "$$&&", "\u2581(value", "\u2581==", "\u2581null", "\u2581?", "\u2581entry", "$$.get", "$$Value", "$$()", "\u2581==", "\u2581null", "\u2581:", "\u2581value", "$$.equals(", "$$entry", "$$.get", "$$Value", "$$()))", "$$;"], ["\u2581}"], ["\u2581return", "\u2581false", "$$;"], ["\u2581}"]]}, {"cs": "public virtual ListResourcesResponse ListResources(ListResourcesRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = ListResourcesRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = ListResourcesResponseUnmarshaller.Instance;\n    return Invoke<ListResourcesResponse>(request, options);\n}\n", "java": "public ListResourcesResult listResources(ListResourcesRequest request) {\n    request = beforeClientExecution(request);\n    return executeListResources(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581List", "$$Resources", "$$Response", "\u2581List", "$$Resources", "$$(List", "$$Resources", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581List", "$$Resources", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581List", "$$Resources", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<List", "$$Resources", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581List", "$$Resources", "$$Result", "\u2581list", "$$Resources", "$$(List", "$$Resources", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeList", "$$Resources", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public V getAndSet(V newValue) {\n    while(true) {\n        V x = get ();\n        if (compareAndSet(x, newValue))return x;\n    }\n}\n", "java": "public final V getAndSet(V newValue) {\n    while (true) {\n        V x = get();\n        if (compareAndSet(x, newValue))return x;\n    }\n}\n", "cs_t": [["\u2581public", "\u2581V", "\u2581get", "$$And", "$$Set(", "$$V", "\u2581new", "$$Value)", "\u2581{"], ["\u2581while", "$$(t", "$$rue", "$$)", "\u2581{"], ["\u2581V", "\u2581x", "\u2581=", "\u2581get", "\u2581(", "$$)", "$$;"], ["\u2581if", "\u2581(", "$$compare", "$$And", "$$Set(", "$$x", "$$,", "\u2581new", "$$Value", "$$))return", "\u2581x", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581final", "\u2581V", "\u2581get", "$$And", "$$Set(", "$$V", "\u2581new", "$$Value)", "\u2581{"], ["\u2581while", "\u2581(true)", "\u2581{"], ["\u2581V", "\u2581x", "\u2581=", "\u2581get", "$$()", "$$;"], ["\u2581if", "\u2581(", "$$compare", "$$And", "$$Set(", "$$x", "$$,", "\u2581new", "$$Value", "$$))return", "\u2581x", "$$;"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public FeatHdrRecord() {\n    futureHeader = new FtrHeader();\n    futureHeader.RecordType = (sid);\n}\n", "java": "public FeatHdrRecord() {\n    futureHeader = new FtrHeader();\n    futureHeader.setRecordType(sid);\n}\n", "cs_t": [["\u2581public", "\u2581F", "$$e", "$$at", "$$H", "$$d", "$$r", "$$Record", "$$()", "\u2581{"], ["\u2581f", "$$u", "$$ture", "$$Header", "\u2581=", "\u2581new", "\u2581F", "$$tr", "$$Header", "$$()", "$$;"], ["\u2581f", "$$u", "$$ture", "$$Head", "$$er.", "$$Record", "$$Type", "\u2581=", "\u2581(", "$$sid", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581F", "$$e", "$$at", "$$H", "$$d", "$$r", "$$Record", "$$()", "\u2581{"], ["\u2581f", "$$u", "$$ture", "$$Header", "\u2581=", "\u2581new", "\u2581F", "$$tr", "$$Header", "$$()", "$$;"], ["\u2581f", "$$u", "$$ture", "$$Head", "$$er.", "$$set", "$$Record", "$$Type", "$$(", "$$sid", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DisassociatePhoneNumbersFromVoiceConnectorResponse DisassociatePhoneNumbersFromVoiceConnector(DisassociatePhoneNumbersFromVoiceConnectorRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DisassociatePhoneNumbersFromVoiceConnectorRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DisassociatePhoneNumbersFromVoiceConnectorResponseUnmarshaller.Instance;\n    return Invoke<DisassociatePhoneNumbersFromVoiceConnectorResponse>(request, options);\n}\n", "java": "public DisassociatePhoneNumbersFromVoiceConnectorResult disassociatePhoneNumbersFromVoiceConnector(DisassociatePhoneNumbersFromVoiceConnectorRequest request) {\n    request = beforeClientExecution(request);\n    return executeDisassociatePhoneNumbersFromVoiceConnector(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Disassociate", "$$PhoneNumber", "$$sFrom", "$$VoiceConnector", "$$Response", "\u2581Disassociate", "$$PhoneNumber", "$$sFrom", "$$VoiceConnector", "$$(", "$$Disassociate", "$$PhoneNumber", "$$sFrom", "$$VoiceConnector", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Disassociate", "$$PhoneNumber", "$$sFrom", "$$VoiceConnector", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Disassociate", "$$PhoneNumber", "$$sFrom", "$$VoiceConnector", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<", "$$Disassociate", "$$PhoneNumber", "$$sFrom", "$$VoiceConnector", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Disassociate", "$$PhoneNumber", "$$sFrom", "$$VoiceConnector", "$$Result", "\u2581dis", "$$associate", "$$PhoneNumber", "$$sFrom", "$$VoiceConnector", "$$(", "$$Disassociate", "$$PhoneNumber", "$$sFrom", "$$VoiceConnector", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581execute", "$$Disassociate", "$$PhoneNumber", "$$sFrom", "$$VoiceConnector", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual ObjectId IdFor(int type, byte[] data) {\n    return IdFor(type, data, 0, data.Length);\n}\n", "java": "public ObjectId idFor(int type, byte[] data) {\n    return idFor(type, data, 0, data.length);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581ObjectId", "\u2581", "$$Id", "$$For", "$$(int", "\u2581type", "$$,", "\u2581byte[]", "\u2581data", "$$)", "\u2581{"], ["\u2581return", "\u2581", "$$Id", "$$For", "$$(t", "$$ype", "$$,", "\u2581data,", "\u25810,", "\u2581data", "$$.Length)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581ObjectId", "\u2581id", "$$For", "$$(int", "\u2581type", "$$,", "\u2581byte[]", "\u2581data", "$$)", "\u2581{"], ["\u2581return", "\u2581id", "$$For", "$$(t", "$$ype", "$$,", "\u2581data,", "\u25810,", "\u2581data", "$$.length)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual void RemoveParseListener(IParseTreeListener listener) {\n    if (_parseListeners != null) {\n        if (_parseListeners.Remove(listener)) {\n            if (_parseListeners.Count == 0) {\n                _parseListeners = null;\n            }\n        }\n    }\n}\n", "java": "public void removeParseListener(ParseTreeListener listener) {\n    if (_parseListeners != null) {\n        if (_parseListeners.remove(listener)) {\n            if (_parseListeners.isEmpty()) {\n                _parseListeners = null;\n            }\n        }\n    }\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581void", "\u2581Remove", "$$Parse", "$$Lis", "$$ten", "$$er(", "$$I", "$$ParseTree", "$$Listener", "\u2581listener", "$$)", "\u2581{"], ["\u2581if", "\u2581(_", "$$parse", "$$Listener", "$$s", "\u2581!=", "\u2581null)", "\u2581{"], ["\u2581if", "\u2581(_", "$$parse", "$$Listener", "$$s.", "$$Remove", "$$(", "$$li", "$$s", "$$tener", "$$))", "\u2581{"], ["\u2581if", "\u2581(_", "$$parse", "$$Listener", "$$s.Count", "\u2581==", "\u25810)", "\u2581{"], ["\u2581_", "$$parse", "$$Listener", "$$s", "\u2581=", "\u2581null", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581remove", "$$Parse", "$$Lis", "$$ten", "$$er(", "$$ParseTree", "$$Listener", "\u2581listener", "$$)", "\u2581{"], ["\u2581if", "\u2581(_", "$$parse", "$$Listener", "$$s", "\u2581!=", "\u2581null)", "\u2581{"], ["\u2581if", "\u2581(_", "$$parse", "$$Listener", "$$s.", "$$re", "$$move", "$$(", "$$li", "$$s", "$$tener", "$$))", "\u2581{"], ["\u2581if", "\u2581(_", "$$parse", "$$Listener", "$$s.", "$$isEmpty())", "\u2581{"], ["\u2581_", "$$parse", "$$Listener", "$$s", "\u2581=", "\u2581null", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public AxisRecord(RecordInputStream in1) {\n    field_1_axisType = in1.ReadShort();\n    field_2_reserved1 = in1.ReadInt();\n    field_3_reserved2 = in1.ReadInt();\n    field_4_reserved3 = in1.ReadInt();\n    field_5_reserved4 = in1.ReadInt();\n}\n", "java": "public AxisRecord(RecordInputStream in) {\n    field_1_axisType  = in.readShort();\n    field_2_reserved1 = in.readInt();\n    field_3_reserved2 = in.readInt();\n    field_4_reserved3 = in.readInt();\n    field_5_reserved4 = in.readInt();\n}\n", "cs_t": [["\u2581public", "\u2581A", "$$x", "$$is", "$$Record(RecordInputStream", "\u2581in1)", "\u2581{"], ["\u2581field_1_", "$$ax", "$$is", "$$Type", "\u2581=", "\u2581in1.Read", "$$Short", "$$()", "$$;"], ["\u2581field_2_", "$$reserved", "$$1", "\u2581=", "\u2581in1.Read", "$$Int", "$$()", "$$;"], ["\u2581field_3_", "$$reserved", "$$2", "\u2581=", "\u2581in1.Read", "$$Int", "$$()", "$$;"], ["\u2581field_4_", "$$reserved", "$$3", "\u2581=", "\u2581in1.Read", "$$Int", "$$()", "$$;"], ["\u2581field_5_", "$$reserved", "$$4", "\u2581=", "\u2581in1.Read", "$$Int", "$$()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581A", "$$x", "$$is", "$$Record(RecordInputStream", "\u2581in)", "\u2581{"], ["\u2581field_1_", "$$ax", "$$is", "$$Type", "\u2581", "\u2581=", "\u2581in.read", "$$Short", "$$()", "$$;"], ["\u2581field_2_", "$$reserved", "$$1", "\u2581=", "\u2581in.read", "$$Int", "$$()", "$$;"], ["\u2581field_3_", "$$reserved", "$$2", "\u2581=", "\u2581in.read", "$$Int", "$$()", "$$;"], ["\u2581field_4_", "$$reserved", "$$3", "\u2581=", "\u2581in.read", "$$Int", "$$()", "$$;"], ["\u2581field_5_", "$$reserved", "$$4", "\u2581=", "\u2581in.read", "$$Int", "$$()", "$$;"], ["\u2581}"]]}, {"cs": "public static double Evaluate(double[] v) {\n    if (v.Length < 2) {\n        throw new EvaluationException(ErrorEval.NA);\n    }\n    int[] counts = new int[v.Length];\n    Arrays.Fill(counts, 1);\n    for (int i = 0, iSize = v.Length; i < iSize; i++) {\n        for (int j = i + 1, jSize = v.Length; j < jSize; j++) {\n            if (v[i] == v[j])counts[i]++;\n        }\n    }\n    double maxv = 0;\n    int maxc = 0;\n    for (int i = 0, iSize = counts.Length; i < iSize; i++) {\n        if (counts[i] > maxc) {\n            maxv = v[i];\n            maxc = counts[i];\n        }\n    }\n    if (maxc > 1) {\n        return maxv;\n    }\n    throw new EvaluationException(ErrorEval.NA);\n}\n", "java": "public static double evaluate(double[] v) throws EvaluationException {\n    if (v.length < 2) {\n        throw new EvaluationException(ErrorEval.NA);\n    }\n    int[] counts = new int[v.length];\n    Arrays.fill(counts, 1);\n    for (int i = 0, iSize = v.length; i < iSize; i++) {\n        for (int j = i + 1, jSize = v.length; j < jSize; j++) {\n            if (v[i] == v[j])counts[i]++;\n        }\n    }\n    double maxv = 0;\n    int maxc = 0;\n    for (int i = 0, iSize = counts.length; i < iSize; i++) {\n        if (counts[i] > maxc) {\n            maxv = v[i];\n            maxc = counts[i];\n        }\n    }\n    if (maxc > 1) {\n        return maxv;\n    }\n    throw new EvaluationException(ErrorEval.NA);\n}\n", "cs_t": [["\u2581public", "\u2581static", "\u2581double", "\u2581Evaluate", "$$(double", "$$[]", "\u2581v)", "\u2581{"], ["\u2581if", "\u2581(v", "$$.Length", "\u2581<", "\u25812)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581", "$$Evaluation", "$$Exception(", "$$ErrorEval", "$$.N", "$$A", "$$)", "$$;"], ["\u2581}"], ["\u2581int[]", "\u2581count", "$$s", "\u2581=", "\u2581new", "\u2581int[", "$$v", "$$.Length", "$$]", "$$;"], ["\u2581Arrays.", "$$Fill", "$$(", "$$count", "$$s,", "\u25811)", "$$;"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810,", "\u2581i", "$$Size", "\u2581=", "\u2581v", "$$.Length;", "\u2581i", "\u2581<", "\u2581i", "$$Size", "$$;", "\u2581i++)", "\u2581{"], ["\u2581for", "\u2581(int", "\u2581j", "\u2581=", "\u2581i", "\u2581+", "\u25811,", "\u2581j", "$$Size", "\u2581=", "\u2581v", "$$.Length;", "\u2581j", "\u2581<", "\u2581j", "$$Size", "$$;", "\u2581j", "$$++)", "\u2581{"], ["\u2581if", "\u2581(v", "$$[i]", "\u2581==", "\u2581v", "$$[", "$$j", "$$]", "$$)", "$$count", "$$s[i]", "$$++", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581double", "\u2581max", "$$v", "\u2581=", "\u25810;"], ["\u2581int", "\u2581max", "$$c", "\u2581=", "\u25810;"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810,", "\u2581i", "$$Size", "\u2581=", "\u2581count", "$$s.Length;", "\u2581i", "\u2581<", "\u2581i", "$$Size", "$$;", "\u2581i++)", "\u2581{"], ["\u2581if", "\u2581(count", "$$s[i]", "\u2581>", "\u2581max", "$$c", "$$)", "\u2581{"], ["\u2581max", "$$v", "\u2581=", "\u2581v", "$$[i]", "$$;"], ["\u2581max", "$$c", "\u2581=", "\u2581count", "$$s[i]", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581if", "\u2581(max", "$$c", "\u2581>", "\u25811)", "\u2581{"], ["\u2581return", "\u2581max", "$$v", "$$;"], ["\u2581}"], ["\u2581throw", "\u2581new", "\u2581", "$$Evaluation", "$$Exception(", "$$ErrorEval", "$$.N", "$$A", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581static", "\u2581double", "\u2581evaluate", "$$(double", "$$[]", "\u2581v)", "\u2581throws", "\u2581", "$$EvaluationException", "\u2581{"], ["\u2581if", "\u2581(v", "$$.length", "\u2581<", "\u25812)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581", "$$Evaluation", "$$Exception(", "$$ErrorEval", "$$.N", "$$A", "$$)", "$$;"], ["\u2581}"], ["\u2581int[]", "\u2581count", "$$s", "\u2581=", "\u2581new", "\u2581int[", "$$v", "$$.length", "$$]", "$$;"], ["\u2581Arrays.", "$$fill", "$$(", "$$count", "$$s,", "\u25811)", "$$;"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810,", "\u2581i", "$$Size", "\u2581=", "\u2581v", "$$.length;", "\u2581i", "\u2581<", "\u2581i", "$$Size", "$$;", "\u2581i++)", "\u2581{"], ["\u2581for", "\u2581(int", "\u2581j", "\u2581=", "\u2581i", "\u2581+", "\u25811,", "\u2581j", "$$Size", "\u2581=", "\u2581v", "$$.length;", "\u2581j", "\u2581<", "\u2581j", "$$Size", "$$;", "\u2581j", "$$++)", "\u2581{"], ["\u2581if", "\u2581(v", "$$[i]", "\u2581==", "\u2581v", "$$[", "$$j", "$$]", "$$)", "$$count", "$$s[i]", "$$++", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581double", "\u2581max", "$$v", "\u2581=", "\u25810;"], ["\u2581int", "\u2581max", "$$c", "\u2581=", "\u25810;"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810,", "\u2581i", "$$Size", "\u2581=", "\u2581count", "$$s.length;", "\u2581i", "\u2581<", "\u2581i", "$$Size", "$$;", "\u2581i++)", "\u2581{"], ["\u2581if", "\u2581(count", "$$s[i]", "\u2581>", "\u2581max", "$$c", "$$)", "\u2581{"], ["\u2581max", "$$v", "\u2581=", "\u2581v", "$$[i]", "$$;"], ["\u2581max", "$$c", "\u2581=", "\u2581count", "$$s[i]", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581if", "\u2581(max", "$$c", "\u2581>", "\u25811)", "\u2581{"], ["\u2581return", "\u2581max", "$$v", "$$;"], ["\u2581}"], ["\u2581throw", "\u2581new", "\u2581", "$$Evaluation", "$$Exception(", "$$ErrorEval", "$$.N", "$$A", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual void AddFacetCount(BytesRef facetValue, int count) {\n    if (count < currentMin) {\n        return;\n    }\n    FacetEntry facetEntry = new FacetEntry(facetValue, count);\n    if (facetEntries.Count == maxSize) {\n        if (!facetEntries.TryGetSuccessor(facetEntry, out FacetEntry _)) {\n            return;\n        }\n        var max = facetEntries.Max;\n        if (max != null)facetEntries.Remove(max);\n    }\n    facetEntries.Add(facetEntry);\n    if (facetEntries.Count == maxSize) {\n        var max = facetEntries.Max;\n        currentMin =  max != null ? max.Count : 0;\n    }\n}\n", "java": "public void addFacetCount(BytesRef facetValue, int count) {\n    if (count < currentMin) {\n        return;\n    }\n    FacetEntry facetEntry = new FacetEntry(facetValue, count);\n    if (facetEntries.size() == maxSize) {\n        if (facetEntries.higher(facetEntry) == null) {\n            return;\n        }\n        facetEntries.pollLast();\n    }\n    facetEntries.add(facetEntry);\n    if (facetEntries.size() == maxSize) {\n        currentMin = facetEntries.last().count;\n    }\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581void", "\u2581Add", "$$Facet", "$$Count", "$$(BytesRef", "\u2581f", "$$acet", "$$Value", "$$,", "\u2581int", "\u2581count)", "\u2581{"], ["\u2581if", "\u2581(count", "\u2581<", "\u2581current", "$$Min", "$$)", "\u2581{"], ["\u2581return", "$$;"], ["\u2581}"], ["\u2581F", "$$acet", "$$Entry", "\u2581f", "$$acet", "$$Entry", "\u2581=", "\u2581new", "\u2581F", "$$acet", "$$Entry", "$$(f", "$$acet", "$$Value", "$$,", "\u2581count)", "$$;"], ["\u2581if", "\u2581(f", "$$acet", "$$Ent", "$$ries", "$$.Count", "\u2581==", "\u2581max", "$$Size)", "\u2581{"], ["\u2581if", "\u2581(!", "$$f", "$$acet", "$$Ent", "$$ries", "$$.", "$$TryGet", "$$S", "$$uc", "$$cess", "$$or", "$$(f", "$$acet", "$$Entry", "$$,", "\u2581out", "\u2581F", "$$acet", "$$Entry", "\u2581_", "$$))", "\u2581{"], ["\u2581return", "$$;"], ["\u2581}"], ["\u2581var", "\u2581max", "\u2581=", "\u2581f", "$$acet", "$$Ent", "$$ries", "$$.", "$$Max", "$$;"], ["\u2581if", "\u2581(max", "\u2581!=", "\u2581null)", "$$f", "$$acet", "$$Ent", "$$ries", "$$.Remove", "$$(", "$$max", "$$)", "$$;"], ["\u2581}"], ["\u2581f", "$$acet", "$$Ent", "$$ries", "$$.Add(", "$$f", "$$acet", "$$Entry", "$$)", "$$;"], ["\u2581if", "\u2581(f", "$$acet", "$$Ent", "$$ries", "$$.Count", "\u2581==", "\u2581max", "$$Size)", "\u2581{"], ["\u2581var", "\u2581max", "\u2581=", "\u2581f", "$$acet", "$$Ent", "$$ries", "$$.", "$$Max", "$$;"], ["\u2581current", "$$Min", "\u2581=", "\u2581", "\u2581max", "\u2581!=", "\u2581null", "\u2581?", "\u2581max", "$$.Count", "\u2581:", "\u25810;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581add", "$$Facet", "$$Count", "$$(BytesRef", "\u2581f", "$$acet", "$$Value", "$$,", "\u2581int", "\u2581count)", "\u2581{"], ["\u2581if", "\u2581(count", "\u2581<", "\u2581current", "$$Min", "$$)", "\u2581{"], ["\u2581return", "$$;"], ["\u2581}"], ["\u2581F", "$$acet", "$$Entry", "\u2581f", "$$acet", "$$Entry", "\u2581=", "\u2581new", "\u2581F", "$$acet", "$$Entry", "$$(f", "$$acet", "$$Value", "$$,", "\u2581count)", "$$;"], ["\u2581if", "\u2581(f", "$$acet", "$$Ent", "$$ries", "$$.size()", "\u2581==", "\u2581max", "$$Size)", "\u2581{"], ["\u2581if", "\u2581(f", "$$acet", "$$Ent", "$$ries", "$$.", "$$h", "$$igh", "$$er(", "$$f", "$$acet", "$$Entry", "$$)", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581return", "$$;"], ["\u2581}"], ["\u2581f", "$$acet", "$$Ent", "$$ries", "$$.p", "$$ol", "$$l", "$$Last", "$$()", "$$;"], ["\u2581}"], ["\u2581f", "$$acet", "$$Ent", "$$ries", "$$.add(", "$$f", "$$acet", "$$Entry", "$$)", "$$;"], ["\u2581if", "\u2581(f", "$$acet", "$$Ent", "$$ries", "$$.size()", "\u2581==", "\u2581max", "$$Size)", "\u2581{"], ["\u2581current", "$$Min", "\u2581=", "\u2581f", "$$acet", "$$Ent", "$$ries", "$$.", "$$last", "$$().", "$$count", "$$;"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public override String ToString() {\n    StringBuilder buffer = new StringBuilder();\n    String nl = Environment.NewLine;\n    buffer.Append(\"[ftGmo]\" + nl);\n    buffer.Append(\"  reserved = \").Append(HexDump.ToHex(reserved)).Append(nl);\n    buffer.Append(\"[/ftGmo]\" + nl);\n    return buffer.ToString();\n}\n", "java": "public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    String nl = System.getProperty(\"line.separator\");\n    buffer.append(\"[ftGmo]\" + nl);\n    buffer.append(\"  reserved = \").append(HexDump.toHex(reserved)).append(nl);\n    buffer.append(\"[/ftGmo]\" + nl);\n    return buffer.toString();\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581String", "\u2581ToString()", "\u2581{"], ["\u2581StringBuilder", "\u2581buffer", "\u2581=", "\u2581new", "\u2581StringBuilder", "$$()", "$$;"], ["\u2581String", "\u2581n", "$$l", "\u2581=", "\u2581", "$$Environment", "$$.N", "$$ew", "$$Line", "$$;"], ["\u2581buffer.Append(\"[", "$$ft", "$$G", "$$mo", "$$]", "$$\"", "\u2581+", "\u2581n", "$$l", "$$)", "$$;"], ["\u2581buffer.Append(\"", "\u2581", "\u2581res", "$$erved", "\u2581=", "\u2581\").Append(", "$$HexDump", "$$.To", "$$Hex", "$$(", "$$reserved", "$$))", "$$.Append(", "$$n", "$$l", "$$)", "$$;"], ["\u2581buffer.Append(\"[/", "$$ft", "$$G", "$$mo", "$$]", "$$\"", "\u2581+", "\u2581n", "$$l", "$$)", "$$;"], ["\u2581return", "\u2581buffer", "$$.ToString()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581String", "\u2581toString()", "\u2581{"], ["\u2581StringBuilder", "\u2581buffer", "\u2581=", "\u2581new", "\u2581StringBuilder", "$$()", "$$;"], ["\u2581String", "\u2581n", "$$l", "\u2581=", "\u2581System", "$$.get", "$$Property", "$$(\"", "$$line", "$$.se", "$$parator", "$$\")", "$$;"], ["\u2581buffer.append(\"[", "$$ft", "$$G", "$$mo", "$$]", "$$\"", "\u2581+", "\u2581n", "$$l", "$$)", "$$;"], ["\u2581buffer.append(\"", "\u2581", "\u2581res", "$$erved", "\u2581=", "\u2581\").append(", "$$HexDump", "$$.to", "$$Hex", "$$(", "$$reserved", "$$))", "$$.append(", "$$n", "$$l", "$$)", "$$;"], ["\u2581buffer.append(\"[/", "$$ft", "$$G", "$$mo", "$$]", "$$\"", "\u2581+", "\u2581n", "$$l", "$$)", "$$;"], ["\u2581return", "\u2581buffer", "$$.toString()", "$$;"], ["\u2581}"]]}, {"cs": "public override string ToString() {\n    return GetMode().ToString() + \" \" + GetName();\n}\n", "java": "public String toString() {\n    return getMode().toString() + \" \" + getName();\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581string", "\u2581ToString()", "\u2581{"], ["\u2581return", "\u2581Get", "$$Mode", "$$()", "$$.ToString()", "\u2581+", "\u2581\"", "\u2581\"", "\u2581+", "\u2581Get", "$$Name()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581String", "\u2581toString()", "\u2581{"], ["\u2581return", "\u2581get", "$$Mode", "$$()", "$$.toString()", "\u2581+", "\u2581\"", "\u2581\"", "\u2581+", "\u2581get", "$$Name()", "$$;"], ["\u2581}"]]}, {"cs": "public CharVector(int capacity) {\n    if (capacity > 0) {\n        blockSize = capacity;\n    }\n    else {\n        blockSize = DEFAULT_BLOCK_SIZE;\n    }\n    array = new char[blockSize];\n    n = 0;\n}\n", "java": "public CharVector(int capacity) {\n    if (capacity > 0) {\n        blockSize = capacity;\n    }\n    else {\n        blockSize = DEFAULT_BLOCK_SIZE;\n    }\n    array = new char[blockSize];\n    n = 0;\n}\n", "cs_t": [["\u2581public", "\u2581Char", "$$Vector", "$$(int", "\u2581capacity", "$$)", "\u2581{"], ["\u2581if", "\u2581(c", "$$apacity", "\u2581>", "\u25810)", "\u2581{"], ["\u2581block", "$$Size", "\u2581=", "\u2581capacity", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581block", "$$Size", "\u2581=", "\u2581DEFAULT_", "$$B", "$$LOCK_SIZE", "$$;"], ["\u2581}"], ["\u2581array", "\u2581=", "\u2581new", "\u2581char[", "$$block", "$$Size", "$$]", "$$;"], ["\u2581n", "\u2581=", "\u25810;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Char", "$$Vector", "$$(int", "\u2581capacity", "$$)", "\u2581{"], ["\u2581if", "\u2581(c", "$$apacity", "\u2581>", "\u25810)", "\u2581{"], ["\u2581block", "$$Size", "\u2581=", "\u2581capacity", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581block", "$$Size", "\u2581=", "\u2581DEFAULT_", "$$B", "$$LOCK_SIZE", "$$;"], ["\u2581}"], ["\u2581array", "\u2581=", "\u2581new", "\u2581char[", "$$block", "$$Size", "$$]", "$$;"], ["\u2581n", "\u2581=", "\u25810;"], ["\u2581}"]]}, {"cs": "public virtual DescribeAccountLimitsResponse DescribeAccountLimits(DescribeAccountLimitsRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DescribeAccountLimitsRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DescribeAccountLimitsResponseUnmarshaller.Instance;\n    return Invoke<DescribeAccountLimitsResponse>(request, options);\n}\n", "java": "public DescribeAccountLimitsResult describeAccountLimits(DescribeAccountLimitsRequest request) {\n    request = beforeClientExecution(request);\n    return executeDescribeAccountLimits(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Describe", "$$Account", "$$Limit", "$$sResponse", "\u2581Describe", "$$Account", "$$Limit", "$$s(Describe", "$$Account", "$$Limit", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Describe", "$$Account", "$$Limit", "$$s", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Describe", "$$Account", "$$Limit", "$$s", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Describe", "$$Account", "$$Limit", "$$sResponse>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Describe", "$$Account", "$$Limit", "$$sResult", "\u2581describe", "$$Account", "$$Limit", "$$s(Describe", "$$Account", "$$Limit", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDescribe", "$$Account", "$$Limit", "$$s", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public void RemoveBuiltinRecord(byte name, int sheetIndex) {\n    linkTable.RemoveBuiltinRecord(name, sheetIndex);\n}\n", "java": "public void removeBuiltinRecord(byte name, int sheetIndex) {\n    linkTable.removeBuiltinRecord(name, sheetIndex);\n}\n", "cs_t": [["\u2581public", "\u2581void", "\u2581Remove", "$$Bu", "$$iltin", "$$Record(", "$$byte", "\u2581name,", "\u2581int", "\u2581sheet", "$$Index)", "\u2581{"], ["\u2581link", "$$Table", "$$.Remove", "$$Bu", "$$iltin", "$$Record(", "$$name", "$$,", "\u2581sheet", "$$Index)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581remove", "$$Bu", "$$iltin", "$$Record(", "$$byte", "\u2581name,", "\u2581int", "\u2581sheet", "$$Index)", "\u2581{"], ["\u2581link", "$$Table", "$$.remove", "$$Bu", "$$iltin", "$$Record(", "$$name", "$$,", "\u2581sheet", "$$Index)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual CreateSecurityGroupResponse CreateSecurityGroup(CreateSecurityGroupRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = CreateSecurityGroupRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = CreateSecurityGroupResponseUnmarshaller.Instance;\n    return Invoke<CreateSecurityGroupResponse>(request, options);\n}\n", "java": "public CreateSecurityGroupResult createSecurityGroup(CreateSecurityGroupRequest request) {\n    request = beforeClientExecution(request);\n    return executeCreateSecurityGroup(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Create", "$$SecurityGroup", "$$Response", "\u2581Create", "$$SecurityGroup", "$$(Create", "$$SecurityGroup", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Create", "$$SecurityGroup", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Create", "$$SecurityGroup", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Create", "$$SecurityGroup", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Create", "$$SecurityGroup", "$$Result", "\u2581create", "$$SecurityGroup", "$$(Create", "$$SecurityGroup", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeCreate", "$$SecurityGroup", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override bool Equals(object o) {\n    if (!(o is DisjunctionMaxQuery)) {\n        return false;\n    }\n    DisjunctionMaxQuery other = (DisjunctionMaxQuery)o;\n    return this.Boost == other.Boost&& this.tieBreakerMultiplier == other.tieBreakerMultiplier&& this.disjuncts.Equals(other.disjuncts);\n}\n", "java": "public boolean equals(Object other) {\n    return sameClassAs(other) &&equalsTo(getClass().cast(other));\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581bool", "\u2581Equals(object", "\u2581o)", "\u2581{"], ["\u2581if", "\u2581(!(o", "\u2581is", "\u2581Dis", "$$j", "$$unction", "$$Max", "$$Query", "$$))", "\u2581{"], ["\u2581return", "\u2581false", "$$;"], ["\u2581}"], ["\u2581Dis", "$$j", "$$unction", "$$Max", "$$Query", "\u2581other", "\u2581=", "\u2581(", "$$Dis", "$$j", "$$unction", "$$Max", "$$Query", "$$)o", "$$;"], ["\u2581return", "\u2581this.", "$$Boost", "\u2581==", "\u2581other.", "$$Boost", "$$&&", "\u2581this.", "$$ti", "$$e", "$$Break", "$$er", "$$Multi", "$$p", "$$li", "$$er", "\u2581==", "\u2581other.", "$$ti", "$$e", "$$Break", "$$er", "$$Multi", "$$p", "$$li", "$$er", "$$&&", "\u2581this.d", "$$is", "$$j", "$$un", "$$ct", "$$s.", "$$E", "$$quals(", "$$other.", "$$d", "$$is", "$$j", "$$un", "$$ct", "$$s)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581boolean", "\u2581equals(Object", "\u2581other)", "\u2581{"], ["\u2581return", "\u2581s", "$$ame", "$$Class", "$$A", "$$s(", "$$oth", "$$er)", "\u2581&&", "$$e", "$$qual", "$$sTo", "$$(get", "$$Class", "$$()", "$$.c", "$$ast", "$$(other", "$$))", "$$;"], ["\u2581}"]]}, {"cs": "public virtual GetObjectInformationResponse GetObjectInformation(GetObjectInformationRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = GetObjectInformationRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = GetObjectInformationResponseUnmarshaller.Instance;\n    return Invoke<GetObjectInformationResponse>(request, options);\n}\n", "java": "public GetObjectInformationResult getObjectInformation(GetObjectInformationRequest request) {\n    request = beforeClientExecution(request);\n    return executeGetObjectInformation(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Get", "$$Object", "$$In", "$$form", "$$ation", "$$Response", "\u2581Get", "$$Object", "$$In", "$$form", "$$ation", "$$(Get", "$$Object", "$$In", "$$form", "$$ation", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Get", "$$Object", "$$In", "$$form", "$$ation", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Get", "$$Object", "$$In", "$$form", "$$ation", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Get", "$$Object", "$$In", "$$form", "$$ation", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Get", "$$Object", "$$In", "$$form", "$$ation", "$$Result", "\u2581get", "$$Object", "$$In", "$$form", "$$ation", "$$(Get", "$$Object", "$$In", "$$form", "$$ation", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeGet", "$$Object", "$$In", "$$form", "$$ation", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public java.lang.StringBuffer append(bool b) {\n    return append(b ? \"true\" : \"false\");\n}\n", "java": "public StringBuffer append(long l) {\n    IntegralToString.appendLong(this, l);\n    return this;\n}\n", "cs_t": [["\u2581public", "\u2581java.lang.String", "$$Buffer", "\u2581append(", "$$bo", "$$ol", "\u2581b)", "\u2581{"], ["\u2581return", "\u2581append(", "$$b", "\u2581?", "\u2581\"", "$$t", "$$rue", "$$\"", "\u2581:", "\u2581\"", "$$f", "$$alse", "$$\")", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581String", "$$Buffer", "\u2581append(", "$$long", "\u2581l", "$$)", "\u2581{"], ["\u2581Integ", "$$r", "$$al", "$$To", "$$String", "$$.ap", "$$pend", "$$Long", "$$(this,", "\u2581l", "$$)", "$$;"], ["\u2581return", "\u2581this", "$$;"], ["\u2581}"]]}, {"cs": "public virtual GetIntegrationResponsesResponse GetIntegrationResponses(GetIntegrationResponsesRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = GetIntegrationResponsesRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = GetIntegrationResponsesResponseUnmarshaller.Instance;\n    return Invoke<GetIntegrationResponsesResponse>(request, options);\n}\n", "java": "public GetIntegrationResponsesResult getIntegrationResponses(GetIntegrationResponsesRequest request) {\n    request = beforeClientExecution(request);\n    return executeGetIntegrationResponses(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Get", "$$Integration", "$$Respon", "$$ses", "$$Response", "\u2581Get", "$$Integration", "$$Respon", "$$ses", "$$(Get", "$$Integration", "$$Respon", "$$ses", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Get", "$$Integration", "$$Respon", "$$ses", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Get", "$$Integration", "$$Respon", "$$ses", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Get", "$$Integration", "$$Respon", "$$ses", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Get", "$$Integration", "$$Respon", "$$ses", "$$Result", "\u2581get", "$$Integration", "$$Respon", "$$ses", "$$(Get", "$$Integration", "$$Respon", "$$ses", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeGet", "$$Integration", "$$Respon", "$$ses", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual ListDeploymentConfigsResponse ListDeploymentConfigs() {\n    return ListDeploymentConfigs(new ListDeploymentConfigsRequest());\n}\n", "java": "public ListDeploymentConfigsResult listDeploymentConfigs() {\n    return listDeploymentConfigs(new ListDeploymentConfigsRequest());\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581List", "$$Deployment", "$$Config", "$$sResponse", "\u2581List", "$$Deployment", "$$Config", "$$s()", "\u2581{"], ["\u2581return", "\u2581List", "$$Deployment", "$$Config", "$$s(new", "\u2581List", "$$Deployment", "$$Config", "$$sRequest", "$$())", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581List", "$$Deployment", "$$Config", "$$sResult", "\u2581list", "$$Deployment", "$$Config", "$$s()", "\u2581{"], ["\u2581return", "\u2581list", "$$Deployment", "$$Config", "$$s(new", "\u2581List", "$$Deployment", "$$Config", "$$sRequest", "$$())", "$$;"], ["\u2581}"]]}, {"cs": "public CellRangeAddress Remove(int rangeIndex) {\n    if (_list.Count == 0) {\n        throw new Exception(\"List is empty\");\n    }\n    if (rangeIndex < 0 || rangeIndex >= _list.Count) {\n        throw new Exception(\"Range index (\" + rangeIndex+ \") is outside allowable range (0..\" + (_list.Count - 1) + \")\");\n    }\n    CellRangeAddress cra = (CellRangeAddress)_list[rangeIndex];\n    _list.Remove(rangeIndex);\n    return cra;\n}\n", "java": "public CellRangeAddress remove(int rangeIndex) {\n    if (_list.isEmpty()) {\n        throw new RuntimeException(\"List is empty\");\n    }\n    if (rangeIndex < 0 || rangeIndex >= _list.size()) {\n        throw new RuntimeException(\"Range index (\" + rangeIndex+ \") is outside allowable range (0..\" + (_list.size()-1) + \")\");\n    }\n    return _list.remove(rangeIndex);\n}\n", "cs_t": [["\u2581public", "\u2581CellRangeAddress", "\u2581Remove", "$$(int", "\u2581range", "$$Index)", "\u2581{"], ["\u2581if", "\u2581(_", "$$list", "$$.Count", "\u2581==", "\u25810)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581Exception(\"", "$$List", "\u2581is", "\u2581e", "$$mpty", "$$\")", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(", "$$ran", "$$ge", "$$Index", "\u2581<", "\u25810", "\u2581||", "\u2581range", "$$Index", "\u2581>=", "\u2581_", "$$list", "$$.", "$$Count)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581Exception(\"", "$$Range", "\u2581index", "\u2581(\"", "\u2581+", "\u2581range", "$$Index", "$$+", "\u2581\")", "\u2581is", "\u2581out", "$$si", "$$de", "\u2581all", "$$ow", "$$able", "\u2581range", "\u2581(", "$$0", "$$..", "$$\"", "\u2581+", "\u2581(_", "$$list", "$$.Count", "\u2581-", "\u25811)", "\u2581+", "\u2581\")", "$$\")", "$$;"], ["\u2581}"], ["\u2581CellRangeAddress", "\u2581c", "$$ra", "\u2581=", "\u2581(", "$$Cell", "$$Range", "$$Addres", "$$s)", "$$_", "$$list", "$$[", "$$ran", "$$ge", "$$Index", "$$]", "$$;"], ["\u2581_", "$$list", "$$.Remove", "$$(", "$$ran", "$$ge", "$$Index)", "$$;"], ["\u2581return", "\u2581c", "$$ra", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581CellRangeAddress", "\u2581remove", "$$(int", "\u2581range", "$$Index)", "\u2581{"], ["\u2581if", "\u2581(_", "$$list", "$$.", "$$isEmpty())", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581RuntimeException(\"", "$$List", "\u2581is", "\u2581e", "$$mpty", "$$\")", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(", "$$ran", "$$ge", "$$Index", "\u2581<", "\u25810", "\u2581||", "\u2581range", "$$Index", "\u2581>=", "\u2581_", "$$list", "$$.size", "$$())", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581RuntimeException(\"", "$$Range", "\u2581index", "\u2581(\"", "\u2581+", "\u2581range", "$$Index", "$$+", "\u2581\")", "\u2581is", "\u2581out", "$$si", "$$de", "\u2581all", "$$ow", "$$able", "\u2581range", "\u2581(", "$$0", "$$..", "$$\"", "\u2581+", "\u2581(_", "$$list", "$$.size()", "$$-", "$$1)", "\u2581+", "\u2581\")", "$$\")", "$$;"], ["\u2581}"], ["\u2581return", "\u2581_", "$$list", "$$.remove", "$$(", "$$ran", "$$ge", "$$Index)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DimConfig GetDimConfig(string dimName) {\n    lock (this) {\n        DimConfig ft;\n        if (!fieldTypes.TryGetValue(dimName, out ft)) {\n            ft = DefaultDimConfig;\n        }\n        return ft;\n    }\n}\n", "java": "public DimConfig getDimConfig(String dimName) {\n    DimConfig ft = fieldTypes.get(dimName);\n    if (ft == null) {\n        ft = getDefaultDimConfig();\n    }\n    return ft;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581D", "$$im", "$$Config", "\u2581Get", "$$D", "$$im", "$$Config", "$$(string", "\u2581d", "$$im", "$$Name)", "\u2581{"], ["\u2581lock", "\u2581(this)", "\u2581{"], ["\u2581D", "$$im", "$$Config", "\u2581f", "$$t", "$$;"], ["\u2581if", "\u2581(!", "$$field", "$$Types", "$$.", "$$TryGet", "$$Value", "$$(d", "$$im", "$$Name,", "\u2581out", "\u2581f", "$$t", "$$))", "\u2581{"], ["\u2581f", "$$t", "\u2581=", "\u2581De", "$$fault", "$$D", "$$im", "$$Config", "$$;"], ["\u2581}"], ["\u2581return", "\u2581f", "$$t", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581D", "$$im", "$$Config", "\u2581get", "$$D", "$$im", "$$Config", "$$(String", "\u2581d", "$$im", "$$Name)", "\u2581{"], ["\u2581D", "$$im", "$$Config", "\u2581f", "$$t", "\u2581=", "\u2581field", "$$Types", "$$.get", "$$(d", "$$im", "$$Name)", "$$;"], ["\u2581if", "\u2581(f", "$$t", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581f", "$$t", "\u2581=", "\u2581get", "$$Default", "$$D", "$$im", "$$Config", "$$()", "$$;"], ["\u2581}"], ["\u2581return", "\u2581f", "$$t", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DescribeStackResourceDriftsResponse DescribeStackResourceDrifts(DescribeStackResourceDriftsRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DescribeStackResourceDriftsRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DescribeStackResourceDriftsResponseUnmarshaller.Instance;\n    return Invoke<DescribeStackResourceDriftsResponse>(request, options);\n}\n", "java": "public DescribeStackResourceDriftsResult describeStackResourceDrifts(DescribeStackResourceDriftsRequest request) {\n    request = beforeClientExecution(request);\n    return executeDescribeStackResourceDrifts(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Describe", "$$Stack", "$$Resource", "$$D", "$$ri", "$$ft", "$$sResponse", "\u2581Describe", "$$Stack", "$$Resource", "$$D", "$$ri", "$$ft", "$$s(Describe", "$$Stack", "$$Resource", "$$D", "$$ri", "$$ft", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Describe", "$$Stack", "$$Resource", "$$D", "$$ri", "$$ft", "$$s", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Describe", "$$Stack", "$$Resource", "$$D", "$$ri", "$$ft", "$$s", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Describe", "$$Stack", "$$Resource", "$$D", "$$ri", "$$ft", "$$sResponse>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Describe", "$$Stack", "$$Resource", "$$D", "$$ri", "$$ft", "$$sResult", "\u2581describe", "$$Stack", "$$Resource", "$$D", "$$ri", "$$ft", "$$s(Describe", "$$Stack", "$$Resource", "$$D", "$$ri", "$$ft", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDescribe", "$$Stack", "$$Resource", "$$D", "$$ri", "$$ft", "$$s", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual void SetParams(string @params) {\n    if (!SupportsParams) {\n        throw new NotSupportedException(GetName() + \" does not support command line parameters.\");\n    }\n    this.m_params = @params;\n}\n", "java": "public void setParams(String params) {\n    if (!supportsParams()) {\n        throw new UnsupportedOperationException(getName()+\" does not support command line parameters.\");\n    }\n    this.params = params;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581void", "\u2581Set", "$$Param", "$$s(", "$$string", "\u2581@", "$$param", "$$s)", "\u2581{"], ["\u2581if", "\u2581(!", "$$S", "$$up", "$$port", "$$s", "$$Param", "$$s)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581Not", "$$Supported", "$$Exception", "$$(Get", "$$Name()", "\u2581+", "\u2581\"", "\u2581do", "$$es", "\u2581not", "\u2581sup", "$$port", "\u2581com", "$$m", "$$and", "\u2581line", "\u2581parameter", "$$s.", "$$\")", "$$;"], ["\u2581}"], ["\u2581this.m_", "$$param", "$$s", "\u2581=", "\u2581@", "$$param", "$$s;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581set", "$$Param", "$$s(", "$$String", "\u2581par", "$$am", "$$s)", "\u2581{"], ["\u2581if", "\u2581(!", "$$s", "$$up", "$$port", "$$s", "$$Param", "$$s", "$$())", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581Un", "$$supported", "$$Operation", "$$Exception(", "$$get", "$$Name()", "$$+\"", "\u2581do", "$$es", "\u2581not", "\u2581sup", "$$port", "\u2581com", "$$m", "$$and", "\u2581line", "\u2581parameter", "$$s.", "$$\")", "$$;"], ["\u2581}"], ["\u2581this.", "$$param", "$$s", "\u2581=", "\u2581par", "$$am", "$$s;"], ["\u2581}"]]}, {"cs": "public virtual DescribeRepositoryAssociationResponse DescribeRepositoryAssociation(DescribeRepositoryAssociationRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DescribeRepositoryAssociationRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DescribeRepositoryAssociationResponseUnmarshaller.Instance;\n    return Invoke<DescribeRepositoryAssociationResponse>(request, options);\n}\n", "java": "public DescribeRepositoryAssociationResult describeRepositoryAssociation(DescribeRepositoryAssociationRequest request) {\n    request = beforeClientExecution(request);\n    return executeDescribeRepositoryAssociation(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Describe", "$$Repository", "$$Association", "$$Response", "\u2581Describe", "$$Repository", "$$Association", "$$(Describe", "$$Repository", "$$Association", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Describe", "$$Repository", "$$Association", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Describe", "$$Repository", "$$Association", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Describe", "$$Repository", "$$Association", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Describe", "$$Repository", "$$Association", "$$Result", "\u2581describe", "$$Repository", "$$Association", "$$(Describe", "$$Repository", "$$Association", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDescribe", "$$Repository", "$$Association", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override java.util.Enumeration<V> elements() {\n    lock (this) {\n        return new java.util.Hashtable<K, V>.ValueEnumeration(this);\n    }\n}\n", "java": "public synchronized Enumeration<V> elements() {\n    return new ValueEnumeration();\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581java.util.", "$$Enum", "$$eration", "$$<", "$$V", "$$>", "\u2581element", "$$s()", "\u2581{"], ["\u2581lock", "\u2581(this)", "\u2581{"], ["\u2581return", "\u2581new", "\u2581java.util.", "$$Hashtable", "$$<", "$$K,", "\u2581V>", "$$.", "$$Value", "$$Enum", "$$eration", "$$(this", "$$)", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581synchronized", "\u2581", "$$Enum", "$$eration", "$$<", "$$V", "$$>", "\u2581element", "$$s()", "\u2581{"], ["\u2581return", "\u2581new", "\u2581", "$$Value", "$$Enum", "$$eration", "$$()", "$$;"], ["\u2581}"]]}, {"cs": "public override void Set(int index, long value) {\n    int o = (int)((uint)index >> 4);\n    int b = index & 15;\n    int shift = b << 2;\n    blocks[o] = (blocks[o] & ~(15L << shift)) | (value << shift);\n}\n", "java": "public void set(int index, long value) {\n    final int o = index >>> 4;\n    final int b = index & 15;\n    final int shift = b << 2;\n    blocks[o] = (blocks[o] & ~(15L << shift)) | (value << shift);\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581void", "\u2581Set", "$$(int", "\u2581index,", "\u2581long", "\u2581value)", "\u2581{"], ["\u2581int", "\u2581o", "\u2581=", "\u2581(int", "$$)((", "$$uint)", "$$index", "\u2581>>", "\u25814)", "$$;"], ["\u2581int", "\u2581b", "\u2581=", "\u2581index", "\u2581&", "\u25811", "$$5", "$$;"], ["\u2581int", "\u2581shift", "\u2581=", "\u2581b", "\u2581<<", "\u25812", "$$;"], ["\u2581blocks[", "$$o]", "\u2581=", "\u2581(block", "$$s[", "$$o]", "\u2581&", "\u2581", "$$~", "$$(", "$$1", "$$5", "$$L", "\u2581<<", "\u2581shift", "$$))", "\u2581|", "\u2581(value", "\u2581<<", "\u2581shift", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581set", "$$(int", "\u2581index,", "\u2581long", "\u2581value)", "\u2581{"], ["\u2581final", "\u2581int", "\u2581o", "\u2581=", "\u2581index", "\u2581>>>", "\u25814", "$$;"], ["\u2581final", "\u2581int", "\u2581b", "\u2581=", "\u2581index", "\u2581&", "\u25811", "$$5", "$$;"], ["\u2581final", "\u2581int", "\u2581shift", "\u2581=", "\u2581b", "\u2581<<", "\u25812", "$$;"], ["\u2581blocks[", "$$o]", "\u2581=", "\u2581(block", "$$s[", "$$o]", "\u2581&", "\u2581", "$$~", "$$(", "$$1", "$$5", "$$L", "\u2581<<", "\u2581shift", "$$))", "\u2581|", "\u2581(value", "\u2581<<", "\u2581shift", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public HTMLStripCharFilterFactory(IDictionary<string, string> args) : base(args) {\n    escapedTags = GetSet(args, \"escapedTags\");\n    if (args.Count > 0) {\n        throw new System.ArgumentException(\"Unknown parameters: \" + args);\n    }\n}\n", "java": "public HTMLStripCharFilterFactory(Map<String,String> args) {\n    super(args);\n    escapedTags = getSet(args, \"escapedTags\");\n    if (!args.isEmpty()) {\n        throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n}\n", "cs_t": [["\u2581public", "\u2581H", "$$T", "$$ML", "$$St", "$$ri", "$$p", "$$Char", "$$FilterFactory(IDictionary<string,", "\u2581string>", "\u2581args)", "\u2581:", "\u2581base(args)", "\u2581{"], ["\u2581", "$$esc", "$$ap", "$$ed", "$$Tag", "$$s", "\u2581=", "\u2581Get", "$$Set", "$$(args,", "\u2581\"", "$$esc", "$$ap", "$$ed", "$$Tag", "$$s", "$$\")", "$$;"], ["\u2581if", "\u2581(args.Count", "\u2581>", "\u25810)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581System.ArgumentException(\"Unknown", "\u2581parameters:", "\u2581\"", "\u2581+", "\u2581args)", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581H", "$$T", "$$ML", "$$St", "$$ri", "$$p", "$$Char", "$$FilterFactory(Map<String,String>", "\u2581args)", "\u2581{"], ["\u2581super(", "$$arg", "$$s)", "$$;"], ["\u2581", "$$esc", "$$ap", "$$ed", "$$Tag", "$$s", "\u2581=", "\u2581get", "$$Set", "$$(args,", "\u2581\"", "$$esc", "$$ap", "$$ed", "$$Tag", "$$s", "$$\")", "$$;"], ["\u2581if", "\u2581(!args.isEmpty())", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581IllegalArgumentException(\"Unknown", "\u2581parameters:", "\u2581\"", "\u2581+", "\u2581args)", "$$;"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public virtual int GetEntryPathLength() {\n    return pathLen;\n}\n", "java": "public int getEntryPathLength() {\n    return pathLen;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581int", "\u2581Get", "$$Entry", "$$Path", "$$Length", "$$()", "\u2581{"], ["\u2581return", "\u2581path", "$$Len", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581int", "\u2581get", "$$Entry", "$$Path", "$$Length", "$$()", "\u2581{"], ["\u2581return", "\u2581path", "$$Len", "$$;"], ["\u2581}"]]}, {"cs": "public override void Serialize(ILittleEndianOutput out1) {\n    out1.WriteShort(field_1_option_flag);\n    out1.WriteShort(field_2_ixals);\n    out1.WriteShort(field_3_not_used);\n    out1.WriteByte(field_4_name.Length);\n    StringUtil.WriteUnicodeStringFlagAndData(out1, field_4_name);\n    if (!IsOLELink && !IsStdDocumentNameIdentifier) {\n        if (IsAutomaticLink) {\n            if (_ddeValues != null) {\n                out1.WriteByte(_nColumns - 1);\n                out1.WriteShort(_nRows - 1);\n                ConstantValueParser.Encode(out1, _ddeValues);\n            }\n        }\n        else {\n            field_5_name_definition.Serialize(out1);\n        }\n    }\n}\n", "java": "public void serialize(LittleEndianOutput out) {\n    out.writeShort(field_1_option_flag);\n    out.writeShort(field_2_ixals);\n    out.writeShort(field_3_not_used);\n    out.writeByte(field_4_name.length());\n    StringUtil.writeUnicodeStringFlagAndData(out, field_4_name);\n    if(!isOLELink() && !isStdDocumentNameIdentifier()) {\n        if(isAutomaticLink()) {\n            if(_ddeValues != null) {\n                out.writeByte(_nColumns-1);\n                out.writeShort(_nRows-1);\n                ConstantValueParser.encode(out, _ddeValues);\n            }\n        }\n        else {\n            field_5_name_definition.serialize(out);\n        }\n    }\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581void", "\u2581Serialize(ILittleEndianOutput", "\u2581out1)", "\u2581{"], ["\u2581out1.WriteShort(", "$$field_1_", "$$o", "$$ption", "$$_", "$$flag", "$$)", "$$;"], ["\u2581out1.WriteShort(", "$$field_2_", "$$i", "$$x", "$$al", "$$s)", "$$;"], ["\u2581out1.WriteShort(", "$$field_3_", "$$n", "$$ot", "$$_", "$$used", "$$)", "$$;"], ["\u2581out1.WriteByte(", "$$field_4_", "$$name", "$$.Length)", "$$;"], ["\u2581StringUtil.", "$$Write", "$$Unicode", "$$String", "$$Flag", "$$And", "$$Data", "$$(out", "$$1,", "\u2581field_4_", "$$name", "$$)", "$$;"], ["\u2581if", "\u2581(!", "$$Is", "$$O", "$$LE", "$$Link", "\u2581&&", "\u2581!", "$$Is", "$$St", "$$d", "$$Document", "$$Name", "$$Identifier", "$$)", "\u2581{"], ["\u2581if", "\u2581(", "$$Is", "$$Auto", "$$ma", "$$tic", "$$Link", "$$)", "\u2581{"], ["\u2581if", "\u2581(_", "$$d", "$$de", "$$Values", "\u2581!=", "\u2581null)", "\u2581{"], ["\u2581out1.Write", "$$Byte", "$$(_", "$$n", "$$Column", "$$s", "\u2581-", "\u25811)", "$$;"], ["\u2581out1.WriteShort(", "$$_", "$$n", "$$Row", "$$s", "\u2581-", "\u25811)", "$$;"], ["\u2581", "$$Constant", "$$Value", "$$Parser", "$$.", "$$Encode", "$$(out", "$$1,", "\u2581_d", "$$de", "$$Values", "$$)", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581field_5_", "$$name", "$$_", "$$de", "$$fin", "$$ition", "$$.S", "$$erialize", "$$(out", "$$1)", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581serialize(LittleEndianOutput", "\u2581out)", "\u2581{"], ["\u2581out.writeShort(", "$$field_1_", "$$o", "$$ption", "$$_", "$$flag", "$$)", "$$;"], ["\u2581out.writeShort(", "$$field_2_", "$$i", "$$x", "$$al", "$$s)", "$$;"], ["\u2581out.writeShort(", "$$field_3_", "$$n", "$$ot", "$$_", "$$used", "$$)", "$$;"], ["\u2581out.writeByte(", "$$field_4_", "$$name", "$$.length", "$$())", "$$;"], ["\u2581StringUtil.", "$$write", "$$Unicode", "$$String", "$$Flag", "$$And", "$$Data", "$$(out", "$$,", "\u2581field_4_", "$$name", "$$)", "$$;"], ["\u2581if(", "$$!", "$$is", "$$O", "$$LE", "$$Link", "$$()", "\u2581&&", "\u2581!", "$$is", "$$St", "$$d", "$$Document", "$$Name", "$$Identifier", "$$())", "\u2581{"], ["\u2581if(", "$$is", "$$Auto", "$$ma", "$$tic", "$$Link", "$$())", "\u2581{"], ["\u2581if", "$$(_", "$$d", "$$de", "$$Values", "\u2581!=", "\u2581null)", "\u2581{"], ["\u2581out.write", "$$Byte", "$$(_", "$$n", "$$Column", "$$s", "$$-", "$$1)", "$$;"], ["\u2581out.writeShort(", "$$_", "$$n", "$$Row", "$$s", "$$-", "$$1)", "$$;"], ["\u2581", "$$Constant", "$$Value", "$$Parser", "$$.", "$$en", "$$code", "$$(out", "$$,", "\u2581_d", "$$de", "$$Values", "$$)", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581field_5_", "$$name", "$$_", "$$de", "$$fin", "$$ition", "$$.", "$$ser", "$$ial", "$$ize", "$$(out", "$$)", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public override String ToString() {\n    StringBuilder buffer = new StringBuilder();\n    buffer.Append(\"[REFRESHALL]\\n\");\n    buffer.Append(\"    .refreshall      = \").Append(RefreshAll).Append(\"\\n\");\n    buffer.Append(\"[/REFRESHALL]\\n\");\n    return buffer.ToString();\n}\n", "java": "public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"[REFRESHALL]\\n\");\n    buffer.append(\"    .options      = \").append(HexDump.shortToHex(_options)).append(\"\\n\");\n    buffer.append(\"[/REFRESHALL]\\n\");\n    return buffer.toString();\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581String", "\u2581ToString()", "\u2581{"], ["\u2581StringBuilder", "\u2581buffer", "\u2581=", "\u2581new", "\u2581StringBuilder", "$$()", "$$;"], ["\u2581buffer.Append(\"[", "$$REF", "$$RE", "$$SH", "$$AL", "$$L", "$$]", "$$\\n", "$$\")", "$$;"], ["\u2581buffer.Append(\"", "\u2581", "\u2581", "\u2581", "\u2581", "$$.re", "$$f", "$$resh", "$$all", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581=", "\u2581\").Append(", "$$Ref", "$$resh", "$$All", "$$)", "$$.Append(\"", "$$\\n", "$$\")", "$$;"], ["\u2581buffer.Append(\"[/", "$$REF", "$$RE", "$$SH", "$$AL", "$$L", "$$]", "$$\\n", "$$\")", "$$;"], ["\u2581return", "\u2581buffer", "$$.ToString()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581String", "\u2581toString()", "\u2581{"], ["\u2581StringBuilder", "\u2581buffer", "\u2581=", "\u2581new", "\u2581StringBuilder", "$$()", "$$;"], ["\u2581buffer.append(\"[", "$$REF", "$$RE", "$$SH", "$$AL", "$$L", "$$]", "$$\\n", "$$\")", "$$;"], ["\u2581buffer.append(\"", "\u2581", "\u2581", "\u2581", "\u2581.", "$$options", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581=", "\u2581\").append(", "$$HexDump.short", "$$ToHex", "$$(_", "$$options", "$$))", "$$.append(\"", "$$\\n", "$$\")", "$$;"], ["\u2581buffer.append(\"[/", "$$REF", "$$RE", "$$SH", "$$AL", "$$L", "$$]", "$$\\n", "$$\")", "$$;"], ["\u2581return", "\u2581buffer", "$$.toString()", "$$;"], ["\u2581}"]]}, {"cs": "public virtual ContinueDeploymentResponse ContinueDeployment(ContinueDeploymentRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = ContinueDeploymentRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = ContinueDeploymentResponseUnmarshaller.Instance;\n    return Invoke<ContinueDeploymentResponse>(request, options);\n}\n", "java": "public ContinueDeploymentResult continueDeployment(ContinueDeploymentRequest request) {\n    request = beforeClientExecution(request);\n    return executeContinueDeployment(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Con", "$$t", "$$inue", "$$Deployment", "$$Response", "\u2581Con", "$$t", "$$inue", "$$Deployment", "$$(", "$$Cont", "$$inue", "$$Deployment", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Con", "$$t", "$$inue", "$$Deployment", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Con", "$$t", "$$inue", "$$Deployment", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<", "$$Cont", "$$inue", "$$Deployment", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Con", "$$t", "$$inue", "$$Deployment", "$$Result", "\u2581c", "$$ontinue", "$$Deployment", "$$(", "$$Cont", "$$inue", "$$Deployment", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581execute", "$$Cont", "$$inue", "$$Deployment", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override void Set(int index, long value) {\n    int o = index / 3;\n    int b = index % 3;\n    int shift = b * 21;\n    blocks[o] = (blocks[o] & ~(2097151L << shift)) | (value << shift);\n}\n", "java": "public void set(int index, long value) {\n    final int o = index / 3;\n    final int b = index % 3;\n    final int shift = b * 21;\n    blocks[o] = (blocks[o] & ~(2097151L << shift)) | (value << shift);\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581void", "\u2581Set", "$$(int", "\u2581index,", "\u2581long", "\u2581value)", "\u2581{"], ["\u2581int", "\u2581o", "\u2581=", "\u2581index", "\u2581/", "\u25813", "$$;"], ["\u2581int", "\u2581b", "\u2581=", "\u2581index", "\u2581%", "\u25813", "$$;"], ["\u2581int", "\u2581shift", "\u2581=", "\u2581b", "\u2581*", "\u25812", "$$1", "$$;"], ["\u2581blocks[", "$$o]", "\u2581=", "\u2581(block", "$$s[", "$$o]", "\u2581&", "\u2581", "$$~", "$$(", "$$20", "$$9", "$$7", "$$1", "$$5", "$$1", "$$L", "\u2581<<", "\u2581shift", "$$))", "\u2581|", "\u2581(value", "\u2581<<", "\u2581shift", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581set", "$$(int", "\u2581index,", "\u2581long", "\u2581value)", "\u2581{"], ["\u2581final", "\u2581int", "\u2581o", "\u2581=", "\u2581index", "\u2581/", "\u25813", "$$;"], ["\u2581final", "\u2581int", "\u2581b", "\u2581=", "\u2581index", "\u2581%", "\u25813", "$$;"], ["\u2581final", "\u2581int", "\u2581shift", "\u2581=", "\u2581b", "\u2581*", "\u25812", "$$1", "$$;"], ["\u2581blocks[", "$$o]", "\u2581=", "\u2581(block", "$$s[", "$$o]", "\u2581&", "\u2581", "$$~", "$$(", "$$20", "$$9", "$$7", "$$1", "$$5", "$$1", "$$L", "\u2581<<", "\u2581shift", "$$))", "\u2581|", "\u2581(value", "\u2581<<", "\u2581shift", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public long Next() {\n    if (ord == valueCount) {\n        throw new System.IO.EndOfStreamException();\n    }\n    if (off == blockSize) {\n        Refill();\n    }\n    long value = values[off++];\n    ++ord;\n    return value;\n}\n", "java": "public long next() throws IOException {\n    if (ord == valueCount) {\n        throw new EOFException();\n    }\n    if (off == blockSize) {\n        refill();\n    }\n    final long value = values[off++];\n    ++ord;\n    return value;\n}\n", "cs_t": [["\u2581public", "\u2581long", "\u2581Next", "$$()", "\u2581{"], ["\u2581if", "\u2581(", "$$ord", "\u2581==", "\u2581value", "$$Count)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581System.", "$$IO", "$$.", "$$End", "$$Of", "$$Stream", "$$Exception", "$$()", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(o", "$$ff", "\u2581==", "\u2581block", "$$Size)", "\u2581{"], ["\u2581Re", "$$fill", "$$()", "$$;"], ["\u2581}"], ["\u2581long", "\u2581value", "\u2581=", "\u2581values[", "$$o", "$$ff", "$$++]", "$$;"], ["\u2581++", "$$ord", "$$;"], ["\u2581return", "\u2581value", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581long", "\u2581next", "$$()", "\u2581throws", "\u2581IOException", "\u2581{"], ["\u2581if", "\u2581(", "$$ord", "\u2581==", "\u2581value", "$$Count)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581E", "$$OF", "$$Exception", "$$()", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(o", "$$ff", "\u2581==", "\u2581block", "$$Size)", "\u2581{"], ["\u2581re", "$$fill", "$$()", "$$;"], ["\u2581}"], ["\u2581final", "\u2581long", "\u2581value", "\u2581=", "\u2581values[", "$$o", "$$ff", "$$++]", "$$;"], ["\u2581++", "$$ord", "$$;"], ["\u2581return", "\u2581value", "$$;"], ["\u2581}"]]}, {"cs": "public static RevFilter Between(DateTime since, DateTime until) {\n    return Between(since.GetTime(), until.GetTime());\n}\n", "java": "public static final RevFilter between(Date since, Date until) {\n    return between(since.getTime(), until.getTime());\n}\n", "cs_t": [["\u2581public", "\u2581static", "\u2581RevFilter", "\u2581B", "$$et", "$$w", "$$e", "$$en", "$$(", "$$Date", "$$Time", "\u2581s", "$$in", "$$ce", "$$,", "\u2581Date", "$$Time", "\u2581un", "$$til", "$$)", "\u2581{"], ["\u2581return", "\u2581B", "$$et", "$$w", "$$e", "$$en", "$$(s", "$$in", "$$ce", "$$.Get", "$$Time", "$$(),", "\u2581un", "$$til", "$$.Get", "$$Time", "$$())", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581static", "\u2581final", "\u2581RevFilter", "\u2581b", "$$et", "$$w", "$$e", "$$en", "$$(", "$$Date", "\u2581s", "$$in", "$$ce", "$$,", "\u2581Date", "\u2581un", "$$til", "$$)", "\u2581{"], ["\u2581return", "\u2581b", "$$et", "$$w", "$$e", "$$en", "$$(s", "$$in", "$$ce", "$$.get", "$$Time", "$$(),", "\u2581un", "$$til", "$$.get", "$$Time", "$$())", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DeleteVaultResponse DeleteVault(DeleteVaultRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DeleteVaultRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DeleteVaultResponseUnmarshaller.Instance;\n    return Invoke<DeleteVaultResponse>(request, options);\n}\n", "java": "public DeleteVaultResult deleteVault(DeleteVaultRequest request) {\n    request = beforeClientExecution(request);\n    return executeDeleteVault(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Delete", "$$Vault", "$$Response", "\u2581Delete", "$$Vault", "$$(Delete", "$$Vault", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Delete", "$$Vault", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Delete", "$$Vault", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Delete", "$$Vault", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Delete", "$$Vault", "$$Result", "\u2581delete", "$$Vault", "$$(Delete", "$$Vault", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDelete", "$$Vault", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override sealed void Reset() {\n    it = cachedStates.GetEnumerator();\n}\n", "java": "public final void reset() {\n    it = cachedStates.getStates();\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581sealed", "\u2581void", "\u2581Reset", "$$()", "\u2581{"], ["\u2581it", "\u2581=", "\u2581c", "$$ached", "$$St", "$$ates", "$$.Get", "$$Enumerator", "$$()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581final", "\u2581void", "\u2581reset", "$$()", "\u2581{"], ["\u2581it", "\u2581=", "\u2581c", "$$ached", "$$St", "$$ates", "$$.get", "$$St", "$$ates", "$$()", "$$;"], ["\u2581}"]]}, {"cs": "public virtual void SetDetachingSymbolicRef() {\n    detachingSymbolicRef = true;\n}\n", "java": "public void setDetachingSymbolicRef() {\n    detachingSymbolicRef = true;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581void", "\u2581Set", "$$Detach", "$$ing", "$$S", "$$ym", "$$bo", "$$lic", "$$Ref", "$$()", "\u2581{"], ["\u2581d", "$$etach", "$$ing", "$$S", "$$ym", "$$bo", "$$lic", "$$Ref", "\u2581=", "\u2581true", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581set", "$$Detach", "$$ing", "$$S", "$$ym", "$$bo", "$$lic", "$$Ref", "$$()", "\u2581{"], ["\u2581d", "$$etach", "$$ing", "$$S", "$$ym", "$$bo", "$$lic", "$$Ref", "\u2581=", "\u2581true", "$$;"], ["\u2581}"]]}, {"cs": "public virtual ModifyIdentityIdFormatResponse ModifyIdentityIdFormat(ModifyIdentityIdFormatRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = ModifyIdentityIdFormatRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = ModifyIdentityIdFormatResponseUnmarshaller.Instance;\n    return Invoke<ModifyIdentityIdFormatResponse>(request, options);\n}\n", "java": "public ModifyIdentityIdFormatResult modifyIdentityIdFormat(ModifyIdentityIdFormatRequest request) {\n    request = beforeClientExecution(request);\n    return executeModifyIdentityIdFormat(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Modify", "$$Identity", "$$Id", "$$Format", "$$Response", "\u2581Modify", "$$Identity", "$$Id", "$$Format", "$$(Modify", "$$Identity", "$$Id", "$$Format", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Modify", "$$Identity", "$$Id", "$$Format", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Modify", "$$Identity", "$$Id", "$$Format", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Modify", "$$Identity", "$$Id", "$$Format", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Modify", "$$Identity", "$$Id", "$$Format", "$$Result", "\u2581modify", "$$Identity", "$$Id", "$$Format", "$$(Modify", "$$Identity", "$$Id", "$$Format", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeModify", "$$Identity", "$$Id", "$$Format", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual void AddException(string word, IList<object> hyphenatedword) {\n    m_stoplist[word] = hyphenatedword;\n}\n", "java": "public void addException(String word, ArrayList<Object> hyphenatedword) {\n    stoplist.put(word, hyphenatedword);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581void", "\u2581Add", "$$Exception", "$$(string", "\u2581word", "$$,", "\u2581IList<", "$$object", "$$>", "\u2581h", "$$yp", "$$h", "$$en", "$$ated", "$$word", "$$)", "\u2581{"], ["\u2581m_", "$$st", "$$op", "$$list", "$$[", "$$word", "$$]", "\u2581=", "\u2581h", "$$yp", "$$h", "$$en", "$$ated", "$$word", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581add", "$$Exception", "$$(String", "\u2581word", "$$,", "\u2581ArrayList<", "$$Object", "$$>", "\u2581h", "$$yp", "$$h", "$$en", "$$ated", "$$word", "$$)", "\u2581{"], ["\u2581stop", "$$list", "$$.put", "$$(", "$$word", "$$,", "\u2581h", "$$yp", "$$h", "$$en", "$$ated", "$$word", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public GreekStemFilterFactory(IDictionary<string, string> args): base(args) {\n    if (args.Count > 0) {\n        throw new System.ArgumentException(\"Unknown parameters: \" + args);\n    }\n}\n", "java": "public GreekStemFilterFactory(Map<String,String> args) {\n    super(args);\n    if (!args.isEmpty()) {\n        throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n}\n", "cs_t": [["\u2581public", "\u2581G", "$$ree", "$$k", "$$Stem", "$$FilterFactory(IDictionary<string,", "\u2581string>", "\u2581args):", "\u2581base(args)", "\u2581{"], ["\u2581if", "\u2581(args.Count", "\u2581>", "\u25810)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581System.ArgumentException(\"Unknown", "\u2581parameters:", "\u2581\"", "\u2581+", "\u2581args)", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581G", "$$ree", "$$k", "$$Stem", "$$FilterFactory(Map<String,String>", "\u2581args)", "\u2581{"], ["\u2581super(", "$$arg", "$$s)", "$$;"], ["\u2581if", "\u2581(!args.isEmpty())", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581IllegalArgumentException(\"Unknown", "\u2581parameters:", "\u2581\"", "\u2581+", "\u2581args)", "$$;"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public virtual RegisterTypeResponse RegisterType(RegisterTypeRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = RegisterTypeRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = RegisterTypeResponseUnmarshaller.Instance;\n    return Invoke<RegisterTypeResponse>(request, options);\n}\n", "java": "public RegisterTypeResult registerType(RegisterTypeRequest request) {\n    request = beforeClientExecution(request);\n    return executeRegisterType(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Register", "$$Type", "$$Response", "\u2581Register", "$$Type", "$$(Re", "$$gister", "$$Type", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Register", "$$Type", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Register", "$$Type", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<", "$$Re", "$$gister", "$$Type", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Register", "$$Type", "$$Result", "\u2581re", "$$gister", "$$Type", "$$(Re", "$$gister", "$$Type", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581execute", "$$Re", "$$gister", "$$Type", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual GetAccessControlEffectResponse GetAccessControlEffect(GetAccessControlEffectRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = GetAccessControlEffectRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = GetAccessControlEffectResponseUnmarshaller.Instance;\n    return Invoke<GetAccessControlEffectResponse>(request, options);\n}\n", "java": "public GetAccessControlEffectResult getAccessControlEffect(GetAccessControlEffectRequest request) {\n    request = beforeClientExecution(request);\n    return executeGetAccessControlEffect(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Get", "$$Access", "$$Cont", "$$ro", "$$l", "$$E", "$$ff", "$$ect", "$$Response", "\u2581Get", "$$Access", "$$Cont", "$$ro", "$$l", "$$E", "$$ff", "$$ect", "$$(Get", "$$Access", "$$Cont", "$$ro", "$$l", "$$E", "$$ff", "$$ect", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Get", "$$Access", "$$Cont", "$$ro", "$$l", "$$E", "$$ff", "$$ect", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Get", "$$Access", "$$Cont", "$$ro", "$$l", "$$E", "$$ff", "$$ect", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Get", "$$Access", "$$Cont", "$$ro", "$$l", "$$E", "$$ff", "$$ect", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Get", "$$Access", "$$Cont", "$$ro", "$$l", "$$E", "$$ff", "$$ect", "$$Result", "\u2581get", "$$Access", "$$Cont", "$$ro", "$$l", "$$E", "$$ff", "$$ect", "$$(Get", "$$Access", "$$Cont", "$$ro", "$$l", "$$E", "$$ff", "$$ect", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeGet", "$$Access", "$$Cont", "$$ro", "$$l", "$$E", "$$ff", "$$ect", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public HSSFShapeGroup CreateGroup(HSSFChildAnchor anchor) {\n    HSSFShapeGroup group = new HSSFShapeGroup(this, anchor);\n    group.Parent = this;\n    group.Anchor = anchor;\n    shapes.Add(group);\n    OnCreate(group);\n    return group;\n}\n", "java": "public HSSFShapeGroup createGroup(HSSFChildAnchor anchor) {\n    HSSFShapeGroup group = new HSSFShapeGroup(this, anchor);\n    group.setParent(this);\n    group.setAnchor(anchor);\n    shapes.add(group);\n    onCreate(group);\n    return group;\n}\n", "cs_t": [["\u2581public", "\u2581HSSF", "$$Shape", "$$Group", "\u2581Create", "$$Group", "$$(HSSF", "$$Child", "$$Anchor", "\u2581anchor", "$$)", "\u2581{"], ["\u2581HSSF", "$$Shape", "$$Group", "\u2581group", "\u2581=", "\u2581new", "\u2581HSSF", "$$Shape", "$$Group", "$$(this,", "\u2581anchor", "$$)", "$$;"], ["\u2581group", "$$.", "$$Parent", "\u2581=", "\u2581this", "$$;"], ["\u2581group", "$$.A", "$$n", "$$chor", "\u2581=", "\u2581anchor", "$$;"], ["\u2581sh", "$$ap", "$$es", "$$.Add(", "$$group", "$$)", "$$;"], ["\u2581", "$$On", "$$Create", "$$(", "$$group", "$$)", "$$;"], ["\u2581return", "\u2581group", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581HSSF", "$$Shape", "$$Group", "\u2581create", "$$Group", "$$(HSSF", "$$Child", "$$Anchor", "\u2581anchor", "$$)", "\u2581{"], ["\u2581HSSF", "$$Shape", "$$Group", "\u2581group", "\u2581=", "\u2581new", "\u2581HSSF", "$$Shape", "$$Group", "$$(this,", "\u2581anchor", "$$)", "$$;"], ["\u2581group", "$$.set", "$$Parent", "$$(this", "$$)", "$$;"], ["\u2581group", "$$.set", "$$Anchor", "$$(", "$$an", "$$chor", "$$)", "$$;"], ["\u2581sh", "$$ap", "$$es", "$$.add(", "$$group", "$$)", "$$;"], ["\u2581on", "$$Create", "$$(", "$$group", "$$)", "$$;"], ["\u2581return", "\u2581group", "$$;"], ["\u2581}"]]}, {"cs": "public virtual string ToExternalString() {\n    StringBuilder r = new StringBuilder();\n    r.Append(GetName());\n    r.Append(\" <\");\n    r.Append(GetEmailAddress());\n    r.Append(\"> \");\n    r.Append(when / 1000);\n    r.Append(' ');\n    AppendTimezone(r);\n    return r.ToString();\n}\n", "java": "public String toExternalString() {\n    final StringBuilder r = new StringBuilder();\n    appendSanitized(r, getName());\n    r.append(\" <\");\n    appendSanitized(r, getEmailAddress());\n    r.append(\"> \");\n    r.append(when / 1000);\n    r.append(' ');\n    appendTimezone(r, tzOffset);\n    return r.toString();\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581string", "\u2581To", "$$External", "$$String()", "\u2581{"], ["\u2581StringBuilder", "\u2581r", "\u2581=", "\u2581new", "\u2581StringBuilder", "$$()", "$$;"], ["\u2581r", "$$.Append(", "$$Get", "$$Name", "$$())", "$$;"], ["\u2581r", "$$.Append(\"", "\u2581<", "$$\")", "$$;"], ["\u2581r", "$$.Append(", "$$Get", "$$Email", "$$Address", "$$())", "$$;"], ["\u2581r", "$$.Append(\"", "$$>", "\u2581\")", "$$;"], ["\u2581r", "$$.Append(", "$$w", "$$h", "$$en", "\u2581/", "\u25811", "$$00", "$$0)", "$$;"], ["\u2581r", "$$.Append('", "\u2581'", "$$)", "$$;"], ["\u2581Ap", "$$pend", "$$Time", "$$z", "$$one", "$$(r", "$$)", "$$;"], ["\u2581return", "\u2581r", "$$.ToString()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581String", "\u2581to", "$$External", "$$String()", "\u2581{"], ["\u2581final", "\u2581StringBuilder", "\u2581r", "\u2581=", "\u2581new", "\u2581StringBuilder", "$$()", "$$;"], ["\u2581append", "$$S", "$$an", "$$iti", "$$ze", "$$d(", "$$r", "$$,", "\u2581get", "$$Name", "$$())", "$$;"], ["\u2581r", "$$.append(\"", "\u2581<", "$$\")", "$$;"], ["\u2581append", "$$S", "$$an", "$$iti", "$$ze", "$$d(", "$$r", "$$,", "\u2581get", "$$Email", "$$Address", "$$())", "$$;"], ["\u2581r", "$$.append(\"", "$$>", "\u2581\")", "$$;"], ["\u2581r", "$$.append(", "$$w", "$$h", "$$en", "\u2581/", "\u25811", "$$00", "$$0)", "$$;"], ["\u2581r", "$$.append('", "\u2581'", "$$)", "$$;"], ["\u2581append", "$$Time", "$$z", "$$one", "$$(r", "$$,", "\u2581t", "$$z", "$$Offset", "$$)", "$$;"], ["\u2581return", "\u2581r", "$$.toString()", "$$;"], ["\u2581}"]]}, {"cs": "public static FontCharset ValueOf(int value) {\n    if(value>=0&&value<=255)return _table[value];\n    return null;\n}\n", "java": "public static FontCharset valueOf(int value) {\n    if(value >= _table.length)return null;\n    return _table[value];\n}\n", "cs_t": [["\u2581public", "\u2581static", "\u2581F", "$$ont", "$$Char", "$$set", "\u2581", "$$Value", "$$Of", "$$(int", "\u2581value)", "\u2581{"], ["\u2581if", "$$(value", "$$>", "$$=0", "$$&&", "$$value", "$$<", "$$=", "$$2", "$$5", "$$5", "$$)return", "\u2581_", "$$table", "$$[", "$$value", "$$]", "$$;"], ["\u2581return", "\u2581null", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581static", "\u2581F", "$$ont", "$$Char", "$$set", "\u2581value", "$$Of", "$$(int", "\u2581value)", "\u2581{"], ["\u2581if", "$$(value", "\u2581>=", "\u2581_", "$$table", "$$.length", "$$)return", "\u2581null", "$$;"], ["\u2581return", "\u2581_", "$$table", "$$[", "$$value", "$$]", "$$;"], ["\u2581}"]]}, {"cs": "public NLPSentenceDetectorOp() {\n    sentenceSplitter = null;\n}\n", "java": "public NLPSentenceDetectorOp() {\n    sentenceSplitter = null;\n}\n", "cs_t": [["\u2581public", "\u2581N", "$$L", "$$PS", "$$entence", "$$Detector", "$$Op", "$$()", "\u2581{"], ["\u2581s", "$$entence", "$$Sp", "$$lit", "$$ter", "\u2581=", "\u2581null", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581N", "$$L", "$$PS", "$$entence", "$$Detector", "$$Op", "$$()", "\u2581{"], ["\u2581s", "$$entence", "$$Sp", "$$lit", "$$ter", "\u2581=", "\u2581null", "$$;"], ["\u2581}"]]}, {"cs": "public override void Validate() {\n    base.Validate();\n}\n", "java": "public String resource() {\n    return this.resource;\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581void", "\u2581V", "$$al", "$$idate", "$$()", "\u2581{"], ["\u2581base", "$$.", "$$Valid", "$$ate", "$$()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581String", "\u2581res", "$$ource", "$$()", "\u2581{"], ["\u2581return", "\u2581this.", "$$res", "$$ource", "$$;"], ["\u2581}"]]}, {"cs": "public QueryScorer(Query query, string field) {\n    Init(query, field, null, true);\n}\n", "java": "public QueryScorer(Query query, String field) {\n    init(query, field, null, true);\n}\n", "cs_t": [["\u2581public", "\u2581Query", "$$Score", "$$r", "$$(", "$$Query", "\u2581query", "$$,", "\u2581string", "\u2581field)", "\u2581{"], ["\u2581In", "$$it", "$$(", "$$query", "$$,", "\u2581field", "$$,", "\u2581null", "$$,", "\u2581true", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Query", "$$Score", "$$r", "$$(", "$$Query", "\u2581query", "$$,", "\u2581String", "\u2581field)", "\u2581{"], ["\u2581in", "$$it", "$$(", "$$query", "$$,", "\u2581field", "$$,", "\u2581null", "$$,", "\u2581true", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public ActiveTrustedSigners(List<Signer> items) {\n    _items = items;\n}\n", "java": "public ActiveTrustedSigners(java.util.List<Signer> items) {\n    setItems(items);\n}\n", "cs_t": [["\u2581public", "\u2581Ac", "$$tive", "$$T", "$$r", "$$us", "$$ted", "$$Sign", "$$er", "$$s(", "$$List<", "$$Sign", "$$er", "$$>", "\u2581i", "$$tem", "$$s)", "\u2581{"], ["\u2581_", "$$i", "$$tem", "$$s", "\u2581=", "\u2581i", "$$tem", "$$s;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Ac", "$$tive", "$$T", "$$r", "$$us", "$$ted", "$$Sign", "$$er", "$$s(", "$$java.util.", "$$List<", "$$Sign", "$$er", "$$>", "\u2581i", "$$tem", "$$s)", "\u2581{"], ["\u2581set", "$$Item", "$$s(", "$$i", "$$tem", "$$s)", "$$;"], ["\u2581}"]]}, {"cs": "public override String ToString() {\n    StringBuilder sb = new StringBuilder();\n    sb.Append(GetType().Name);\n    sb.Append(\" [\");\n    sb.Append(FormatReferenceAsString());\n    sb.Append(\"]\");\n    return sb.ToString();\n}\n", "java": "public final String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(getClass().getName());\n    sb.append(\" [\");\n    sb.append(formatReferenceAsString());\n    sb.append(\"]\");\n    return sb.toString();\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581String", "\u2581ToString()", "\u2581{"], ["\u2581StringBuilder", "\u2581sb", "\u2581=", "\u2581new", "\u2581StringBuilder", "$$()", "$$;"], ["\u2581sb.Append(", "$$Get", "$$Type().", "$$Name)", "$$;"], ["\u2581sb.Append(\"", "\u2581[", "$$\")", "$$;"], ["\u2581sb.Append(", "$$Format", "$$Reference", "$$As", "$$String()", "$$)", "$$;"], ["\u2581sb.Append(\"", "$$]", "$$\")", "$$;"], ["\u2581return", "\u2581sb", "$$.ToString()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581final", "\u2581String", "\u2581toString()", "\u2581{"], ["\u2581StringBuilder", "\u2581sb", "\u2581=", "\u2581new", "\u2581StringBuilder", "$$()", "$$;"], ["\u2581sb.append(", "$$get", "$$Class().get", "$$Name", "$$())", "$$;"], ["\u2581sb.append(\"", "\u2581[", "$$\")", "$$;"], ["\u2581sb.append(", "$$format", "$$Reference", "$$As", "$$String()", "$$)", "$$;"], ["\u2581sb.append(\"", "$$]", "$$\")", "$$;"], ["\u2581return", "\u2581sb", "$$.toString()", "$$;"], ["\u2581}"]]}, {"cs": "public virtual UpdateNodegroupConfigResponse UpdateNodegroupConfig(UpdateNodegroupConfigRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = UpdateNodegroupConfigRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = UpdateNodegroupConfigResponseUnmarshaller.Instance;\n    return Invoke<UpdateNodegroupConfigResponse>(request, options);\n}\n", "java": "public UpdateNodegroupConfigResult updateNodegroupConfig(UpdateNodegroupConfigRequest request) {\n    request = beforeClientExecution(request);\n    return executeUpdateNodegroupConfig(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Update", "$$Node", "$$group", "$$Config", "$$Response", "\u2581Update", "$$Node", "$$group", "$$Config", "$$(Update", "$$Node", "$$group", "$$Config", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Update", "$$Node", "$$group", "$$Config", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Update", "$$Node", "$$group", "$$Config", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Update", "$$Node", "$$group", "$$Config", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Update", "$$Node", "$$group", "$$Config", "$$Result", "\u2581update", "$$Node", "$$group", "$$Config", "$$(Update", "$$Node", "$$group", "$$Config", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeUpdate", "$$Node", "$$group", "$$Config", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual void Fill(int fromIndex, int toIndex, long val) {\n    Debug.Assert(val <= MaxValue(BitsPerValue));\n    Debug.Assert(fromIndex <= toIndex);\n    for (int i = fromIndex; i < toIndex; ++i) {\n        Set(i, val);\n    }\n}\n", "java": "public void fill(int fromIndex, int toIndex, long val) {\n    assert val <= maxValue(getBitsPerValue());\n    assert fromIndex <= toIndex;\n    for (int i = fromIndex; i < toIndex; ++i) {\n        set(i, val);\n    }\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581void", "\u2581", "$$Fill", "$$(int", "\u2581from", "$$Index,", "\u2581int", "\u2581to", "$$Index,", "\u2581long", "\u2581val", "$$)", "\u2581{"], ["\u2581Debug.Assert(", "$$val", "\u2581<=", "\u2581M", "$$ax", "$$Value(", "$$Bits", "$$PerValue", "$$))", "$$;"], ["\u2581Debug.Assert", "$$(f", "$$rom", "$$Index", "\u2581<=", "\u2581to", "$$Index)", "$$;"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u2581from", "$$Index", "$$;", "\u2581i", "\u2581<", "\u2581to", "$$Index", "$$;", "\u2581++i)", "\u2581{"], ["\u2581Set", "$$(i", "$$,", "\u2581val", "$$)", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581fill", "$$(int", "\u2581from", "$$Index,", "\u2581int", "\u2581to", "$$Index,", "\u2581long", "\u2581val", "$$)", "\u2581{"], ["\u2581assert", "\u2581val", "\u2581<=", "\u2581max", "$$Value(", "$$get", "$$Bits", "$$PerValue", "$$())", "$$;"], ["\u2581assert", "\u2581from", "$$Index", "\u2581<=", "\u2581to", "$$Index", "$$;"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u2581from", "$$Index", "$$;", "\u2581i", "\u2581<", "\u2581to", "$$Index", "$$;", "\u2581++i)", "\u2581{"], ["\u2581set", "$$(i", "$$,", "\u2581val", "$$)", "$$;"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public virtual ListTrainingJobsResponse ListTrainingJobs(ListTrainingJobsRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = ListTrainingJobsRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = ListTrainingJobsResponseUnmarshaller.Instance;\n    return Invoke<ListTrainingJobsResponse>(request, options);\n}\n", "java": "public ListTrainingJobsResult listTrainingJobs(ListTrainingJobsRequest request) {\n    request = beforeClientExecution(request);\n    return executeListTrainingJobs(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581List", "$$Tra", "$$in", "$$ingJob", "$$sResponse", "\u2581List", "$$Tra", "$$in", "$$ingJob", "$$s(List", "$$Tra", "$$in", "$$ingJob", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581List", "$$Tra", "$$in", "$$ingJob", "$$s", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581List", "$$Tra", "$$in", "$$ingJob", "$$s", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<List", "$$Tra", "$$in", "$$ingJob", "$$sResponse>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581List", "$$Tra", "$$in", "$$ingJob", "$$sResult", "\u2581list", "$$Tra", "$$in", "$$ingJob", "$$s(List", "$$Tra", "$$in", "$$ingJob", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeList", "$$Tra", "$$in", "$$ingJob", "$$s", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DescribeProfilingGroupResponse DescribeProfilingGroup(DescribeProfilingGroupRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DescribeProfilingGroupRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DescribeProfilingGroupResponseUnmarshaller.Instance;\n    return Invoke<DescribeProfilingGroupResponse>(request, options);\n}\n", "java": "public DescribeProfilingGroupResult describeProfilingGroup(DescribeProfilingGroupRequest request) {\n    request = beforeClientExecution(request);\n    return executeDescribeProfilingGroup(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Describe", "$$Profi", "$$l", "$$ingGroup", "$$Response", "\u2581Describe", "$$Profi", "$$l", "$$ingGroup", "$$(Describe", "$$Profi", "$$l", "$$ing", "$$GroupRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Describe", "$$Profi", "$$l", "$$ingGroup", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Describe", "$$Profi", "$$l", "$$ingGroup", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Describe", "$$Profi", "$$l", "$$ingGroup", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Describe", "$$Profi", "$$l", "$$ingGroup", "$$Result", "\u2581describe", "$$Profi", "$$l", "$$ingGroup", "$$(Describe", "$$Profi", "$$l", "$$ing", "$$GroupRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDescribe", "$$Profi", "$$l", "$$ingGroup", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public IgnoreNode(IList<IgnoreRule> rules) {\n    this.rules = rules;\n}\n", "java": "public IgnoreNode(List<FastIgnoreRule> rules) {\n    this.rules = rules;\n}\n", "cs_t": [["\u2581public", "\u2581I", "$$gn", "$$ore", "$$Node", "$$(I", "$$List<", "$$I", "$$gn", "$$ore", "$$Rule", "$$>", "\u2581r", "$$ules", "$$)", "\u2581{"], ["\u2581this.", "$$r", "$$ules", "\u2581=", "\u2581r", "$$ules", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581I", "$$gn", "$$ore", "$$Node", "$$(", "$$List<", "$$F", "$$ast", "$$I", "$$gn", "$$ore", "$$Rule", "$$>", "\u2581r", "$$ules", "$$)", "\u2581{"], ["\u2581this.", "$$r", "$$ules", "\u2581=", "\u2581r", "$$ules", "$$;"], ["\u2581}"]]}, {"cs": "public static void fill(char[] array, char value) {\n    {\n        for (int i = 0; i < array.Length; i++) {\n            array[i] = value;\n        }\n    }\n}\n", "java": "public static void fill(char[] array, char value) {\n    for (int i = 0; i < array.length; i++) {\n        array[i] = value;\n    }\n}\n", "cs_t": [["\u2581public", "\u2581static", "\u2581void", "\u2581fill", "$$(char[]", "\u2581array,", "\u2581char", "\u2581value)", "\u2581{"], ["\u2581{"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810;", "\u2581i", "\u2581<", "\u2581array", "$$.Length;", "\u2581i++)", "\u2581{"], ["\u2581array", "$$[i]", "\u2581=", "\u2581value", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581static", "\u2581void", "\u2581fill", "$$(char[]", "\u2581array,", "\u2581char", "\u2581value)", "\u2581{"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810;", "\u2581i", "\u2581<", "\u2581array", "$$.length;", "\u2581i++)", "\u2581{"], ["\u2581array", "$$[i]", "\u2581=", "\u2581value", "$$;"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public virtual GetTransitGatewayMulticastDomainAssociationsResponse GetTransitGatewayMulticastDomainAssociations(GetTransitGatewayMulticastDomainAssociationsRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = GetTransitGatewayMulticastDomainAssociationsRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = GetTransitGatewayMulticastDomainAssociationsResponseUnmarshaller.Instance;\n    return Invoke<GetTransitGatewayMulticastDomainAssociationsResponse>(request, options);\n}\n", "java": "public GetTransitGatewayMulticastDomainAssociationsResult getTransitGatewayMulticastDomainAssociations(GetTransitGatewayMulticastDomainAssociationsRequest request) {\n    request = beforeClientExecution(request);\n    return executeGetTransitGatewayMulticastDomainAssociations(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Get", "$$TransitGatewayMulticast", "$$Domain", "$$Association", "$$sResponse", "\u2581Get", "$$TransitGatewayMulticast", "$$Domain", "$$Association", "$$s(Get", "$$TransitGatewayMulticast", "$$Domain", "$$Association", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Get", "$$TransitGatewayMulticast", "$$Domain", "$$Association", "$$s", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Get", "$$TransitGatewayMulticast", "$$Domain", "$$Association", "$$s", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Get", "$$TransitGatewayMulticast", "$$Domain", "$$Association", "$$sResponse>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Get", "$$TransitGatewayMulticast", "$$Domain", "$$Association", "$$sResult", "\u2581get", "$$TransitGatewayMulticast", "$$Domain", "$$Association", "$$s(Get", "$$TransitGatewayMulticast", "$$Domain", "$$Association", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeGet", "$$TransitGatewayMulticast", "$$Domain", "$$Association", "$$s", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override java.nio.LongBuffer compact() {\n    System.Array.Copy(backingArray, _position + offset, backingArray, offset, remaining());\n    _position = _limit - _position;\n    _limit = _capacity;\n    _mark = UNSET_MARK;\n    return this;\n}\n", "java": "public LongBuffer compact() {\n    System.arraycopy(backingArray, position + offset, backingArray, offset, remaining());\n    position = limit - position;\n    limit = capacity;\n    mark = UNSET_MARK;\n    return this;\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581java.nio.", "$$Long", "$$Buffer", "\u2581comp", "$$act", "$$()", "\u2581{"], ["\u2581System.Array.Copy", "$$(b", "$$ackingArray,", "\u2581_position", "\u2581+", "\u2581offset,", "\u2581b", "$$ackingArray,", "\u2581offset,", "\u2581remaining", "$$())", "$$;"], ["\u2581_position", "\u2581=", "\u2581_limit", "\u2581-", "\u2581_position", "$$;"], ["\u2581_limit", "\u2581=", "\u2581_c", "$$apacity", "$$;"], ["\u2581_", "$$mark", "\u2581=", "\u2581", "$$UN", "$$SE", "$$T_", "$$M", "$$AR", "$$K", "$$;"], ["\u2581return", "\u2581this", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Long", "$$Buffer", "\u2581comp", "$$act", "$$()", "\u2581{"], ["\u2581System.arraycopy", "$$(b", "$$ackingArray,", "\u2581position", "\u2581+", "\u2581offset,", "\u2581b", "$$ackingArray,", "\u2581offset,", "\u2581remaining", "$$())", "$$;"], ["\u2581position", "\u2581=", "\u2581limit", "\u2581-", "\u2581position", "$$;"], ["\u2581limit", "\u2581=", "\u2581capacity", "$$;"], ["\u2581mark", "\u2581=", "\u2581", "$$UN", "$$SE", "$$T_", "$$M", "$$AR", "$$K", "$$;"], ["\u2581return", "\u2581this", "$$;"], ["\u2581}"]]}, {"cs": "public virtual GetCelebrityInfoResponse GetCelebrityInfo(GetCelebrityInfoRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = GetCelebrityInfoRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = GetCelebrityInfoResponseUnmarshaller.Instance;\n    return Invoke<GetCelebrityInfoResponse>(request, options);\n}\n", "java": "public GetCelebrityInfoResult getCelebrityInfo(GetCelebrityInfoRequest request) {\n    request = beforeClientExecution(request);\n    return executeGetCelebrityInfo(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Get", "$$C", "$$e", "$$le", "$$b", "$$rity", "$$Info", "$$Response", "\u2581Get", "$$C", "$$e", "$$le", "$$b", "$$rity", "$$Info", "$$(Get", "$$C", "$$e", "$$le", "$$b", "$$rity", "$$Info", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Get", "$$C", "$$e", "$$le", "$$b", "$$rity", "$$Info", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Get", "$$C", "$$e", "$$le", "$$b", "$$rity", "$$Info", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Get", "$$C", "$$e", "$$le", "$$b", "$$rity", "$$Info", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Get", "$$C", "$$e", "$$le", "$$b", "$$rity", "$$Info", "$$Result", "\u2581get", "$$C", "$$e", "$$le", "$$b", "$$rity", "$$Info", "$$(Get", "$$C", "$$e", "$$le", "$$b", "$$rity", "$$Info", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeGet", "$$C", "$$e", "$$le", "$$b", "$$rity", "$$Info", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual GetTranscriptResponse GetTranscript(GetTranscriptRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = GetTranscriptRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = GetTranscriptResponseUnmarshaller.Instance;\n    return Invoke<GetTranscriptResponse>(request, options);\n}\n", "java": "public GetTranscriptResult getTranscript(GetTranscriptRequest request) {\n    request = beforeClientExecution(request);\n    return executeGetTranscript(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Get", "$$Trans", "$$c", "$$ript", "$$Response", "\u2581Get", "$$Trans", "$$c", "$$ript", "$$(Get", "$$Trans", "$$c", "$$ript", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Get", "$$Trans", "$$c", "$$ript", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Get", "$$Trans", "$$c", "$$ript", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Get", "$$Trans", "$$c", "$$ript", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Get", "$$Trans", "$$c", "$$ript", "$$Result", "\u2581get", "$$Trans", "$$c", "$$ript", "$$(Get", "$$Trans", "$$c", "$$ript", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeGet", "$$Trans", "$$c", "$$ript", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DeleteCacheParameterGroupResponse DeleteCacheParameterGroup(DeleteCacheParameterGroupRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DeleteCacheParameterGroupRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DeleteCacheParameterGroupResponseUnmarshaller.Instance;\n    return Invoke<DeleteCacheParameterGroupResponse>(request, options);\n}\n", "java": "public DeleteCacheParameterGroupResult deleteCacheParameterGroup(DeleteCacheParameterGroupRequest request) {\n    request = beforeClientExecution(request);\n    return executeDeleteCacheParameterGroup(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Delete", "$$CacheParameterGroup", "$$Response", "\u2581Delete", "$$CacheParameterGroup", "$$(Delete", "$$CacheParameterGroup", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Delete", "$$CacheParameterGroup", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Delete", "$$CacheParameterGroup", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Delete", "$$CacheParameterGroup", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Delete", "$$CacheParameterGroup", "$$Result", "\u2581delete", "$$CacheParameterGroup", "$$(Delete", "$$CacheParameterGroup", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDelete", "$$CacheParameterGroup", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public DescribeTagsRequest(List<Filter> filters) {\n    _filters = filters;\n}\n", "java": "public DescribeTagsRequest(java.util.List<Filter> filters) {\n    setFilters(filters);\n}\n", "cs_t": [["\u2581public", "\u2581Describe", "$$Tag", "$$sRequest", "$$(", "$$List<", "$$Filter", "$$>", "\u2581filter", "$$s)", "\u2581{"], ["\u2581_", "$$filter", "$$s", "\u2581=", "\u2581filter", "$$s;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Describe", "$$Tag", "$$sRequest", "$$(", "$$java.util.", "$$List<", "$$Filter", "$$>", "\u2581filter", "$$s)", "\u2581{"], ["\u2581set", "$$Filter", "$$s(", "$$filter", "$$s)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual CreateCustomMetadataResponse CreateCustomMetadata(CreateCustomMetadataRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = CreateCustomMetadataRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = CreateCustomMetadataResponseUnmarshaller.Instance;\n    return Invoke<CreateCustomMetadataResponse>(request, options);\n}\n", "java": "public CreateCustomMetadataResult createCustomMetadata(CreateCustomMetadataRequest request) {\n    request = beforeClientExecution(request);\n    return executeCreateCustomMetadata(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Create", "$$Custom", "$$Metadata", "$$Response", "\u2581Create", "$$Custom", "$$Metadata", "$$(Create", "$$Custom", "$$Metadata", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Create", "$$Custom", "$$Metadata", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Create", "$$Custom", "$$Metadata", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Create", "$$Custom", "$$Metadata", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Create", "$$Custom", "$$Metadata", "$$Result", "\u2581create", "$$Custom", "$$Metadata", "$$(Create", "$$Custom", "$$Metadata", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeCreate", "$$Custom", "$$Metadata", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual ResumeClusterResponse ResumeCluster(ResumeClusterRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = ResumeClusterRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = ResumeClusterResponseUnmarshaller.Instance;\n    return Invoke<ResumeClusterResponse>(request, options);\n}\n", "java": "public Cluster resumeCluster(ResumeClusterRequest request) {\n    request = beforeClientExecution(request);\n    return executeResumeCluster(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581", "$$Res", "$$ume", "$$Cluster", "$$Response", "\u2581", "$$Res", "$$ume", "$$Cluster", "$$(", "$$Res", "$$ume", "$$Cluster", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581", "$$Res", "$$ume", "$$Cluster", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581", "$$Res", "$$ume", "$$Cluster", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<", "$$Res", "$$ume", "$$Cluster", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581C", "$$l", "$$uster", "\u2581res", "$$ume", "$$Cluster", "$$(", "$$Res", "$$ume", "$$Cluster", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581execute", "$$Res", "$$ume", "$$Cluster", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DescribeMovingAddressesResponse DescribeMovingAddresses(DescribeMovingAddressesRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DescribeMovingAddressesRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DescribeMovingAddressesResponseUnmarshaller.Instance;\n    return Invoke<DescribeMovingAddressesResponse>(request, options);\n}\n", "java": "public DescribeMovingAddressesResult describeMovingAddresses(DescribeMovingAddressesRequest request) {\n    request = beforeClientExecution(request);\n    return executeDescribeMovingAddresses(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Describe", "$$Mo", "$$v", "$$ing", "$$Addresses", "$$Response", "\u2581Describe", "$$Mo", "$$v", "$$ing", "$$Addresses", "$$(Describe", "$$Mo", "$$v", "$$ing", "$$Addresses", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Describe", "$$Mo", "$$v", "$$ing", "$$Addresses", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Describe", "$$Mo", "$$v", "$$ing", "$$Addresses", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Describe", "$$Mo", "$$v", "$$ing", "$$Addresses", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Describe", "$$Mo", "$$v", "$$ing", "$$Addresses", "$$Result", "\u2581describe", "$$Mo", "$$v", "$$ing", "$$Addresses", "$$(Describe", "$$Mo", "$$v", "$$ing", "$$Addresses", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDescribe", "$$Mo", "$$v", "$$ing", "$$Addresses", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual SearchAddressBooksResponse SearchAddressBooks(SearchAddressBooksRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = SearchAddressBooksRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = SearchAddressBooksResponseUnmarshaller.Instance;\n    return Invoke<SearchAddressBooksResponse>(request, options);\n}\n", "java": "public SearchAddressBooksResult searchAddressBooks(SearchAddressBooksRequest request) {\n    request = beforeClientExecution(request);\n    return executeSearchAddressBooks(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Search", "$$AddressBook", "$$sResponse", "\u2581Search", "$$AddressBook", "$$s(", "$$Search", "$$AddressBook", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Search", "$$AddressBook", "$$s", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Search", "$$AddressBook", "$$s", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<", "$$Search", "$$AddressBook", "$$sResponse>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Search", "$$AddressBook", "$$sResult", "\u2581se", "$$arch", "$$AddressBook", "$$s(", "$$Search", "$$AddressBook", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581execute", "$$Search", "$$AddressBook", "$$s", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public UpdateDomainToDomainGroupRequest(): base(\"Domain\", \"2018-01-29\", \"UpdateDomainToDomainGroup\") {\n    Method = MethodType.POST;\n}\n", "java": "public UpdateDomainToDomainGroupRequest() {\n    super(\"Domain\", \"2018-01-29\", \"UpdateDomainToDomainGroup\");\n    setMethod(MethodType.POST);\n}\n", "cs_t": [["\u2581public", "\u2581Update", "$$Domain", "$$To", "$$Domain", "$$Group", "$$Request():", "\u2581base(\"", "$$Domain", "$$\",", "\u2581\"2018", "$$-0", "$$1", "$$-", "$$2", "$$9", "$$\",", "\u2581\"", "$$Update", "$$Domain", "$$To", "$$Domain", "$$Group", "$$\")", "\u2581{"], ["\u2581Method", "\u2581=", "\u2581MethodType.POST", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Update", "$$Domain", "$$To", "$$Domain", "$$Group", "$$Request()", "\u2581{"], ["\u2581super(\"", "$$Domain", "$$\",", "\u2581\"2018", "$$-0", "$$1", "$$-", "$$2", "$$9", "$$\",", "\u2581\"", "$$Update", "$$Domain", "$$To", "$$Domain", "$$Group", "$$\")", "$$;"], ["\u2581setMethod(Method", "$$Type.POST", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override void Add(RevCommit c) {\n    BlockRevQueue.Block b = tail;\n    if (b == null) {\n        b = free.NewBlock();\n        b.Add(c);\n        head = b;\n        tail = b;\n        return;\n    }\n    else {\n        if (b.IsFull()) {\n            b = free.NewBlock();\n            tail.next = b;\n            tail = b;\n        }\n    }\n    b.Add(c);\n}\n", "java": "public void add(RevCommit c) {\n    Block b = tail;\n    if (b == null) {\n        b = free.newBlock();\n        b.add(c);\n        head = b;\n        tail = b;\n        return;\n    }\n    else if (b.isFull()) {\n        b = free.newBlock();\n        tail.next = b;\n        tail = b;\n    }\n    b.add(c);\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581void", "\u2581Add(", "$$Rev", "$$Commit", "\u2581c)", "\u2581{"], ["\u2581B", "$$lock", "$$Rev", "$$Queue", "$$.", "$$Block", "\u2581b", "\u2581=", "\u2581t", "$$ail", "$$;"], ["\u2581if", "\u2581(b", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581b", "\u2581=", "\u2581f", "$$ree", "$$.N", "$$ew", "$$Block", "$$()", "$$;"], ["\u2581b", "$$.Add(", "$$c", "$$)", "$$;"], ["\u2581head", "\u2581=", "\u2581b", "$$;"], ["\u2581t", "$$ail", "\u2581=", "\u2581b", "$$;"], ["\u2581return", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581if", "\u2581(b", "$$.Is", "$$Full", "$$())", "\u2581{"], ["\u2581b", "\u2581=", "\u2581f", "$$ree", "$$.N", "$$ew", "$$Block", "$$()", "$$;"], ["\u2581t", "$$ail", "$$.next", "\u2581=", "\u2581b", "$$;"], ["\u2581t", "$$ail", "\u2581=", "\u2581b", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581b", "$$.Add(", "$$c", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581add(", "$$Rev", "$$Commit", "\u2581c)", "\u2581{"], ["\u2581B", "$$lock", "\u2581b", "\u2581=", "\u2581t", "$$ail", "$$;"], ["\u2581if", "\u2581(b", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581b", "\u2581=", "\u2581f", "$$ree", "$$.", "$$new", "$$Block", "$$()", "$$;"], ["\u2581b", "$$.add(", "$$c", "$$)", "$$;"], ["\u2581head", "\u2581=", "\u2581b", "$$;"], ["\u2581t", "$$ail", "\u2581=", "\u2581b", "$$;"], ["\u2581return", "$$;"], ["\u2581}"], ["\u2581else", "\u2581if", "\u2581(b", "$$.is", "$$Full", "$$())", "\u2581{"], ["\u2581b", "\u2581=", "\u2581f", "$$ree", "$$.", "$$new", "$$Block", "$$()", "$$;"], ["\u2581t", "$$ail", "$$.next", "\u2581=", "\u2581b", "$$;"], ["\u2581t", "$$ail", "\u2581=", "\u2581b", "$$;"], ["\u2581}"], ["\u2581b", "$$.add(", "$$c", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override java.nio.FloatBuffer put(int index, float c) {\n    checkIndex(index);\n    byteBuffer.putFloat(index * libcore.io.SizeOf.FLOAT, c);\n    return this;\n}\n", "java": "public FloatBuffer put(int index, float c) {\n    checkIndex(index);\n    byteBuffer.putFloat(index * SizeOf.FLOAT, c);\n    return this;\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581java.nio.", "$$Float", "$$Buffer", "\u2581put", "$$(int", "\u2581index,", "\u2581float", "\u2581c)", "\u2581{"], ["\u2581check", "$$Index(index", "$$)", "$$;"], ["\u2581byteBuffer.", "$$put", "$$Float", "$$(index", "\u2581*", "\u2581libcore.io.SizeOf", "$$.", "$$F", "$$LO", "$$AT", "$$,", "\u2581c)", "$$;"], ["\u2581return", "\u2581this", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581F", "$$loat", "$$Buffer", "\u2581put", "$$(int", "\u2581index,", "\u2581float", "\u2581c)", "\u2581{"], ["\u2581check", "$$Index(index", "$$)", "$$;"], ["\u2581byteBuffer.", "$$put", "$$Float", "$$(index", "\u2581*", "\u2581SizeOf", "$$.", "$$F", "$$LO", "$$AT", "$$,", "\u2581c)", "$$;"], ["\u2581return", "\u2581this", "$$;"], ["\u2581}"]]}, {"cs": "public override void Flush() {\n    try {\n        BeginWrite();\n        dst.Flush();\n    }\n    catch (ThreadInterruptedException) {\n        throw WriteTimedOut();\n    }\n    finally {\n        EndWrite();\n    }\n}\n", "java": "public void flush() throws IOException {\n    try {\n        beginWrite();\n        dst.flush();\n    }\n    catch (InterruptedIOException e) {\n        throw writeTimedOut(e);\n    }\n    finally {\n        endWrite();\n    }\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581void", "\u2581F", "$$lush", "$$()", "\u2581{"], ["\u2581try", "\u2581{"], ["\u2581B", "$$e", "$$gin", "$$Write", "$$()", "$$;"], ["\u2581dst", "$$.", "$$F", "$$lush", "$$()", "$$;"], ["\u2581}"], ["\u2581catch", "\u2581(", "$$Thread", "$$Inter", "$$r", "$$up", "$$ted", "$$Exception", "$$)", "\u2581{"], ["\u2581throw", "\u2581Write", "$$Tim", "$$ed", "$$Out", "$$()", "$$;"], ["\u2581}"], ["\u2581finally", "\u2581{"], ["\u2581", "$$End", "$$Write", "$$()", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581f", "$$lush", "$$()", "\u2581throws", "\u2581IOException", "\u2581{"], ["\u2581try", "\u2581{"], ["\u2581be", "$$gin", "$$Write", "$$()", "$$;"], ["\u2581dst", "$$.f", "$$lush", "$$()", "$$;"], ["\u2581}"], ["\u2581catch", "\u2581(", "$$Inter", "$$r", "$$up", "$$ted", "$$I", "$$OException", "\u2581e)", "\u2581{"], ["\u2581throw", "\u2581write", "$$Tim", "$$ed", "$$Out", "$$(e", "$$)", "$$;"], ["\u2581}"], ["\u2581finally", "\u2581{"], ["\u2581end", "$$Write", "$$()", "$$;"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public virtual ICollection<string> GetModified() {\n    return Sharpen.Collections.UnmodifiableSet(diff.GetModified());\n}\n", "java": "public Set<String> getModified() {\n    return Collections.unmodifiableSet(diff.getModified());\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581I", "$$Collection", "$$<string", "$$>", "\u2581Get", "$$Mod", "$$ified", "$$()", "\u2581{"], ["\u2581return", "\u2581Sharpen.", "$$Collections.", "$$Unm", "$$od", "$$ifi", "$$able", "$$Set", "$$(d", "$$iff", "$$.Get", "$$Mod", "$$ified", "$$())", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Set", "$$<", "$$String>", "\u2581get", "$$Mod", "$$ified", "$$()", "\u2581{"], ["\u2581return", "\u2581", "$$Collections.", "$$un", "$$mod", "$$ifi", "$$able", "$$Set", "$$(d", "$$iff", "$$.get", "$$Mod", "$$ified", "$$())", "$$;"], ["\u2581}"]]}, {"cs": "public Int64sRef Next(int count) {\n    Debug.Assert(count > 0);\n    if (ord == valueCount) {\n        throw new System.IO.EndOfStreamException();\n    }\n    if (off == blockSize) {\n        Refill();\n    }\n    count = Math.Min(count, blockSize - off);\n    count = (int)Math.Min(count, valueCount - ord);\n    valuesRef.Offset = off;\n    valuesRef.Length = count;\n    off += count;\n    ord += count;\n    return valuesRef;\n}\n", "java": "public LongsRef next(int count) throws IOException {\n    assert count > 0;\n    if (ord == valueCount) {\n        throw new EOFException();\n    }\n    if (off == blockSize) {\n        refill();\n    }\n    count = Math.min(count, blockSize - off);\n    count = (int) Math.min(count, valueCount - ord);\n    valuesRef.offset = off;\n    valuesRef.length = count;\n    off += count;\n    ord += count;\n    return valuesRef;\n}\n", "cs_t": [["\u2581public", "\u2581Int", "$$64", "$$sRef", "\u2581Next", "$$(int", "\u2581count)", "\u2581{"], ["\u2581Debug.Assert(", "$$count", "\u2581>", "\u25810)", "$$;"], ["\u2581if", "\u2581(", "$$ord", "\u2581==", "\u2581value", "$$Count)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581System.", "$$IO", "$$.", "$$End", "$$Of", "$$Stream", "$$Exception", "$$()", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(o", "$$ff", "\u2581==", "\u2581block", "$$Size)", "\u2581{"], ["\u2581Re", "$$fill", "$$()", "$$;"], ["\u2581}"], ["\u2581count", "\u2581=", "\u2581Math.", "$$Min", "$$(", "$$count", "$$,", "\u2581block", "$$Size", "\u2581-", "\u2581off", "$$)", "$$;"], ["\u2581count", "\u2581=", "\u2581(int)", "$$Math.", "$$Min", "$$(", "$$count", "$$,", "\u2581value", "$$Count", "\u2581-", "\u2581ord", "$$)", "$$;"], ["\u2581values", "$$Ref", "$$.", "$$Offset", "\u2581=", "\u2581off", "$$;"], ["\u2581values", "$$Ref", "$$.Length", "\u2581=", "\u2581count", "$$;"], ["\u2581off", "\u2581+=", "\u2581count", "$$;"], ["\u2581ord", "\u2581+=", "\u2581count", "$$;"], ["\u2581return", "\u2581values", "$$Ref", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Long", "$$sRef", "\u2581next", "$$(int", "\u2581count)", "\u2581throws", "\u2581IOException", "\u2581{"], ["\u2581assert", "\u2581count", "\u2581>", "\u25810;"], ["\u2581if", "\u2581(", "$$ord", "\u2581==", "\u2581value", "$$Count)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581E", "$$OF", "$$Exception", "$$()", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(o", "$$ff", "\u2581==", "\u2581block", "$$Size)", "\u2581{"], ["\u2581re", "$$fill", "$$()", "$$;"], ["\u2581}"], ["\u2581count", "\u2581=", "\u2581Math.", "$$min", "$$(", "$$count", "$$,", "\u2581block", "$$Size", "\u2581-", "\u2581off", "$$)", "$$;"], ["\u2581count", "\u2581=", "\u2581(int)", "\u2581Math.", "$$min", "$$(", "$$count", "$$,", "\u2581value", "$$Count", "\u2581-", "\u2581ord", "$$)", "$$;"], ["\u2581values", "$$Ref", "$$.", "$$offset", "\u2581=", "\u2581off", "$$;"], ["\u2581values", "$$Ref", "$$.length", "\u2581=", "\u2581count", "$$;"], ["\u2581off", "\u2581+=", "\u2581count", "$$;"], ["\u2581ord", "\u2581+=", "\u2581count", "$$;"], ["\u2581return", "\u2581values", "$$Ref", "$$;"], ["\u2581}"]]}, {"cs": "public override java.nio.ByteBuffer slice() {\n    return new java.nio.ReadOnlyHeapByteBuffer(backingArray, remaining(), offset + _position);\n}\n", "java": "public ByteBuffer slice() {\n    return new ReadOnlyHeapByteBuffer(backingArray, remaining(), offset + position);\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581java.nio.ByteBuffer", "\u2581slice", "$$()", "\u2581{"], ["\u2581return", "\u2581new", "\u2581java.nio.Read", "$$Only", "$$He", "$$ap", "$$ByteBuffer", "$$(b", "$$ackingArray,", "\u2581remaining", "$$(),", "\u2581offset", "\u2581+", "\u2581_position", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581ByteBuffer", "\u2581slice", "$$()", "\u2581{"], ["\u2581return", "\u2581new", "\u2581Read", "$$Only", "$$He", "$$ap", "$$ByteBuffer", "$$(b", "$$ackingArray,", "\u2581remaining", "$$(),", "\u2581offset", "\u2581+", "\u2581position", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public bool IsEmpty() {\n    return beginA == endA && beginB == endB;\n}\n", "java": "public final boolean isEmpty() {\n    return beginA == endA && beginB == endB;\n}\n", "cs_t": [["\u2581public", "\u2581bool", "\u2581Is", "$$Empty", "$$()", "\u2581{"], ["\u2581return", "\u2581be", "$$gin", "$$A", "\u2581==", "\u2581end", "$$A", "\u2581&&", "\u2581be", "$$gin", "$$B", "\u2581==", "\u2581end", "$$B", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581final", "\u2581boolean", "\u2581is", "$$Empty", "$$()", "\u2581{"], ["\u2581return", "\u2581be", "$$gin", "$$A", "\u2581==", "\u2581end", "$$A", "\u2581&&", "\u2581be", "$$gin", "$$B", "\u2581==", "\u2581end", "$$B", "$$;"], ["\u2581}"]]}, {"cs": "public static int CommitMessage(byte[] b, int ptr) {\n    int sz = b.Length;\n    if (ptr == 0) {\n        ptr += 46;\n    }\n    while (ptr < sz && b[ptr] == 'p') {\n        ptr += 48;\n    }\n    return TagMessage(b, ptr);\n}\n", "java": "public static final int commitMessage(byte[] b, int ptr) {\n    final int sz = b.length;\n    if (ptr == 0)ptr += 46;\n    while (ptr < sz && b[ptr] == 'p')ptr += 48;\n    return tagMessage(b, ptr);\n}\n", "cs_t": [["\u2581public", "\u2581static", "\u2581int", "\u2581", "$$Commit", "$$Message", "$$(byte[]", "\u2581b,", "\u2581int", "\u2581ptr", "$$)", "\u2581{"], ["\u2581int", "\u2581sz", "\u2581=", "\u2581b", "$$.Length;"], ["\u2581if", "\u2581(", "$$ptr", "\u2581==", "\u25810)", "\u2581{"], ["\u2581ptr", "\u2581+=", "\u25814", "$$6", "$$;"], ["\u2581}"], ["\u2581while", "\u2581(", "$$ptr", "\u2581<", "\u2581sz", "\u2581&&", "\u2581b", "$$[", "$$ptr", "$$]", "\u2581==", "\u2581'", "$$p", "$$')", "\u2581{"], ["\u2581ptr", "\u2581+=", "\u25814", "$$8", "$$;"], ["\u2581}"], ["\u2581return", "\u2581", "$$Tag", "$$Message", "$$(b,", "\u2581ptr", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581static", "\u2581final", "\u2581int", "\u2581commit", "$$Message", "$$(byte[]", "\u2581b,", "\u2581int", "\u2581ptr", "$$)", "\u2581{"], ["\u2581final", "\u2581int", "\u2581sz", "\u2581=", "\u2581b", "$$.length;"], ["\u2581if", "\u2581(", "$$ptr", "\u2581==", "\u25810)", "$$ptr", "\u2581+=", "\u25814", "$$6", "$$;"], ["\u2581while", "\u2581(", "$$ptr", "\u2581<", "\u2581sz", "\u2581&&", "\u2581b", "$$[", "$$ptr", "$$]", "\u2581==", "\u2581'", "$$p", "$$')", "$$ptr", "\u2581+=", "\u25814", "$$8", "$$;"], ["\u2581return", "\u2581tag", "$$Message", "$$(b,", "\u2581ptr", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public ValueEval Evaluate(ValueEval[] args, OperationEvaluationContext ec) {\n    double result;\n    if (args.Length != 2) {\n        return ErrorEval.VALUE_INVALID;\n    }\n    try {\n        double startDateAsNumber = GetValue(args[0]);\n        int offsetInMonthAsNumber = (int)GetValue(args[1]);\n        DateTime startDate = DateUtil.GetJavaDate(startDateAsNumber);\n        DateTime resultDate = startDate.AddMonths(offsetInMonthAsNumber);\n        result = DateUtil.GetExcelDate(resultDate);\n        NumericFunction.CheckValue(result);\n        return new NumberEval(result);\n    }\n    catch (EvaluationException e) {\n        return e.GetErrorEval();\n    }\n}\n", "java": "public ValueEval evaluate(ValueEval[] args, OperationEvaluationContext ec) {\n    if (args.length != 2) {\n        return ErrorEval.VALUE_INVALID;\n    }\n    try {\n        double startDateAsNumber = getValue(args[0]);\n        int offsetInMonthAsNumber = (int) getValue(args[1]);\n        Date startDate = DateUtil.getJavaDate(startDateAsNumber);\n        if (startDate == null) {\n            return ErrorEval.VALUE_INVALID;\n        }\n        Calendar calendar = LocaleUtil.getLocaleCalendar();\n        calendar.setTime(startDate);\n        calendar.add(Calendar.MONTH, offsetInMonthAsNumber);\n        return new NumberEval(DateUtil.getExcelDate(calendar.getTime()));\n    }\n    catch (EvaluationException e) {\n        return e.getErrorEval();\n    }\n}\n", "cs_t": [["\u2581public", "\u2581ValueEval", "\u2581Evaluate", "$$(ValueEval", "$$[]", "\u2581args,", "\u2581", "$$Operation", "$$Evaluation", "$$Context", "\u2581", "$$ec", "$$)", "\u2581{"], ["\u2581double", "\u2581result", "$$;"], ["\u2581if", "\u2581(arg", "$$s.Length", "\u2581!=", "\u25812)", "\u2581{"], ["\u2581return", "\u2581ErrorEval.VALUE_INVALID", "$$;"], ["\u2581}"], ["\u2581try", "\u2581{"], ["\u2581double", "\u2581start", "$$Date", "$$As", "$$Number", "\u2581=", "\u2581Get", "$$Value", "$$(arg", "$$s[0]", "$$)", "$$;"], ["\u2581int", "\u2581offset", "$$In", "$$M", "$$on", "$$th", "$$As", "$$Number", "\u2581=", "\u2581(int)", "$$Get", "$$Value", "$$(arg", "$$s[", "$$1", "$$]", "$$)", "$$;"], ["\u2581Date", "$$Time", "\u2581start", "$$Date", "\u2581=", "\u2581Date", "$$Util", "$$.Get", "$$J", "$$ava", "$$Date", "$$(start", "$$Date", "$$As", "$$Number", "$$)", "$$;"], ["\u2581Date", "$$Time", "\u2581result", "$$Date", "\u2581=", "\u2581start", "$$Date", "$$.Add", "$$M", "$$on", "$$th", "$$s(", "$$offset", "$$In", "$$M", "$$on", "$$th", "$$As", "$$Number", "$$)", "$$;"], ["\u2581result", "\u2581=", "\u2581Date", "$$Util", "$$.Get", "$$Ex", "$$ce", "$$l", "$$Date", "$$(result", "$$Date", "$$)", "$$;"], ["\u2581Numeric", "$$Function", "$$.", "$$Check", "$$Value(", "$$result", "$$)", "$$;"], ["\u2581return", "\u2581new", "\u2581NumberEval", "$$(result", "$$)", "$$;"], ["\u2581}"], ["\u2581catch", "\u2581(EvaluationException", "\u2581e)", "\u2581{"], ["\u2581return", "\u2581e", "$$.Get", "$$ErrorEval", "$$()", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581ValueEval", "\u2581evaluate", "$$(ValueEval", "$$[]", "\u2581args,", "\u2581", "$$Operation", "$$Evaluation", "$$Context", "\u2581", "$$ec", "$$)", "\u2581{"], ["\u2581if", "\u2581(arg", "$$s.length", "\u2581!=", "\u25812)", "\u2581{"], ["\u2581return", "\u2581ErrorEval.VALUE_INVALID", "$$;"], ["\u2581}"], ["\u2581try", "\u2581{"], ["\u2581double", "\u2581start", "$$Date", "$$As", "$$Number", "\u2581=", "\u2581get", "$$Value", "$$(arg", "$$s[0]", "$$)", "$$;"], ["\u2581int", "\u2581offset", "$$In", "$$M", "$$on", "$$th", "$$As", "$$Number", "\u2581=", "\u2581(int)", "\u2581get", "$$Value", "$$(arg", "$$s[", "$$1", "$$]", "$$)", "$$;"], ["\u2581Date", "\u2581start", "$$Date", "\u2581=", "\u2581Date", "$$Util", "$$.get", "$$J", "$$ava", "$$Date", "$$(start", "$$Date", "$$As", "$$Number", "$$)", "$$;"], ["\u2581if", "\u2581(start", "$$Date", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581return", "\u2581ErrorEval.VALUE_INVALID", "$$;"], ["\u2581}"], ["\u2581C", "$$al", "$$endar", "\u2581c", "$$al", "$$endar", "\u2581=", "\u2581L", "$$oc", "$$ale", "$$Util", "$$.get", "$$Local", "$$e", "$$Cal", "$$endar", "$$()", "$$;"], ["\u2581c", "$$al", "$$endar", "$$.set", "$$Time", "$$(start", "$$Date", "$$)", "$$;"], ["\u2581c", "$$al", "$$endar", "$$.add(", "$$Cal", "$$endar", "$$.M", "$$ON", "$$TH", "$$,", "\u2581offset", "$$In", "$$M", "$$on", "$$th", "$$As", "$$Number", "$$)", "$$;"], ["\u2581return", "\u2581new", "\u2581NumberEval", "$$(", "$$Date", "$$Util", "$$.get", "$$Ex", "$$ce", "$$l", "$$Date", "$$(c", "$$al", "$$endar", "$$.get", "$$Time", "$$()))", "$$;"], ["\u2581}"], ["\u2581catch", "\u2581(EvaluationException", "\u2581e)", "\u2581{"], ["\u2581return", "\u2581e.get", "$$ErrorEval", "$$()", "$$;"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public virtual DeleteSuggesterResponse DeleteSuggester(DeleteSuggesterRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DeleteSuggesterRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DeleteSuggesterResponseUnmarshaller.Instance;\n    return Invoke<DeleteSuggesterResponse>(request, options);\n}\n", "java": "public DeleteSuggesterResult deleteSuggester(DeleteSuggesterRequest request) {\n    request = beforeClientExecution(request);\n    return executeDeleteSuggester(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Delete", "$$Su", "$$gg", "$$est", "$$er", "$$Response", "\u2581Delete", "$$Su", "$$gg", "$$est", "$$er(", "$$Delete", "$$Su", "$$gg", "$$est", "$$er", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Delete", "$$Su", "$$gg", "$$est", "$$er", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Delete", "$$Su", "$$gg", "$$est", "$$er", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Delete", "$$Su", "$$gg", "$$est", "$$er", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Delete", "$$Su", "$$gg", "$$est", "$$er", "$$Result", "\u2581delete", "$$Su", "$$gg", "$$est", "$$er(", "$$Delete", "$$Su", "$$gg", "$$est", "$$er", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDelete", "$$Su", "$$gg", "$$est", "$$er", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual CreatePipelineResponse CreatePipeline(CreatePipelineRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = CreatePipelineRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = CreatePipelineResponseUnmarshaller.Instance;\n    return Invoke<CreatePipelineResponse>(request, options);\n}\n", "java": "public CreatePipelineResult createPipeline(CreatePipelineRequest request) {\n    request = beforeClientExecution(request);\n    return executeCreatePipeline(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Create", "$$Pipeline", "$$Response", "\u2581Create", "$$Pipeline", "$$(Create", "$$Pipeline", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Create", "$$Pipeline", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Create", "$$Pipeline", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Create", "$$Pipeline", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Create", "$$Pipeline", "$$Result", "\u2581create", "$$Pipeline", "$$(Create", "$$Pipeline", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeCreate", "$$Pipeline", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual StopDeliveryStreamEncryptionResponse StopDeliveryStreamEncryption(StopDeliveryStreamEncryptionRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = StopDeliveryStreamEncryptionRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = StopDeliveryStreamEncryptionResponseUnmarshaller.Instance;\n    return Invoke<StopDeliveryStreamEncryptionResponse>(request, options);\n}\n", "java": "public StopDeliveryStreamEncryptionResult stopDeliveryStreamEncryption(StopDeliveryStreamEncryptionRequest request) {\n    request = beforeClientExecution(request);\n    return executeStopDeliveryStreamEncryption(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Stop", "$$DeliveryStream", "$$Encryption", "$$Response", "\u2581Stop", "$$DeliveryStream", "$$Encryption", "$$(", "$$Stop", "$$DeliveryStream", "$$Encryption", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Stop", "$$DeliveryStream", "$$Encryption", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Stop", "$$DeliveryStream", "$$Encryption", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<", "$$Stop", "$$DeliveryStream", "$$Encryption", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Stop", "$$DeliveryStream", "$$Encryption", "$$Result", "\u2581stop", "$$DeliveryStream", "$$Encryption", "$$(", "$$Stop", "$$DeliveryStream", "$$Encryption", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581execute", "$$Stop", "$$DeliveryStream", "$$Encryption", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DeleteApplicationSnapshotResponse DeleteApplicationSnapshot(DeleteApplicationSnapshotRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DeleteApplicationSnapshotRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DeleteApplicationSnapshotResponseUnmarshaller.Instance;\n    return Invoke<DeleteApplicationSnapshotResponse>(request, options);\n}\n", "java": "public DeleteApplicationSnapshotResult deleteApplicationSnapshot(DeleteApplicationSnapshotRequest request) {\n    request = beforeClientExecution(request);\n    return executeDeleteApplicationSnapshot(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Delete", "$$Application", "$$Snapshot", "$$Response", "\u2581Delete", "$$Application", "$$Snapshot", "$$(Delete", "$$Application", "$$SnapshotRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Delete", "$$Application", "$$Snapshot", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Delete", "$$Application", "$$Snapshot", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Delete", "$$Application", "$$Snapshot", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Delete", "$$Application", "$$Snapshot", "$$Result", "\u2581delete", "$$Application", "$$Snapshot", "$$(Delete", "$$Application", "$$SnapshotRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDelete", "$$Application", "$$Snapshot", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual ApplyCommand Apply() {\n    return new ApplyCommand(repo);\n}\n", "java": "public ApplyCommand apply() {\n    return new ApplyCommand(repo);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Ap", "$$ply", "$$Command", "\u2581Ap", "$$ply", "$$()", "\u2581{"], ["\u2581return", "\u2581new", "\u2581Ap", "$$ply", "$$Command", "$$(repo", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Ap", "$$ply", "$$Command", "\u2581ap", "$$ply", "$$()", "\u2581{"], ["\u2581return", "\u2581new", "\u2581Ap", "$$ply", "$$Command", "$$(repo", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public RebootCacheClusterRequest(string cacheClusterId, List<string> cacheNodeIdsToReboot) {\n    _cacheClusterId = cacheClusterId;\n    _cacheNodeIdsToReboot = cacheNodeIdsToReboot;\n}\n", "java": "public RebootCacheClusterRequest(String cacheClusterId, java.util.List<String> cacheNodeIdsToReboot) {\n    setCacheClusterId(cacheClusterId);\n    setCacheNodeIdsToReboot(cacheNodeIdsToReboot);\n}\n", "cs_t": [["\u2581public", "\u2581Re", "$$boot", "$$Cache", "$$Cluster", "$$Request(string", "\u2581cache", "$$Cluster", "$$Id,", "\u2581List<", "$$string>", "\u2581cache", "$$Node", "$$Id", "$$sTo", "$$Re", "$$boot", "$$)", "\u2581{"], ["\u2581_c", "$$ache", "$$Cluster", "$$Id", "\u2581=", "\u2581cache", "$$Cluster", "$$Id", "$$;"], ["\u2581_c", "$$ache", "$$Node", "$$Id", "$$sTo", "$$Re", "$$boot", "\u2581=", "\u2581cache", "$$Node", "$$Id", "$$sTo", "$$Re", "$$boot", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Re", "$$boot", "$$Cache", "$$Cluster", "$$Request(String", "\u2581cache", "$$Cluster", "$$Id,", "\u2581java.util.", "$$List<", "$$String>", "\u2581cache", "$$Node", "$$Id", "$$sTo", "$$Re", "$$boot", "$$)", "\u2581{"], ["\u2581set", "$$Cache", "$$Cluster", "$$Id(", "$$c", "$$ache", "$$Cluster", "$$Id)", "$$;"], ["\u2581set", "$$Cache", "$$Node", "$$Id", "$$sTo", "$$Re", "$$boot", "$$(c", "$$ache", "$$Node", "$$Id", "$$sTo", "$$Re", "$$boot", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public ModifyCacheClusterRequest(string cacheClusterId) {\n    _cacheClusterId = cacheClusterId;\n}\n", "java": "public ModifyCacheClusterRequest(String cacheClusterId) {\n    setCacheClusterId(cacheClusterId);\n}\n", "cs_t": [["\u2581public", "\u2581Modify", "$$Cache", "$$Cluster", "$$Request(string", "\u2581cache", "$$Cluster", "$$Id)", "\u2581{"], ["\u2581_c", "$$ache", "$$Cluster", "$$Id", "\u2581=", "\u2581cache", "$$Cluster", "$$Id", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Modify", "$$Cache", "$$Cluster", "$$Request(String", "\u2581cache", "$$Cluster", "$$Id)", "\u2581{"], ["\u2581set", "$$Cache", "$$Cluster", "$$Id(", "$$c", "$$ache", "$$Cluster", "$$Id)", "$$;"], ["\u2581}"]]}, {"cs": "public override bool Equals(object obj) {\n    if (this == obj) {\n        return true;\n    }\n    if (obj == null) {\n        return false;\n    }\n    if (this.GetType() != obj.GetType()) {\n        return false;\n    }\n    ScoreTerm other = (ScoreTerm)obj;\n    if (Term == null) {\n        if (other.Term != null) {\n            return false;\n        }\n    }\n    else if (!Term.BytesEquals(other.Term)) {\n        return false;\n    }\n    return true;\n}\n", "java": "public boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (obj == null) return false;\n    if (getClass() != obj.getClass()) return false;\n    ScoreTerm other = (ScoreTerm) obj;\n    if (term == null) {\n        if (other.term != null) return false;\n    }\n    else if (!term.bytesEquals(other.term)) return false;\n    return true;\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581bool", "\u2581Equals(object", "\u2581obj)", "\u2581{"], ["\u2581if", "\u2581(this", "\u2581==", "\u2581obj)", "\u2581{"], ["\u2581return", "\u2581true", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(obj", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581return", "\u2581false", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(this", "$$.Get", "$$Type()", "\u2581!=", "\u2581obj", "$$.Get", "$$Type", "$$())", "\u2581{"], ["\u2581return", "\u2581false", "$$;"], ["\u2581}"], ["\u2581S", "$$core", "$$Term", "\u2581other", "\u2581=", "\u2581(", "$$Score", "$$Term", "$$)", "$$obj", "$$;"], ["\u2581if", "\u2581(", "$$Term", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581if", "\u2581(", "$$other.", "$$Term", "\u2581!=", "\u2581null)", "\u2581{"], ["\u2581return", "\u2581false", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581else", "\u2581if", "\u2581(!", "$$Term", "$$.", "$$Bytes", "$$E", "$$quals(", "$$other.", "$$Term", "$$))", "\u2581{"], ["\u2581return", "\u2581false", "$$;"], ["\u2581}"], ["\u2581return", "\u2581true", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581boolean", "\u2581equals(Object", "\u2581obj)", "\u2581{"], ["\u2581if", "\u2581(this", "\u2581==", "\u2581obj)", "\u2581return", "\u2581true", "$$;"], ["\u2581if", "\u2581(obj", "\u2581==", "\u2581null)", "\u2581return", "\u2581false", "$$;"], ["\u2581if", "\u2581(get", "$$Class", "$$()", "\u2581!=", "\u2581obj", "$$.get", "$$Class", "$$())", "\u2581return", "\u2581false", "$$;"], ["\u2581S", "$$core", "$$Term", "\u2581other", "\u2581=", "\u2581(", "$$Score", "$$Term", "$$)", "\u2581obj", "$$;"], ["\u2581if", "\u2581(", "$$term", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581if", "\u2581(", "$$other.", "$$term", "\u2581!=", "\u2581null)", "\u2581return", "\u2581false", "$$;"], ["\u2581}"], ["\u2581else", "\u2581if", "\u2581(!", "$$term", "$$.", "$$bytes", "$$E", "$$quals(", "$$other.", "$$term", "$$))", "\u2581return", "\u2581false", "$$;"], ["\u2581return", "\u2581true", "$$;"], ["\u2581}"]]}, {"cs": "public virtual AssociateTransitGatewayMulticastDomainResponse AssociateTransitGatewayMulticastDomain(AssociateTransitGatewayMulticastDomainRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = AssociateTransitGatewayMulticastDomainRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = AssociateTransitGatewayMulticastDomainResponseUnmarshaller.Instance;\n    return Invoke<AssociateTransitGatewayMulticastDomainResponse>(request, options);\n}\n", "java": "public AssociateTransitGatewayMulticastDomainResult associateTransitGatewayMulticastDomain(AssociateTransitGatewayMulticastDomainRequest request) {\n    request = beforeClientExecution(request);\n    return executeAssociateTransitGatewayMulticastDomain(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Associate", "$$TransitGatewayMulticast", "$$Domain", "$$Response", "\u2581Associate", "$$TransitGatewayMulticast", "$$Domain", "$$(", "$$Associate", "$$TransitGatewayMulticast", "$$Domain", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Associate", "$$TransitGatewayMulticast", "$$Domain", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Associate", "$$TransitGatewayMulticast", "$$Domain", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<", "$$Associate", "$$TransitGatewayMulticast", "$$Domain", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Associate", "$$TransitGatewayMulticast", "$$Domain", "$$Result", "\u2581", "$$associate", "$$TransitGatewayMulticast", "$$Domain", "$$(", "$$Associate", "$$TransitGatewayMulticast", "$$Domain", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581execute", "$$Associate", "$$TransitGatewayMulticast", "$$Domain", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual UpdateContactResponse UpdateContact(UpdateContactRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = UpdateContactRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = UpdateContactResponseUnmarshaller.Instance;\n    return Invoke<UpdateContactResponse>(request, options);\n}\n", "java": "public UpdateContactResult updateContact(UpdateContactRequest request) {\n    request = beforeClientExecution(request);\n    return executeUpdateContact(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Update", "$$Contact", "$$Response", "\u2581Update", "$$Contact", "$$(Update", "$$Contact", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Update", "$$Contact", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Update", "$$Contact", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Update", "$$Contact", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Update", "$$Contact", "$$Result", "\u2581update", "$$Contact", "$$(Update", "$$Contact", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeUpdate", "$$Contact", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public TableRecord(CellRangeAddress8Bit range): base(range) {\n    field_6_res = 0;\n}\n", "java": "public TableRecord(CellRangeAddress8Bit range) {\n    super(range);\n    field_6_res = 0;\n}\n", "cs_t": [["\u2581public", "\u2581", "$$Table", "$$Record(", "$$Cell", "$$RangeAddress", "$$8", "$$Bit", "\u2581range", "$$):", "\u2581base", "$$(", "$$ran", "$$ge", "$$)", "\u2581{"], ["\u2581field_6_", "$$res", "\u2581=", "\u25810;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581", "$$Table", "$$Record(", "$$Cell", "$$RangeAddress", "$$8", "$$Bit", "\u2581range", "$$)", "\u2581{"], ["\u2581super(", "$$ran", "$$ge", "$$)", "$$;"], ["\u2581field_6_", "$$res", "\u2581=", "\u25810;"], ["\u2581}"]]}, {"cs": "public virtual CreateProcessingJobResponse CreateProcessingJob(CreateProcessingJobRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = CreateProcessingJobRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = CreateProcessingJobResponseUnmarshaller.Instance;\n    return Invoke<CreateProcessingJobResponse>(request, options);\n}\n", "java": "public CreateProcessingJobResult createProcessingJob(CreateProcessingJobRequest request) {\n    request = beforeClientExecution(request);\n    return executeCreateProcessingJob(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Create", "$$Process", "$$ingJob", "$$Response", "\u2581Create", "$$Process", "$$ingJob", "$$(Create", "$$Process", "$$ingJob", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Create", "$$Process", "$$ingJob", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Create", "$$Process", "$$ingJob", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Create", "$$Process", "$$ingJob", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Create", "$$Process", "$$ingJob", "$$Result", "\u2581create", "$$Process", "$$ingJob", "$$(Create", "$$Process", "$$ingJob", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeCreate", "$$Process", "$$ingJob", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override java.lang.CharSequence SubSequence(int start, int end) {\n    checkStartEndRemaining(start, end);\n    java.nio.CharSequenceAdapter result = copy(this);\n    result._position = _position + start;\n    result._limit = _position + end;\n    return result;\n}\n", "java": "public CharSequence subSequence(int start, int end) {\n    checkStartEndRemaining(start, end);\n    CharSequenceAdapter result = copy(this);\n    result.position = position + start;\n    result.limit = position + end;\n    return result;\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581java.lang.", "$$CharSequence", "\u2581Sub", "$$Sequence", "$$(int", "\u2581start,", "\u2581int", "\u2581end)", "\u2581{"], ["\u2581check", "$$Start", "$$End", "$$Remaining", "$$(start", "$$,", "\u2581end)", "$$;"], ["\u2581java.nio.", "$$CharSequence", "$$Adapter", "\u2581result", "\u2581=", "\u2581copy", "$$(this", "$$)", "$$;"], ["\u2581result", "$$._", "$$position", "\u2581=", "\u2581_position", "\u2581+", "\u2581start", "$$;"], ["\u2581result", "$$._", "$$limit", "\u2581=", "\u2581_position", "\u2581+", "\u2581end", "$$;"], ["\u2581return", "\u2581result", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Char", "$$Sequence", "\u2581sub", "$$Sequence", "$$(int", "\u2581start,", "\u2581int", "\u2581end)", "\u2581{"], ["\u2581check", "$$Start", "$$End", "$$Remaining", "$$(start", "$$,", "\u2581end)", "$$;"], ["\u2581Char", "$$Sequence", "$$Adapter", "\u2581result", "\u2581=", "\u2581copy", "$$(this", "$$)", "$$;"], ["\u2581result", "$$.", "$$position", "\u2581=", "\u2581position", "\u2581+", "\u2581start", "$$;"], ["\u2581result", "$$.", "$$limit", "\u2581=", "\u2581position", "\u2581+", "\u2581end", "$$;"], ["\u2581return", "\u2581result", "$$;"], ["\u2581}"]]}, {"cs": "public virtual GetCoipPoolUsageResponse GetCoipPoolUsage(GetCoipPoolUsageRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = GetCoipPoolUsageRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = GetCoipPoolUsageResponseUnmarshaller.Instance;\n    return Invoke<GetCoipPoolUsageResponse>(request, options);\n}\n", "java": "public GetCoipPoolUsageResult getCoipPoolUsage(GetCoipPoolUsageRequest request) {\n    request = beforeClientExecution(request);\n    return executeGetCoipPoolUsage(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Get", "$$Co", "$$ip", "$$Pool", "$$Usage", "$$Response", "\u2581Get", "$$Co", "$$ip", "$$Pool", "$$Usage", "$$(Get", "$$Co", "$$ip", "$$Pool", "$$Usage", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Get", "$$Co", "$$ip", "$$Pool", "$$Usage", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Get", "$$Co", "$$ip", "$$Pool", "$$Usage", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Get", "$$Co", "$$ip", "$$Pool", "$$Usage", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Get", "$$Co", "$$ip", "$$Pool", "$$Usage", "$$Result", "\u2581get", "$$Co", "$$ip", "$$Pool", "$$Usage", "$$(Get", "$$Co", "$$ip", "$$Pool", "$$Usage", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeGet", "$$Co", "$$ip", "$$Pool", "$$Usage", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual UpdateResolverEndpointResponse UpdateResolverEndpoint(UpdateResolverEndpointRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = UpdateResolverEndpointRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = UpdateResolverEndpointResponseUnmarshaller.Instance;\n    return Invoke<UpdateResolverEndpointResponse>(request, options);\n}\n", "java": "public UpdateResolverEndpointResult updateResolverEndpoint(UpdateResolverEndpointRequest request) {\n    request = beforeClientExecution(request);\n    return executeUpdateResolverEndpoint(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Update", "$$ResolverEndpoint", "$$Response", "\u2581Update", "$$ResolverEndpoint", "$$(Update", "$$ResolverEndpoint", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Update", "$$ResolverEndpoint", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Update", "$$ResolverEndpoint", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Update", "$$ResolverEndpoint", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Update", "$$ResolverEndpoint", "$$Result", "\u2581update", "$$ResolverEndpoint", "$$(Update", "$$ResolverEndpoint", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeUpdate", "$$ResolverEndpoint", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {\n    ValueEval veText;\n    try {\n        veText = OperandResolver.GetSingleValue(arg0, srcRowIndex, srcColumnIndex);\n    }\n    catch (EvaluationException e) {\n        return e.GetErrorEval();\n    }\n    String strText = OperandResolver.CoerceValueToString(veText);\n    Double result = ConvertTextToNumber(strText);\n    if (Double.IsNaN(result)) {\n        return ErrorEval.VALUE_INVALID;\n    }\n    return new NumberEval(result);\n}\n", "java": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {\n    ValueEval veText;\n    try {\n        veText = OperandResolver.getSingleValue(arg0, srcRowIndex, srcColumnIndex);\n    }\n    catch (EvaluationException e) {\n        return e.getErrorEval();\n    }\n    String strText = OperandResolver.coerceValueToString(veText);\n    Double result = convertTextToNumber(strText);\n    if(result == null) result = parseDateTime(strText);\n    if (result == null) {\n        return ErrorEval.VALUE_INVALID;\n    }\n    return new NumberEval(result.doubleValue());\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581ValueEval", "\u2581Evaluate(int", "\u2581srcRowIndex,", "\u2581int", "\u2581srcColumnIndex,", "\u2581ValueEval", "\u2581arg", "$$0)", "\u2581{"], ["\u2581ValueEval", "\u2581ve", "$$Text", "$$;"], ["\u2581try", "\u2581{"], ["\u2581ve", "$$Text", "\u2581=", "\u2581OperandResolver", "$$.Get", "$$Single", "$$Value", "$$(arg", "$$0,", "\u2581srcRowIndex,", "\u2581srcColumn", "$$Index)", "$$;"], ["\u2581}"], ["\u2581catch", "\u2581(EvaluationException", "\u2581e)", "\u2581{"], ["\u2581return", "\u2581e", "$$.Get", "$$ErrorEval", "$$()", "$$;"], ["\u2581}"], ["\u2581String", "\u2581str", "$$Text", "\u2581=", "\u2581OperandResolver.", "$$Co", "$$erce", "$$ValueTo", "$$String(", "$$ve", "$$Text", "$$)", "$$;"], ["\u2581Double", "\u2581result", "\u2581=", "\u2581Con", "$$vert", "$$Text", "$$To", "$$Number", "$$(st", "$$r", "$$Text", "$$)", "$$;"], ["\u2581if", "\u2581(", "$$Double", "$$.Is", "$$N", "$$a", "$$N", "$$(result", "$$))", "\u2581{"], ["\u2581return", "\u2581ErrorEval.VALUE_INVALID", "$$;"], ["\u2581}"], ["\u2581return", "\u2581new", "\u2581NumberEval", "$$(result", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581ValueEval", "\u2581evaluate(int", "\u2581srcRowIndex,", "\u2581int", "\u2581srcColumnIndex,", "\u2581ValueEval", "\u2581arg", "$$0)", "\u2581{"], ["\u2581ValueEval", "\u2581ve", "$$Text", "$$;"], ["\u2581try", "\u2581{"], ["\u2581ve", "$$Text", "\u2581=", "\u2581OperandResolver", "$$.get", "$$Single", "$$Value", "$$(arg", "$$0,", "\u2581srcRowIndex,", "\u2581srcColumn", "$$Index)", "$$;"], ["\u2581}"], ["\u2581catch", "\u2581(EvaluationException", "\u2581e)", "\u2581{"], ["\u2581return", "\u2581e.get", "$$ErrorEval", "$$()", "$$;"], ["\u2581}"], ["\u2581String", "\u2581str", "$$Text", "\u2581=", "\u2581OperandResolver.", "$$co", "$$erce", "$$ValueTo", "$$String(", "$$ve", "$$Text", "$$)", "$$;"], ["\u2581Double", "\u2581result", "\u2581=", "\u2581con", "$$vert", "$$Text", "$$To", "$$Number", "$$(st", "$$r", "$$Text", "$$)", "$$;"], ["\u2581if", "$$(result", "\u2581==", "\u2581null)", "\u2581result", "\u2581=", "\u2581par", "$$se", "$$Date", "$$Time", "$$(st", "$$r", "$$Text", "$$)", "$$;"], ["\u2581if", "\u2581(result", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581return", "\u2581ErrorEval.VALUE_INVALID", "$$;"], ["\u2581}"], ["\u2581return", "\u2581new", "\u2581NumberEval", "$$(result", "$$.d", "$$ouble", "$$Value", "$$())", "$$;"], ["\u2581}"]]}, {"cs": "public int AddExternalName(ExternalNameRecord rec) {\n    ExternalNameRecord[] tmp = new ExternalNameRecord[_externalNameRecords.Length + 1];\n    Array.Copy(_externalNameRecords, 0, tmp, 0, _externalNameRecords.Length);\n    tmp[tmp.Length - 1] = rec;\n    _externalNameRecords = tmp;\n    return _externalNameRecords.Length - 1;\n}\n", "java": "public int addExternalName(ExternalNameRecord rec) {\n    ExternalNameRecord[] tmp = new ExternalNameRecord[_externalNameRecords.length + 1];\n    System.arraycopy(_externalNameRecords, 0, tmp, 0, _externalNameRecords.length);\n    tmp[tmp.length - 1] = rec;\n    _externalNameRecords = tmp;\n    return _externalNameRecords.length - 1;\n}\n", "cs_t": [["\u2581public", "\u2581int", "\u2581Add", "$$External", "$$Name(", "$$External", "$$NameRecord", "\u2581rec", "$$)", "\u2581{"], ["\u2581Ex", "$$ternal", "$$NameRecord", "$$[]", "\u2581t", "$$mp", "\u2581=", "\u2581new", "\u2581Ex", "$$ternal", "$$NameRecord", "$$[", "$$_", "$$external", "$$NameRecord", "$$s.Length", "\u2581+", "\u25811", "$$]", "$$;"], ["\u2581Array.Copy", "$$(_", "$$external", "$$NameRecord", "$$s,", "\u25810,", "\u2581t", "$$mp", "$$,", "\u25810,", "\u2581_", "$$external", "$$NameRecord", "$$s.Length", "$$)", "$$;"], ["\u2581t", "$$mp", "$$[", "$$t", "$$mp", "$$.Length", "\u2581-", "\u25811", "$$]", "\u2581=", "\u2581rec", "$$;"], ["\u2581_", "$$external", "$$NameRecord", "$$s", "\u2581=", "\u2581t", "$$mp", "$$;"], ["\u2581return", "\u2581_", "$$external", "$$NameRecord", "$$s.Length", "\u2581-", "\u25811", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581int", "\u2581add", "$$External", "$$Name(", "$$External", "$$NameRecord", "\u2581rec", "$$)", "\u2581{"], ["\u2581Ex", "$$ternal", "$$NameRecord", "$$[]", "\u2581t", "$$mp", "\u2581=", "\u2581new", "\u2581Ex", "$$ternal", "$$NameRecord", "$$[", "$$_", "$$external", "$$NameRecord", "$$s.length", "\u2581+", "\u25811", "$$]", "$$;"], ["\u2581System.arraycopy", "$$(_", "$$external", "$$NameRecord", "$$s,", "\u25810,", "\u2581t", "$$mp", "$$,", "\u25810,", "\u2581_", "$$external", "$$NameRecord", "$$s.length", "$$)", "$$;"], ["\u2581t", "$$mp", "$$[", "$$t", "$$mp", "$$.length", "\u2581-", "\u25811", "$$]", "\u2581=", "\u2581rec", "$$;"], ["\u2581_", "$$external", "$$NameRecord", "$$s", "\u2581=", "\u2581t", "$$mp", "$$;"], ["\u2581return", "\u2581_", "$$external", "$$NameRecord", "$$s.length", "\u2581-", "\u25811", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DescribePrincipalIdFormatResponse DescribePrincipalIdFormat(DescribePrincipalIdFormatRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DescribePrincipalIdFormatRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DescribePrincipalIdFormatResponseUnmarshaller.Instance;\n    return Invoke<DescribePrincipalIdFormatResponse>(request, options);\n}\n", "java": "public DescribePrincipalIdFormatResult describePrincipalIdFormat(DescribePrincipalIdFormatRequest request) {\n    request = beforeClientExecution(request);\n    return executeDescribePrincipalIdFormat(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Describe", "$$P", "$$r", "$$in", "$$c", "$$ip", "$$al", "$$Id", "$$Format", "$$Response", "\u2581Describe", "$$P", "$$r", "$$in", "$$c", "$$ip", "$$al", "$$Id", "$$Format", "$$(Describe", "$$P", "$$r", "$$in", "$$c", "$$ip", "$$al", "$$Id", "$$Format", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Describe", "$$P", "$$r", "$$in", "$$c", "$$ip", "$$al", "$$Id", "$$Format", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Describe", "$$P", "$$r", "$$in", "$$c", "$$ip", "$$al", "$$Id", "$$Format", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Describe", "$$P", "$$r", "$$in", "$$c", "$$ip", "$$al", "$$Id", "$$Format", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Describe", "$$P", "$$r", "$$in", "$$c", "$$ip", "$$al", "$$Id", "$$Format", "$$Result", "\u2581describe", "$$P", "$$r", "$$in", "$$c", "$$ip", "$$al", "$$Id", "$$Format", "$$(Describe", "$$P", "$$r", "$$in", "$$c", "$$ip", "$$al", "$$Id", "$$Format", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDescribe", "$$P", "$$r", "$$in", "$$c", "$$ip", "$$al", "$$Id", "$$Format", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual ListPartnerEventSourceAccountsResponse ListPartnerEventSourceAccounts(ListPartnerEventSourceAccountsRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = ListPartnerEventSourceAccountsRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = ListPartnerEventSourceAccountsResponseUnmarshaller.Instance;\n    return Invoke<ListPartnerEventSourceAccountsResponse>(request, options);\n}\n", "java": "public ListPartnerEventSourceAccountsResult listPartnerEventSourceAccounts(ListPartnerEventSourceAccountsRequest request) {\n    request = beforeClientExecution(request);\n    return executeListPartnerEventSourceAccounts(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581List", "$$Part", "$$ner", "$$Event", "$$Source", "$$Account", "$$sResponse", "\u2581List", "$$Part", "$$ner", "$$Event", "$$Source", "$$Account", "$$s(List", "$$Part", "$$ner", "$$Event", "$$Source", "$$Account", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581List", "$$Part", "$$ner", "$$Event", "$$Source", "$$Account", "$$s", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581List", "$$Part", "$$ner", "$$Event", "$$Source", "$$Account", "$$s", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<List", "$$Part", "$$ner", "$$Event", "$$Source", "$$Account", "$$sResponse>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581List", "$$Part", "$$ner", "$$Event", "$$Source", "$$Account", "$$sResult", "\u2581list", "$$Part", "$$ner", "$$Event", "$$Source", "$$Account", "$$s(List", "$$Part", "$$ner", "$$Event", "$$Source", "$$Account", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeList", "$$Part", "$$ner", "$$Event", "$$Source", "$$Account", "$$s", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual FilePath GetFile() {\n    return file;\n}\n", "java": "public File getFile() {\n    return file;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581File", "$$Path", "\u2581Get", "$$File", "$$()", "\u2581{"], ["\u2581return", "\u2581file", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581File", "\u2581get", "$$File", "$$()", "\u2581{"], ["\u2581return", "\u2581file", "$$;"], ["\u2581}"]]}, {"cs": "public override void onChanged() {\n    this._enclosing.refreshExpGroupMetadataList(true, true);\n    this._enclosing.notifyDataSetChanged();\n}\n", "java": "public void onChanged() {\n    if (mSelectedIds.size() > 0) {\n        return;\n    }\n    chooseListToShow();\n    ensureSomeGroupIsExpanded();\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581void", "\u2581on", "$$Changed", "$$()", "\u2581{"], ["\u2581this._enclosing", "$$.re", "$$f", "$$resh", "$$Exp", "$$Group", "$$Metadata", "$$List", "$$(t", "$$rue", "$$,", "\u2581true", "$$)", "$$;"], ["\u2581this._enclosing", "$$.", "$$n", "$$o", "$$ti", "$$fy", "$$Data", "$$Set", "$$Changed", "$$()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581on", "$$Changed", "$$()", "\u2581{"], ["\u2581if", "\u2581(m", "$$Se", "$$le", "$$c", "$$ted", "$$Id", "$$s.size()", "\u2581>", "\u25810)", "\u2581{"], ["\u2581return", "$$;"], ["\u2581}"], ["\u2581ch", "$$oo", "$$se", "$$List", "$$To", "$$Sh", "$$ow", "$$()", "$$;"], ["\u2581en", "$$sure", "$$S", "$$om", "$$e", "$$Group", "$$Is", "$$Exp", "$$an", "$$ded", "$$()", "$$;"], ["\u2581}"]]}, {"cs": "public virtual string GetTextAsString() {\n    if (this.m_text == null)return null;\n    elsereturn this.m_text.ToString();\n}\n", "java": "public String getTextAsString() {\n    if (this.text == null)return null;\n    elsereturn this.text.toString();\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581string", "\u2581Get", "$$Text", "$$As", "$$String()", "\u2581{"], ["\u2581if", "\u2581(this", "$$.", "$$m_", "$$text", "\u2581==", "\u2581null)", "$$return", "\u2581null", "$$;"], ["\u2581else", "$$return", "\u2581this.m_", "$$text", "$$.ToString()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581String", "\u2581get", "$$Text", "$$As", "$$String()", "\u2581{"], ["\u2581if", "\u2581(this", "$$.", "$$text", "\u2581==", "\u2581null)", "$$return", "\u2581null", "$$;"], ["\u2581else", "$$return", "\u2581this.", "$$text", "$$.toString()", "$$;"], ["\u2581}"]]}, {"cs": "public virtual java.nio.LongBuffer put(long[] src, int srcOffset, int longCount) {\n    java.util.Arrays.checkOffsetAndCount(src.Length, srcOffset, longCount);\n    if (longCount > remaining()) {\n        throw new java.nio.BufferOverflowException();\n    }{\n        for (int i = srcOffset; i < srcOffset + longCount; ++i) {\n            put(src[i]);\n        }\n    }\n    return this;\n}\n", "java": "public LongBuffer put(long[] src, int srcOffset, int longCount) {\n    Arrays.checkOffsetAndCount(src.length, srcOffset, longCount);\n    if (longCount > remaining()) {\n        throw new BufferOverflowException();\n    }\n    for (int i = srcOffset; i < srcOffset + longCount; ++i) {\n        put(src[i]);\n    }\n    return this;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581java.nio.", "$$Long", "$$Buffer", "\u2581put", "$$(long[]", "\u2581src", "$$,", "\u2581int", "\u2581srcOffset,", "\u2581int", "\u2581long", "$$Count)", "\u2581{"], ["\u2581java.", "$$u", "$$til", "$$.Ar", "$$ray", "$$s.", "$$check", "$$Offset", "$$And", "$$Count", "$$(src", "$$.Length", "$$,", "\u2581srcOffset,", "\u2581long", "$$Count)", "$$;"], ["\u2581if", "\u2581(", "$$long", "$$Count", "\u2581>", "\u2581remaining", "$$())", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581java.nio.Buffer", "$$Over", "$$flow", "$$Exception", "$$()", "$$;"], ["\u2581}", "$${"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u2581src", "$$Offset", "$$;", "\u2581i", "\u2581<", "\u2581src", "$$Offset", "\u2581+", "\u2581long", "$$Count", "$$;", "\u2581++i)", "\u2581{"], ["\u2581put", "$$(src", "$$[i]", "$$)", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581return", "\u2581this", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Long", "$$Buffer", "\u2581put", "$$(long[]", "\u2581src", "$$,", "\u2581int", "\u2581srcOffset,", "\u2581int", "\u2581long", "$$Count)", "\u2581{"], ["\u2581Arrays.", "$$check", "$$Offset", "$$And", "$$Count", "$$(src", "$$.length,", "\u2581srcOffset,", "\u2581long", "$$Count)", "$$;"], ["\u2581if", "\u2581(", "$$long", "$$Count", "\u2581>", "\u2581remaining", "$$())", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581Buffer", "$$Over", "$$flow", "$$Exception", "$$()", "$$;"], ["\u2581}"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u2581src", "$$Offset", "$$;", "\u2581i", "\u2581<", "\u2581src", "$$Offset", "\u2581+", "\u2581long", "$$Count", "$$;", "\u2581++i)", "\u2581{"], ["\u2581put", "$$(src", "$$[i]", "$$)", "$$;"], ["\u2581}"], ["\u2581return", "\u2581this", "$$;"], ["\u2581}"]]}, {"cs": "public virtual bool remove(object o) {\n    lock (this) {\n        int index = indexOf(o);\n        if (index == -1) {\n            return false;\n        }\n        remove(index);\n        return true;\n    }\n}\n", "java": "@Override public boolean remove(Object object) {\n    synchronized (CopyOnWriteArrayList.this) {\n        int index = indexOf(object);\n        if (index == -1) {\n            return false;\n        }\n        remove(index);\n        return true;\n    }\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581bool", "\u2581remove", "$$(object", "\u2581o)", "\u2581{"], ["\u2581lock", "\u2581(this)", "\u2581{"], ["\u2581int", "\u2581index", "\u2581=", "\u2581index", "$$Of", "$$(o", "$$)", "$$;"], ["\u2581if", "\u2581(index", "\u2581==", "\u2581-1)", "\u2581{"], ["\u2581return", "\u2581false", "$$;"], ["\u2581}"], ["\u2581remove", "$$(index", "$$)", "$$;"], ["\u2581return", "\u2581true", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581@Override", "\u2581public", "\u2581boolean", "\u2581remove", "$$(Object", "\u2581object)", "\u2581{"], ["\u2581synchronized", "\u2581(", "$$Copy", "$$On", "$$Write", "$$Array", "$$List", "$$.", "$$this", "$$)", "\u2581{"], ["\u2581int", "\u2581index", "\u2581=", "\u2581index", "$$Of", "$$(object", "$$)", "$$;"], ["\u2581if", "\u2581(index", "\u2581==", "\u2581-1)", "\u2581{"], ["\u2581return", "\u2581false", "$$;"], ["\u2581}"], ["\u2581remove", "$$(index", "$$)", "$$;"], ["\u2581return", "\u2581true", "$$;"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public override long Length() {\n    if (onDiskFile == null) {\n        return base.Length();\n    }\n    return onDiskFile.Length();\n}\n", "java": "public long length() {\n    if (onDiskFile == null) {\n        return super.length();\n    }\n    return onDiskFile.length();\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581long", "\u2581", "$$Length", "$$()", "\u2581{"], ["\u2581if", "\u2581(", "$$on", "$$Disk", "$$File", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581return", "\u2581base", "$$.Length", "$$()", "$$;"], ["\u2581}"], ["\u2581return", "\u2581on", "$$Disk", "$$File", "$$.Length", "$$()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581long", "\u2581length", "$$()", "\u2581{"], ["\u2581if", "\u2581(", "$$on", "$$Disk", "$$File", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581return", "\u2581super.", "$$length", "$$()", "$$;"], ["\u2581}"], ["\u2581return", "\u2581on", "$$Disk", "$$File", "$$.length()", "$$;"], ["\u2581}"]]}, {"cs": "public FieldBoostMapFCListener(QueryConfigHandler config) {\n    this.config = config;\n}\n", "java": "public FieldBoostMapFCListener(QueryConfigHandler config) {\n    this.config = config;\n}\n", "cs_t": [["\u2581public", "\u2581Field", "$$Boost", "$$Map", "$$F", "$$C", "$$Lis", "$$ten", "$$er(", "$$Query", "$$Config", "$$Handler", "\u2581config", "$$)", "\u2581{"], ["\u2581this.", "$$config", "\u2581=", "\u2581config", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Field", "$$Boost", "$$Map", "$$F", "$$C", "$$Lis", "$$ten", "$$er(", "$$Query", "$$Config", "$$Handler", "\u2581config", "$$)", "\u2581{"], ["\u2581this.", "$$config", "\u2581=", "\u2581config", "$$;"], ["\u2581}"]]}, {"cs": "public virtual StartActivityStreamResponse StartActivityStream(StartActivityStreamRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = StartActivityStreamRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = StartActivityStreamResponseUnmarshaller.Instance;\n    return Invoke<StartActivityStreamResponse>(request, options);\n}\n", "java": "public StartActivityStreamResult startActivityStream(StartActivityStreamRequest request) {\n    request = beforeClientExecution(request);\n    return executeStartActivityStream(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Start", "$$Activity", "$$Stream", "$$Response", "\u2581Start", "$$Activity", "$$Stream", "$$(Start", "$$Activity", "$$Stream", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Start", "$$Activity", "$$Stream", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Start", "$$Activity", "$$Stream", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<", "$$Start", "$$Activity", "$$Stream", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Start", "$$Activity", "$$Stream", "$$Result", "\u2581start", "$$Activity", "$$Stream", "$$(Start", "$$Activity", "$$Stream", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581execute", "$$Start", "$$Activity", "$$Stream", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual Hyphenation Hyphenate(string word, int remainCharCount, int pushCharCount) {\n    char[] w = word.ToCharArray();\n    return Hyphenate(w, 0, w.Length, remainCharCount, pushCharCount);\n}\n", "java": "public Hyphenation hyphenate(String word, int remainCharCount,int pushCharCount) {\n    char[] w = word.toCharArray();\n    return hyphenate(w, 0, w.length, remainCharCount, pushCharCount);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581H", "$$yp", "$$h", "$$en", "$$ation", "\u2581H", "$$yp", "$$h", "$$en", "$$ate", "$$(string", "\u2581word", "$$,", "\u2581int", "\u2581re", "$$main", "$$Char", "$$Count", "$$,", "\u2581int", "\u2581p", "$$ush", "$$Char", "$$Count)", "\u2581{"], ["\u2581char[]", "\u2581w", "\u2581=", "\u2581word", "$$.To", "$$CharArray", "$$()", "$$;"], ["\u2581return", "\u2581H", "$$yp", "$$h", "$$en", "$$ate", "$$(w", "$$,", "\u25810,", "\u2581w", "$$.Length", "$$,", "\u2581re", "$$main", "$$Char", "$$Count", "$$,", "\u2581p", "$$ush", "$$Char", "$$Count)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581H", "$$yp", "$$h", "$$en", "$$ation", "\u2581h", "$$yp", "$$h", "$$en", "$$ate", "$$(String", "\u2581word", "$$,", "\u2581int", "\u2581re", "$$main", "$$Char", "$$Count", "$$,", "$$int", "\u2581p", "$$ush", "$$Char", "$$Count)", "\u2581{"], ["\u2581char[]", "\u2581w", "\u2581=", "\u2581word", "$$.to", "$$CharArray", "$$()", "$$;"], ["\u2581return", "\u2581h", "$$yp", "$$h", "$$en", "$$ate", "$$(w", "$$,", "\u25810,", "\u2581w", "$$.length,", "\u2581re", "$$main", "$$Char", "$$Count", "$$,", "\u2581p", "$$ush", "$$Char", "$$Count)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual CreateSmsTemplateResponse CreateSmsTemplate(CreateSmsTemplateRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = CreateSmsTemplateRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = CreateSmsTemplateResponseUnmarshaller.Instance;\n    return Invoke<CreateSmsTemplateResponse>(request, options);\n}\n", "java": "public CreateSmsTemplateResult createSmsTemplate(CreateSmsTemplateRequest request) {\n    request = beforeClientExecution(request);\n    return executeCreateSmsTemplate(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Create", "$$Sm", "$$s", "$$Template", "$$Response", "\u2581Create", "$$Sm", "$$s", "$$Template", "$$(Create", "$$Sm", "$$s", "$$Template", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Create", "$$Sm", "$$s", "$$Template", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Create", "$$Sm", "$$s", "$$Template", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Create", "$$Sm", "$$s", "$$Template", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Create", "$$Sm", "$$s", "$$Template", "$$Result", "\u2581create", "$$Sm", "$$s", "$$Template", "$$(Create", "$$Sm", "$$s", "$$Template", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeCreate", "$$Sm", "$$s", "$$Template", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual void clear() {\n    int n = mSize;\n    object[] values = mValues;\n    {\n        for (int i = 0; i < n; i++) {\n            values[i] = null;\n        }\n    }\n    mSize = 0;\n    mGarbage = false;\n}\n", "java": "public void clear() {\n    int n = mSize;\n    Object[] values = mValues;\n    for (int i = 0; i < n; i++) {\n        values[i] = null;\n    }\n    mSize = 0;\n    mGarbage = false;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581void", "\u2581clear()", "\u2581{"], ["\u2581int", "\u2581n", "\u2581=", "\u2581m", "$$Size", "$$;"], ["\u2581object", "$$[]", "\u2581values", "\u2581=", "\u2581m", "$$Values", "$$;"], ["\u2581{"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810;", "\u2581i", "\u2581<", "\u2581n", "$$;", "\u2581i++)", "\u2581{"], ["\u2581values", "$$[i]", "\u2581=", "\u2581null", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581m", "$$Size", "\u2581=", "\u25810;"], ["\u2581m", "$$G", "$$ar", "$$b", "$$age", "\u2581=", "\u2581false", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581clear()", "\u2581{"], ["\u2581int", "\u2581n", "\u2581=", "\u2581m", "$$Size", "$$;"], ["\u2581Object", "$$[]", "\u2581values", "\u2581=", "\u2581m", "$$Values", "$$;"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810;", "\u2581i", "\u2581<", "\u2581n", "$$;", "\u2581i++)", "\u2581{"], ["\u2581values", "$$[i]", "\u2581=", "\u2581null", "$$;"], ["\u2581}"], ["\u2581m", "$$Size", "\u2581=", "\u25810;"], ["\u2581m", "$$G", "$$ar", "$$b", "$$age", "\u2581=", "\u2581false", "$$;"], ["\u2581}"]]}, {"cs": "public virtual string ToStringTree(Parser parser) {\n    return ToString();\n}\n", "java": "public String toStringTree(Parser parser) {\n    return toString();\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581string", "\u2581To", "$$String", "$$Tree", "$$(", "$$Parser", "\u2581par", "$$ser", "$$)", "\u2581{"], ["\u2581return", "\u2581ToString()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581String", "\u2581to", "$$String", "$$Tree", "$$(", "$$Parser", "\u2581par", "$$ser", "$$)", "\u2581{"], ["\u2581return", "\u2581toString()", "$$;"], ["\u2581}"]]}, {"cs": "public override long Get(int index) {\n    int o = (int)((uint)index >> 2);\n    int b = index & 3;\n    int shift = b << 4;\n    return ((long)((ulong)blocks[o] >> shift)) & 65535L;\n}\n", "java": "public long get(int index) {\n    final int o = index >>> 2;\n    final int b = index & 3;\n    final int shift = b << 4;\n    return (blocks[o] >>> shift) & 65535L;\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581long", "\u2581Get", "$$(int", "\u2581index)", "\u2581{"], ["\u2581int", "\u2581o", "\u2581=", "\u2581(int", "$$)((", "$$uint)", "$$index", "\u2581>>", "\u25812)", "$$;"], ["\u2581int", "\u2581b", "\u2581=", "\u2581index", "\u2581&", "\u25813", "$$;"], ["\u2581int", "\u2581shift", "\u2581=", "\u2581b", "\u2581<<", "\u25814", "$$;"], ["\u2581return", "\u2581((", "$$long", "$$)((", "$$ul", "$$ong", "$$)", "$$block", "$$s[", "$$o]", "\u2581>>", "\u2581shift", "$$))", "\u2581&", "\u25816", "$$5", "$$5", "$$3", "$$5", "$$L", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581long", "\u2581get(int", "\u2581index)", "\u2581{"], ["\u2581final", "\u2581int", "\u2581o", "\u2581=", "\u2581index", "\u2581>>>", "\u25812", "$$;"], ["\u2581final", "\u2581int", "\u2581b", "\u2581=", "\u2581index", "\u2581&", "\u25813", "$$;"], ["\u2581final", "\u2581int", "\u2581shift", "\u2581=", "\u2581b", "\u2581<<", "\u25814", "$$;"], ["\u2581return", "\u2581(block", "$$s[", "$$o]", "\u2581>>>", "\u2581shift", "$$)", "\u2581&", "\u25816", "$$5", "$$5", "$$3", "$$5", "$$L", "$$;"], ["\u2581}"]]}, {"cs": "public override string ToString() {\n    return GetType().ToString() + \": \" + GetOldId().Name + \" \" + GetNewId().Name + \" \"+ GetRefName();\n}\n", "java": "public String toString() {\n    return getType().name() + \": \" + getOldId().name() + \" \"+ getNewId().name() + \" \" + getRefName();\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581string", "\u2581ToString()", "\u2581{"], ["\u2581return", "\u2581Get", "$$Type()", "$$.ToString()", "\u2581+", "\u2581\":", "\u2581\"", "\u2581+", "\u2581Get", "$$Old", "$$Id", "$$().", "$$Name", "\u2581+", "\u2581\"", "\u2581\"", "\u2581+", "\u2581Get", "$$New", "$$Id", "$$().", "$$Name", "\u2581+", "\u2581\"", "\u2581\"+", "\u2581Get", "$$Ref", "$$Name()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581String", "\u2581toString()", "\u2581{"], ["\u2581return", "\u2581get", "$$Type().", "$$name", "$$()", "\u2581+", "\u2581\":", "\u2581\"", "\u2581+", "\u2581get", "$$Old", "$$Id", "$$().", "$$name", "$$()", "\u2581+", "\u2581\"", "\u2581\"+", "\u2581get", "$$New", "$$Id", "$$().", "$$name", "$$()", "\u2581+", "\u2581\"", "\u2581\"", "\u2581+", "\u2581get", "$$Ref", "$$Name()", "$$;"], ["\u2581}"]]}, {"cs": "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval text, ValueEval number_times) {\n    ValueEval veText1;\n    try {\n        veText1 = OperandResolver.GetSingleValue(text, srcRowIndex, srcColumnIndex);\n    }\n    catch (EvaluationException e) {\n        return e.GetErrorEval();\n    }\n    String strText1 = OperandResolver.CoerceValueToString(veText1);\n    double numberOfTime = 0;\n    try {\n        numberOfTime = OperandResolver.CoerceValueToDouble(number_times);\n    }\n    catch (EvaluationException) {\n        return ErrorEval.VALUE_INVALID;\n    }\n    int numberOfTimeInt = (int)numberOfTime;\n    StringBuilder strb = new StringBuilder(strText1.Length * numberOfTimeInt);\n    for (int i = 0; i < numberOfTimeInt; i++) {\n        strb.Append(strText1);\n    }\n    if (strb.ToString().Length > 32767) {\n        return ErrorEval.VALUE_INVALID;\n    }\n    return new StringEval(strb.ToString());\n}\n", "java": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval text, ValueEval number_times) {\n    ValueEval veText1;\n    try {\n        veText1 = OperandResolver.getSingleValue(text, srcRowIndex, srcColumnIndex);\n    }\n    catch (EvaluationException e) {\n        return e.getErrorEval();\n    }\n    String strText1 = OperandResolver.coerceValueToString(veText1);\n    double numberOfTime = 0;\n    try {\n        numberOfTime = OperandResolver.coerceValueToDouble(number_times);\n    }\n    catch (EvaluationException e) {\n        return ErrorEval.VALUE_INVALID;\n    }\n    int numberOfTimeInt = (int)numberOfTime;\n    StringBuilder strb = new StringBuilder(strText1.length() * numberOfTimeInt);\n    for(int i = 0; i < numberOfTimeInt; i++) {\n        strb.append(strText1);\n    }\n    if (strb.toString().length() > 32767) {\n        return ErrorEval.VALUE_INVALID;\n    }\n    return new StringEval(strb.toString());\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581ValueEval", "\u2581Evaluate(int", "\u2581srcRowIndex,", "\u2581int", "\u2581srcColumnIndex,", "\u2581ValueEval", "\u2581text", "$$,", "\u2581ValueEval", "\u2581number", "$$_", "$$tim", "$$es", "$$)", "\u2581{"], ["\u2581ValueEval", "\u2581ve", "$$Text", "$$1", "$$;"], ["\u2581try", "\u2581{"], ["\u2581ve", "$$Text", "$$1", "\u2581=", "\u2581OperandResolver", "$$.Get", "$$Single", "$$Value(", "$$text", "$$,", "\u2581srcRowIndex,", "\u2581srcColumn", "$$Index)", "$$;"], ["\u2581}"], ["\u2581catch", "\u2581(EvaluationException", "\u2581e)", "\u2581{"], ["\u2581return", "\u2581e", "$$.Get", "$$ErrorEval", "$$()", "$$;"], ["\u2581}"], ["\u2581String", "\u2581str", "$$Text", "$$1", "\u2581=", "\u2581OperandResolver.", "$$Co", "$$erce", "$$ValueTo", "$$String(", "$$ve", "$$Text", "$$1)", "$$;"], ["\u2581double", "\u2581number", "$$Of", "$$Time", "\u2581=", "\u25810;"], ["\u2581try", "\u2581{"], ["\u2581number", "$$Of", "$$Time", "\u2581=", "\u2581OperandResolver.", "$$Co", "$$erce", "$$ValueTo", "$$Double", "$$(n", "$$umber", "$$_", "$$tim", "$$es", "$$)", "$$;"], ["\u2581}"], ["\u2581catch", "\u2581(EvaluationException", "$$)", "\u2581{"], ["\u2581return", "\u2581ErrorEval.VALUE_INVALID", "$$;"], ["\u2581}"], ["\u2581int", "\u2581number", "$$Of", "$$Time", "$$Int", "\u2581=", "\u2581(int)", "$$number", "$$Of", "$$Time", "$$;"], ["\u2581StringBuilder", "\u2581str", "$$b", "\u2581=", "\u2581new", "\u2581StringBuilder", "$$(st", "$$r", "$$Text", "$$1.", "$$Length", "\u2581*", "\u2581number", "$$Of", "$$Time", "$$Int", "$$)", "$$;"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810;", "\u2581i", "\u2581<", "\u2581number", "$$Of", "$$Time", "$$Int", "$$;", "\u2581i++)", "\u2581{"], ["\u2581str", "$$b", "$$.Append(", "$$str", "$$Text", "$$1)", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(", "$$str", "$$b", "$$.ToString()", "$$.Length", "\u2581>", "\u2581", "$$32", "$$7", "$$6", "$$7", "$$)", "\u2581{"], ["\u2581return", "\u2581ErrorEval.VALUE_INVALID", "$$;"], ["\u2581}"], ["\u2581return", "\u2581new", "\u2581String", "$$Eval", "$$(st", "$$r", "$$b", "$$.ToString()", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581ValueEval", "\u2581evaluate(int", "\u2581srcRowIndex,", "\u2581int", "\u2581srcColumnIndex,", "\u2581ValueEval", "\u2581text", "$$,", "\u2581ValueEval", "\u2581number", "$$_", "$$tim", "$$es", "$$)", "\u2581{"], ["\u2581ValueEval", "\u2581ve", "$$Text", "$$1", "$$;"], ["\u2581try", "\u2581{"], ["\u2581ve", "$$Text", "$$1", "\u2581=", "\u2581OperandResolver", "$$.get", "$$Single", "$$Value(", "$$text", "$$,", "\u2581srcRowIndex,", "\u2581srcColumn", "$$Index)", "$$;"], ["\u2581}"], ["\u2581catch", "\u2581(EvaluationException", "\u2581e)", "\u2581{"], ["\u2581return", "\u2581e.get", "$$ErrorEval", "$$()", "$$;"], ["\u2581}"], ["\u2581String", "\u2581str", "$$Text", "$$1", "\u2581=", "\u2581OperandResolver.", "$$co", "$$erce", "$$ValueTo", "$$String(", "$$ve", "$$Text", "$$1)", "$$;"], ["\u2581double", "\u2581number", "$$Of", "$$Time", "\u2581=", "\u25810;"], ["\u2581try", "\u2581{"], ["\u2581number", "$$Of", "$$Time", "\u2581=", "\u2581OperandResolver.", "$$co", "$$erce", "$$ValueTo", "$$Double", "$$(n", "$$umber", "$$_", "$$tim", "$$es", "$$)", "$$;"], ["\u2581}"], ["\u2581catch", "\u2581(EvaluationException", "\u2581e)", "\u2581{"], ["\u2581return", "\u2581ErrorEval.VALUE_INVALID", "$$;"], ["\u2581}"], ["\u2581int", "\u2581number", "$$Of", "$$Time", "$$Int", "\u2581=", "\u2581(int)", "$$number", "$$Of", "$$Time", "$$;"], ["\u2581StringBuilder", "\u2581str", "$$b", "\u2581=", "\u2581new", "\u2581StringBuilder", "$$(st", "$$r", "$$Text", "$$1.", "$$length", "$$()", "\u2581*", "\u2581number", "$$Of", "$$Time", "$$Int", "$$)", "$$;"], ["\u2581for", "$$(int", "\u2581i", "\u2581=", "\u25810;", "\u2581i", "\u2581<", "\u2581number", "$$Of", "$$Time", "$$Int", "$$;", "\u2581i++)", "\u2581{"], ["\u2581str", "$$b", "$$.append(", "$$str", "$$Text", "$$1)", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(", "$$str", "$$b", "$$.toString()", "$$.length()", "\u2581>", "\u2581", "$$32", "$$7", "$$6", "$$7", "$$)", "\u2581{"], ["\u2581return", "\u2581ErrorEval.VALUE_INVALID", "$$;"], ["\u2581}"], ["\u2581return", "\u2581new", "\u2581String", "$$Eval", "$$(st", "$$r", "$$b", "$$.toString()", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public java.util.MapClass.Entry<K, V> lastEntry() {\n    return this._enclosing.immutableCopy(this.endpoint(false));\n}\n", "java": "public Entry<K, V> lastEntry() {\n    return immutableCopy(endpoint(false));\n}\n", "cs_t": [["\u2581public", "\u2581java.util.", "$$MapClass.", "$$Entry<K,", "\u2581V>", "\u2581last", "$$Entry", "$$()", "\u2581{"], ["\u2581return", "\u2581this._enclosing", "$$.", "$$im", "$$m", "$$utable", "$$Copy", "$$(this", "$$.", "$$end", "$$point", "$$(f", "$$alse", "$$))", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581", "$$Entry<K,", "\u2581V>", "\u2581last", "$$Entry", "$$()", "\u2581{"], ["\u2581return", "\u2581i", "$$m", "$$m", "$$utable", "$$Copy", "$$(", "$$end", "$$point", "$$(f", "$$alse", "$$))", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DeleteEvaluationResponse DeleteEvaluation(DeleteEvaluationRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DeleteEvaluationRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DeleteEvaluationResponseUnmarshaller.Instance;\n    return Invoke<DeleteEvaluationResponse>(request, options);\n}\n", "java": "public DeleteEvaluationResult deleteEvaluation(DeleteEvaluationRequest request) {\n    request = beforeClientExecution(request);\n    return executeDeleteEvaluation(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Delete", "$$Evaluation", "$$Response", "\u2581Delete", "$$Evaluation", "$$(Delete", "$$Evaluation", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Delete", "$$Evaluation", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Delete", "$$Evaluation", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Delete", "$$Evaluation", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Delete", "$$Evaluation", "$$Result", "\u2581delete", "$$Evaluation", "$$(Delete", "$$Evaluation", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDelete", "$$Evaluation", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public ContinueRecord(RecordInputStream in1) {\n    field_1_data = in1.ReadRemainder();\n}\n", "java": "public ContinueRecord(RecordInputStream in) {\n    _data = in.readRemainder();\n}\n", "cs_t": [["\u2581public", "\u2581Con", "$$t", "$$inue", "$$Record(RecordInputStream", "\u2581in1)", "\u2581{"], ["\u2581field_1_", "$$d", "$$ata", "\u2581=", "\u2581in1.Read", "$$Re", "$$main", "$$der", "$$()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Con", "$$t", "$$inue", "$$Record(RecordInputStream", "\u2581in)", "\u2581{"], ["\u2581_d", "$$ata", "\u2581=", "\u2581in.read", "$$Re", "$$main", "$$der", "$$()", "$$;"], ["\u2581}"]]}, {"cs": "public virtual CreateFilterResponse CreateFilter(CreateFilterRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = CreateFilterRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = CreateFilterResponseUnmarshaller.Instance;\n    return Invoke<CreateFilterResponse>(request, options);\n}\n", "java": "public CreateFilterResult createFilter(CreateFilterRequest request) {\n    request = beforeClientExecution(request);\n    return executeCreateFilter(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Create", "$$Filter", "$$Response", "\u2581Create", "$$Filter", "$$(Create", "$$Filter", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Create", "$$Filter", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Create", "$$Filter", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Create", "$$Filter", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Create", "$$Filter", "$$Result", "\u2581create", "$$Filter", "$$(Create", "$$Filter", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeCreate", "$$Filter", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override java.lang.CharSequence SubSequence(int start, int end) {\n    checkStartEndRemaining(start, end);\n    java.nio.CharBuffer result = duplicate();\n    result.limit(_position + end);\n    result.position(_position + start);\n    return result;\n}\n", "java": "public CharSequence subSequence(int start, int end) {\n    checkStartEndRemaining(start, end);\n    CharBuffer result = duplicate();\n    result.limit(position + end);\n    result.position(position + start);\n    return result;\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581java.lang.", "$$CharSequence", "\u2581Sub", "$$Sequence", "$$(int", "\u2581start,", "\u2581int", "\u2581end)", "\u2581{"], ["\u2581check", "$$Start", "$$End", "$$Remaining", "$$(start", "$$,", "\u2581end)", "$$;"], ["\u2581java.nio.", "$$CharBuffer", "\u2581result", "\u2581=", "\u2581d", "$$uplicate", "$$()", "$$;"], ["\u2581result", "$$.", "$$limit", "$$(_", "$$position", "\u2581+", "\u2581end)", "$$;"], ["\u2581result", "$$.", "$$position", "$$(_", "$$position", "\u2581+", "\u2581start", "$$)", "$$;"], ["\u2581return", "\u2581result", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Char", "$$Sequence", "\u2581sub", "$$Sequence", "$$(int", "\u2581start,", "\u2581int", "\u2581end)", "\u2581{"], ["\u2581check", "$$Start", "$$End", "$$Remaining", "$$(start", "$$,", "\u2581end)", "$$;"], ["\u2581Char", "$$Buffer", "\u2581result", "\u2581=", "\u2581d", "$$uplicate", "$$()", "$$;"], ["\u2581result", "$$.", "$$limit", "$$(", "$$position", "\u2581+", "\u2581end)", "$$;"], ["\u2581result", "$$.", "$$position", "$$(", "$$position", "\u2581+", "\u2581start", "$$)", "$$;"], ["\u2581return", "\u2581result", "$$;"], ["\u2581}"]]}, {"cs": "public virtual CreateTrafficMirrorSessionResponse CreateTrafficMirrorSession(CreateTrafficMirrorSessionRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = CreateTrafficMirrorSessionRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = CreateTrafficMirrorSessionResponseUnmarshaller.Instance;\n    return Invoke<CreateTrafficMirrorSessionResponse>(request, options);\n}\n", "java": "public CreateTrafficMirrorSessionResult createTrafficMirrorSession(CreateTrafficMirrorSessionRequest request) {\n    request = beforeClientExecution(request);\n    return executeCreateTrafficMirrorSession(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Create", "$$TrafficMirror", "$$Session", "$$Response", "\u2581Create", "$$TrafficMirror", "$$Session", "$$(Create", "$$TrafficMirror", "$$Session", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Create", "$$TrafficMirror", "$$Session", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Create", "$$TrafficMirror", "$$Session", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Create", "$$TrafficMirror", "$$Session", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Create", "$$TrafficMirror", "$$Session", "$$Result", "\u2581create", "$$TrafficMirror", "$$Session", "$$(Create", "$$TrafficMirror", "$$Session", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeCreate", "$$TrafficMirror", "$$Session", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual CreateNodegroupResponse CreateNodegroup(CreateNodegroupRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = CreateNodegroupRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = CreateNodegroupResponseUnmarshaller.Instance;\n    return Invoke<CreateNodegroupResponse>(request, options);\n}\n", "java": "public CreateNodegroupResult createNodegroup(CreateNodegroupRequest request) {\n    request = beforeClientExecution(request);\n    return executeCreateNodegroup(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Create", "$$Node", "$$group", "$$Response", "\u2581Create", "$$Node", "$$group", "$$(Create", "$$Node", "$$group", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Create", "$$Node", "$$group", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Create", "$$Node", "$$group", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Create", "$$Node", "$$group", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Create", "$$Node", "$$group", "$$Result", "\u2581create", "$$Node", "$$group", "$$(Create", "$$Node", "$$group", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeCreate", "$$Node", "$$group", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override TokenStream Create(TokenStream input) {\n    return new SoraniStemFilter(input);\n}\n", "java": "public SoraniStemFilter create(TokenStream input) {\n    return new SoraniStemFilter(input);\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581TokenStream", "\u2581Create(TokenStream", "\u2581input)", "\u2581{"], ["\u2581return", "\u2581new", "\u2581S", "$$or", "$$an", "$$i", "$$Stem", "$$Filter(input", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581S", "$$or", "$$an", "$$i", "$$Stem", "$$Filter", "\u2581create(TokenStream", "\u2581input)", "\u2581{"], ["\u2581return", "\u2581new", "\u2581S", "$$or", "$$an", "$$i", "$$Stem", "$$Filter(input", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual UpdateCustomVerificationEmailTemplateResponse UpdateCustomVerificationEmailTemplate(UpdateCustomVerificationEmailTemplateRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = UpdateCustomVerificationEmailTemplateRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = UpdateCustomVerificationEmailTemplateResponseUnmarshaller.Instance;\n    return Invoke<UpdateCustomVerificationEmailTemplateResponse>(request, options);\n}\n", "java": "public UpdateCustomVerificationEmailTemplateResult updateCustomVerificationEmailTemplate(UpdateCustomVerificationEmailTemplateRequest request) {\n    request = beforeClientExecution(request);\n    return executeUpdateCustomVerificationEmailTemplate(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Update", "$$Custom", "$$Verification", "$$EmailTemplate", "$$Response", "\u2581Update", "$$Custom", "$$Verification", "$$EmailTemplate", "$$(Update", "$$Custom", "$$Verification", "$$EmailTemplate", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Update", "$$Custom", "$$Verification", "$$EmailTemplate", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Update", "$$Custom", "$$Verification", "$$EmailTemplate", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Update", "$$Custom", "$$Verification", "$$EmailTemplate", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Update", "$$Custom", "$$Verification", "$$EmailTemplate", "$$Result", "\u2581update", "$$Custom", "$$Verification", "$$EmailTemplate", "$$(Update", "$$Custom", "$$Verification", "$$EmailTemplate", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeUpdate", "$$Custom", "$$Verification", "$$EmailTemplate", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public static FormulaError ForInt(int type) {\n    if (imap.ContainsKey(type))return imap[type];\n    if (bmap.ContainsKey((byte)type))return bmap[(byte)type];\n    throw new ArgumentException(\"Unknown error type: \" + type);\n}\n", "java": "public static FormulaError forInt(int type) throws IllegalArgumentException {\n    FormulaError err = imap.get(type);\n    if(err == null) err = bmap.get((byte)type);\n    if(err == null) throw new IllegalArgumentException(\"Unknown error type: \" + type);\n    return err;\n}\n", "cs_t": [["\u2581public", "\u2581static", "\u2581Formula", "$$Error", "\u2581", "$$For", "$$Int", "$$(int", "\u2581type", "$$)", "\u2581{"], ["\u2581if", "\u2581(", "$$im", "$$ap", "$$.", "$$Contain", "$$sKey", "$$(t", "$$ype", "$$))return", "\u2581i", "$$map", "$$[", "$$type", "$$]", "$$;"], ["\u2581if", "\u2581(b", "$$map", "$$.", "$$Contain", "$$sKey", "$$(", "$$(byte", "$$)", "$$type", "$$))return", "\u2581b", "$$map", "$$[", "$$(byte", "$$)", "$$type", "$$]", "$$;"], ["\u2581throw", "\u2581new", "\u2581ArgumentException(\"", "$$Unknown", "\u2581error", "\u2581type", "$$:", "\u2581\"", "\u2581+", "\u2581type", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581static", "\u2581Formula", "$$Error", "\u2581for", "$$Int", "$$(int", "\u2581type", "$$)", "\u2581throws", "\u2581IllegalArgumentException", "\u2581{"], ["\u2581Formula", "$$Error", "\u2581", "$$err", "\u2581=", "\u2581i", "$$map", "$$.get", "$$(t", "$$ype", "$$)", "$$;"], ["\u2581if(", "$$err", "\u2581==", "\u2581null)", "\u2581", "$$err", "\u2581=", "\u2581b", "$$map", "$$.get(", "$$(byte", "$$)", "$$type", "$$)", "$$;"], ["\u2581if(", "$$err", "\u2581==", "\u2581null)", "\u2581throw", "\u2581new", "\u2581IllegalArgumentException(\"Unknown", "\u2581error", "\u2581type", "$$:", "\u2581\"", "\u2581+", "\u2581type", "$$)", "$$;"], ["\u2581return", "\u2581", "$$err", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DeleteSubnetGroupResponse DeleteSubnetGroup(DeleteSubnetGroupRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DeleteSubnetGroupRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DeleteSubnetGroupResponseUnmarshaller.Instance;\n    return Invoke<DeleteSubnetGroupResponse>(request, options);\n}\n", "java": "public DeleteSubnetGroupResult deleteSubnetGroup(DeleteSubnetGroupRequest request) {\n    request = beforeClientExecution(request);\n    return executeDeleteSubnetGroup(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Delete", "$$SubnetGroup", "$$Response", "\u2581Delete", "$$SubnetGroup", "$$(Delete", "$$SubnetGroup", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Delete", "$$SubnetGroup", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Delete", "$$SubnetGroup", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Delete", "$$SubnetGroup", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Delete", "$$SubnetGroup", "$$Result", "\u2581delete", "$$SubnetGroup", "$$(Delete", "$$SubnetGroup", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDelete", "$$SubnetGroup", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override String ToString() {\n    StringBuilder sb = new StringBuilder(64);\n    sb.Append(GetType().Name).Append(\" [\");\n    sb.Append(_error.String);\n    sb.Append(\"]\");\n    return sb.ToString();\n}\n", "java": "public String toString() {\n    return getClass().getName() + \" [\" +_error.getString() +\"]\";\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581String", "\u2581ToString()", "\u2581{"], ["\u2581StringBuilder", "\u2581sb", "\u2581=", "\u2581new", "\u2581StringBuilder(", "$$64", "$$)", "$$;"], ["\u2581sb.Append(", "$$Get", "$$Type().", "$$Name)", "$$.Append(\"", "\u2581[", "$$\")", "$$;"], ["\u2581sb.Append(", "$$_", "$$error", "$$.", "$$String", "$$)", "$$;"], ["\u2581sb.Append(\"", "$$]", "$$\")", "$$;"], ["\u2581return", "\u2581sb", "$$.ToString()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581String", "\u2581toString()", "\u2581{"], ["\u2581return", "\u2581get", "$$Class().get", "$$Name()", "\u2581+", "\u2581\"", "\u2581[", "$$\"", "\u2581+", "$$_", "$$error", "$$.get", "$$String()", "\u2581+\"", "$$]", "$$\"", "$$;"], ["\u2581}"]]}, {"cs": "public override object ToObject() {\n    return Exists ? (object)Value : null;\n}\n", "java": "public Object toObject() {\n    assert exists || 0.0D == value;\n    return exists ? value : null;\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581object", "\u2581To", "$$Object", "$$()", "\u2581{"], ["\u2581return", "\u2581Ex", "$$ist", "$$s", "\u2581?", "\u2581(", "$$object", "$$)", "$$Value", "\u2581:", "\u2581null", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Object", "\u2581to", "$$Object", "$$()", "\u2581{"], ["\u2581assert", "\u2581ex", "$$ist", "$$s", "\u2581||", "\u25810", "$$.0", "$$D", "\u2581==", "\u2581value", "$$;"], ["\u2581return", "\u2581ex", "$$ist", "$$s", "\u2581?", "\u2581value", "\u2581:", "\u2581null", "$$;"], ["\u2581}"]]}, {"cs": "public override void Destroy() {\n    base.Destroy();\n    if (onDiskFile != null) {\n        try {\n            if (!onDiskFile.Delete()) {\n                onDiskFile.DeleteOnExit();\n            }\n        }\n        finally {\n            onDiskFile = null;\n        }\n    }\n}\n", "java": "public void destroy() {\n    super.destroy();\n    if (onDiskFile != null) {\n        try {\n            if (!onDiskFile.delete())onDiskFile.deleteOnExit();\n        }\n        finally {\n            onDiskFile = null;\n        }\n    }\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581void", "\u2581D", "$$est", "$$ro", "$$y", "$$()", "\u2581{"], ["\u2581base", "$$.D", "$$est", "$$ro", "$$y", "$$()", "$$;"], ["\u2581if", "\u2581(", "$$on", "$$Disk", "$$File", "\u2581!=", "\u2581null)", "\u2581{"], ["\u2581try", "\u2581{"], ["\u2581if", "\u2581(!", "$$on", "$$Disk", "$$File", "$$.", "$$Delete", "$$())", "\u2581{"], ["\u2581on", "$$Disk", "$$File", "$$.", "$$Delete", "$$On", "$$Ex", "$$it", "$$()", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581finally", "\u2581{"], ["\u2581on", "$$Disk", "$$File", "\u2581=", "\u2581null", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581d", "$$est", "$$ro", "$$y", "$$()", "\u2581{"], ["\u2581super.", "$$d", "$$est", "$$ro", "$$y", "$$()", "$$;"], ["\u2581if", "\u2581(", "$$on", "$$Disk", "$$File", "\u2581!=", "\u2581null)", "\u2581{"], ["\u2581try", "\u2581{"], ["\u2581if", "\u2581(!", "$$on", "$$Disk", "$$File", "$$.", "$$de", "$$lete", "$$())", "$$on", "$$Disk", "$$File", "$$.", "$$de", "$$lete", "$$On", "$$Ex", "$$it", "$$()", "$$;"], ["\u2581}"], ["\u2581finally", "\u2581{"], ["\u2581on", "$$Disk", "$$File", "\u2581=", "\u2581null", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public virtual DecreaseReplicationFactorResponse DecreaseReplicationFactor(DecreaseReplicationFactorRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DecreaseReplicationFactorRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DecreaseReplicationFactorResponseUnmarshaller.Instance;\n    return Invoke<DecreaseReplicationFactorResponse>(request, options);\n}\n", "java": "public DecreaseReplicationFactorResult decreaseReplicationFactor(DecreaseReplicationFactorRequest request) {\n    request = beforeClientExecution(request);\n    return executeDecreaseReplicationFactor(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581D", "$$ec", "$$re", "$$ase", "$$Replication", "$$Fa", "$$ctor", "$$Response", "\u2581D", "$$ec", "$$re", "$$ase", "$$Replication", "$$Fa", "$$ctor", "$$(", "$$Dec", "$$re", "$$ase", "$$Replication", "$$Fa", "$$ctor", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581D", "$$ec", "$$re", "$$ase", "$$Replication", "$$Fa", "$$ctor", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581D", "$$ec", "$$re", "$$ase", "$$Replication", "$$Fa", "$$ctor", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<", "$$Dec", "$$re", "$$ase", "$$Replication", "$$Fa", "$$ctor", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581D", "$$ec", "$$re", "$$ase", "$$Replication", "$$Fa", "$$ctor", "$$Result", "\u2581d", "$$ec", "$$re", "$$ase", "$$Replication", "$$Fa", "$$ctor", "$$(", "$$Dec", "$$re", "$$ase", "$$Replication", "$$Fa", "$$ctor", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581execute", "$$Dec", "$$re", "$$ase", "$$Replication", "$$Fa", "$$ctor", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public Counta() {\n    _predicate = defaultPredicate;\n}\n", "java": "public Counta() {\n    _predicate = defaultPredicate;\n}\n", "cs_t": [["\u2581public", "\u2581", "$$Count", "$$a", "$$()", "\u2581{"], ["\u2581_", "$$p", "$$red", "$$icate", "\u2581=", "\u2581default", "$$Predicate", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581", "$$Count", "$$a", "$$()", "\u2581{"], ["\u2581_", "$$p", "$$red", "$$icate", "\u2581=", "\u2581default", "$$Predicate", "$$;"], ["\u2581}"]]}, {"cs": "public IEvaluationWorkbook GetWorkbook() {\n    return _workbook;\n}\n", "java": "public EvaluationWorkbook getWorkbook() {\n    return _workbook;\n}\n", "cs_t": [["\u2581public", "\u2581I", "$$Evaluation", "$$Workbook", "\u2581Get", "$$Workbook", "$$()", "\u2581{"], ["\u2581return", "\u2581_", "$$workbook", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581", "$$Evaluation", "$$Workbook", "\u2581get", "$$Workbook", "$$()", "\u2581{"], ["\u2581return", "\u2581_", "$$workbook", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DescribeRouteTablesResponse DescribeRouteTables() {\n    return DescribeRouteTables(new DescribeRouteTablesRequest());\n}\n", "java": "public DescribeRouteTablesResult describeRouteTables() {\n    return describeRouteTables(new DescribeRouteTablesRequest());\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Describe", "$$Route", "$$Tables", "$$Response", "\u2581Describe", "$$Route", "$$Tables", "$$()", "\u2581{"], ["\u2581return", "\u2581Describe", "$$Route", "$$Tables", "$$(new", "\u2581Describe", "$$Route", "$$Tables", "$$Request", "$$())", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Describe", "$$Route", "$$Tables", "$$Result", "\u2581describe", "$$Route", "$$Tables", "$$()", "\u2581{"], ["\u2581return", "\u2581describe", "$$Route", "$$Tables", "$$(new", "\u2581Describe", "$$Route", "$$Tables", "$$Request", "$$())", "$$;"], ["\u2581}"]]}, {"cs": "public virtual CreateAssessmentTemplateResponse CreateAssessmentTemplate(CreateAssessmentTemplateRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = CreateAssessmentTemplateRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = CreateAssessmentTemplateResponseUnmarshaller.Instance;\n    return Invoke<CreateAssessmentTemplateResponse>(request, options);\n}\n", "java": "public CreateAssessmentTemplateResult createAssessmentTemplate(CreateAssessmentTemplateRequest request) {\n    request = beforeClientExecution(request);\n    return executeCreateAssessmentTemplate(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Create", "$$Assessment", "$$Template", "$$Response", "\u2581Create", "$$Assessment", "$$Template", "$$(Create", "$$Assessment", "$$Template", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Create", "$$Assessment", "$$Template", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Create", "$$Assessment", "$$Template", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Create", "$$Assessment", "$$Template", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Create", "$$Assessment", "$$Template", "$$Result", "\u2581create", "$$Assessment", "$$Template", "$$(Create", "$$Assessment", "$$Template", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeCreate", "$$Assessment", "$$Template", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DeleteProjectResponse DeleteProject(DeleteProjectRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DeleteProjectRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DeleteProjectResponseUnmarshaller.Instance;\n    return Invoke<DeleteProjectResponse>(request, options);\n}\n", "java": "public DeleteProjectResult deleteProject(DeleteProjectRequest request) {\n    request = beforeClientExecution(request);\n    return executeDeleteProject(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Delete", "$$Project", "$$Response", "\u2581Delete", "$$Project", "$$(Delete", "$$Project", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Delete", "$$Project", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Delete", "$$Project", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Delete", "$$Project", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Delete", "$$Project", "$$Result", "\u2581delete", "$$Project", "$$(Delete", "$$Project", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDelete", "$$Project", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public DeleteUserPolicyRequest(string userName, string policyName) {\n    _userName = userName;\n    _policyName = policyName;\n}\n", "java": "public DeleteUserPolicyRequest(String userName, String policyName) {\n    setUserName(userName);\n    setPolicyName(policyName);\n}\n", "cs_t": [["\u2581public", "\u2581Delete", "$$User", "$$Policy", "$$Request(string", "\u2581user", "$$Name,", "\u2581string", "\u2581po", "$$licy", "$$Name)", "\u2581{"], ["\u2581_", "$$user", "$$Name", "\u2581=", "\u2581user", "$$Name", "$$;"], ["\u2581_", "$$po", "$$licy", "$$Name", "\u2581=", "\u2581po", "$$licy", "$$Name", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Delete", "$$User", "$$Policy", "$$Request(String", "\u2581user", "$$Name,", "\u2581String", "\u2581po", "$$licy", "$$Name)", "\u2581{"], ["\u2581set", "$$User", "$$Name(", "$$user", "$$Name)", "$$;"], ["\u2581set", "$$Policy", "$$Name(", "$$po", "$$licy", "$$Name)", "$$;"], ["\u2581}"]]}, {"cs": "public override object Clone() {\n    return new CompressingTermVectorsReader(this);\n}\n", "java": "public TermVectorsReader clone() {\n    return new CompressingTermVectorsReader(this);\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581object", "\u2581Clone()", "\u2581{"], ["\u2581return", "\u2581new", "\u2581Comp", "$$ress", "$$ing", "$$Term", "$$Vector", "$$s", "$$Read", "$$er(", "$$this", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Term", "$$Vector", "$$s", "$$Reader", "\u2581clone()", "\u2581{"], ["\u2581return", "\u2581new", "\u2581Comp", "$$ress", "$$ing", "$$Term", "$$Vector", "$$s", "$$Read", "$$er(", "$$this", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override void Close() {\n    if (sock != null) {\n        try {\n            sch.ReleaseSession(sock);\n        }\n        finally {\n            sock = null;\n        }\n    }\n}\n", "java": "public void close() {\n    if (sock != null) {\n        try {\n            sch.releaseSession(sock);\n        }\n        finally {\n            sock = null;\n        }\n    }\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581void", "\u2581C", "$$lose", "$$()", "\u2581{"], ["\u2581if", "\u2581(s", "$$o", "$$ck", "\u2581!=", "\u2581null)", "\u2581{"], ["\u2581try", "\u2581{"], ["\u2581s", "$$ch", "$$.", "$$Re", "$$lease", "$$Session", "$$(s", "$$o", "$$ck", "$$)", "$$;"], ["\u2581}"], ["\u2581finally", "\u2581{"], ["\u2581s", "$$o", "$$ck", "\u2581=", "\u2581null", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581c", "$$lose", "$$()", "\u2581{"], ["\u2581if", "\u2581(s", "$$o", "$$ck", "\u2581!=", "\u2581null)", "\u2581{"], ["\u2581try", "\u2581{"], ["\u2581s", "$$ch", "$$.re", "$$lease", "$$Session", "$$(s", "$$o", "$$ck", "$$)", "$$;"], ["\u2581}"], ["\u2581finally", "\u2581{"], ["\u2581s", "$$o", "$$ck", "\u2581=", "\u2581null", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public override java.nio.LongBuffer put(long c) {\n    throw new java.nio.ReadOnlyBufferException();\n}\n", "java": "public LongBuffer put(long c) {\n    throw new ReadOnlyBufferException();\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581java.nio.", "$$Long", "$$Buffer", "\u2581put", "$$(long", "\u2581c)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581java.nio.Read", "$$OnlyBuffer", "$$Exception", "$$()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Long", "$$Buffer", "\u2581put", "$$(long", "\u2581c)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581Read", "$$OnlyBuffer", "$$Exception", "$$()", "$$;"], ["\u2581}"]]}, {"cs": "public int Serialize(int offset, byte[] data) {\n    int pos = 0;\n    SSTRecord sst = null;\n    int sstPos = 0;\n    bool wroteBoundSheets = false;\n    for (int k = 0; k < records.Count; k++) {\n        Record record = records[k];\n        if (record.Sid != RecalcIdRecord.sid || ((RecalcIdRecord)record).IsNeeded) {\n            int len = 0;\n            if (record is SSTRecord) {\n                sst = (SSTRecord)record;\n                sstPos = pos;\n            }\n            if (record.Sid == ExtSSTRecord.sid && sst != null) {\n                record = sst.CreateExtSSTRecord(sstPos + offset);\n            }\n            if (record is BoundSheetRecord) {\n                if (!wroteBoundSheets) {\n                    for (int i = 0; i < boundsheets.Count; i++) {\n                        len += ((BoundSheetRecord)boundsheets[i]).Serialize(pos + offset + len, data);\n                    }\n                    wroteBoundSheets = true;\n                }\n            }\n            else {\n                len = record.Serialize(pos + offset, data);\n            }\n            pos += len;\n        }\n    }\n    return pos;\n}\n", "java": "public int serialize( int offset, byte[] data ) {\n    LOG.log( DEBUG, \"Serializing Workbook with offsets\" );\n    int pos = 0;\n    SSTRecord lSST = null;\n    int sstPos = 0;\n    boolean wroteBoundSheets = false;\n    for ( org.apache.poi.hssf.record.Record record : records.getRecords() ) {\n        int len = 0;\n        if (record instanceof SSTRecord) {\n            lSST = (SSTRecord)record;\n            sstPos = pos;\n        }\n        if (record.getSid() == ExtSSTRecord.sid && lSST != null) {\n            record = lSST.createExtSSTRecord(sstPos + offset);\n        }\n        if (record instanceof BoundSheetRecord) {\n            if(!wroteBoundSheets) {\n                for (BoundSheetRecord bsr : boundsheets) {\n                    len += bsr.serialize(pos+offset+len, data);\n                }\n                wroteBoundSheets = true;\n            }\n        }\n        else {\n            len = record.serialize( pos + offset, data );\n        }\n        pos += len;\n    }\n    LOG.log( DEBUG, \"Exiting serialize workbook\" );\n    return pos;\n}\n", "cs_t": [["\u2581public", "\u2581int", "\u2581Serialize", "$$(int", "\u2581offset,", "\u2581byte[]", "\u2581data", "$$)", "\u2581{"], ["\u2581int", "\u2581pos", "\u2581=", "\u25810;"], ["\u2581S", "$$ST", "$$Record", "\u2581s", "$$st", "\u2581=", "\u2581null", "$$;"], ["\u2581int", "\u2581s", "$$st", "$$Pos", "\u2581=", "\u25810;"], ["\u2581bool", "\u2581w", "$$ro", "$$te", "$$Bound", "$$Sheet", "$$s", "\u2581=", "\u2581false", "$$;"], ["\u2581for", "\u2581(int", "\u2581k", "\u2581=", "\u25810;", "\u2581k", "\u2581<", "\u2581record", "$$s.Count", "$$;", "\u2581k", "$$++)", "\u2581{"], ["\u2581Record", "\u2581record", "\u2581=", "\u2581record", "$$s[", "$$k", "$$]", "$$;"], ["\u2581if", "\u2581(re", "$$cord", "$$.S", "$$id", "\u2581!=", "\u2581", "$$Rec", "$$al", "$$c", "$$Id", "$$Record.sid", "\u2581||", "\u2581((", "$$Rec", "$$al", "$$c", "$$Id", "$$Record)", "$$record", "$$).", "$$Is", "$$N", "$$ee", "$$ded", "$$)", "\u2581{"], ["\u2581int", "\u2581len", "\u2581=", "\u25810;"], ["\u2581if", "\u2581(re", "$$cord", "\u2581is", "\u2581S", "$$ST", "$$Record)", "\u2581{"], ["\u2581s", "$$st", "\u2581=", "\u2581(", "$$SS", "$$T", "$$Record)", "$$record", "$$;"], ["\u2581s", "$$st", "$$Pos", "\u2581=", "\u2581pos", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(re", "$$cord", "$$.S", "$$id", "\u2581==", "\u2581Ex", "$$t", "$$SS", "$$T", "$$Record.sid", "\u2581&&", "\u2581s", "$$st", "\u2581!=", "\u2581null)", "\u2581{"], ["\u2581record", "\u2581=", "\u2581s", "$$st", "$$.Create", "$$Ex", "$$t", "$$SS", "$$T", "$$Record(", "$$s", "$$st", "$$Pos", "\u2581+", "\u2581offset", "$$)", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(re", "$$cord", "\u2581is", "\u2581B", "$$ound", "$$Sheet", "$$Record)", "\u2581{"], ["\u2581if", "\u2581(!", "$$w", "$$ro", "$$te", "$$Bound", "$$Sheet", "$$s)", "\u2581{"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810;", "\u2581i", "\u2581<", "\u2581bo", "$$und", "$$sheet", "$$s.Count", "$$;", "\u2581i++)", "\u2581{"], ["\u2581len", "\u2581+=", "\u2581((", "$$Bound", "$$Sheet", "$$Record)", "$$bo", "$$und", "$$sheet", "$$s[i]", "$$).", "$$S", "$$erialize", "$$(", "$$pos", "\u2581+", "\u2581offset", "\u2581+", "\u2581len", "$$,", "\u2581data", "$$)", "$$;"], ["\u2581}"], ["\u2581w", "$$ro", "$$te", "$$Bound", "$$Sheet", "$$s", "\u2581=", "\u2581true", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581len", "\u2581=", "\u2581record", "$$.S", "$$erialize", "$$(", "$$pos", "\u2581+", "\u2581offset,", "\u2581data", "$$)", "$$;"], ["\u2581}"], ["\u2581pos", "\u2581+=", "\u2581len", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581return", "\u2581pos", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581int", "\u2581serialize", "$$(", "\u2581int", "\u2581offset,", "\u2581byte[]", "\u2581data", "\u2581)", "\u2581{"], ["\u2581L", "$$O", "$$G", "$$.", "$$log", "$$(", "\u2581DE", "$$B", "$$U", "$$G", "$$,", "\u2581\"", "$$S", "$$erial", "$$iz", "$$ing", "\u2581", "$$Workbook", "\u2581w", "$$ith", "\u2581offset", "$$s", "$$\"", "\u2581)", "$$;"], ["\u2581int", "\u2581pos", "\u2581=", "\u25810;"], ["\u2581S", "$$ST", "$$Record", "\u2581l", "$$SS", "$$T", "\u2581=", "\u2581null", "$$;"], ["\u2581int", "\u2581s", "$$st", "$$Pos", "\u2581=", "\u25810;"], ["\u2581boolean", "\u2581w", "$$ro", "$$te", "$$Bound", "$$Sheet", "$$s", "\u2581=", "\u2581false", "$$;"], ["\u2581for", "\u2581(", "\u2581or", "$$g", "$$.ap", "$$ache", "$$.", "$$po", "$$i.", "$$h", "$$ss", "$$f", "$$.re", "$$cord", "$$.", "$$Record", "\u2581record", "\u2581:", "\u2581record", "$$s.get", "$$Record", "$$s()", "\u2581)", "\u2581{"], ["\u2581int", "\u2581len", "\u2581=", "\u25810;"], ["\u2581if", "\u2581(re", "$$cord", "\u2581instanceof", "\u2581S", "$$ST", "$$Record)", "\u2581{"], ["\u2581l", "$$SS", "$$T", "\u2581=", "\u2581(", "$$SS", "$$T", "$$Record)", "$$record", "$$;"], ["\u2581s", "$$st", "$$Pos", "\u2581=", "\u2581pos", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(re", "$$cord", "$$.get", "$$S", "$$id", "$$()", "\u2581==", "\u2581Ex", "$$t", "$$SS", "$$T", "$$Record.sid", "\u2581&&", "\u2581l", "$$SS", "$$T", "\u2581!=", "\u2581null)", "\u2581{"], ["\u2581record", "\u2581=", "\u2581l", "$$SS", "$$T", "$$.create", "$$Ex", "$$t", "$$SS", "$$T", "$$Record(", "$$s", "$$st", "$$Pos", "\u2581+", "\u2581offset", "$$)", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(re", "$$cord", "\u2581instanceof", "\u2581B", "$$ound", "$$Sheet", "$$Record)", "\u2581{"], ["\u2581if(", "$$!", "$$w", "$$ro", "$$te", "$$Bound", "$$Sheet", "$$s)", "\u2581{"], ["\u2581for", "\u2581(", "$$Bound", "$$Sheet", "$$Record", "\u2581b", "$$s", "$$r", "\u2581:", "\u2581bo", "$$und", "$$sheet", "$$s)", "\u2581{"], ["\u2581len", "\u2581+=", "\u2581b", "$$s", "$$r", "$$.", "$$ser", "$$ial", "$$ize", "$$(", "$$pos", "$$+", "$$offset", "$$+", "$$len", "$$,", "\u2581data", "$$)", "$$;"], ["\u2581}"], ["\u2581w", "$$ro", "$$te", "$$Bound", "$$Sheet", "$$s", "\u2581=", "\u2581true", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581len", "\u2581=", "\u2581record", "$$.", "$$ser", "$$ial", "$$ize", "$$(", "\u2581pos", "\u2581+", "\u2581offset,", "\u2581data", "\u2581)", "$$;"], ["\u2581}"], ["\u2581pos", "\u2581+=", "\u2581len", "$$;"], ["\u2581}"], ["\u2581L", "$$O", "$$G", "$$.", "$$log", "$$(", "\u2581DE", "$$B", "$$U", "$$G", "$$,", "\u2581\"", "$$Ex", "$$it", "$$ing", "\u2581serialize", "\u2581work", "$$book", "$$\"", "\u2581)", "$$;"], ["\u2581return", "\u2581pos", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DescribeClusterSecurityGroupsResponse DescribeClusterSecurityGroups() {\n    return DescribeClusterSecurityGroups(new DescribeClusterSecurityGroupsRequest());\n}\n", "java": "public DescribeClusterSecurityGroupsResult describeClusterSecurityGroups() {\n    return describeClusterSecurityGroups(new DescribeClusterSecurityGroupsRequest());\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581DescribeCluster", "$$SecurityGroup", "$$sResponse", "\u2581DescribeCluster", "$$SecurityGroup", "$$s()", "\u2581{"], ["\u2581return", "\u2581DescribeCluster", "$$SecurityGroup", "$$s(new", "\u2581DescribeCluster", "$$SecurityGroup", "$$sRequest", "$$())", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581DescribeCluster", "$$SecurityGroup", "$$sResult", "\u2581describe", "$$Cluster", "$$SecurityGroup", "$$s()", "\u2581{"], ["\u2581return", "\u2581describe", "$$Cluster", "$$SecurityGroup", "$$s(new", "\u2581DescribeCluster", "$$SecurityGroup", "$$sRequest", "$$())", "$$;"], ["\u2581}"]]}, {"cs": "public virtual Explanation Explain(int doc, Explanation freq) {\n    Explanation result = new Explanation(Score(doc, freq.Value), \"score(doc=\" + doc + \",freq=\" + freq.Value + \"), with freq of:\");\n    result.AddDetail(freq);\n    return result;\n}\n", "java": "public Explanation explain(Explanation freq, long norm) {\n    return Explanation.match(score(freq.getValue().floatValue(), norm),\"score(freq=\" + freq.getValue() +\"), with freq of:\",Collections.singleton(freq));\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Exp", "$$lanation", "\u2581Exp", "$$la", "$$in", "$$(int", "\u2581doc", "$$,", "\u2581Exp", "$$lanation", "\u2581f", "$$req", "$$)", "\u2581{"], ["\u2581Exp", "$$lanation", "\u2581result", "\u2581=", "\u2581new", "\u2581Exp", "$$lanation", "$$(", "$$Score", "$$(d", "$$oc", "$$,", "\u2581f", "$$req", "$$.", "$$Value", "$$),", "\u2581\"", "$$sc", "$$ore", "$$(d", "$$oc", "$$=\"", "\u2581+", "\u2581doc", "\u2581+", "\u2581\",", "$$f", "$$req", "$$=\"", "\u2581+", "\u2581f", "$$req", "$$.", "$$Value", "\u2581+", "\u2581\")", "$$,", "\u2581w", "$$ith", "\u2581f", "$$req", "\u2581of", "$$:", "$$\")", "$$;"], ["\u2581result", "$$.Add", "$$Detail", "$$(f", "$$req", "$$)", "$$;"], ["\u2581return", "\u2581result", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Exp", "$$lanation", "\u2581exp", "$$la", "$$in", "$$(", "$$Exp", "$$lanation", "\u2581f", "$$req", "$$,", "\u2581long", "\u2581n", "$$orm", "$$)", "\u2581{"], ["\u2581return", "\u2581Exp", "$$lanation", "$$.", "$$match", "$$(", "$$sc", "$$ore", "$$(f", "$$req", "$$.get", "$$Value", "$$().", "$$f", "$$loat", "$$Value", "$$(),", "\u2581n", "$$orm", "$$),", "$$\"", "$$sc", "$$ore", "$$(f", "$$req", "$$=\"", "\u2581+", "\u2581f", "$$req", "$$.get", "$$Value", "$$()", "\u2581+", "$$\")", "$$,", "\u2581w", "$$ith", "\u2581f", "$$req", "\u2581of", "$$:", "$$\",", "$$Collections.", "$$sing", "$$l", "$$et", "$$on", "$$(f", "$$req", "$$))", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DisassociatePhoneNumberFromUserResponse DisassociatePhoneNumberFromUser(DisassociatePhoneNumberFromUserRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DisassociatePhoneNumberFromUserRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DisassociatePhoneNumberFromUserResponseUnmarshaller.Instance;\n    return Invoke<DisassociatePhoneNumberFromUserResponse>(request, options);\n}\n", "java": "public DisassociatePhoneNumberFromUserResult disassociatePhoneNumberFromUser(DisassociatePhoneNumberFromUserRequest request) {\n    request = beforeClientExecution(request);\n    return executeDisassociatePhoneNumberFromUser(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Disassociate", "$$PhoneNumber", "$$From", "$$User", "$$Response", "\u2581Disassociate", "$$PhoneNumber", "$$From", "$$User", "$$(", "$$Disassociate", "$$PhoneNumber", "$$From", "$$User", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Disassociate", "$$PhoneNumber", "$$From", "$$User", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Disassociate", "$$PhoneNumber", "$$From", "$$User", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<", "$$Disassociate", "$$PhoneNumber", "$$From", "$$User", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Disassociate", "$$PhoneNumber", "$$From", "$$User", "$$Result", "\u2581dis", "$$associate", "$$PhoneNumber", "$$From", "$$User", "$$(", "$$Disassociate", "$$PhoneNumber", "$$From", "$$User", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581execute", "$$Disassociate", "$$PhoneNumber", "$$From", "$$User", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual bool Has(AnyObjectId objectId, int typeHint) {\n    try {\n        Open(objectId, typeHint);\n        return true;\n    }\n    catch (MissingObjectException) {\n        return false;\n    }\n}\n", "java": "public boolean has(AnyObjectId objectId, int typeHint) throws IOException {\n    try {\n        open(objectId, typeHint);\n        return true;\n    }\n    catch (MissingObjectException notFound) {\n        return false;\n    }\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581bool", "\u2581H", "$$a", "$$s(", "$$AnyObjectId", "\u2581object", "$$Id,", "\u2581int", "\u2581type", "$$H", "$$int)", "\u2581{"], ["\u2581try", "\u2581{"], ["\u2581", "$$Open", "$$(object", "$$Id,", "\u2581type", "$$H", "$$int)", "$$;"], ["\u2581return", "\u2581true", "$$;"], ["\u2581}"], ["\u2581catch", "\u2581(", "$$M", "$$issing", "$$Object", "$$Exception", "$$)", "\u2581{"], ["\u2581return", "\u2581false", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581boolean", "\u2581h", "$$a", "$$s(", "$$AnyObjectId", "\u2581object", "$$Id,", "\u2581int", "\u2581type", "$$H", "$$int)", "\u2581throws", "\u2581IOException", "\u2581{"], ["\u2581try", "\u2581{"], ["\u2581o", "$$pen", "$$(object", "$$Id,", "\u2581type", "$$H", "$$int)", "$$;"], ["\u2581return", "\u2581true", "$$;"], ["\u2581}"], ["\u2581catch", "\u2581(", "$$M", "$$issing", "$$Object", "$$Exception", "\u2581not", "$$Found", "$$)", "\u2581{"], ["\u2581return", "\u2581false", "$$;"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public override String ToString() {\n    StringBuilder buffer = new StringBuilder();\n    buffer.Append(\"[ATTACHEDLABEL]\\n\");\n    buffer.Append(\"    .formatFlags          = \").Append(\"0x\").Append(HexDump.ToHex(FormatFlags)).Append(\" (\").Append(FormatFlags).Append(\" )\");\n    buffer.Append(Environment.NewLine);\n    buffer.Append(\"         .showActual               = \").Append(IsShowActual).Append('\\n');\n    buffer.Append(\"         .showPercent              = \").Append(IsShowPercent).Append('\\n');\n    buffer.Append(\"         .labelAsPercentage        = \").Append(IsLabelAsPercentage).Append('\\n');\n    buffer.Append(\"         .smoothedLine             = \").Append(IsSmoothedLine).Append('\\n');\n    buffer.Append(\"         .showLabel                = \").Append(IsShowLabel).Append('\\n');\n    buffer.Append(\"         .showBubbleSizes          = \").Append(IsShowBubbleSizes).Append('\\n');\n    buffer.Append(\"[/ATTACHEDLABEL]\\n\");\n    return buffer.ToString();\n}\n", "java": "public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"[ATTACHEDLABEL]\\n\");\n    buffer.append(\"    .formatFlags          = \").append(\"0x\").append(HexDump.toHex(  getFormatFlags ())).append(\" (\").append( getFormatFlags() ).append(\" )\");\n    buffer.append(System.getProperty(\"line.separator\"));\n    buffer.append(\"         .showActual               = \").append(isShowActual()).append('\\n');\n    buffer.append(\"         .showPercent              = \").append(isShowPercent()).append('\\n');\n    buffer.append(\"         .labelAsPercentage        = \").append(isLabelAsPercentage()).append('\\n');\n    buffer.append(\"         .smoothedLine             = \").append(isSmoothedLine()).append('\\n');\n    buffer.append(\"         .showLabel                = \").append(isShowLabel()).append('\\n');\n    buffer.append(\"         .showBubbleSizes          = \").append(isShowBubbleSizes()).append('\\n');\n    buffer.append(\"[/ATTACHEDLABEL]\\n\");\n    return buffer.toString();\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581String", "\u2581ToString()", "\u2581{"], ["\u2581StringBuilder", "\u2581buffer", "\u2581=", "\u2581new", "\u2581StringBuilder", "$$()", "$$;"], ["\u2581buffer.Append(\"[", "$$AT", "$$TA", "$$CH", "$$E", "$$D", "$$LA", "$$B", "$$E", "$$L", "$$]", "$$\\n", "$$\")", "$$;"], ["\u2581buffer.Append(\"", "\u2581", "\u2581", "\u2581", "\u2581.", "$$format", "$$Flag", "$$s", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581=", "\u2581\")", "$$.Append(\"", "$$0x", "$$\").Append(", "$$HexDump", "$$.To", "$$Hex", "$$(", "$$Format", "$$Flag", "$$s", "$$))", "$$.Append(\"", "\u2581(", "$$\").Append(", "$$Format", "$$Flag", "$$s)", "$$.Append(\"", "\u2581)", "$$\")", "$$;"], ["\u2581buffer.Append(", "$$Environment", "$$.N", "$$ew", "$$Line", "$$)", "$$;"], ["\u2581buffer.Append(\"", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581.", "$$sh", "$$ow", "$$Ac", "$$tual", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581=", "\u2581\").Append(", "$$Is", "$$Sh", "$$ow", "$$Ac", "$$tual", "$$)", "$$.Append('", "$$\\n", "$$')", "$$;"], ["\u2581buffer.Append(\"", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581.", "$$sh", "$$ow", "$$Per", "$$c", "$$ent", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581=", "\u2581\").Append(", "$$Is", "$$Sh", "$$ow", "$$Per", "$$c", "$$ent", "$$)", "$$.Append('", "$$\\n", "$$')", "$$;"], ["\u2581buffer.Append(\"", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581.", "$$l", "$$abel", "$$As", "$$Per", "$$c", "$$ent", "$$age", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581=", "\u2581\").Append(", "$$Is", "$$Label", "$$As", "$$Per", "$$c", "$$ent", "$$age", "$$)", "$$.Append('", "$$\\n", "$$')", "$$;"], ["\u2581buffer.Append(\"", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581.", "$$s", "$$mo", "$$oth", "$$ed", "$$Line", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581=", "\u2581\").Append(", "$$Is", "$$S", "$$mo", "$$oth", "$$ed", "$$Line", "$$)", "$$.Append('", "$$\\n", "$$')", "$$;"], ["\u2581buffer.Append(\"", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581.", "$$sh", "$$ow", "$$Label", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581=", "\u2581\").Append(", "$$Is", "$$Sh", "$$ow", "$$Label", "$$)", "$$.Append('", "$$\\n", "$$')", "$$;"], ["\u2581buffer.Append(\"", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581.", "$$sh", "$$ow", "$$B", "$$ub", "$$b", "$$le", "$$S", "$$iz", "$$es", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581=", "\u2581\").Append(", "$$Is", "$$Sh", "$$ow", "$$B", "$$ub", "$$b", "$$le", "$$S", "$$iz", "$$es", "$$)", "$$.Append('", "$$\\n", "$$')", "$$;"], ["\u2581buffer.Append(\"[/", "$$AT", "$$TA", "$$CH", "$$E", "$$D", "$$LA", "$$B", "$$E", "$$L", "$$]", "$$\\n", "$$\")", "$$;"], ["\u2581return", "\u2581buffer", "$$.ToString()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581String", "\u2581toString()", "\u2581{"], ["\u2581StringBuilder", "\u2581buffer", "\u2581=", "\u2581new", "\u2581StringBuilder", "$$()", "$$;"], ["\u2581buffer.append(\"[", "$$AT", "$$TA", "$$CH", "$$E", "$$D", "$$LA", "$$B", "$$E", "$$L", "$$]", "$$\\n", "$$\")", "$$;"], ["\u2581buffer.append(\"", "\u2581", "\u2581", "\u2581", "\u2581.", "$$format", "$$Flag", "$$s", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581=", "\u2581\")", "$$.append(\"", "$$0x", "$$\").append(", "$$HexDump", "$$.to", "$$Hex", "$$(", "\u2581", "\u2581get", "$$Format", "$$Flag", "$$s", "\u2581(", "$$))", "$$)", "$$.append(\"", "\u2581(", "$$\").append(", "\u2581get", "$$Format", "$$Flag", "$$s()", "\u2581)", "$$.append(\"", "\u2581)", "$$\")", "$$;"], ["\u2581buffer.append(", "$$System", "$$.get", "$$Property", "$$(\"", "$$line", "$$.se", "$$parator", "$$\"", "$$))", "$$;"], ["\u2581buffer.append(\"", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581.", "$$sh", "$$ow", "$$Ac", "$$tual", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581=", "\u2581\").append(", "$$is", "$$Sh", "$$ow", "$$Ac", "$$tual", "$$())", "$$.append('", "$$\\n", "$$')", "$$;"], ["\u2581buffer.append(\"", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581.", "$$sh", "$$ow", "$$Per", "$$c", "$$ent", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581=", "\u2581\").append(", "$$is", "$$Sh", "$$ow", "$$Per", "$$c", "$$ent", "$$())", "$$.append('", "$$\\n", "$$')", "$$;"], ["\u2581buffer.append(\"", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581.", "$$l", "$$abel", "$$As", "$$Per", "$$c", "$$ent", "$$age", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581=", "\u2581\").append(", "$$is", "$$Label", "$$As", "$$Per", "$$c", "$$ent", "$$age", "$$())", "$$.append('", "$$\\n", "$$')", "$$;"], ["\u2581buffer.append(\"", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581.", "$$s", "$$mo", "$$oth", "$$ed", "$$Line", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581=", "\u2581\").append(", "$$is", "$$S", "$$mo", "$$oth", "$$ed", "$$Line", "$$())", "$$.append('", "$$\\n", "$$')", "$$;"], ["\u2581buffer.append(\"", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581.", "$$sh", "$$ow", "$$Label", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581=", "\u2581\").append(", "$$is", "$$Sh", "$$ow", "$$Label", "$$())", "$$.append('", "$$\\n", "$$')", "$$;"], ["\u2581buffer.append(\"", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581.", "$$sh", "$$ow", "$$B", "$$ub", "$$b", "$$le", "$$S", "$$iz", "$$es", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581=", "\u2581\").append(", "$$is", "$$Sh", "$$ow", "$$B", "$$ub", "$$b", "$$le", "$$S", "$$iz", "$$es", "$$())", "$$.append('", "$$\\n", "$$')", "$$;"], ["\u2581buffer.append(\"[/", "$$AT", "$$TA", "$$CH", "$$E", "$$D", "$$LA", "$$B", "$$E", "$$L", "$$]", "$$\\n", "$$\")", "$$;"], ["\u2581return", "\u2581buffer", "$$.toString()", "$$;"], ["\u2581}"]]}, {"cs": "public override string ToString(string field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.Append(\"spanOr([\");\n    bool first = true;\n    foreach (SpanQuery clause in clauses) {\n        if (!first) buffer.Append(\", \");\n        buffer.Append(clause.ToString(field));\n        first = false;\n    }\n    buffer.Append(\"])\");\n    buffer.Append(ToStringUtils.Boost(Boost));\n    return buffer.ToString();\n}\n", "java": "public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"spanOr([\");\n    Iterator<SpanQuery> i = clauses.iterator();\n    while (i.hasNext()) {\n        SpanQuery clause = i.next();\n        buffer.append(clause.toString(field));\n        if (i.hasNext()) {\n            buffer.append(\", \");\n        }\n    }\n    buffer.append(\"])\");\n    return buffer.toString();\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581string", "\u2581To", "$$String", "$$(string", "\u2581field)", "\u2581{"], ["\u2581StringBuilder", "\u2581buffer", "\u2581=", "\u2581new", "\u2581StringBuilder", "$$()", "$$;"], ["\u2581buffer.Append(\"", "$$sp", "$$an", "$$Or", "$$(", "$$[", "$$\")", "$$;"], ["\u2581bool", "\u2581first", "\u2581=", "\u2581true", "$$;"], ["\u2581foreach", "\u2581(", "$$Span", "$$Query", "\u2581c", "$$la", "$$use", "\u2581in", "\u2581c", "$$lauses", "$$)", "\u2581{"], ["\u2581if", "\u2581(!", "$$first", "$$)", "\u2581buffer.Append(\"", "$$,", "\u2581\")", "$$;"], ["\u2581buffer.Append(", "$$c", "$$la", "$$use", "$$.To", "$$String(", "$$field", "$$))", "$$;"], ["\u2581first", "\u2581=", "\u2581false", "$$;"], ["\u2581}"], ["\u2581buffer.Append(\"", "$$]", "$$)", "$$\")", "$$;"], ["\u2581buffer.Append(", "$$To", "$$String", "$$Utils.", "$$Boost", "$$(", "$$Boost", "$$))", "$$;"], ["\u2581return", "\u2581buffer", "$$.ToString()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581String", "\u2581to", "$$String(String", "\u2581field)", "\u2581{"], ["\u2581StringBuilder", "\u2581buffer", "\u2581=", "\u2581new", "\u2581StringBuilder", "$$()", "$$;"], ["\u2581buffer.append(\"", "$$sp", "$$an", "$$Or", "$$(", "$$[", "$$\")", "$$;"], ["\u2581Iterator<", "$$Span", "$$Query", "$$>", "\u2581i", "\u2581=", "\u2581c", "$$lauses", "$$.", "$$iterator", "$$()", "$$;"], ["\u2581while", "\u2581(i", "$$.has", "$$Next())", "\u2581{"], ["\u2581Span", "$$Query", "\u2581c", "$$la", "$$use", "\u2581=", "\u2581i", "$$.next", "$$()", "$$;"], ["\u2581buffer.append(", "$$c", "$$la", "$$use", "$$.to", "$$String(", "$$field", "$$))", "$$;"], ["\u2581if", "\u2581(i", "$$.has", "$$Next())", "\u2581{"], ["\u2581buffer.append(\"", "$$,", "\u2581\")", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581buffer.append(\"", "$$]", "$$)", "$$\")", "$$;"], ["\u2581return", "\u2581buffer", "$$.toString()", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DisableInsightRulesResponse DisableInsightRules(DisableInsightRulesRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DisableInsightRulesRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DisableInsightRulesResponseUnmarshaller.Instance;\n    return Invoke<DisableInsightRulesResponse>(request, options);\n}\n", "java": "public DisableInsightRulesResult disableInsightRules(DisableInsightRulesRequest request) {\n    request = beforeClientExecution(request);\n    return executeDisableInsightRules(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Disable", "$$Insight", "$$Rules", "$$Response", "\u2581Disable", "$$Insight", "$$Rules", "$$(", "$$Disable", "$$Insight", "$$Rules", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Disable", "$$Insight", "$$Rules", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Disable", "$$Insight", "$$Rules", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<", "$$Disable", "$$Insight", "$$Rules", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Disable", "$$Insight", "$$Rules", "$$Result", "\u2581dis", "$$able", "$$Insight", "$$Rules", "$$(", "$$Disable", "$$Insight", "$$Rules", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581execute", "$$Disable", "$$Insight", "$$Rules", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public BootstrapActionConfig NewRunIf(string condition, BootstrapActionConfig config) {\n    List<string> args = config.ScriptBootstrapAction.Args;\n    args.Add(condition);\n    args.Add(config.ScriptBootstrapAction.Path);\n    return new BootstrapActionConfig {Name = \"Run If, \" + config.Name,ScriptBootstrapAction = new ScriptBootstrapActionConfig{Path = \"s3:Args = args}};}\n", "java": "public BootstrapActionConfig newRunIf(String condition, BootstrapActionConfig config) {\n    List<String> args = config.getScriptBootstrapAction().getArgs();\n    args.add(0, condition);\n    args.add(1, config.getScriptBootstrapAction().getPath());\n    return new BootstrapActionConfig().withName(\"Run If, \" + config.getName()).withScriptBootstrapAction(new ScriptBootstrapActionConfig().withPath(\"s3:.withArgs(args));}\n", "cs_t": [["\u2581public", "\u2581Bo", "$$ot", "$$st", "$$rap", "$$Action", "$$Config", "\u2581N", "$$ew", "$$Run", "$$If", "$$(string", "\u2581con", "$$d", "$$ition", "$$,", "\u2581Bo", "$$ot", "$$st", "$$rap", "$$Action", "$$Config", "\u2581config", "$$)", "\u2581{"], ["\u2581List<", "$$string>", "\u2581arg", "$$s", "\u2581=", "\u2581config", "$$.", "$$Script", "$$Bo", "$$ot", "$$st", "$$rap", "$$Action", "$$.Ar", "$$g", "$$s;"], ["\u2581arg", "$$s.Add(", "$$cond", "$$ition", "$$)", "$$;"], ["\u2581arg", "$$s.Add(", "$$config", "$$.", "$$Script", "$$Bo", "$$ot", "$$st", "$$rap", "$$Action", "$$.", "$$Path", "$$)", "$$;"], ["\u2581return", "\u2581new", "\u2581Bo", "$$ot", "$$st", "$$rap", "$$Action", "$$Config", "\u2581{", "$$Name", "\u2581=", "\u2581\"", "$$Run", "\u2581I", "$$f", "$$,", "\u2581\"", "\u2581+", "\u2581config", "$$.", "$$Name,", "$$Script", "$$Bo", "$$ot", "$$st", "$$rap", "$$Action", "\u2581=", "\u2581new", "\u2581S", "$$c", "$$ript", "$$Bo", "$$ot", "$$st", "$$rap", "$$Action", "$$Config", "$${", "$$Path", "\u2581=", "\u2581\"", "$$s", "$$3", "$$:", "$$Arg", "$$s", "\u2581=", "\u2581arg", "$$s", "$$}", "$$}", "$$;", "$$}"]], "java_t": [["\u2581public", "\u2581Bo", "$$ot", "$$st", "$$rap", "$$Action", "$$Config", "\u2581new", "$$Run", "$$If", "$$(String", "\u2581con", "$$d", "$$ition", "$$,", "\u2581Bo", "$$ot", "$$st", "$$rap", "$$Action", "$$Config", "\u2581config", "$$)", "\u2581{"], ["\u2581List<", "$$String>", "\u2581arg", "$$s", "\u2581=", "\u2581config", "$$.get", "$$Script", "$$Bo", "$$ot", "$$st", "$$rap", "$$Action", "$$().get", "$$Arg", "$$s()", "$$;"], ["\u2581arg", "$$s.add(", "$$0,", "\u2581con", "$$d", "$$ition", "$$)", "$$;"], ["\u2581arg", "$$s.add(", "$$1,", "\u2581config", "$$.get", "$$Script", "$$Bo", "$$ot", "$$st", "$$rap", "$$Action", "$$().get", "$$Path", "$$())", "$$;"], ["\u2581return", "\u2581new", "\u2581Bo", "$$ot", "$$st", "$$rap", "$$Action", "$$Config", "$$()", "$$.w", "$$ith", "$$Name", "$$(\"", "$$Run", "\u2581I", "$$f", "$$,", "\u2581\"", "\u2581+", "\u2581config", "$$.get", "$$Name", "$$())", "$$.w", "$$ith", "$$Script", "$$Bo", "$$ot", "$$st", "$$rap", "$$Action", "$$(new", "\u2581S", "$$c", "$$ript", "$$Bo", "$$ot", "$$st", "$$rap", "$$Action", "$$Config", "$$()", "$$.w", "$$ith", "$$Path", "$$(\"", "$$s", "$$3", "$$:", "$$.w", "$$ith", "$$Arg", "$$s(", "$$arg", "$$s", "$$))", "$$;", "$$}"]]}, {"cs": "public sealed override java.nio.CharBuffer get(char[] dst, int dstOffset, int charCount) {\n    java.util.Arrays.checkOffsetAndCount(dst.Length, dstOffset, charCount);\n    if (charCount > remaining()) {\n        throw new java.nio.BufferUnderflowException();\n    }\n    int newPosition = _position + charCount;\n    Sharpen.StringHelper.GetCharsForString(sequence.ToString(), _position, newPosition, dst, dstOffset);\n    _position = newPosition;\n    return this;\n}\n", "java": "public final CharBuffer get(char[] dst, int dstOffset, int charCount) {\n    Arrays.checkOffsetAndCount(dst.length, dstOffset, charCount);\n    if (charCount > remaining()) {\n        throw new BufferUnderflowException();\n    }\n    int newPosition = position + charCount;\n    sequence.toString().getChars(position, newPosition, dst, dstOffset);\n    position = newPosition;\n    return this;\n}\n", "cs_t": [["\u2581public", "\u2581sealed", "\u2581override", "\u2581java.nio.", "$$CharBuffer", "\u2581get", "$$(char[]", "\u2581dst", "$$,", "\u2581int", "\u2581dstOffset,", "\u2581int", "\u2581char", "$$Count)", "\u2581{"], ["\u2581java.", "$$u", "$$til", "$$.Ar", "$$ray", "$$s.", "$$check", "$$Offset", "$$And", "$$Count", "$$(d", "$$st", "$$.Length", "$$,", "\u2581dstOffset,", "\u2581char", "$$Count)", "$$;"], ["\u2581if", "\u2581(char", "$$Count", "\u2581>", "\u2581remaining", "$$())", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581java.nio.Buffer", "$$Under", "$$flow", "$$Exception", "$$()", "$$;"], ["\u2581}"], ["\u2581int", "\u2581new", "$$Position", "\u2581=", "\u2581_position", "\u2581+", "\u2581char", "$$Count", "$$;"], ["\u2581Sharpen.", "$$String", "$$H", "$$el", "$$per", "$$.Get", "$$Char", "$$sFor", "$$String(", "$$se", "$$qu", "$$ence", "$$.ToString()", "$$,", "\u2581_position", "$$,", "\u2581new", "$$Position", "$$,", "\u2581dst", "$$,", "\u2581dst", "$$Offset", "$$)", "$$;"], ["\u2581_position", "\u2581=", "\u2581new", "$$Position", "$$;"], ["\u2581return", "\u2581this", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581final", "\u2581Char", "$$Buffer", "\u2581get", "$$(char[]", "\u2581dst", "$$,", "\u2581int", "\u2581dstOffset,", "\u2581int", "\u2581char", "$$Count)", "\u2581{"], ["\u2581Arrays.", "$$check", "$$Offset", "$$And", "$$Count", "$$(d", "$$st", "$$.length,", "\u2581dstOffset,", "\u2581char", "$$Count)", "$$;"], ["\u2581if", "\u2581(char", "$$Count", "\u2581>", "\u2581remaining", "$$())", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581Buffer", "$$Under", "$$flow", "$$Exception", "$$()", "$$;"], ["\u2581}"], ["\u2581int", "\u2581new", "$$Position", "\u2581=", "\u2581position", "\u2581+", "\u2581char", "$$Count", "$$;"], ["\u2581se", "$$qu", "$$ence", "$$.toString()", "$$.get", "$$Char", "$$s(", "$$position", "$$,", "\u2581new", "$$Position", "$$,", "\u2581dst", "$$,", "\u2581dst", "$$Offset", "$$)", "$$;"], ["\u2581position", "\u2581=", "\u2581new", "$$Position", "$$;"], ["\u2581return", "\u2581this", "$$;"], ["\u2581}"]]}, {"cs": "public virtual ICollection<string> GetNames(string section, string subsection) {\n    return GetState().GetNames(section, subsection);\n}\n", "java": "public Set<String> getNames(String section, String subsection) {\n    return getState().getNames(section, subsection);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581I", "$$Collection", "$$<string", "$$>", "\u2581Get", "$$Names", "$$(string", "\u2581se", "$$ction", "$$,", "\u2581string", "\u2581sub", "$$se", "$$ction", "$$)", "\u2581{"], ["\u2581return", "\u2581Get", "$$State", "$$()", "$$.Get", "$$Names", "$$(", "$$se", "$$ction", "$$,", "\u2581sub", "$$se", "$$ction", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Set", "$$<", "$$String>", "\u2581get", "$$Names", "$$(String", "\u2581se", "$$ction", "$$,", "\u2581String", "\u2581sub", "$$se", "$$ction", "$$)", "\u2581{"], ["\u2581return", "\u2581get", "$$State", "$$().get", "$$Names", "$$(", "$$se", "$$ction", "$$,", "\u2581sub", "$$se", "$$ction", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual CreateBrokerResponse CreateBroker(CreateBrokerRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = CreateBrokerRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = CreateBrokerResponseUnmarshaller.Instance;\n    return Invoke<CreateBrokerResponse>(request, options);\n}\n", "java": "public CreateBrokerResult createBroker(CreateBrokerRequest request) {\n    request = beforeClientExecution(request);\n    return executeCreateBroker(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Create", "$$Broker", "$$Response", "\u2581Create", "$$Bro", "$$k", "$$er(", "$$Create", "$$Broker", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Create", "$$Broker", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Create", "$$Broker", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Create", "$$Broker", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Create", "$$Broker", "$$Result", "\u2581create", "$$Bro", "$$k", "$$er(", "$$Create", "$$Broker", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeCreate", "$$Broker", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual void onAbsorb(int velocity) {\n    mState = STATE_ABSORB;\n    velocity = System.Math.Max(MIN_VELOCITY, System.Math.Abs(velocity));\n    mStartTime = android.view.animation.AnimationUtils.currentAnimationTimeMillis();\n    mDuration = 0.1f + (velocity * 0.03f);\n    mEdgeAlphaStart = 0.0f;\n    mEdgeScaleY = mEdgeScaleYStart = 0.0f;\n    mGlowAlphaStart = 0.5f;\n    mGlowScaleYStart = 0.0f;\n    mEdgeAlphaFinish = System.Math.Max(0, System.Math.Min(velocity * VELOCITY_EDGE_FACTOR, 1));\n    mEdgeScaleYFinish = System.Math.Max(HELD_EDGE_SCALE_Y, System.Math.Min(velocity *VELOCITY_EDGE_FACTOR, 1.0f));\n    mGlowScaleYFinish = System.Math.Min(0.025f + (velocity * (velocity / 100) * 0.00015f), 1.75f);\n    mGlowAlphaFinish = System.Math.Max(mGlowAlphaStart, System.Math.Min(velocity * VELOCITY_GLOW_FACTOR* .00001f, MAX_ALPHA));\n}\n", "java": "public void onAbsorb(int velocity) {\n    mState = STATE_ABSORB;\n    velocity = Math.max(MIN_VELOCITY, Math.abs(velocity));\n    mStartTime = AnimationUtils.currentAnimationTimeMillis();\n    mDuration = 0.1f + (velocity * 0.03f);\n    mEdgeAlphaStart = 0.f;\n    mEdgeScaleY = mEdgeScaleYStart = 0.f;\n    mGlowAlphaStart = 0.5f;\n    mGlowScaleYStart = 0.f;\n    mEdgeAlphaFinish = Math.max(0, Math.min(velocity * VELOCITY_EDGE_FACTOR, 1));\n    mEdgeScaleYFinish = Math.max(HELD_EDGE_SCALE_Y, Math.min(velocity * VELOCITY_EDGE_FACTOR, 1.f));\n    mGlowScaleYFinish = Math.min(0.025f + (velocity * (velocity / 100) * 0.00015f), 1.75f);\n    mGlowAlphaFinish = Math.max(mGlowAlphaStart, Math.min(velocity * VELOCITY_GLOW_FACTOR * .00001f, MAX_ALPHA));\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581void", "\u2581on", "$$A", "$$b", "$$sor", "$$b", "$$(int", "\u2581v", "$$el", "$$oc", "$$ity", "$$)", "\u2581{"], ["\u2581m", "$$State", "\u2581=", "\u2581S", "$$TA", "$$TE", "$$_", "$$A", "$$B", "$$S", "$$OR", "$$B", "$$;"], ["\u2581v", "$$el", "$$oc", "$$ity", "\u2581=", "\u2581System.", "$$Math.", "$$Max", "$$(", "$$M", "$$IN", "$$_", "$$VE", "$$LO", "$$C", "$$IT", "$$Y", "$$,", "\u2581System.", "$$M", "$$ath", "$$.A", "$$b", "$$s(", "$$vel", "$$oc", "$$ity", "$$))", "$$;"], ["\u2581m", "$$Start", "$$Time", "\u2581=", "\u2581and", "$$ro", "$$id", "$$.", "$$vi", "$$ew", "$$.", "$$an", "$$im", "$$ation", "$$.A", "$$n", "$$im", "$$ation", "$$Utils.", "$$current", "$$An", "$$im", "$$ation", "$$Time", "$$M", "$$illi", "$$s()", "$$;"], ["\u2581m", "$$D", "$$uration", "\u2581=", "\u25810", "$$.", "$$1", "$$f", "\u2581+", "\u2581(", "$$vel", "$$oc", "$$ity", "\u2581*", "\u25810", "$$.0", "$$3", "$$f", "$$)", "$$;"], ["\u2581m", "$$Ed", "$$ge", "$$Al", "$$ph", "$$a", "$$Start", "\u2581=", "\u25810", "$$.0", "$$f", "$$;"], ["\u2581m", "$$Ed", "$$ge", "$$Sc", "$$ale", "$$Y", "\u2581=", "\u2581m", "$$Ed", "$$ge", "$$Sc", "$$ale", "$$Y", "$$Start", "\u2581=", "\u25810", "$$.0", "$$f", "$$;"], ["\u2581m", "$$G", "$$low", "$$Al", "$$ph", "$$a", "$$Start", "\u2581=", "\u25810", "$$.", "$$5", "$$f", "$$;"], ["\u2581m", "$$G", "$$low", "$$Sc", "$$ale", "$$Y", "$$Start", "\u2581=", "\u25810", "$$.0", "$$f", "$$;"], ["\u2581m", "$$Ed", "$$ge", "$$Al", "$$ph", "$$a", "$$F", "$$in", "$$ish", "\u2581=", "\u2581System.", "$$Math.", "$$Max", "$$(", "$$0,", "\u2581System.", "$$Math.", "$$Min", "$$(", "$$vel", "$$oc", "$$ity", "\u2581*", "\u2581V", "$$E", "$$LO", "$$C", "$$IT", "$$Y_", "$$E", "$$D", "$$G", "$$E_", "$$FA", "$$CT", "$$OR", "$$,", "\u25811", "$$))", "$$;"], ["\u2581m", "$$Ed", "$$ge", "$$Sc", "$$ale", "$$Y", "$$F", "$$in", "$$ish", "\u2581=", "\u2581System.", "$$Math.", "$$Max", "$$(", "$$H", "$$E", "$$L", "$$D_", "$$E", "$$D", "$$G", "$$E_", "$$S", "$$C", "$$AL", "$$E_", "$$Y", "$$,", "\u2581System.", "$$Math.", "$$Min", "$$(", "$$vel", "$$oc", "$$ity", "\u2581*", "$$VE", "$$LO", "$$C", "$$IT", "$$Y_", "$$E", "$$D", "$$G", "$$E_", "$$FA", "$$CT", "$$OR", "$$,", "\u25811", "$$.0", "$$f", "$$))", "$$;"], ["\u2581m", "$$G", "$$low", "$$Sc", "$$ale", "$$Y", "$$F", "$$in", "$$ish", "\u2581=", "\u2581System.", "$$Math.", "$$Min", "$$(", "$$0", "$$.0", "$$2", "$$5", "$$f", "\u2581+", "\u2581(", "$$vel", "$$oc", "$$ity", "\u2581*", "\u2581(", "$$vel", "$$oc", "$$ity", "\u2581/", "\u25811", "$$00", "$$)", "\u2581*", "\u25810", "$$.", "$$00", "$$0", "$$1", "$$5", "$$f", "$$),", "\u25811", "$$.", "$$7", "$$5", "$$f", "$$)", "$$;"], ["\u2581m", "$$G", "$$low", "$$Al", "$$ph", "$$a", "$$F", "$$in", "$$ish", "\u2581=", "\u2581System.", "$$Math.", "$$Max", "$$(m", "$$G", "$$low", "$$Al", "$$ph", "$$a", "$$Start", "$$,", "\u2581System.", "$$Math.", "$$Min", "$$(", "$$vel", "$$oc", "$$ity", "\u2581*", "\u2581V", "$$E", "$$LO", "$$C", "$$IT", "$$Y_", "$$G", "$$LOW", "$$_", "$$FA", "$$CT", "$$OR", "$$*", "\u2581.", "$$00", "$$00", "$$1", "$$f", "$$,", "\u2581MAX_", "$$AL", "$$P", "$$H", "$$A", "$$))", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581on", "$$A", "$$b", "$$sor", "$$b", "$$(int", "\u2581v", "$$el", "$$oc", "$$ity", "$$)", "\u2581{"], ["\u2581m", "$$State", "\u2581=", "\u2581S", "$$TA", "$$TE", "$$_", "$$A", "$$B", "$$S", "$$OR", "$$B", "$$;"], ["\u2581v", "$$el", "$$oc", "$$ity", "\u2581=", "\u2581Math.", "$$max", "$$(", "$$M", "$$IN", "$$_", "$$VE", "$$LO", "$$C", "$$IT", "$$Y", "$$,", "\u2581Math.", "$$ab", "$$s(", "$$vel", "$$oc", "$$ity", "$$))", "$$;"], ["\u2581m", "$$Start", "$$Time", "\u2581=", "\u2581An", "$$im", "$$ation", "$$Utils.", "$$current", "$$An", "$$im", "$$ation", "$$Time", "$$M", "$$illi", "$$s()", "$$;"], ["\u2581m", "$$D", "$$uration", "\u2581=", "\u25810", "$$.", "$$1", "$$f", "\u2581+", "\u2581(", "$$vel", "$$oc", "$$ity", "\u2581*", "\u25810", "$$.0", "$$3", "$$f", "$$)", "$$;"], ["\u2581m", "$$Ed", "$$ge", "$$Al", "$$ph", "$$a", "$$Start", "\u2581=", "\u25810", "$$.f", "$$;"], ["\u2581m", "$$Ed", "$$ge", "$$Sc", "$$ale", "$$Y", "\u2581=", "\u2581m", "$$Ed", "$$ge", "$$Sc", "$$ale", "$$Y", "$$Start", "\u2581=", "\u25810", "$$.f", "$$;"], ["\u2581m", "$$G", "$$low", "$$Al", "$$ph", "$$a", "$$Start", "\u2581=", "\u25810", "$$.", "$$5", "$$f", "$$;"], ["\u2581m", "$$G", "$$low", "$$Sc", "$$ale", "$$Y", "$$Start", "\u2581=", "\u25810", "$$.f", "$$;"], ["\u2581m", "$$Ed", "$$ge", "$$Al", "$$ph", "$$a", "$$F", "$$in", "$$ish", "\u2581=", "\u2581Math.", "$$max", "$$(", "$$0,", "\u2581Math.", "$$min", "$$(", "$$vel", "$$oc", "$$ity", "\u2581*", "\u2581V", "$$E", "$$LO", "$$C", "$$IT", "$$Y_", "$$E", "$$D", "$$G", "$$E_", "$$FA", "$$CT", "$$OR", "$$,", "\u25811", "$$))", "$$;"], ["\u2581m", "$$Ed", "$$ge", "$$Sc", "$$ale", "$$Y", "$$F", "$$in", "$$ish", "\u2581=", "\u2581Math.", "$$max", "$$(", "$$H", "$$E", "$$L", "$$D_", "$$E", "$$D", "$$G", "$$E_", "$$S", "$$C", "$$AL", "$$E_", "$$Y", "$$,", "\u2581Math.", "$$min", "$$(", "$$vel", "$$oc", "$$ity", "\u2581*", "\u2581V", "$$E", "$$LO", "$$C", "$$IT", "$$Y_", "$$E", "$$D", "$$G", "$$E_", "$$FA", "$$CT", "$$OR", "$$,", "\u25811", "$$.f", "$$))", "$$;"], ["\u2581m", "$$G", "$$low", "$$Sc", "$$ale", "$$Y", "$$F", "$$in", "$$ish", "\u2581=", "\u2581Math.", "$$min", "$$(", "$$0", "$$.0", "$$2", "$$5", "$$f", "\u2581+", "\u2581(", "$$vel", "$$oc", "$$ity", "\u2581*", "\u2581(", "$$vel", "$$oc", "$$ity", "\u2581/", "\u25811", "$$00", "$$)", "\u2581*", "\u25810", "$$.", "$$00", "$$0", "$$1", "$$5", "$$f", "$$),", "\u25811", "$$.", "$$7", "$$5", "$$f", "$$)", "$$;"], ["\u2581m", "$$G", "$$low", "$$Al", "$$ph", "$$a", "$$F", "$$in", "$$ish", "\u2581=", "\u2581Math.", "$$max", "$$(m", "$$G", "$$low", "$$Al", "$$ph", "$$a", "$$Start", "$$,", "\u2581Math.", "$$min", "$$(", "$$vel", "$$oc", "$$ity", "\u2581*", "\u2581V", "$$E", "$$LO", "$$C", "$$IT", "$$Y_", "$$G", "$$LOW", "$$_", "$$FA", "$$CT", "$$OR", "\u2581*", "\u2581.", "$$00", "$$00", "$$1", "$$f", "$$,", "\u2581MAX_", "$$AL", "$$P", "$$H", "$$A", "$$))", "$$;"], ["\u2581}"]]}, {"cs": "public virtual ListSuppressedDestinationsResponse ListSuppressedDestinations(ListSuppressedDestinationsRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = ListSuppressedDestinationsRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = ListSuppressedDestinationsResponseUnmarshaller.Instance;\n    return Invoke<ListSuppressedDestinationsResponse>(request, options);\n}\n", "java": "public ListSuppressedDestinationsResult listSuppressedDestinations(ListSuppressedDestinationsRequest request) {\n    request = beforeClientExecution(request);\n    return executeListSuppressedDestinations(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581List", "$$Supp", "$$ressed", "$$Destination", "$$sResponse", "\u2581List", "$$Supp", "$$ressed", "$$Destination", "$$s(List", "$$Supp", "$$ressed", "$$Destination", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581List", "$$Supp", "$$ressed", "$$Destination", "$$s", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581List", "$$Supp", "$$ressed", "$$Destination", "$$s", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<List", "$$Supp", "$$ressed", "$$Destination", "$$sResponse>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581List", "$$Supp", "$$ressed", "$$Destination", "$$sResult", "\u2581list", "$$Supp", "$$ressed", "$$Destination", "$$s(List", "$$Supp", "$$ressed", "$$Destination", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeList", "$$Supp", "$$ressed", "$$Destination", "$$s", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual IList<Tuple<K, V>> GetPairs() {\n    IList<Tuple<K, V>> pairs = new ArrayList<Tuple<K, V>>();\n    foreach (KeyValuePair<K, IList<V>> pair in this) {\n        foreach (V value in pair.Value) {\n            pairs.Add(Tuple.Create(pair.Key, value));\n        }\n    }\n    return pairs;\n}\n", "java": "public List<Pair<K,V>> getPairs() {\n    List<Pair<K,V>> pairs = new ArrayList<Pair<K,V>>();\n    for (K key : keySet()) {\n        for (V value : get(key)) {\n            pairs.add(new Pair<K,V>(key, value));\n        }\n    }\n    return pairs;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581IList<", "$$T", "$$up", "$$le", "$$<", "$$K,", "\u2581V>", "$$>", "\u2581Get", "$$Pair", "$$s()", "\u2581{"], ["\u2581IList<", "$$T", "$$up", "$$le", "$$<", "$$K,", "\u2581V>", "$$>", "\u2581pa", "$$ir", "$$s", "\u2581=", "\u2581new", "\u2581ArrayList<", "$$T", "$$up", "$$le", "$$<", "$$K,", "\u2581V>", "$$>", "$$()", "$$;"], ["\u2581foreach", "\u2581(", "$$Key", "$$Value", "$$Pair", "$$<", "$$K,", "\u2581IList<", "$$V", "$$>", "$$>", "\u2581pa", "$$ir", "\u2581in", "\u2581this", "$$)", "\u2581{"], ["\u2581foreach", "\u2581(", "$$V", "\u2581value", "\u2581in", "\u2581pa", "$$ir", "$$.", "$$Value)", "\u2581{"], ["\u2581pa", "$$ir", "$$s.Add(", "$$T", "$$up", "$$le", "$$.Create", "$$(", "$$pa", "$$ir", "$$.", "$$Key", "$$,", "\u2581value", "$$))", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581return", "\u2581pa", "$$ir", "$$s;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581List<", "$$Pair", "$$<", "$$K,", "$$V", "$$>", "$$>", "\u2581get", "$$Pair", "$$s()", "\u2581{"], ["\u2581List<", "$$Pair", "$$<", "$$K,", "$$V", "$$>", "$$>", "\u2581pa", "$$ir", "$$s", "\u2581=", "\u2581new", "\u2581ArrayList<", "$$Pair", "$$<", "$$K,", "$$V", "$$>", "$$>", "$$()", "$$;"], ["\u2581for", "\u2581(", "$$K", "\u2581key", "\u2581:", "\u2581key", "$$Set", "$$())", "\u2581{"], ["\u2581for", "\u2581(", "$$V", "\u2581value", "\u2581:", "\u2581get", "$$(key", "$$))", "\u2581{"], ["\u2581pa", "$$ir", "$$s.add(", "$$new", "\u2581P", "$$a", "$$ir", "$$<", "$$K,", "$$V", "$$>", "$$(key", "$$,", "\u2581value", "$$))", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581return", "\u2581pa", "$$ir", "$$s;"], ["\u2581}"]]}, {"cs": "public override void SetParams(string @params) {\n    base.SetParams(@params);\n    int k = @params.IndexOf(',');\n    name = @params.Substring(0, k - 0).Trim();\n    value = @params.Substring(k + 1).Trim();\n}\n", "java": "public void setParams(String params) {\n    super.setParams(params);\n    int k = params.indexOf(\",\");\n    name = params.substring(0,k).trim();\n    value = params.substring(k+1).trim();\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581void", "\u2581Set", "$$Param", "$$s(", "$$string", "\u2581@", "$$param", "$$s)", "\u2581{"], ["\u2581base", "$$.Set", "$$Param", "$$s(", "$$@", "$$param", "$$s)", "$$;"], ["\u2581int", "\u2581k", "\u2581=", "\u2581@", "$$param", "$$s.", "$$Index", "$$Of(", "$$'", "$$,", "$$')", "$$;"], ["\u2581name", "\u2581=", "\u2581@", "$$param", "$$s.", "$$Sub", "$$string(", "$$0,", "\u2581k", "\u2581-", "\u25810)", "$$.", "$$Tri", "$$m", "$$()", "$$;"], ["\u2581value", "\u2581=", "\u2581@", "$$param", "$$s.", "$$Sub", "$$string(", "$$k", "\u2581+", "\u25811)", "$$.", "$$Tri", "$$m", "$$()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581set", "$$Param", "$$s(", "$$String", "\u2581par", "$$am", "$$s)", "\u2581{"], ["\u2581super.", "$$set", "$$Param", "$$s(", "$$param", "$$s)", "$$;"], ["\u2581int", "\u2581k", "\u2581=", "\u2581par", "$$am", "$$s.", "$$index", "$$Of", "$$(\"", "$$,", "$$\")", "$$;"], ["\u2581name", "\u2581=", "\u2581par", "$$am", "$$s.", "$$sub", "$$string(", "$$0,", "$$k", "$$).", "$$t", "$$ri", "$$m", "$$()", "$$;"], ["\u2581value", "\u2581=", "\u2581par", "$$am", "$$s.", "$$sub", "$$string(", "$$k", "$$+", "$$1)", "$$.", "$$t", "$$ri", "$$m", "$$()", "$$;"], ["\u2581}"]]}, {"cs": "public override V put(K key, V value) {\n    if (!this.isInBounds(key)) {\n        throw this.outOfBounds(key, this.fromBound, this.toBound);\n    }\n    return this._enclosing.putInternal(key, value);\n}\n", "java": "@Override public V put(K key, V value) {\n    if (!isInBounds(key)) {\n        throw outOfBounds(key, fromBound, toBound);\n    }\n    return putInternal(key, value);\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581V", "\u2581put", "$$(", "$$K", "\u2581key", "$$,", "\u2581V", "\u2581value)", "\u2581{"], ["\u2581if", "\u2581(!", "$$this", "$$.is", "$$In", "$$Bound", "$$s(", "$$key", "$$))", "\u2581{"], ["\u2581throw", "\u2581this.", "$$out", "$$Of", "$$Bound", "$$s(", "$$key", "$$,", "\u2581this.f", "$$rom", "$$Bound", "$$,", "\u2581this.", "$$to", "$$Bound", "$$)", "$$;"], ["\u2581}"], ["\u2581return", "\u2581this._enclosing", "$$.put", "$$Internal", "$$(key", "$$,", "\u2581value)", "$$;"], ["\u2581}"]], "java_t": [["\u2581@Override", "\u2581public", "\u2581V", "\u2581put", "$$(", "$$K", "\u2581key", "$$,", "\u2581V", "\u2581value)", "\u2581{"], ["\u2581if", "\u2581(!", "$$is", "$$In", "$$Bound", "$$s(", "$$key", "$$))", "\u2581{"], ["\u2581throw", "\u2581out", "$$Of", "$$Bound", "$$s(", "$$key", "$$,", "\u2581from", "$$Bound", "$$,", "\u2581to", "$$Bound", "$$)", "$$;"], ["\u2581}"], ["\u2581return", "\u2581put", "$$Internal", "$$(key", "$$,", "\u2581value)", "$$;"], ["\u2581}"]]}, {"cs": "public DeregisterImageRequest(string imageId) {\n    _imageId = imageId;\n}\n", "java": "public DeregisterImageRequest(String imageId) {\n    setImageId(imageId);\n}\n", "cs_t": [["\u2581public", "\u2581Deregister", "$$Image", "$$Request(string", "\u2581i", "$$ma", "$$ge", "$$Id)", "\u2581{"], ["\u2581_", "$$i", "$$ma", "$$ge", "$$Id", "\u2581=", "\u2581i", "$$ma", "$$ge", "$$Id", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Deregister", "$$Image", "$$Request(String", "\u2581i", "$$ma", "$$ge", "$$Id)", "\u2581{"], ["\u2581set", "$$Image", "$$Id(", "$$i", "$$ma", "$$ge", "$$Id)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual GetApplicationResponse GetApplication(GetApplicationRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = GetApplicationRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = GetApplicationResponseUnmarshaller.Instance;\n    return Invoke<GetApplicationResponse>(request, options);\n}\n", "java": "public GetApplicationResult getApplication(GetApplicationRequest request) {\n    request = beforeClientExecution(request);\n    return executeGetApplication(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Get", "$$Application", "$$Response", "\u2581Get", "$$Application", "$$(Get", "$$Application", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Get", "$$Application", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Get", "$$Application", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Get", "$$Application", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Get", "$$Application", "$$Result", "\u2581get", "$$Application", "$$(Get", "$$Application", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeGet", "$$Application", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DescribeProblemObservationsResponse DescribeProblemObservations(DescribeProblemObservationsRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DescribeProblemObservationsRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DescribeProblemObservationsResponseUnmarshaller.Instance;\n    return Invoke<DescribeProblemObservationsResponse>(request, options);\n}\n", "java": "public DescribeProblemObservationsResult describeProblemObservations(DescribeProblemObservationsRequest request) {\n    request = beforeClientExecution(request);\n    return executeDescribeProblemObservations(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Describe", "$$Pro", "$$b", "$$lem", "$$O", "$$b", "$$ser", "$$v", "$$ation", "$$sResponse", "\u2581Describe", "$$Pro", "$$b", "$$lem", "$$O", "$$b", "$$ser", "$$v", "$$ation", "$$s(Describe", "$$Pro", "$$b", "$$lem", "$$O", "$$b", "$$ser", "$$v", "$$ation", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Describe", "$$Pro", "$$b", "$$lem", "$$O", "$$b", "$$ser", "$$v", "$$ation", "$$s", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Describe", "$$Pro", "$$b", "$$lem", "$$O", "$$b", "$$ser", "$$v", "$$ation", "$$s", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Describe", "$$Pro", "$$b", "$$lem", "$$O", "$$b", "$$ser", "$$v", "$$ation", "$$sResponse>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Describe", "$$Pro", "$$b", "$$lem", "$$O", "$$b", "$$ser", "$$v", "$$ation", "$$sResult", "\u2581describe", "$$Pro", "$$b", "$$lem", "$$O", "$$b", "$$ser", "$$v", "$$ation", "$$s(Describe", "$$Pro", "$$b", "$$lem", "$$O", "$$b", "$$ser", "$$v", "$$ation", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDescribe", "$$Pro", "$$b", "$$lem", "$$O", "$$b", "$$ser", "$$v", "$$ation", "$$s", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override int FillFields(byte[] data, int offset, IEscherRecordFactory recordFactory) {\n    int bytesAfterHeader = ReadHeader(data, offset);\n    int pos = offset + HEADER_SIZE;\n    field_1_UID = new byte[16];\n    Array.Copy(data, pos, field_1_UID, 0, 16);\n    pos += 16;\n    field_2_marker = data[pos];\n    pos++;\n    field_pictureData = new byte[bytesAfterHeader - 17];\n    Array.Copy(data, pos, field_pictureData, 0, field_pictureData.Length);\n    return bytesAfterHeader + HEADER_SIZE;\n}\n", "java": "public int fillFields(byte[] data, int offset, EscherRecordFactory recordFactory) {\n    int bytesAfterHeader = readHeader( data, offset );\n    int pos = offset + HEADER_SIZE;\n    System.arraycopy( data, pos, field_1_UID, 0, 16 );\n    pos += 16;\n    field_2_marker = data[pos];\n    pos++;\n    setPictureData(data, pos, bytesAfterHeader - 17);\n    return bytesAfterHeader + HEADER_SIZE;\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581int", "\u2581", "$$Fill", "$$Field", "$$s(", "$$byte[]", "\u2581data,", "\u2581int", "\u2581offset,", "\u2581I", "$$Escher", "$$Record", "$$Factory", "\u2581record", "$$Factory", "$$)", "\u2581{"], ["\u2581int", "\u2581bytes", "$$A", "$$fter", "$$Header", "\u2581=", "\u2581Read", "$$Header", "$$(data,", "\u2581offset", "$$)", "$$;"], ["\u2581int", "\u2581pos", "\u2581=", "\u2581offset", "\u2581+", "\u2581H", "$$EAD", "$$ER", "$$_SIZE", "$$;"], ["\u2581field_1_", "$$U", "$$ID", "\u2581=", "\u2581new", "\u2581byte[", "$$16", "$$]", "$$;"], ["\u2581Array.Copy", "$$(data,", "\u2581pos,", "\u2581field_1_", "$$U", "$$ID", "$$,", "\u25810,", "\u258116", "$$)", "$$;"], ["\u2581pos", "\u2581+=", "\u258116", "$$;"], ["\u2581field_2_", "$$mark", "$$er", "\u2581=", "\u2581data", "$$[", "$$pos", "$$]", "$$;"], ["\u2581pos", "$$++", "$$;"], ["\u2581field_", "$$pic", "$$ture", "$$Data", "\u2581=", "\u2581new", "\u2581byte[", "$$bytes", "$$A", "$$fter", "$$Header", "\u2581-", "\u25811", "$$7", "$$]", "$$;"], ["\u2581Array.Copy", "$$(data,", "\u2581pos,", "\u2581field_", "$$pic", "$$ture", "$$Data", "$$,", "\u25810,", "\u2581field_", "$$pic", "$$ture", "$$Data", "$$.Length)", "$$;"], ["\u2581return", "\u2581bytes", "$$A", "$$fter", "$$Header", "\u2581+", "\u2581H", "$$EAD", "$$ER", "$$_SIZE", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581int", "\u2581fill", "$$Field", "$$s(", "$$byte[]", "\u2581data,", "\u2581int", "\u2581offset,", "\u2581Escher", "$$Record", "$$Factory", "\u2581record", "$$Factory", "$$)", "\u2581{"], ["\u2581int", "\u2581bytes", "$$A", "$$fter", "$$Header", "\u2581=", "\u2581read", "$$Head", "$$er(", "\u2581data,", "\u2581offset", "\u2581)", "$$;"], ["\u2581int", "\u2581pos", "\u2581=", "\u2581offset", "\u2581+", "\u2581H", "$$EAD", "$$ER", "$$_SIZE", "$$;"], ["\u2581System.arraycopy", "$$(", "\u2581data,", "\u2581pos,", "\u2581field_1_", "$$U", "$$ID", "$$,", "\u25810,", "\u258116", "\u2581)", "$$;"], ["\u2581pos", "\u2581+=", "\u258116", "$$;"], ["\u2581field_2_", "$$mark", "$$er", "\u2581=", "\u2581data", "$$[", "$$pos", "$$]", "$$;"], ["\u2581pos", "$$++", "$$;"], ["\u2581set", "$$P", "$$icture", "$$Data", "$$(data,", "\u2581pos,", "\u2581bytes", "$$A", "$$fter", "$$Header", "\u2581-", "\u25811", "$$7", "$$)", "$$;"], ["\u2581return", "\u2581bytes", "$$A", "$$fter", "$$Header", "\u2581+", "\u2581H", "$$EAD", "$$ER", "$$_SIZE", "$$;"], ["\u2581}"]]}, {"cs": "public static bool EndsWith(BytesRef @ref, BytesRef suffix) {\n    return SliceEquals(@ref, suffix, @ref.Length - suffix.Length);\n}\n", "java": "public static boolean endsWith(BytesRef ref, BytesRef suffix) {\n    int startAt = ref.length - suffix.length;\n    if (startAt < 0) {\n        return false;\n    }\n    return Arrays.equals(ref.bytes, ref.offset + startAt, ref.offset + startAt + suffix.length,suffix.bytes, suffix.offset, suffix.offset + suffix.length);\n}\n", "cs_t": [["\u2581public", "\u2581static", "\u2581bool", "\u2581", "$$End", "$$sWith", "$$(BytesRef", "\u2581@", "$$ref", "$$,", "\u2581BytesRef", "\u2581s", "$$uffix", "$$)", "\u2581{"], ["\u2581return", "\u2581S", "$$lice", "$$E", "$$quals(", "$$@", "$$ref", "$$,", "\u2581s", "$$uffix", "$$,", "\u2581@", "$$ref", "$$.Length", "\u2581-", "\u2581s", "$$uffix", "$$.Length)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581static", "\u2581boolean", "\u2581end", "$$sWith", "$$(BytesRef", "\u2581ref", "$$,", "\u2581BytesRef", "\u2581s", "$$uffix", "$$)", "\u2581{"], ["\u2581int", "\u2581start", "$$At", "\u2581=", "\u2581ref", "$$.length", "\u2581-", "\u2581s", "$$uffix", "$$.length;"], ["\u2581if", "\u2581(start", "$$At", "\u2581<", "\u25810)", "\u2581{"], ["\u2581return", "\u2581false", "$$;"], ["\u2581}"], ["\u2581return", "\u2581Arrays.", "$$e", "$$qual", "$$s", "$$(re", "$$f", "$$.", "$$bytes", "$$,", "\u2581ref", "$$.", "$$offset", "\u2581+", "\u2581start", "$$At", "$$,", "\u2581ref", "$$.", "$$offset", "\u2581+", "\u2581start", "$$At", "\u2581+", "\u2581s", "$$uffix", "$$.length,", "$$s", "$$uffix", "$$.", "$$bytes", "$$,", "\u2581s", "$$uffix", "$$.", "$$offset", "$$,", "\u2581s", "$$uffix", "$$.", "$$offset", "\u2581+", "\u2581s", "$$uffix", "$$.length)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DeleteOptionGroupResponse DeleteOptionGroup(DeleteOptionGroupRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DeleteOptionGroupRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DeleteOptionGroupResponseUnmarshaller.Instance;\n    return Invoke<DeleteOptionGroupResponse>(request, options);\n}\n", "java": "public DeleteOptionGroupResult deleteOptionGroup(DeleteOptionGroupRequest request) {\n    request = beforeClientExecution(request);\n    return executeDeleteOptionGroup(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Delete", "$$Option", "$$Group", "$$Response", "\u2581Delete", "$$Option", "$$Group", "$$(Delete", "$$Option", "$$GroupRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Delete", "$$Option", "$$Group", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Delete", "$$Option", "$$Group", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Delete", "$$Option", "$$Group", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Delete", "$$Option", "$$Group", "$$Result", "\u2581delete", "$$Option", "$$Group", "$$(Delete", "$$Option", "$$GroupRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDelete", "$$Option", "$$Group", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public static String GetFromUnicodeLE(byte[] str) {\n    if (str.Length == 0) {\n        return \"\";\n    }\n    return GetFromUnicodeLE(str, 0, str.Length / 2);\n}\n", "java": "public static String getFromUnicodeLE(byte[] string) {\n    if (string.length == 0) {\n        return \"\";\n    }\n    return getFromUnicodeLE(string, 0, string.length / 2);\n}\n", "cs_t": [["\u2581public", "\u2581static", "\u2581String", "\u2581Get", "$$From", "$$Unicode", "$$LE", "$$(byte[]", "\u2581str", "$$)", "\u2581{"], ["\u2581if", "\u2581(", "$$str", "$$.Length", "\u2581==", "\u25810)", "\u2581{"], ["\u2581return", "\u2581\"", "$$\"", "$$;"], ["\u2581}"], ["\u2581return", "\u2581Get", "$$From", "$$Unicode", "$$LE", "$$(st", "$$r", "$$,", "\u25810,", "\u2581str", "$$.Length", "\u2581/", "\u25812)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581static", "\u2581String", "\u2581get", "$$From", "$$Unicode", "$$LE", "$$(byte[]", "\u2581string", "$$)", "\u2581{"], ["\u2581if", "\u2581(", "$$string", "$$.length", "\u2581==", "\u25810)", "\u2581{"], ["\u2581return", "\u2581\"", "$$\"", "$$;"], ["\u2581}"], ["\u2581return", "\u2581get", "$$From", "$$Unicode", "$$LE", "$$(string", "$$,", "\u25810,", "\u2581string", "$$.length", "\u2581/", "\u25812)", "$$;"], ["\u2581}"]]}, {"cs": "public CellRangeAddressList() {\n    _list = new ArrayList();\n}\n", "java": "public CellRangeAddressList() {\n    _list = new ArrayList<>();\n}\n", "cs_t": [["\u2581public", "\u2581CellRangeAddress", "$$List", "$$()", "\u2581{"], ["\u2581_", "$$list", "\u2581=", "\u2581new", "\u2581Array", "$$List", "$$()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581CellRangeAddress", "$$List", "$$()", "\u2581{"], ["\u2581_", "$$list", "\u2581=", "\u2581new", "\u2581ArrayList<", "$$>", "$$()", "$$;"], ["\u2581}"]]}, {"cs": "public ValueEval Evaluate(ValueEval[] args, OperationEvaluationContext ec) {\n    throw new NotImplementedFunctionException(_functionName);\n}\n", "java": "public ValueEval evaluate(ValueEval[] args, OperationEvaluationContext ec) {\n    throw new NotImplementedFunctionException(_functionName);\n}\n", "cs_t": [["\u2581public", "\u2581ValueEval", "\u2581Evaluate", "$$(ValueEval", "$$[]", "\u2581args,", "\u2581", "$$Operation", "$$Evaluation", "$$Context", "\u2581", "$$ec", "$$)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581Not", "$$Implemented", "$$Function", "$$Exception(", "$$_", "$$f", "$$unction", "$$Name)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581ValueEval", "\u2581evaluate", "$$(ValueEval", "$$[]", "\u2581args,", "\u2581", "$$Operation", "$$Evaluation", "$$Context", "\u2581", "$$ec", "$$)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581Not", "$$Implemented", "$$Function", "$$Exception(", "$$_", "$$f", "$$unction", "$$Name)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DescribeOptionGroupsResponse DescribeOptionGroups() {\n    return DescribeOptionGroups(new DescribeOptionGroupsRequest());\n}\n", "java": "public DescribeOptionGroupsResult describeOptionGroups() {\n    return describeOptionGroups(new DescribeOptionGroupsRequest());\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Describe", "$$Option", "$$Group", "$$sResponse", "\u2581Describe", "$$Option", "$$Group", "$$s()", "\u2581{"], ["\u2581return", "\u2581Describe", "$$Option", "$$Group", "$$s(new", "\u2581Describe", "$$Option", "$$Group", "$$sRequest", "$$())", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Describe", "$$Option", "$$Group", "$$sResult", "\u2581describe", "$$Option", "$$Group", "$$s()", "\u2581{"], ["\u2581return", "\u2581describe", "$$Option", "$$Group", "$$s(new", "\u2581Describe", "$$Option", "$$Group", "$$sRequest", "$$())", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DisableVpcClassicLinkResponse DisableVpcClassicLink(DisableVpcClassicLinkRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DisableVpcClassicLinkRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DisableVpcClassicLinkResponseUnmarshaller.Instance;\n    return Invoke<DisableVpcClassicLinkResponse>(request, options);\n}\n", "java": "public DisableVpcClassicLinkResult disableVpcClassicLink(DisableVpcClassicLinkRequest request) {\n    request = beforeClientExecution(request);\n    return executeDisableVpcClassicLink(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Disable", "$$Vpc", "$$ClassicLink", "$$Response", "\u2581Disable", "$$Vpc", "$$ClassicLink", "$$(", "$$Disable", "$$Vpc", "$$ClassicLink", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Disable", "$$Vpc", "$$ClassicLink", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Disable", "$$Vpc", "$$ClassicLink", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<", "$$Disable", "$$Vpc", "$$ClassicLink", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Disable", "$$Vpc", "$$ClassicLink", "$$Result", "\u2581dis", "$$able", "$$Vpc", "$$ClassicLink", "$$(", "$$Disable", "$$Vpc", "$$ClassicLink", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581execute", "$$Disable", "$$Vpc", "$$ClassicLink", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override string ToString() {\n    StringBuilder buffer = new StringBuilder();\n    buffer.Append(\"[SXIDSTM]\\n\");\n    buffer.Append(\"    .idstm      =\").Append(HexDump.ShortToHex(idstm)).Append('\\n');\n    buffer.Append(\"[/SXIDSTM]\\n\");\n    return buffer.ToString();\n}\n", "java": "public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"[SXIDSTM]\\n\");\n    buffer.append(\"    .idstm      =\").append(HexDump.shortToHex(idstm)).append('\\n');\n    buffer.append(\"[/SXIDSTM]\\n\");\n    return buffer.toString();\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581string", "\u2581ToString()", "\u2581{"], ["\u2581StringBuilder", "\u2581buffer", "\u2581=", "\u2581new", "\u2581StringBuilder", "$$()", "$$;"], ["\u2581buffer.Append(\"[", "$$S", "$$X", "$$ID", "$$ST", "$$M", "$$]", "$$\\n", "$$\")", "$$;"], ["\u2581buffer.Append(\"", "\u2581", "\u2581", "\u2581", "\u2581.", "$$id", "$$st", "$$m", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581=", "$$\").Append(", "$$HexDump.Short", "$$ToHex", "$$(id", "$$st", "$$m", "$$))", "$$.Append('", "$$\\n", "$$')", "$$;"], ["\u2581buffer.Append(\"[/", "$$S", "$$X", "$$ID", "$$ST", "$$M", "$$]", "$$\\n", "$$\")", "$$;"], ["\u2581return", "\u2581buffer", "$$.ToString()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581String", "\u2581toString()", "\u2581{"], ["\u2581StringBuilder", "\u2581buffer", "\u2581=", "\u2581new", "\u2581StringBuilder", "$$()", "$$;"], ["\u2581buffer.append(\"[", "$$S", "$$X", "$$ID", "$$ST", "$$M", "$$]", "$$\\n", "$$\")", "$$;"], ["\u2581buffer.append(\"", "\u2581", "\u2581", "\u2581", "\u2581.", "$$id", "$$st", "$$m", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581=", "$$\").append(", "$$HexDump.short", "$$ToHex", "$$(id", "$$st", "$$m", "$$))", "$$.append('", "$$\\n", "$$')", "$$;"], ["\u2581buffer.append(\"[/", "$$S", "$$X", "$$ID", "$$ST", "$$M", "$$]", "$$\\n", "$$\")", "$$;"], ["\u2581return", "\u2581buffer", "$$.toString()", "$$;"], ["\u2581}"]]}, {"cs": "public virtual ListStackInstancesResponse ListStackInstances(ListStackInstancesRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = ListStackInstancesRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = ListStackInstancesResponseUnmarshaller.Instance;\n    return Invoke<ListStackInstancesResponse>(request, options);\n}\n", "java": "public ListStackInstancesResult listStackInstances(ListStackInstancesRequest request) {\n    request = beforeClientExecution(request);\n    return executeListStackInstances(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581List", "$$Stack", "$$Instances", "$$Response", "\u2581List", "$$Stack", "$$Instances", "$$(List", "$$Stack", "$$InstancesRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581List", "$$Stack", "$$Instances", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581List", "$$Stack", "$$Instances", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<List", "$$Stack", "$$Instances", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581List", "$$Stack", "$$Instances", "$$Result", "\u2581list", "$$Stack", "$$Instances", "$$(List", "$$Stack", "$$InstancesRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeList", "$$Stack", "$$Instances", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DescribeCompanyNetworkConfigurationResponse DescribeCompanyNetworkConfiguration(DescribeCompanyNetworkConfigurationRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DescribeCompanyNetworkConfigurationRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DescribeCompanyNetworkConfigurationResponseUnmarshaller.Instance;\n    return Invoke<DescribeCompanyNetworkConfigurationResponse>(request, options);\n}\n", "java": "public DescribeCompanyNetworkConfigurationResult describeCompanyNetworkConfiguration(DescribeCompanyNetworkConfigurationRequest request) {\n    request = beforeClientExecution(request);\n    return executeDescribeCompanyNetworkConfiguration(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Describe", "$$Comp", "$$an", "$$y", "$$Network", "$$Configuration", "$$Response", "\u2581Describe", "$$Comp", "$$an", "$$y", "$$Network", "$$Configuration", "$$(Describe", "$$Comp", "$$an", "$$y", "$$Network", "$$ConfigurationRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Describe", "$$Comp", "$$an", "$$y", "$$Network", "$$Configuration", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Describe", "$$Comp", "$$an", "$$y", "$$Network", "$$Configuration", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Describe", "$$Comp", "$$an", "$$y", "$$Network", "$$Configuration", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Describe", "$$Comp", "$$an", "$$y", "$$Network", "$$Configuration", "$$Result", "\u2581describe", "$$Comp", "$$an", "$$y", "$$Network", "$$Configuration", "$$(Describe", "$$Comp", "$$an", "$$y", "$$Network", "$$ConfigurationRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDescribe", "$$Comp", "$$an", "$$y", "$$Network", "$$Configuration", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public java.nio.charset.CoderResult flush(java.nio.CharBuffer @out) {\n    if (status != END && status != INIT) {\n        throw new System.InvalidOperationException();\n    }\n    java.nio.charset.CoderResult result = implFlush(@out);\n    if (result == java.nio.charset.CoderResult.UNDERFLOW) {\n        status = FLUSH;\n    }\n    return result;\n}\n", "java": "public final CoderResult flush(CharBuffer out) {\n    if (status != END && status != INIT) {\n        throw new IllegalStateException();\n    }\n    CoderResult result = implFlush(out);\n    if (result == CoderResult.UNDERFLOW) {\n        status = FLUSH;\n    }\n    return result;\n}\n", "cs_t": [["\u2581public", "\u2581java.nio.", "$$char", "$$set", "$$.", "$$Co", "$$der", "$$Result", "\u2581f", "$$lush", "$$(", "$$java.", "$$nio.", "$$CharBuffer", "\u2581@out", "$$)", "\u2581{"], ["\u2581if", "\u2581(", "$$st", "$$atu", "$$s", "\u2581!=", "\u2581E", "$$N", "$$D", "\u2581&&", "\u2581st", "$$atu", "$$s", "\u2581!=", "\u2581I", "$$N", "$$IT", "$$)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581System.", "$$Invalid", "$$Operation", "$$Exception", "$$()", "$$;"], ["\u2581}"], ["\u2581java.nio.", "$$char", "$$set", "$$.", "$$Co", "$$der", "$$Result", "\u2581result", "\u2581=", "\u2581i", "$$mpl", "$$F", "$$lush", "$$(@", "$$out", "$$)", "$$;"], ["\u2581if", "\u2581(result", "\u2581==", "\u2581java.nio.", "$$char", "$$set", "$$.", "$$Co", "$$der", "$$Result", "$$.", "$$UN", "$$D", "$$ER", "$$F", "$$LOW", "$$)", "\u2581{"], ["\u2581st", "$$atu", "$$s", "\u2581=", "\u2581F", "$$LU", "$$SH", "$$;"], ["\u2581}"], ["\u2581return", "\u2581result", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581final", "\u2581", "$$Co", "$$der", "$$Result", "\u2581f", "$$lush", "$$(", "$$CharBuffer", "\u2581out)", "\u2581{"], ["\u2581if", "\u2581(", "$$st", "$$atu", "$$s", "\u2581!=", "\u2581E", "$$N", "$$D", "\u2581&&", "\u2581st", "$$atu", "$$s", "\u2581!=", "\u2581I", "$$N", "$$IT", "$$)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581IllegalState", "$$Exception", "$$()", "$$;"], ["\u2581}"], ["\u2581", "$$Co", "$$der", "$$Result", "\u2581result", "\u2581=", "\u2581i", "$$mpl", "$$F", "$$lush", "$$(out", "$$)", "$$;"], ["\u2581if", "\u2581(result", "\u2581==", "\u2581", "$$Co", "$$der", "$$Result", "$$.", "$$UN", "$$D", "$$ER", "$$F", "$$LOW", "$$)", "\u2581{"], ["\u2581st", "$$atu", "$$s", "\u2581=", "\u2581F", "$$LU", "$$SH", "$$;"], ["\u2581}"], ["\u2581return", "\u2581result", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DescribeDBClustersResponse DescribeDBClusters(DescribeDBClustersRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DescribeDBClustersRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DescribeDBClustersResponseUnmarshaller.Instance;\n    return Invoke<DescribeDBClustersResponse>(request, options);\n}\n", "java": "public DescribeDBClustersResult describeDBClusters(DescribeDBClustersRequest request) {\n    request = beforeClientExecution(request);\n    return executeDescribeDBClusters(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Describe", "$$DBCluster", "$$sResponse", "\u2581Describe", "$$DBCluster", "$$s(Describe", "$$DBCluster", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Describe", "$$DBCluster", "$$s", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Describe", "$$DBCluster", "$$s", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Describe", "$$DBCluster", "$$sResponse>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Describe", "$$DBCluster", "$$sResult", "\u2581describe", "$$DBCluster", "$$s(Describe", "$$DBCluster", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDescribe", "$$DBCluster", "$$s", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual GetDocumentVersionResponse GetDocumentVersion(GetDocumentVersionRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = GetDocumentVersionRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = GetDocumentVersionResponseUnmarshaller.Instance;\n    return Invoke<GetDocumentVersionResponse>(request, options);\n}\n", "java": "public GetDocumentVersionResult getDocumentVersion(GetDocumentVersionRequest request) {\n    request = beforeClientExecution(request);\n    return executeGetDocumentVersion(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Get", "$$Document", "$$Version", "$$Response", "\u2581Get", "$$Document", "$$Version", "$$(Get", "$$Document", "$$Version", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Get", "$$Document", "$$Version", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Get", "$$Document", "$$Version", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Get", "$$Document", "$$Version", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Get", "$$Document", "$$Version", "$$Result", "\u2581get", "$$Document", "$$Version", "$$(Get", "$$Document", "$$Version", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeGet", "$$Document", "$$Version", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override TermData Subtract(TermData t1, TermData t2) {\n    if (Equals(t2, NO_OUTPUT))return t1;\n    Debug.Assert(t1.longs.Length == t2.longs.Length);\n    int pos = 0;\n    long diff = 0;\n    var share = new long[_longsSize];\n    while (pos < _longsSize) {\n        share[pos] = t1.longs[pos] - t2.longs[pos];\n        diff += share[pos];\n        pos++;\n    }\n    TermData ret;\n    if (diff == 0 && StatsEqual(t1, t2) && BytesEqual(t1, t2)) {\n        ret = NO_OUTPUT;\n    }\n    else {\n        ret = new TermData(share, t1.bytes, t1.docFreq, t1.totalTermFreq);\n    }\n    return ret;\n}\n", "java": "public TermData subtract(TermData t1, TermData t2) {\n    if (t2 == NO_OUTPUT) {\n        return t1;\n    }\n    TermData ret;\n    if (statsEqual(t1, t2) && bytesEqual(t1, t2)) {\n        ret = NO_OUTPUT;\n    }\n    else {\n        ret = new TermData(t1.bytes, t1.docFreq, t1.totalTermFreq);\n    }\n    return ret;\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581Term", "$$Data", "\u2581Sub", "$$tra", "$$ct", "$$(", "$$Term", "$$Data", "\u2581t", "$$1,", "\u2581Term", "$$Data", "\u2581t", "$$2)", "\u2581{"], ["\u2581if", "\u2581(", "$$E", "$$quals(", "$$t", "$$2,", "\u2581N", "$$O_", "$$O", "$$UT", "$$P", "$$UT", "$$))return", "\u2581t", "$$1", "$$;"], ["\u2581Debug.Assert", "$$(t", "$$1.", "$$long", "$$s.Length", "\u2581==", "\u2581t", "$$2.", "$$long", "$$s.Length", "$$)", "$$;"], ["\u2581int", "\u2581pos", "\u2581=", "\u25810;"], ["\u2581long", "\u2581d", "$$iff", "\u2581=", "\u25810;"], ["\u2581var", "\u2581sh", "$$are", "\u2581=", "\u2581new", "\u2581long", "$$[", "$$_", "$$long", "$$s", "$$Size", "$$]", "$$;"], ["\u2581while", "\u2581(pos", "\u2581<", "\u2581_", "$$long", "$$s", "$$Size)", "\u2581{"], ["\u2581sh", "$$are", "$$[", "$$pos", "$$]", "\u2581=", "\u2581t", "$$1.", "$$long", "$$s[", "$$pos", "$$]", "\u2581-", "\u2581t", "$$2.", "$$long", "$$s[", "$$pos", "$$]", "$$;"], ["\u2581d", "$$iff", "\u2581+=", "\u2581sh", "$$are", "$$[", "$$pos", "$$]", "$$;"], ["\u2581pos", "$$++", "$$;"], ["\u2581}"], ["\u2581Term", "$$Data", "\u2581ret", "$$;"], ["\u2581if", "\u2581(d", "$$iff", "\u2581==", "\u25810", "\u2581&&", "\u2581St", "$$at", "$$s", "$$E", "$$qual", "$$(t", "$$1,", "\u2581t", "$$2)", "\u2581&&", "\u2581Bytes", "$$E", "$$qual", "$$(t", "$$1,", "\u2581t", "$$2", "$$))", "\u2581{"], ["\u2581ret", "\u2581=", "\u2581N", "$$O_", "$$O", "$$UT", "$$P", "$$UT", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581ret", "\u2581=", "\u2581new", "\u2581Term", "$$Data", "$$(", "$$sh", "$$are", "$$,", "\u2581t", "$$1.", "$$bytes", "$$,", "\u2581t", "$$1.", "$$d", "$$oc", "$$Freq", "$$,", "\u2581t", "$$1.", "$$t", "$$otal", "$$TermFreq", "$$)", "$$;"], ["\u2581}"], ["\u2581return", "\u2581ret", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Term", "$$Data", "\u2581sub", "$$tra", "$$ct", "$$(", "$$Term", "$$Data", "\u2581t", "$$1,", "\u2581Term", "$$Data", "\u2581t", "$$2)", "\u2581{"], ["\u2581if", "\u2581(t", "$$2", "\u2581==", "\u2581N", "$$O_", "$$O", "$$UT", "$$P", "$$UT", "$$)", "\u2581{"], ["\u2581return", "\u2581t", "$$1", "$$;"], ["\u2581}"], ["\u2581Term", "$$Data", "\u2581ret", "$$;"], ["\u2581if", "\u2581(", "$$st", "$$at", "$$s", "$$E", "$$qual", "$$(t", "$$1,", "\u2581t", "$$2)", "\u2581&&", "\u2581bytes", "$$E", "$$qual", "$$(t", "$$1,", "\u2581t", "$$2", "$$))", "\u2581{"], ["\u2581ret", "\u2581=", "\u2581N", "$$O_", "$$O", "$$UT", "$$P", "$$UT", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581ret", "\u2581=", "\u2581new", "\u2581Term", "$$Data", "$$(t", "$$1.", "$$bytes", "$$,", "\u2581t", "$$1.", "$$d", "$$oc", "$$Freq", "$$,", "\u2581t", "$$1.", "$$t", "$$otal", "$$TermFreq", "$$)", "$$;"], ["\u2581}"], ["\u2581return", "\u2581ret", "$$;"], ["\u2581}"]]}, {"cs": "public virtual ModifyCapacityReservationResponse ModifyCapacityReservation(ModifyCapacityReservationRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = ModifyCapacityReservationRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = ModifyCapacityReservationResponseUnmarshaller.Instance;\n    return Invoke<ModifyCapacityReservationResponse>(request, options);\n}\n", "java": "public ModifyCapacityReservationResult modifyCapacityReservation(ModifyCapacityReservationRequest request) {\n    request = beforeClientExecution(request);\n    return executeModifyCapacityReservation(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Modify", "$$Capacity", "$$Reserv", "$$ation", "$$Response", "\u2581Modify", "$$Capacity", "$$Reserv", "$$ation", "$$(Modify", "$$Capacity", "$$Reserv", "$$ation", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Modify", "$$Capacity", "$$Reserv", "$$ation", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Modify", "$$Capacity", "$$Reserv", "$$ation", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Modify", "$$Capacity", "$$Reserv", "$$ation", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Modify", "$$Capacity", "$$Reserv", "$$ation", "$$Result", "\u2581modify", "$$Capacity", "$$Reserv", "$$ation", "$$(Modify", "$$Capacity", "$$Reserv", "$$ation", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeModify", "$$Capacity", "$$Reserv", "$$ation", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual int size() {\n    lock (mutex) {\n        return c.size();\n    }\n}\n", "java": "@Override public int size() {\n    synchronized (mutex) {\n        return c.size();\n    }\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581int", "\u2581size()", "\u2581{"], ["\u2581lock", "\u2581(m", "$$u", "$$tex", "$$)", "\u2581{"], ["\u2581return", "\u2581c", "$$.size()", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581@Override", "\u2581public", "\u2581int", "\u2581size()", "\u2581{"], ["\u2581synchronized", "\u2581(m", "$$u", "$$tex", "$$)", "\u2581{"], ["\u2581return", "\u2581c", "$$.size()", "$$;"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public override void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\n    for (int j = 0; j < iterations; ++j) {\n        values[valuesOffset++] = blocks[blocksOffset++] & 0xFF;\n    }\n}\n", "java": "public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n    for (int j = 0; j < iterations; ++j) {\n        values[valuesOffset++] = blocks[blocksOffset++] & 0xFF;\n    }\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581void", "\u2581D", "$$ecode", "$$(byte[]", "\u2581blocks,", "\u2581int", "\u2581blocksOffset,", "\u2581int[]", "\u2581values,", "\u2581int", "\u2581valuesOffset,", "\u2581int", "\u2581iterations)", "\u2581{"], ["\u2581for", "\u2581(int", "\u2581j", "\u2581=", "\u25810;", "\u2581j", "\u2581<", "\u2581iterations;", "\u2581++", "$$j", "$$)", "\u2581{"], ["\u2581values[valuesOffset++]", "\u2581=", "\u2581blocks[blocksOffset++]", "\u2581&", "\u25810xFF", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581decode", "$$(byte[]", "\u2581blocks,", "\u2581int", "\u2581blocksOffset,", "\u2581long[]", "\u2581values,", "\u2581int", "\u2581valuesOffset,", "\u2581int", "\u2581iterations)", "\u2581{"], ["\u2581for", "\u2581(int", "\u2581j", "\u2581=", "\u25810;", "\u2581j", "\u2581<", "\u2581iterations;", "\u2581++", "$$j", "$$)", "\u2581{"], ["\u2581values[valuesOffset++]", "\u2581=", "\u2581blocks[blocksOffset++]", "\u2581&", "\u25810xFF", "$$;"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public virtual int length() {\n    if (this.type == TYPE_MALFORMED_INPUT || this.type == TYPE_UNMAPPABLE_CHAR) {\n        return this._length;\n    }\n    throw new System.NotSupportedException(\"length meaningless for \" + ToString());\n}\n", "java": "public int length() throws UnsupportedOperationException {\n    if (this.type == TYPE_MALFORMED_INPUT || this.type == TYPE_UNMAPPABLE_CHAR) {\n        return this.length;\n    }\n    throw new UnsupportedOperationException(\"length meaningless for \" + toString());\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581int", "\u2581length", "$$()", "\u2581{"], ["\u2581if", "\u2581(this", "$$.", "$$type", "\u2581==", "\u2581T", "$$YP", "$$E_", "$$M", "$$AL", "$$F", "$$ORM", "$$E", "$$D_", "$$IN", "$$P", "$$UT", "\u2581||", "\u2581this.", "$$type", "\u2581==", "\u2581T", "$$YP", "$$E_", "$$UN", "$$M", "$$AP", "$$P", "$$A", "$$BLE", "$$_", "$$CHAR", "$$)", "\u2581{"], ["\u2581return", "\u2581this._", "$$length", "$$;"], ["\u2581}"], ["\u2581throw", "\u2581new", "\u2581System.Not", "$$Supported", "$$Exception(\"", "$$length", "\u2581m", "$$e", "$$an", "$$ing", "$$les", "$$s", "\u2581for", "\u2581\"", "\u2581+", "\u2581ToString()", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581int", "\u2581length", "$$()", "\u2581throws", "\u2581Un", "$$supported", "$$Operation", "$$Exception", "\u2581{"], ["\u2581if", "\u2581(this", "$$.", "$$type", "\u2581==", "\u2581T", "$$YP", "$$E_", "$$M", "$$AL", "$$F", "$$ORM", "$$E", "$$D_", "$$IN", "$$P", "$$UT", "\u2581||", "\u2581this.", "$$type", "\u2581==", "\u2581T", "$$YP", "$$E_", "$$UN", "$$M", "$$AP", "$$P", "$$A", "$$BLE", "$$_", "$$CHAR", "$$)", "\u2581{"], ["\u2581return", "\u2581this.", "$$length", "$$;"], ["\u2581}"], ["\u2581throw", "\u2581new", "\u2581Un", "$$supported", "$$Operation", "$$Exception(\"", "$$length", "\u2581m", "$$e", "$$an", "$$ing", "$$les", "$$s", "\u2581for", "\u2581\"", "\u2581+", "\u2581toString()", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override String ToFormulaString() {\n    throw Invalid();\n}\n", "java": "public String toFormulaString() {\n    throw invalid();\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581String", "\u2581To", "$$Formula", "$$String()", "\u2581{"], ["\u2581throw", "\u2581Invalid", "$$()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581String", "\u2581to", "$$Formula", "$$String()", "\u2581{"], ["\u2581throw", "\u2581in", "$$valid", "$$()", "$$;"], ["\u2581}"]]}, {"cs": "public E next() {\n    if (iterator.nextIndex() < end) {\n        return iterator.next();\n    }\n    throw new java.util.NoSuchElementException();\n}\n", "java": "public E next() {\n    if (iterator.nextIndex() < end) {\n        return iterator.next();\n    }\n    throw new NoSuchElementException();\n}\n", "cs_t": [["\u2581public", "\u2581E", "\u2581next", "$$()", "\u2581{"], ["\u2581if", "\u2581(i", "$$terator", "$$.next", "$$Index", "$$()", "\u2581<", "\u2581end)", "\u2581{"], ["\u2581return", "\u2581iterator", "$$.next", "$$()", "$$;"], ["\u2581}"], ["\u2581throw", "\u2581new", "\u2581java.util.", "$$No", "$$Su", "$$ch", "$$E", "$$lem", "$$entException", "$$()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581E", "\u2581next", "$$()", "\u2581{"], ["\u2581if", "\u2581(i", "$$terator", "$$.next", "$$Index", "$$()", "\u2581<", "\u2581end)", "\u2581{"], ["\u2581return", "\u2581iterator", "$$.next", "$$()", "$$;"], ["\u2581}"], ["\u2581throw", "\u2581new", "\u2581N", "$$o", "$$Su", "$$ch", "$$E", "$$lem", "$$entException", "$$()", "$$;"], ["\u2581}"]]}, {"cs": "public static string ToHex(byte value) {\n    return ToHex((long)value, 2);\n}\n", "java": "public static String toHex(long value) {\n    StringBuilder sb = new StringBuilder(16);\n    writeHex(sb, value, 16, \"\");\n    return sb.toString();\n}\n", "cs_t": [["\u2581public", "\u2581static", "\u2581string", "\u2581To", "$$Hex", "$$(byte", "\u2581value)", "\u2581{"], ["\u2581return", "\u2581To", "$$Hex", "$$((", "$$long", "$$)", "$$value", "$$,", "\u25812)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581static", "\u2581String", "\u2581to", "$$Hex", "$$(long", "\u2581value)", "\u2581{"], ["\u2581StringBuilder", "\u2581sb", "\u2581=", "\u2581new", "\u2581StringBuilder(", "$$16", "$$)", "$$;"], ["\u2581write", "$$Hex", "$$(s", "$$b", "$$,", "\u2581value", "$$,", "\u258116", "$$,", "\u2581\"", "$$\")", "$$;"], ["\u2581return", "\u2581sb", "$$.toString()", "$$;"], ["\u2581}"]]}, {"cs": "public override long Get(int index) {\n    int o = (int)((uint)index >> 6);\n    int b = index & 63;\n    int shift = b << 0;\n    return ((long)((ulong)blocks[o] >> shift)) & 1L;\n}\n", "java": "public long get(int index) {\n    final int o = index >>> 6;\n    final int b = index & 63;\n    final int shift = b << 0;\n    return (blocks[o] >>> shift) & 1L;\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581long", "\u2581Get", "$$(int", "\u2581index)", "\u2581{"], ["\u2581int", "\u2581o", "\u2581=", "\u2581(int", "$$)((", "$$uint)", "$$index", "\u2581>>", "\u25816", "$$)", "$$;"], ["\u2581int", "\u2581b", "\u2581=", "\u2581index", "\u2581&", "\u25816", "$$3", "$$;"], ["\u2581int", "\u2581shift", "\u2581=", "\u2581b", "\u2581<<", "\u25810;"], ["\u2581return", "\u2581((", "$$long", "$$)((", "$$ul", "$$ong", "$$)", "$$block", "$$s[", "$$o]", "\u2581>>", "\u2581shift", "$$))", "\u2581&", "\u25811", "$$L", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581long", "\u2581get(int", "\u2581index)", "\u2581{"], ["\u2581final", "\u2581int", "\u2581o", "\u2581=", "\u2581index", "\u2581>>>", "\u25816", "$$;"], ["\u2581final", "\u2581int", "\u2581b", "\u2581=", "\u2581index", "\u2581&", "\u25816", "$$3", "$$;"], ["\u2581final", "\u2581int", "\u2581shift", "\u2581=", "\u2581b", "\u2581<<", "\u25810;"], ["\u2581return", "\u2581(block", "$$s[", "$$o]", "\u2581>>>", "\u2581shift", "$$)", "\u2581&", "\u25811", "$$L", "$$;"], ["\u2581}"]]}, {"cs": "public override int[] Clear() {\n    start = end = null;\n    return base.Clear();\n}\n", "java": "public int[] clear() {\n    start = end = null;\n    return super.clear();\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581int[]", "\u2581C", "$$lear()", "\u2581{"], ["\u2581start", "\u2581=", "\u2581end", "\u2581=", "\u2581null", "$$;"], ["\u2581return", "\u2581base", "$$.C", "$$lear()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581int[]", "\u2581clear()", "\u2581{"], ["\u2581start", "\u2581=", "\u2581end", "\u2581=", "\u2581null", "$$;"], ["\u2581return", "\u2581super.", "$$c", "$$lear()", "$$;"], ["\u2581}"]]}, {"cs": "public virtual TokenStream Init(TokenStream tokenStream) {\n    termAtt = tokenStream.AddAttribute<ICharTermAttribute>();\n    return null;\n}\n", "java": "public TokenStream init(TokenStream tokenStream) {\n    termAtt = tokenStream.addAttribute(CharTermAttribute.class);\n    return null;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581TokenStream", "\u2581In", "$$it", "$$(TokenStream", "\u2581token", "$$Stream", "$$)", "\u2581{"], ["\u2581term", "$$Att", "\u2581=", "\u2581token", "$$Stream", "$$.Add", "$$Attribute", "$$<", "$$I", "$$Char", "$$Term", "$$Attribute", "$$>", "$$()", "$$;"], ["\u2581return", "\u2581null", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581TokenStream", "\u2581in", "$$it", "$$(TokenStream", "\u2581token", "$$Stream", "$$)", "\u2581{"], ["\u2581term", "$$Att", "\u2581=", "\u2581token", "$$Stream", "$$.add", "$$Attribute", "$$(", "$$Char", "$$Term", "$$Attribute", "$$.c", "$$las", "$$s)", "$$;"], ["\u2581return", "\u2581null", "$$;"], ["\u2581}"]]}, {"cs": "public virtual UpdateGameServerGroupResponse UpdateGameServerGroup(UpdateGameServerGroupRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = UpdateGameServerGroupRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = UpdateGameServerGroupResponseUnmarshaller.Instance;\n    return Invoke<UpdateGameServerGroupResponse>(request, options);\n}\n", "java": "public UpdateGameServerGroupResult updateGameServerGroup(UpdateGameServerGroupRequest request) {\n    request = beforeClientExecution(request);\n    return executeUpdateGameServerGroup(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Update", "$$GameServer", "$$Group", "$$Response", "\u2581Update", "$$GameServer", "$$Group", "$$(Update", "$$GameServer", "$$GroupRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Update", "$$GameServer", "$$Group", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Update", "$$GameServer", "$$Group", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Update", "$$GameServer", "$$Group", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Update", "$$GameServer", "$$Group", "$$Result", "\u2581update", "$$GameServer", "$$Group", "$$(Update", "$$GameServer", "$$GroupRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeUpdate", "$$GameServer", "$$Group", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public UnmappableCharacterException(int length) {\n    this.inputLength = length;\n}\n", "java": "public UnmappableCharacterException(int length) {\n    this.inputLength = length;\n}\n", "cs_t": [["\u2581public", "\u2581", "$$Unm", "$$ap", "$$p", "$$able", "$$Character", "$$Exception", "$$(int", "\u2581length)", "\u2581{"], ["\u2581this.", "$$input", "$$Length", "\u2581=", "\u2581length", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581", "$$Unm", "$$ap", "$$p", "$$able", "$$Character", "$$Exception", "$$(int", "\u2581length)", "\u2581{"], ["\u2581this.", "$$input", "$$Length", "\u2581=", "\u2581length", "$$;"], ["\u2581}"]]}, {"cs": "public virtual UpdateIdentityProviderConfigurationResponse UpdateIdentityProviderConfiguration(UpdateIdentityProviderConfigurationRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = UpdateIdentityProviderConfigurationRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = UpdateIdentityProviderConfigurationResponseUnmarshaller.Instance;\n    return Invoke<UpdateIdentityProviderConfigurationResponse>(request, options);\n}\n", "java": "public UpdateIdentityProviderConfigurationResult updateIdentityProviderConfiguration(UpdateIdentityProviderConfigurationRequest request) {\n    request = beforeClientExecution(request);\n    return executeUpdateIdentityProviderConfiguration(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Update", "$$Identity", "$$Provider", "$$Configuration", "$$Response", "\u2581Update", "$$Identity", "$$Provider", "$$Configuration", "$$(Update", "$$Identity", "$$Provider", "$$ConfigurationRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Update", "$$Identity", "$$Provider", "$$Configuration", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Update", "$$Identity", "$$Provider", "$$Configuration", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Update", "$$Identity", "$$Provider", "$$Configuration", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Update", "$$Identity", "$$Provider", "$$Configuration", "$$Result", "\u2581update", "$$Identity", "$$Provider", "$$Configuration", "$$(Update", "$$Identity", "$$Provider", "$$ConfigurationRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeUpdate", "$$Identity", "$$Provider", "$$Configuration", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override int lastIndexOf(object @object) {\n    if (@object != null) {\n        {\n            for (int i = a.Length - 1; i >= 0; i--) {\n                if (@object.Equals(a[i])) {\n                    return i;\n                }\n            }\n        }\n    }\n    else {\n        {\n            for (int i = a.Length - 1; i >= 0; i--) {\n                if ((object)a[i] == null) {\n                    return i;\n                }\n            }\n        }\n    }\n    return -1;\n}\n", "java": "@Override public int lastIndexOf(Object object) {\n    Object[] a = array;\n    if (object != null) {\n        for (int i = size - 1; i >= 0; i--) {\n            if (object.equals(a[i])) {\n                return i;\n            }\n        }\n    }\n    else {\n        for (int i = size - 1; i >= 0; i--) {\n            if (a[i] == null) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581int", "\u2581last", "$$Index", "$$Of", "$$(object", "\u2581@object)", "\u2581{"], ["\u2581if", "\u2581(@", "$$object", "\u2581!=", "\u2581null)", "\u2581{"], ["\u2581{"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u2581a", "$$.Length", "\u2581-", "\u25811", "$$;", "\u2581i", "\u2581>=", "\u25810;", "\u2581i", "$$--", "$$)", "\u2581{"], ["\u2581if", "\u2581(@", "$$object", "$$.Equals(", "$$a", "$$[i]", "$$))", "\u2581{"], ["\u2581return", "\u2581i", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581}"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581{"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u2581a", "$$.Length", "\u2581-", "\u25811", "$$;", "\u2581i", "\u2581>=", "\u25810;", "\u2581i", "$$--", "$$)", "\u2581{"], ["\u2581if", "\u2581(", "$$(object", "$$)", "$$a", "$$[i]", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581return", "\u2581i", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581}"], ["\u2581}"], ["\u2581return", "\u2581-1", "$$;"], ["\u2581}"]], "java_t": [["\u2581@Override", "\u2581public", "\u2581int", "\u2581last", "$$Index", "$$Of(", "$$Object", "\u2581object)", "\u2581{"], ["\u2581Object", "$$[]", "\u2581a", "\u2581=", "\u2581array", "$$;"], ["\u2581if", "\u2581(", "$$object", "\u2581!=", "\u2581null)", "\u2581{"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u2581size", "\u2581-", "\u25811", "$$;", "\u2581i", "\u2581>=", "\u25810;", "\u2581i", "$$--", "$$)", "\u2581{"], ["\u2581if", "\u2581(", "$$object", "$$.equals(", "$$a", "$$[i]", "$$))", "\u2581{"], ["\u2581return", "\u2581i", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u2581size", "\u2581-", "\u25811", "$$;", "\u2581i", "\u2581>=", "\u25810;", "\u2581i", "$$--", "$$)", "\u2581{"], ["\u2581if", "\u2581(a", "$$[i]", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581return", "\u2581i", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581}"], ["\u2581return", "\u2581-1", "$$;"], ["\u2581}"]]}, {"cs": "public ConstantScoreQueryBuilder(FilterBuilderFactory filterFactory) {\n    this.filterFactory = filterFactory;\n}\n", "java": "public ConstantScoreQueryBuilder(QueryBuilderFactory queryFactory) {\n    this.queryFactory = queryFactory;\n}\n", "cs_t": [["\u2581public", "\u2581", "$$Constant", "$$Score", "$$Query", "$$Builder", "$$(", "$$Filter", "$$Builder", "$$Factory", "\u2581filter", "$$Factory", "$$)", "\u2581{"], ["\u2581this.", "$$filter", "$$Factory", "\u2581=", "\u2581filter", "$$Factory", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581", "$$Constant", "$$Score", "$$Query", "$$Builder", "$$(", "$$Query", "$$Builder", "$$Factory", "\u2581query", "$$Factory", "$$)", "\u2581{"], ["\u2581this.", "$$query", "$$Factory", "\u2581=", "\u2581query", "$$Factory", "$$;"], ["\u2581}"]]}, {"cs": "public virtual int GetNumberOfOnChannelTokens() {\n    int n = 0;\n    Fill();\n    for (int i = 0; i < tokens.Count; i++) {\n        IToken t = tokens[i];\n        if (t.Channel == channel) {\n            n++;\n        }\n        if (t.Type == TokenConstants.EOF) {\n            break;\n        }\n    }\n    return n;\n}\n", "java": "public int getNumberOfOnChannelTokens() {\n    int n = 0;\n    fill();\n    for (int i = 0; i < tokens.size(); i++) {\n        Token t = tokens.get(i);\n        if ( t.getChannel()==channel ) n++;\n        if ( t.getType()==Token.EOF ) break;\n    }\n    return n;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581int", "\u2581Get", "$$Number", "$$Of", "$$On", "$$Channel", "$$Token", "$$s()", "\u2581{"], ["\u2581int", "\u2581n", "\u2581=", "\u25810;"], ["\u2581", "$$Fill", "$$()", "$$;"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810;", "\u2581i", "\u2581<", "\u2581token", "$$s.Count", "$$;", "\u2581i++)", "\u2581{"], ["\u2581I", "$$Token", "\u2581t", "\u2581=", "\u2581token", "$$s[i]", "$$;"], ["\u2581if", "\u2581(t", "$$.", "$$Channel", "\u2581==", "\u2581ch", "$$annel", "$$)", "\u2581{"], ["\u2581n", "$$++", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(t", "$$.", "$$Type", "\u2581==", "\u2581Token", "$$Constants.", "$$E", "$$OF", "$$)", "\u2581{"], ["\u2581break", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581return", "\u2581n", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581int", "\u2581get", "$$Number", "$$Of", "$$On", "$$Channel", "$$Token", "$$s()", "\u2581{"], ["\u2581int", "\u2581n", "\u2581=", "\u25810;"], ["\u2581fill", "$$()", "$$;"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810;", "\u2581i", "\u2581<", "\u2581token", "$$s.size()", "$$;", "\u2581i++)", "\u2581{"], ["\u2581Token", "\u2581t", "\u2581=", "\u2581token", "$$s.get", "$$(i", "$$)", "$$;"], ["\u2581if", "\u2581(", "\u2581t", "$$.get", "$$Channel", "$$()", "$$==", "$$ch", "$$annel", "\u2581)", "\u2581n", "$$++", "$$;"], ["\u2581if", "\u2581(", "\u2581t", "$$.get", "$$Type()", "$$==", "$$Token", "$$.E", "$$OF", "\u2581)", "\u2581break", "$$;"], ["\u2581}"], ["\u2581return", "\u2581n", "$$;"], ["\u2581}"]]}, {"cs": "public POIFSDocumentPath(string[] components) {\n    if (components == null) {\n        this.components = new string[0];\n    }\n    else {\n        this.components = new string[components.Length];\n        for (int i = 0; i < components.Length; i++) {\n            if ((components[i] == null)|| (components[i].Length == 0)) {\n                throw new ArgumentException(\"components cannot contain null or empty strings\");\n            }\n            this.components[i] = components[i];\n        }\n    }\n}\n", "java": "public POIFSDocumentPath(final String [] components)throws IllegalArgumentException {\n    if (components == null) {\n        this.components = new String[ 0 ];\n    }\n    else {\n        this.components = new String[ components.length ];\n        for (int j = 0; j < components.length; j++) {\n            if ((components[ j ] == null)|| (components[ j ].length() == 0)) {\n                throw new IllegalArgumentException(\"components cannot contain null or empty strings\");\n            }\n            this.components[ j ] = components[ j ];\n        }\n    }\n}\n", "cs_t": [["\u2581public", "\u2581P", "$$O", "$$I", "$$F", "$$S", "$$Document", "$$Path", "$$(string", "$$[]", "\u2581com", "$$ponent", "$$s)", "\u2581{"], ["\u2581if", "\u2581(", "$$com", "$$ponent", "$$s", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581this.", "$$com", "$$ponent", "$$s", "\u2581=", "\u2581new", "\u2581string", "$$[0]", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581this.", "$$com", "$$ponent", "$$s", "\u2581=", "\u2581new", "\u2581string", "$$[", "$$com", "$$ponent", "$$s.Length", "$$]", "$$;"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810;", "\u2581i", "\u2581<", "\u2581com", "$$ponent", "$$s.Length;", "\u2581i++)", "\u2581{"], ["\u2581if", "\u2581((", "$$com", "$$ponent", "$$s[i]", "\u2581==", "\u2581null)", "$$|", "$$|", "\u2581(", "$$com", "$$ponent", "$$s[i]", "$$.Length", "\u2581==", "\u25810", "$$))", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581ArgumentException(\"", "$$com", "$$ponent", "$$s", "\u2581c", "$$annot", "\u2581contain", "\u2581null", "\u2581or", "\u2581e", "$$mpty", "\u2581string", "$$s", "$$\")", "$$;"], ["\u2581}"], ["\u2581this.", "$$com", "$$ponent", "$$s[i]", "\u2581=", "\u2581com", "$$ponent", "$$s[i]", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581P", "$$O", "$$I", "$$F", "$$S", "$$Document", "$$Path", "$$(f", "$$inal", "\u2581String", "\u2581", "$$[]", "\u2581com", "$$ponent", "$$s)", "$$throw", "$$s", "\u2581IllegalArgumentException", "\u2581{"], ["\u2581if", "\u2581(", "$$com", "$$ponent", "$$s", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581this.", "$$com", "$$ponent", "$$s", "\u2581=", "\u2581new", "\u2581String", "$$[", "\u25810", "\u2581", "$$]", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581this.", "$$com", "$$ponent", "$$s", "\u2581=", "\u2581new", "\u2581String", "$$[", "\u2581com", "$$ponent", "$$s.length", "\u2581", "$$]", "$$;"], ["\u2581for", "\u2581(int", "\u2581j", "\u2581=", "\u25810;", "\u2581j", "\u2581<", "\u2581com", "$$ponent", "$$s.length;", "\u2581j", "$$++)", "\u2581{"], ["\u2581if", "\u2581((", "$$com", "$$ponent", "$$s[", "\u2581j", "\u2581", "$$]", "\u2581==", "\u2581null)", "$$|", "$$|", "\u2581(", "$$com", "$$ponent", "$$s[", "\u2581j", "\u2581", "$$]", "$$.length()", "\u2581==", "\u25810", "$$))", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581IllegalArgumentException(\"", "$$com", "$$ponent", "$$s", "\u2581c", "$$annot", "\u2581contain", "\u2581null", "\u2581or", "\u2581e", "$$mpty", "\u2581string", "$$s", "$$\")", "$$;"], ["\u2581}"], ["\u2581this.", "$$com", "$$ponent", "$$s[", "\u2581j", "\u2581", "$$]", "\u2581=", "\u2581com", "$$ponent", "$$s[", "\u2581j", "\u2581", "$$]", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public SQLException(string error) : base(error) {\n    throw new System.NotImplementedException();\n}\n", "java": "public SQLException(String theReason) {\n    this(theReason, null, 0);\n}\n", "cs_t": [["\u2581public", "\u2581S", "$$Q", "$$L", "$$Exception", "$$(string", "\u2581error", "$$)", "\u2581:", "\u2581base", "$$(", "$$error", "$$)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581System.NotImplemented", "$$Exception", "$$()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581S", "$$Q", "$$L", "$$Exception", "$$(String", "\u2581the", "$$Re", "$$as", "$$on", "$$)", "\u2581{"], ["\u2581this", "$$(", "$$th", "$$e", "$$Re", "$$as", "$$on", "$$,", "\u2581null", "$$,", "\u25810)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual ListFragmentsResponse ListFragments(ListFragmentsRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = ListFragmentsRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = ListFragmentsResponseUnmarshaller.Instance;\n    return Invoke<ListFragmentsResponse>(request, options);\n}\n", "java": "public ListFragmentsResult listFragments(ListFragmentsRequest request) {\n    request = beforeClientExecution(request);\n    return executeListFragments(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581List", "$$Fra", "$$gment", "$$sResponse", "\u2581List", "$$Fra", "$$gment", "$$s(List", "$$Fra", "$$gment", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581List", "$$Fra", "$$gment", "$$s", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581List", "$$Fra", "$$gment", "$$s", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<List", "$$Fra", "$$gment", "$$sResponse>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581List", "$$Fra", "$$gment", "$$sResult", "\u2581list", "$$Fra", "$$gment", "$$s(List", "$$Fra", "$$gment", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeList", "$$Fra", "$$gment", "$$s", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual IQueryBuilder GetQueryBuilder(string nodeName) {\n    IQueryBuilder result;\n    builders.TryGetValue(nodeName, out result);\n    return result;\n}\n", "java": "public QueryBuilder getQueryBuilder(String nodeName) {\n    return builders.get(nodeName);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581I", "$$Query", "$$Builder", "\u2581Get", "$$Query", "$$Builder", "$$(string", "\u2581n", "$$ode", "$$Name)", "\u2581{"], ["\u2581I", "$$Query", "$$Builder", "\u2581result", "$$;"], ["\u2581build", "$$er", "$$s.", "$$TryGet", "$$Value", "$$(n", "$$ode", "$$Name,", "\u2581out", "\u2581result", "$$)", "$$;"], ["\u2581return", "\u2581result", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Query", "$$Builder", "\u2581get", "$$Query", "$$Builder", "$$(String", "\u2581n", "$$ode", "$$Name)", "\u2581{"], ["\u2581return", "\u2581build", "$$er", "$$s.get", "$$(n", "$$ode", "$$Name)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual CreateDirectoryResponse CreateDirectory(CreateDirectoryRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = CreateDirectoryRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = CreateDirectoryResponseUnmarshaller.Instance;\n    return Invoke<CreateDirectoryResponse>(request, options);\n}\n", "java": "public CreateDirectoryResult createDirectory(CreateDirectoryRequest request) {\n    request = beforeClientExecution(request);\n    return executeCreateDirectory(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Create", "$$Directory", "$$Response", "\u2581Create", "$$Directory", "$$(Create", "$$Directory", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Create", "$$Directory", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Create", "$$Directory", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Create", "$$Directory", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Create", "$$Directory", "$$Result", "\u2581create", "$$Directory", "$$(Create", "$$Directory", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeCreate", "$$Directory", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public int GetExternalSheetIndex(String workbookName, String sheetName) {\n    return OrCreateLinkTable.GetExternalSheetIndex(workbookName, sheetName, sheetName);\n}\n", "java": "public int getExternalSheetIndex(String workbookName, String sheetName) {\n    return getOrCreateLinkTable().getExternalSheetIndex(workbookName, sheetName, sheetName);\n}\n", "cs_t": [["\u2581public", "\u2581int", "\u2581Get", "$$External", "$$SheetIndex", "$$(String", "\u2581work", "$$book", "$$Name,", "\u2581String", "\u2581sheet", "$$Name)", "\u2581{"], ["\u2581return", "\u2581", "$$Or", "$$Create", "$$Link", "$$Table", "$$.Get", "$$External", "$$SheetIndex", "$$(", "$$workbook", "$$Name,", "\u2581sheet", "$$Name,", "\u2581sheet", "$$Name)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581int", "\u2581get", "$$External", "$$SheetIndex", "$$(String", "\u2581work", "$$book", "$$Name,", "\u2581String", "\u2581sheet", "$$Name)", "\u2581{"], ["\u2581return", "\u2581get", "$$Or", "$$Create", "$$Link", "$$Table", "$$().get", "$$External", "$$SheetIndex", "$$(", "$$workbook", "$$Name,", "\u2581sheet", "$$Name,", "\u2581sheet", "$$Name)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual V getValue() {\n    return value;\n}\n", "java": "public V getValue() {\n    return value;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581V", "\u2581get", "$$Value", "$$()", "\u2581{"], ["\u2581return", "\u2581value", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581V", "\u2581get", "$$Value", "$$()", "\u2581{"], ["\u2581return", "\u2581value", "$$;"], ["\u2581}"]]}, {"cs": "public virtual K getKey() {\n    return key;\n}\n", "java": "public K getKey() {\n    return key;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581K", "\u2581get", "$$Key", "$$()", "\u2581{"], ["\u2581return", "\u2581key", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581K", "\u2581get", "$$Key", "$$()", "\u2581{"], ["\u2581return", "\u2581key", "$$;"], ["\u2581}"]]}, {"cs": "public bool hasTransparentBounds() {\n    return transparentBounds;\n}\n", "java": "public boolean hasTransparentBounds() {\n    return transparentBounds;\n}\n", "cs_t": [["\u2581public", "\u2581bool", "\u2581has", "$$Trans", "$$parent", "$$Bound", "$$s()", "\u2581{"], ["\u2581return", "\u2581t", "$$ran", "$$s", "$$parent", "$$Bound", "$$s;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581boolean", "\u2581has", "$$Trans", "$$parent", "$$Bound", "$$s()", "\u2581{"], ["\u2581return", "\u2581t", "$$ran", "$$s", "$$parent", "$$Bound", "$$s;"], ["\u2581}"]]}, {"cs": "public virtual void SetKeepEmpty(bool empty) {\n    keepEmpty = empty;\n}\n", "java": "public void setKeepEmpty(boolean empty) {\n    keepEmpty = empty;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581void", "\u2581Set", "$$K", "$$ee", "$$p", "$$Empty", "$$(bool", "\u2581e", "$$mpty", "$$)", "\u2581{"], ["\u2581k", "$$ee", "$$p", "$$Empty", "\u2581=", "\u2581e", "$$mpty", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581set", "$$K", "$$ee", "$$p", "$$Empty", "$$(boolean", "\u2581e", "$$mpty", "$$)", "\u2581{"], ["\u2581k", "$$ee", "$$p", "$$Empty", "\u2581=", "\u2581e", "$$mpty", "$$;"], ["\u2581}"]]}, {"cs": "public XPathRuleAnywhereElement(string ruleName, int ruleIndex): base(ruleName) {\n    this.ruleIndex = ruleIndex;\n}\n", "java": "public XPathRuleAnywhereElement(String ruleName, int ruleIndex) {\n    super(ruleName);\n    this.ruleIndex = ruleIndex;\n}\n", "cs_t": [["\u2581public", "\u2581", "$$X", "$$Path", "$$Rule", "$$Any", "$$w", "$$h", "$$e", "$$re", "$$Element", "$$(string", "\u2581rule", "$$Name,", "\u2581int", "\u2581rule", "$$Index)", "$$:", "\u2581base", "$$(r", "$$ule", "$$Name)", "\u2581{"], ["\u2581this.", "$$rule", "$$Index", "\u2581=", "\u2581rule", "$$Index", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581", "$$X", "$$Path", "$$Rule", "$$Any", "$$w", "$$h", "$$e", "$$re", "$$Element", "$$(String", "\u2581rule", "$$Name,", "\u2581int", "\u2581rule", "$$Index)", "\u2581{"], ["\u2581super(", "$$rule", "$$Name)", "$$;"], ["\u2581this.", "$$rule", "$$Index", "\u2581=", "\u2581rule", "$$Index", "$$;"], ["\u2581}"]]}, {"cs": "public int GetHeight() {\n    return height;\n}\n", "java": "public int getHeight() {\n    return _height;\n}\n", "cs_t": [["\u2581public", "\u2581int", "\u2581Get", "$$H", "$$eight", "$$()", "\u2581{"], ["\u2581return", "\u2581h", "$$eight", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581int", "\u2581get", "$$H", "$$eight", "$$()", "\u2581{"], ["\u2581return", "\u2581_", "$$h", "$$eight", "$$;"], ["\u2581}"]]}, {"cs": "public void Write(OpenStringBuilder arr) {\n    Write(arr.m_buf, 0, arr.Length);\n}\n", "java": "public final void write(OpenStringBuilder arr) {\n    write(arr.buf, 0, len);\n}\n", "cs_t": [["\u2581public", "\u2581void", "\u2581Write", "$$(", "$$Open", "$$String", "$$Builder", "\u2581arr", "$$)", "\u2581{"], ["\u2581Write", "$$(", "$$ar", "$$r", "$$.", "$$m_", "$$buf", "$$,", "\u25810,", "\u2581arr", "$$.Length)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581final", "\u2581void", "\u2581write", "$$(", "$$Open", "$$String", "$$Builder", "\u2581arr", "$$)", "\u2581{"], ["\u2581write", "$$(", "$$ar", "$$r", "$$.", "$$buf", "$$,", "\u25810,", "\u2581len)", "$$;"], ["\u2581}"]]}, {"cs": "public override void jumpDrawablesToCurrentState() {\n    base.jumpDrawablesToCurrentState();\n    if (mThumb != null) {\n        mThumb.jumpToCurrentState();\n    }\n}\n", "java": "public void jumpDrawablesToCurrentState() {\n    super.jumpDrawablesToCurrentState();\n    if (mThumb != null) mThumb.jumpToCurrentState();\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581void", "\u2581j", "$$ump", "$$Draw", "$$ables", "$$To", "$$Current", "$$State", "$$()", "\u2581{"], ["\u2581base", "$$.", "$$j", "$$ump", "$$Draw", "$$ables", "$$To", "$$Current", "$$State", "$$()", "$$;"], ["\u2581if", "\u2581(m", "$$Th", "$$um", "$$b", "\u2581!=", "\u2581null)", "\u2581{"], ["\u2581m", "$$Th", "$$um", "$$b", "$$.", "$$j", "$$ump", "$$To", "$$Current", "$$State", "$$()", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581j", "$$ump", "$$Draw", "$$ables", "$$To", "$$Current", "$$State", "$$()", "\u2581{"], ["\u2581super.", "$$j", "$$ump", "$$Draw", "$$ables", "$$To", "$$Current", "$$State", "$$()", "$$;"], ["\u2581if", "\u2581(m", "$$Th", "$$um", "$$b", "\u2581!=", "\u2581null)", "\u2581m", "$$Th", "$$um", "$$b", "$$.", "$$j", "$$ump", "$$To", "$$Current", "$$State", "$$()", "$$;"], ["\u2581}"]]}, {"cs": "public override void SetParams(string @params) {\n    base.SetParams(@params);\n    StreamTokenizer stok = new StreamTokenizer(new StringReader(@params));\n    stok.QuoteChar('\"');\n    stok.QuoteChar('\\'');\n    stok.EndOfLineIsSignificant = false;\n    stok.OrdinaryChar(',');\n    try {\n        while (stok.NextToken() != StreamTokenizer.TokenType_EndOfStream) {\n            switch (stok.TokenType) {\n            case ',': {\n                break;\n            }\n            case '\\'':\n            case '\\\"':\n            case StreamTokenizer.TokenType_Word: {\n                analyzerNames.Add(stok.StringValue);\n                break;\n            }\n            default: {\n                throw new Exception(\"Unexpected token: \" + stok.ToString());\n            }\n            }\n        }\n    }\n    catch (Exception e) {\n        if (e.Message.StartsWith(\"Line #\", StringComparison.Ordinal)) {\n            throw;\n        }\n        else {\n            throw new Exception(\"Line #\" + (stok.LineNumber + AlgLineNum) + \": \", e);\n        }\n    }\n}\n", "java": "public void setParams(String params) {\n    super.setParams(params);\n    final StreamTokenizer stok = new StreamTokenizer(new StringReader(params));\n    stok.quoteChar('\"');\n    stok.quoteChar('\\'');\n    stok.eolIsSignificant(false);\n    stok.ordinaryChar(',');\n    try {\n        while (stok.nextToken() != StreamTokenizer.TT_EOF) {\n            switch (stok.ttype) {\n            case ',': {\n                break;\n            }\n            case '\\'':\n            case '\\\"':\n            case StreamTokenizer.TT_WORD: {\n                analyzerNames.add(stok.sval);\n                break;\n            }\n            default: {\n                throw new RuntimeException(\"Unexpected token: \" + stok.toString());\n            }\n            }\n        }\n    }\n    catch (RuntimeException e) {\n        if (e.getMessage().startsWith(\"Line #\")) {\n            throw e;\n        }\n        else {\n            throw new RuntimeException(\"Line #\" + (stok.lineno() + getAlgLineNum()) + \": \", e);\n        }\n    }\n    catch (Throwable t) {\n        throw new RuntimeException(\"Line #\" + (stok.lineno() + getAlgLineNum()) + \": \", t);\n    }\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581void", "\u2581Set", "$$Param", "$$s(", "$$string", "\u2581@", "$$param", "$$s)", "\u2581{"], ["\u2581base", "$$.Set", "$$Param", "$$s(", "$$@", "$$param", "$$s)", "$$;"], ["\u2581", "$$Stream", "$$Token", "$$izer", "\u2581st", "$$ok", "\u2581=", "\u2581new", "\u2581", "$$Stream", "$$Token", "$$izer", "$$(new", "\u2581String", "$$Read", "$$er(", "$$@", "$$param", "$$s", "$$))", "$$;"], ["\u2581st", "$$ok", "$$.", "$$Qu", "$$ote", "$$Char", "$$(", "$$'", "$$\"", "$$')", "$$;"], ["\u2581st", "$$ok", "$$.", "$$Qu", "$$ote", "$$Char", "$$(", "$$'", "$$\\", "$$'", "$$')", "$$;"], ["\u2581st", "$$ok", "$$.", "$$End", "$$Of", "$$Line", "$$Is", "$$Sign", "$$ific", "$$ant", "\u2581=", "\u2581false", "$$;"], ["\u2581st", "$$ok", "$$.", "$$Ord", "$$inary", "$$Char", "$$(", "$$'", "$$,", "$$')", "$$;"], ["\u2581try", "\u2581{"], ["\u2581while", "\u2581(", "$$st", "$$ok", "$$.N", "$$ext", "$$Token", "$$()", "\u2581!=", "\u2581", "$$Stream", "$$Token", "$$iz", "$$er.", "$$Token", "$$Type", "$$_", "$$End", "$$Of", "$$Stream", "$$)", "\u2581{"], ["\u2581switch", "\u2581(", "$$st", "$$ok", "$$.", "$$Token", "$$Type", "$$)", "\u2581{"], ["\u2581case", "\u2581'", "$$,", "$$'", "$$:", "\u2581{"], ["\u2581break", "$$;"], ["\u2581}"], ["\u2581case", "\u2581'", "$$\\", "$$'", "$$'", "$$:"], ["\u2581case", "\u2581'", "$$\\\"", "$$'", "$$:"], ["\u2581case", "\u2581", "$$Stream", "$$Token", "$$iz", "$$er.", "$$Token", "$$Type", "$$_", "$$Word", "$$:", "\u2581{"], ["\u2581analyzer", "$$Names", "$$.Add(", "$$st", "$$ok", "$$.", "$$String", "$$Value)", "$$;"], ["\u2581break", "$$;"], ["\u2581}"], ["\u2581default", "$$:", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581Exception(\"", "$$Un", "$$expected", "\u2581token", "$$:", "\u2581\"", "\u2581+", "\u2581st", "$$ok", "$$.ToString()", "$$)", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581}"], ["\u2581}"], ["\u2581catch", "\u2581(", "$$Exception", "\u2581e)", "\u2581{"], ["\u2581if", "\u2581(e", "$$.", "$$Message", "$$.", "$$Start", "$$sWith", "$$(\"", "$$Line", "\u2581", "$$#", "$$\",", "\u2581StringComparison.Ordinal", "$$))", "\u2581{"], ["\u2581throw", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581Exception(\"", "$$Line", "\u2581", "$$#", "$$\"", "\u2581+", "\u2581(", "$$st", "$$ok", "$$.", "$$Line", "$$Number", "\u2581+", "\u2581A", "$$l", "$$g", "$$Line", "$$Num", "$$)", "\u2581+", "\u2581\":", "\u2581\",", "\u2581e)", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581set", "$$Param", "$$s(", "$$String", "\u2581par", "$$am", "$$s)", "\u2581{"], ["\u2581super.", "$$set", "$$Param", "$$s(", "$$param", "$$s)", "$$;"], ["\u2581final", "\u2581", "$$Stream", "$$Token", "$$izer", "\u2581st", "$$ok", "\u2581=", "\u2581new", "\u2581", "$$Stream", "$$Token", "$$izer", "$$(new", "\u2581String", "$$Read", "$$er(", "$$param", "$$s", "$$))", "$$;"], ["\u2581st", "$$ok", "$$.", "$$qu", "$$ote", "$$Char", "$$(", "$$'", "$$\"", "$$')", "$$;"], ["\u2581st", "$$ok", "$$.", "$$qu", "$$ote", "$$Char", "$$(", "$$'", "$$\\", "$$'", "$$')", "$$;"], ["\u2581st", "$$ok", "$$.", "$$e", "$$ol", "$$Is", "$$Sign", "$$ific", "$$ant", "$$(f", "$$alse", "$$)", "$$;"], ["\u2581st", "$$ok", "$$.", "$$ord", "$$inary", "$$Char", "$$(", "$$'", "$$,", "$$')", "$$;"], ["\u2581try", "\u2581{"], ["\u2581while", "\u2581(", "$$st", "$$ok", "$$.next", "$$Token", "$$()", "\u2581!=", "\u2581", "$$Stream", "$$Token", "$$iz", "$$er.", "$$T", "$$T_", "$$E", "$$OF", "$$)", "\u2581{"], ["\u2581switch", "\u2581(", "$$st", "$$ok", "$$.", "$$t", "$$type", "$$)", "\u2581{"], ["\u2581case", "\u2581'", "$$,", "$$'", "$$:", "\u2581{"], ["\u2581break", "$$;"], ["\u2581}"], ["\u2581case", "\u2581'", "$$\\", "$$'", "$$'", "$$:"], ["\u2581case", "\u2581'", "$$\\\"", "$$'", "$$:"], ["\u2581case", "\u2581", "$$Stream", "$$Token", "$$iz", "$$er.", "$$T", "$$T_", "$$W", "$$OR", "$$D", "$$:", "\u2581{"], ["\u2581analyzer", "$$Names", "$$.add(", "$$st", "$$ok", "$$.", "$$s", "$$val", "$$)", "$$;"], ["\u2581break", "$$;"], ["\u2581}"], ["\u2581default", "$$:", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581RuntimeException(\"", "$$Un", "$$expected", "\u2581token", "$$:", "\u2581\"", "\u2581+", "\u2581st", "$$ok", "$$.toString()", "$$)", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581}"], ["\u2581}"], ["\u2581catch", "\u2581(", "$$Runtime", "$$Exception", "\u2581e)", "\u2581{"], ["\u2581if", "\u2581(e", "$$.get", "$$Message", "$$().", "$$start", "$$sWith", "$$(\"", "$$Line", "\u2581", "$$#", "$$\"", "$$))", "\u2581{"], ["\u2581throw", "\u2581e", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581RuntimeException(\"", "$$Line", "\u2581", "$$#", "$$\"", "\u2581+", "\u2581(", "$$st", "$$ok", "$$.", "$$l", "$$in", "$$en", "$$o", "$$()", "\u2581+", "\u2581get", "$$Al", "$$g", "$$Line", "$$Num", "$$())", "\u2581+", "\u2581\":", "\u2581\",", "\u2581e)", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581catch", "\u2581(", "$$Th", "$$row", "$$able", "\u2581t", "$$)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581RuntimeException(\"", "$$Line", "\u2581", "$$#", "$$\"", "\u2581+", "\u2581(", "$$st", "$$ok", "$$.", "$$l", "$$in", "$$en", "$$o", "$$()", "\u2581+", "\u2581get", "$$Al", "$$g", "$$Line", "$$Num", "$$())", "\u2581+", "\u2581\":", "\u2581\",", "\u2581t", "$$)", "$$;"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public virtual DescribeVolumesResponse DescribeVolumes(DescribeVolumesRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DescribeVolumesRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DescribeVolumesResponseUnmarshaller.Instance;\n    return Invoke<DescribeVolumesResponse>(request, options);\n}\n", "java": "public DescribeVolumesResult describeVolumes(DescribeVolumesRequest request) {\n    request = beforeClientExecution(request);\n    return executeDescribeVolumes(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Describe", "$$Vol", "$$um", "$$es", "$$Response", "\u2581Describe", "$$Vol", "$$um", "$$es", "$$(Describe", "$$Vol", "$$um", "$$es", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Describe", "$$Vol", "$$um", "$$es", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Describe", "$$Vol", "$$um", "$$es", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Describe", "$$Vol", "$$um", "$$es", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Describe", "$$Vol", "$$um", "$$es", "$$Result", "\u2581describe", "$$Vol", "$$um", "$$es", "$$(Describe", "$$Vol", "$$um", "$$es", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDescribe", "$$Vol", "$$um", "$$es", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DescribeFlowLogsResponse DescribeFlowLogs(DescribeFlowLogsRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DescribeFlowLogsRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DescribeFlowLogsResponseUnmarshaller.Instance;\n    return Invoke<DescribeFlowLogsResponse>(request, options);\n}\n", "java": "public DescribeFlowLogsResult describeFlowLogs(DescribeFlowLogsRequest request) {\n    request = beforeClientExecution(request);\n    return executeDescribeFlowLogs(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Describe", "$$Flow", "$$Log", "$$sResponse", "\u2581Describe", "$$Flow", "$$Log", "$$s(Describe", "$$Flow", "$$Log", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Describe", "$$Flow", "$$Log", "$$s", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Describe", "$$Flow", "$$Log", "$$s", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Describe", "$$Flow", "$$Log", "$$sResponse>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Describe", "$$Flow", "$$Log", "$$sResult", "\u2581describe", "$$Flow", "$$Log", "$$s(Describe", "$$Flow", "$$Log", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDescribe", "$$Flow", "$$Log", "$$s", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual UpdateMethodResponse UpdateMethod(UpdateMethodRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = UpdateMethodRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = UpdateMethodResponseUnmarshaller.Instance;\n    return Invoke<UpdateMethodResponse>(request, options);\n}\n", "java": "public UpdateMethodResult updateMethod(UpdateMethodRequest request) {\n    request = beforeClientExecution(request);\n    return executeUpdateMethod(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Update", "$$Method", "$$Response", "\u2581Update", "$$Method(", "$$Update", "$$Method", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Update", "$$Method", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Update", "$$Method", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Update", "$$Method", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Update", "$$Method", "$$Result", "\u2581update", "$$Method(", "$$Update", "$$Method", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeUpdate", "$$Method", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public GetAuthorizationTokenRequest(): base(\"cr\", \"2016-06-07\", \"GetAuthorizationToken\", \"cr\", \"openAPI\") {\n    UriPattern = \"/tokens\";\n    Method = MethodType.GET;\n}\n", "java": "public GetAuthorizationTokenRequest() {\n    super(\"cr\", \"2016-06-07\", \"GetAuthorizationToken\", \"cr\");\n    setUriPattern(\"/tokens\");\n    setMethod(MethodType.GET);\n}\n", "cs_t": [["\u2581public", "\u2581Get", "$$Authorization", "$$Token", "$$Request():", "\u2581base(\"", "$$cr\",", "\u2581\"2016-06-07\",", "\u2581\"Get", "$$Authorization", "$$Token", "$$\",", "\u2581\"", "$$cr\",", "\u2581\"openAPI\")", "\u2581{"], ["\u2581", "$$UriPattern", "\u2581=", "\u2581\"/", "$$token", "$$s", "$$\"", "$$;"], ["\u2581Method", "\u2581=", "\u2581Method", "$$Type.", "$$GE", "$$T", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Get", "$$Authorization", "$$Token", "$$Request()", "\u2581{"], ["\u2581super(\"", "$$cr\",", "\u2581\"2016-06-07\",", "\u2581\"Get", "$$Authorization", "$$Token", "$$\",", "\u2581\"", "$$cr", "$$\")", "$$;"], ["\u2581set", "$$UriPattern", "$$(\"/", "$$token", "$$s", "$$\")", "$$;"], ["\u2581setMethod(Method", "$$Type.", "$$GE", "$$T", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual StopContactResponse StopContact(StopContactRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = StopContactRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = StopContactResponseUnmarshaller.Instance;\n    return Invoke<StopContactResponse>(request, options);\n}\n", "java": "public StopContactResult stopContact(StopContactRequest request) {\n    request = beforeClientExecution(request);\n    return executeStopContact(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Stop", "$$Contact", "$$Response", "\u2581Stop", "$$Contact", "$$(", "$$Stop", "$$Contact", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Stop", "$$Contact", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Stop", "$$Contact", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<", "$$Stop", "$$Contact", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Stop", "$$Contact", "$$Result", "\u2581stop", "$$Contact", "$$(", "$$Stop", "$$Contact", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581execute", "$$Stop", "$$Contact", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual CreateDataSetResponse CreateDataSet(CreateDataSetRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = CreateDataSetRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = CreateDataSetResponseUnmarshaller.Instance;\n    return Invoke<CreateDataSetResponse>(request, options);\n}\n", "java": "public CreateDataSetResult createDataSet(CreateDataSetRequest request) {\n    request = beforeClientExecution(request);\n    return executeCreateDataSet(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Create", "$$Data", "$$Set", "$$Response", "\u2581Create", "$$Data", "$$Set", "$$(Create", "$$Data", "$$Set", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Create", "$$Data", "$$Set", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Create", "$$Data", "$$Set", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Create", "$$Data", "$$Set", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Create", "$$Data", "$$Set", "$$Result", "\u2581create", "$$Data", "$$Set", "$$(Create", "$$Data", "$$Set", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeCreate", "$$Data", "$$Set", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual NGit.ObjectDatabase NewCachedDatabase() {\n    return this;\n}\n", "java": "public ObjectDatabase newCachedDatabase() {\n    return this;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581NGit.", "$$Object", "$$Database", "\u2581N", "$$ew", "$$Cached", "$$Database", "$$()", "\u2581{"], ["\u2581return", "\u2581this", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Object", "$$Database", "\u2581new", "$$Cached", "$$Database", "$$()", "\u2581{"], ["\u2581return", "\u2581this", "$$;"], ["\u2581}"]]}, {"cs": "public virtual CreateJourneyResponse CreateJourney(CreateJourneyRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = CreateJourneyRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = CreateJourneyResponseUnmarshaller.Instance;\n    return Invoke<CreateJourneyResponse>(request, options);\n}\n", "java": "public CreateJourneyResult createJourney(CreateJourneyRequest request) {\n    request = beforeClientExecution(request);\n    return executeCreateJourney(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Create", "$$Journey", "$$Response", "\u2581Create", "$$Journey", "$$(Create", "$$Journey", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Create", "$$Journey", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Create", "$$Journey", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Create", "$$Journey", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Create", "$$Journey", "$$Result", "\u2581create", "$$Journey", "$$(Create", "$$Journey", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeCreate", "$$Journey", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DeleteDashboardsResponse DeleteDashboards(DeleteDashboardsRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DeleteDashboardsRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DeleteDashboardsResponseUnmarshaller.Instance;\n    return Invoke<DeleteDashboardsResponse>(request, options);\n}\n", "java": "public DeleteDashboardsResult deleteDashboards(DeleteDashboardsRequest request) {\n    request = beforeClientExecution(request);\n    return executeDeleteDashboards(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Delete", "$$Dashboard", "$$sResponse", "\u2581Delete", "$$Dashboard", "$$s(", "$$Delete", "$$Dashboard", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Delete", "$$Dashboard", "$$s", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Delete", "$$Dashboard", "$$s", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Delete", "$$Dashboard", "$$sResponse>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Delete", "$$Dashboard", "$$sResult", "\u2581delete", "$$Dashboard", "$$s(", "$$Delete", "$$Dashboard", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDelete", "$$Dashboard", "$$s", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public UpgradeIndexMergePolicy(MergePolicy @base) {\n    this.m_base = @base;\n}\n", "java": "public UpgradeIndexMergePolicy(MergePolicy in) {\n    super(in);\n}\n", "cs_t": [["\u2581public", "\u2581", "$$Up", "$$g", "$$ra", "$$de", "$$Index", "$$Merge", "$$Policy", "$$(", "$$Merge", "$$Policy", "\u2581@", "$$base", "$$)", "\u2581{"], ["\u2581this.m_", "$$base", "\u2581=", "\u2581@", "$$base", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581", "$$Up", "$$g", "$$ra", "$$de", "$$Index", "$$Merge", "$$Policy", "$$(", "$$Merge", "$$Policy", "\u2581in)", "\u2581{"], ["\u2581super(", "$$in", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual GetHealthCheckCountResponse GetHealthCheckCount(GetHealthCheckCountRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = GetHealthCheckCountRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = GetHealthCheckCountResponseUnmarshaller.Instance;\n    return Invoke<GetHealthCheckCountResponse>(request, options);\n}\n", "java": "public GetHealthCheckCountResult getHealthCheckCount(GetHealthCheckCountRequest request) {\n    request = beforeClientExecution(request);\n    return executeGetHealthCheckCount(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Get", "$$HealthCheck", "$$Count", "$$Response", "\u2581Get", "$$HealthCheck", "$$Count", "$$(Get", "$$HealthCheck", "$$Count", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Get", "$$HealthCheck", "$$Count", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Get", "$$HealthCheck", "$$Count", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Get", "$$HealthCheck", "$$Count", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Get", "$$HealthCheck", "$$Count", "$$Result", "\u2581get", "$$HealthCheck", "$$Count", "$$(Get", "$$HealthCheck", "$$Count", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeGet", "$$HealthCheck", "$$Count", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public ChartStartBlockRecord(RecordInputStream in1) {\n    rt = in1.ReadShort();\n    grbitFrt = in1.ReadShort();\n    iObjectKind = in1.ReadShort();\n    iObjectContext = in1.ReadShort();\n    iObjectInstance1 = in1.ReadShort();\n    iObjectInstance2 = in1.ReadShort();\n}\n", "java": "public ChartStartBlockRecord(RecordInputStream in) {\n    rt = in.readShort();\n    grbitFrt = in.readShort();\n    iObjectKind = in.readShort();\n    iObjectContext = in.readShort();\n    iObjectInstance1 = in.readShort();\n    iObjectInstance2 = in.readShort();\n}\n", "cs_t": [["\u2581public", "\u2581Ch", "$$art", "$$Start", "$$Block", "$$Record(RecordInputStream", "\u2581in1)", "\u2581{"], ["\u2581r", "$$t", "\u2581=", "\u2581in1.Read", "$$Short", "$$()", "$$;"], ["\u2581g", "$$r", "$$bit", "$$F", "$$rt", "\u2581=", "\u2581in1.Read", "$$Short", "$$()", "$$;"], ["\u2581i", "$$Object", "$$K", "$$ind", "\u2581=", "\u2581in1.Read", "$$Short", "$$()", "$$;"], ["\u2581i", "$$Object", "$$Context", "\u2581=", "\u2581in1.Read", "$$Short", "$$()", "$$;"], ["\u2581i", "$$Object", "$$Instance", "$$1", "\u2581=", "\u2581in1.Read", "$$Short", "$$()", "$$;"], ["\u2581i", "$$Object", "$$Instance", "$$2", "\u2581=", "\u2581in1.Read", "$$Short", "$$()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Ch", "$$art", "$$Start", "$$Block", "$$Record(RecordInputStream", "\u2581in)", "\u2581{"], ["\u2581r", "$$t", "\u2581=", "\u2581in.read", "$$Short", "$$()", "$$;"], ["\u2581g", "$$r", "$$bit", "$$F", "$$rt", "\u2581=", "\u2581in.read", "$$Short", "$$()", "$$;"], ["\u2581i", "$$Object", "$$K", "$$ind", "\u2581=", "\u2581in.read", "$$Short", "$$()", "$$;"], ["\u2581i", "$$Object", "$$Context", "\u2581=", "\u2581in.read", "$$Short", "$$()", "$$;"], ["\u2581i", "$$Object", "$$Instance", "$$1", "\u2581=", "\u2581in.read", "$$Short", "$$()", "$$;"], ["\u2581i", "$$Object", "$$Instance", "$$2", "\u2581=", "\u2581in.read", "$$Short", "$$()", "$$;"], ["\u2581}"]]}, {"cs": "public SeriesRecord(RecordInputStream in1) {\n    field_1_categoryDataType = in1.ReadShort();\n    field_2_valuesDataType = in1.ReadShort();\n    field_3_numCategories = in1.ReadShort();\n    field_4_numValues = in1.ReadShort();\n    field_5_bubbleSeriesType = in1.ReadShort();\n    field_6_numBubbleValues = in1.ReadShort();\n}\n", "java": "public SeriesRecord(RecordInputStream in) {\n    field_1_categoryDataType = in.readShort();\n    field_2_valuesDataType   = in.readShort();\n    field_3_numCategories    = in.readShort();\n    field_4_numValues        = in.readShort();\n    field_5_bubbleSeriesType = in.readShort();\n    field_6_numBubbleValues  = in.readShort();\n}\n", "cs_t": [["\u2581public", "\u2581S", "$$eries", "$$Record(RecordInputStream", "\u2581in1)", "\u2581{"], ["\u2581field_1_", "$$c", "$$ateg", "$$ory", "$$Data", "$$Type", "\u2581=", "\u2581in1.Read", "$$Short", "$$()", "$$;"], ["\u2581field_2_", "$$values", "$$Data", "$$Type", "\u2581=", "\u2581in1.Read", "$$Short", "$$()", "$$;"], ["\u2581field_3_", "$$num", "$$Categ", "$$or", "$$ies", "\u2581=", "\u2581in1.Read", "$$Short", "$$()", "$$;"], ["\u2581field_4_", "$$num", "$$Values", "\u2581=", "\u2581in1.Read", "$$Short", "$$()", "$$;"], ["\u2581field_5_", "$$b", "$$ub", "$$b", "$$le", "$$S", "$$eries", "$$Type", "\u2581=", "\u2581in1.Read", "$$Short", "$$()", "$$;"], ["\u2581field_6_", "$$num", "$$B", "$$ub", "$$b", "$$le", "$$Values", "\u2581=", "\u2581in1.Read", "$$Short", "$$()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581S", "$$eries", "$$Record(RecordInputStream", "\u2581in)", "\u2581{"], ["\u2581field_1_", "$$c", "$$ateg", "$$ory", "$$Data", "$$Type", "\u2581=", "\u2581in.read", "$$Short", "$$()", "$$;"], ["\u2581field_2_", "$$values", "$$Data", "$$Type", "\u2581", "\u2581", "\u2581=", "\u2581in.read", "$$Short", "$$()", "$$;"], ["\u2581field_3_", "$$num", "$$Categ", "$$or", "$$ies", "\u2581", "\u2581", "\u2581", "\u2581=", "\u2581in.read", "$$Short", "$$()", "$$;"], ["\u2581field_4_", "$$num", "$$Values", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581=", "\u2581in.read", "$$Short", "$$()", "$$;"], ["\u2581field_5_", "$$b", "$$ub", "$$b", "$$le", "$$S", "$$eries", "$$Type", "\u2581=", "\u2581in.read", "$$Short", "$$()", "$$;"], ["\u2581field_6_", "$$num", "$$B", "$$ub", "$$b", "$$le", "$$Values", "\u2581", "\u2581=", "\u2581in.read", "$$Short", "$$()", "$$;"], ["\u2581}"]]}, {"cs": "public static Type LookupClass(string name) {\n    return loader.LookupClass(name);\n}\n", "java": "public static Class<? extends CharFilterFactory> lookupClass(String name) {\n    return loader.lookupClass(name);\n}\n", "cs_t": [["\u2581public", "\u2581static", "\u2581", "$$Type", "\u2581", "$$Lookup", "$$Clas", "$$s(", "$$string", "\u2581name)", "\u2581{"], ["\u2581return", "\u2581load", "$$er.", "$$Lookup", "$$Clas", "$$s(", "$$name", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581static", "\u2581C", "$$lass", "$$<", "$$?", "\u2581ex", "$$ten", "$$d", "$$s", "\u2581Char", "$$Filter", "$$Factory", "$$>", "\u2581lo", "$$okup", "$$Clas", "$$s(", "$$String", "\u2581name)", "\u2581{"], ["\u2581return", "\u2581load", "$$er.", "$$lo", "$$okup", "$$Clas", "$$s(", "$$name", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual GetPublicKeyResponse GetPublicKey(GetPublicKeyRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = GetPublicKeyRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = GetPublicKeyResponseUnmarshaller.Instance;\n    return Invoke<GetPublicKeyResponse>(request, options);\n}\n", "java": "public GetPublicKeyResult getPublicKey(GetPublicKeyRequest request) {\n    request = beforeClientExecution(request);\n    return executeGetPublicKey(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Get", "$$PublicKey", "$$Response", "\u2581Get", "$$PublicKey", "$$(Get", "$$PublicKey", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Get", "$$PublicKey", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Get", "$$PublicKey", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Get", "$$PublicKey", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Get", "$$PublicKey", "$$Result", "\u2581get", "$$PublicKey", "$$(Get", "$$PublicKey", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeGet", "$$PublicKey", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual CreateLocalGatewayRouteTableVpcAssociationResponse CreateLocalGatewayRouteTableVpcAssociation(CreateLocalGatewayRouteTableVpcAssociationRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = CreateLocalGatewayRouteTableVpcAssociationRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = CreateLocalGatewayRouteTableVpcAssociationResponseUnmarshaller.Instance;\n    return Invoke<CreateLocalGatewayRouteTableVpcAssociationResponse>(request, options);\n}\n", "java": "public CreateLocalGatewayRouteTableVpcAssociationResult createLocalGatewayRouteTableVpcAssociation(CreateLocalGatewayRouteTableVpcAssociationRequest request) {\n    request = beforeClientExecution(request);\n    return executeCreateLocalGatewayRouteTableVpcAssociation(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Create", "$$LocalGateway", "$$RouteTable", "$$Vpc", "$$Association", "$$Response", "\u2581Create", "$$LocalGateway", "$$RouteTable", "$$Vpc", "$$Association", "$$(Create", "$$LocalGateway", "$$RouteTable", "$$Vpc", "$$Association", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Create", "$$LocalGateway", "$$RouteTable", "$$Vpc", "$$Association", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Create", "$$LocalGateway", "$$RouteTable", "$$Vpc", "$$Association", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Create", "$$LocalGateway", "$$RouteTable", "$$Vpc", "$$Association", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Create", "$$LocalGateway", "$$RouteTable", "$$Vpc", "$$Association", "$$Result", "\u2581create", "$$LocalGateway", "$$RouteTable", "$$Vpc", "$$Association", "$$(Create", "$$LocalGateway", "$$RouteTable", "$$Vpc", "$$Association", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeCreate", "$$LocalGateway", "$$RouteTable", "$$Vpc", "$$Association", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public static bool ToBoolean(string stringValue) {\n    if (stringValue == null) {\n        throw new ArgumentNullException(JGitText.Get().expectedBooleanStringValue);\n    }\n    bool? @bool = ToBooleanOrNull(stringValue);\n    if (@bool == null) {\n        throw new ArgumentException(MessageFormat.Format(JGitText.Get().notABoolean, stringValue));\n    }\n    return @bool.Value;\n}\n", "java": "public static boolean toBoolean(String stringValue) {\n    if (stringValue == null)throw new NullPointerException(JGitText.get().expectedBooleanStringValue);\n    final Boolean bool = toBooleanOrNull(stringValue);\n    if (bool == null)throw new IllegalArgumentException(MessageFormat.format(JGitText.get().notABoolean, stringValue));\n    return bool.booleanValue();\n}\n", "cs_t": [["\u2581public", "\u2581static", "\u2581bool", "\u2581To", "$$Boolean", "$$(string", "\u2581string", "$$Value)", "\u2581{"], ["\u2581if", "\u2581(", "$$string", "$$Value", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581", "$$Ar", "$$gument", "$$Null", "$$Exception(", "$$JGitText", "$$.Get", "$$().", "$$expected", "$$Boolean", "$$String", "$$Value)", "$$;"], ["\u2581}"], ["\u2581bool", "$$?", "\u2581@", "$$bo", "$$ol", "\u2581=", "\u2581To", "$$Boolean", "$$Or", "$$Null", "$$(string", "$$Value)", "$$;"], ["\u2581if", "\u2581(@", "$$bo", "$$ol", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581", "$$ArgumentException", "$$(", "$$MessageFormat", "$$.Format", "$$(JGitText.Get", "$$().", "$$n", "$$ot", "$$A", "$$Boolean", "$$,", "\u2581string", "$$Value", "$$))", "$$;"], ["\u2581}"], ["\u2581return", "\u2581@", "$$bo", "$$ol", "$$.", "$$Value", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581static", "\u2581boolean", "\u2581to", "$$Boolean", "$$(String", "\u2581string", "$$Value)", "\u2581{"], ["\u2581if", "\u2581(", "$$string", "$$Value", "\u2581==", "\u2581null)", "$$throw", "\u2581new", "\u2581Null", "$$Pointer", "$$Exception(", "$$JGitText", "$$.get().", "$$expected", "$$Boolean", "$$String", "$$Value)", "$$;"], ["\u2581final", "\u2581Boolean", "\u2581bool", "\u2581=", "\u2581to", "$$Boolean", "$$Or", "$$Null", "$$(string", "$$Value)", "$$;"], ["\u2581if", "\u2581(", "$$bo", "$$ol", "\u2581==", "\u2581null)", "$$throw", "\u2581new", "\u2581IllegalArgumentException", "$$(", "$$MessageFormat", "$$.format", "$$(JGitText", "$$.get().", "$$n", "$$ot", "$$A", "$$Boolean", "$$,", "\u2581string", "$$Value", "$$))", "$$;"], ["\u2581return", "\u2581bool", "$$.", "$$boolean", "$$Value", "$$()", "$$;"], ["\u2581}"]]}, {"cs": "public virtual ICollection<string> GetAdded() {\n    return Sharpen.Collections.UnmodifiableSet(diff.GetAdded());\n}\n", "java": "public Set<String> getAdded() {\n    return Collections.unmodifiableSet(diff.getAdded());\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581I", "$$Collection", "$$<string", "$$>", "\u2581Get", "$$Ad", "$$ded", "$$()", "\u2581{"], ["\u2581return", "\u2581Sharpen.", "$$Collections.", "$$Unm", "$$od", "$$ifi", "$$able", "$$Set", "$$(d", "$$iff", "$$.Get", "$$Ad", "$$ded", "$$())", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Set", "$$<", "$$String>", "\u2581get", "$$Ad", "$$ded", "$$()", "\u2581{"], ["\u2581return", "\u2581", "$$Collections.", "$$un", "$$mod", "$$ifi", "$$able", "$$Set", "$$(d", "$$iff", "$$.get", "$$Ad", "$$ded", "$$())", "$$;"], ["\u2581}"]]}, {"cs": "public virtual ICollection<string> GetNames(string section) {\n    return GetNames(section, null);\n}\n", "java": "public Set<String> getNames(String section) {\n    return getNames(section, null);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581I", "$$Collection", "$$<string", "$$>", "\u2581Get", "$$Names", "$$(string", "\u2581se", "$$ction", "$$)", "\u2581{"], ["\u2581return", "\u2581Get", "$$Names", "$$(", "$$se", "$$ction", "$$,", "\u2581null)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Set", "$$<", "$$String>", "\u2581get", "$$Names", "$$(String", "\u2581se", "$$ction", "$$)", "\u2581{"], ["\u2581return", "\u2581get", "$$Names", "$$(", "$$se", "$$ction", "$$,", "\u2581null)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DescribeCacheClustersResponse DescribeCacheClusters(DescribeCacheClustersRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DescribeCacheClustersRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DescribeCacheClustersResponseUnmarshaller.Instance;\n    return Invoke<DescribeCacheClustersResponse>(request, options);\n}\n", "java": "public DescribeCacheClustersResult describeCacheClusters(DescribeCacheClustersRequest request) {\n    request = beforeClientExecution(request);\n    return executeDescribeCacheClusters(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Describe", "$$Cache", "$$Cluster", "$$sResponse", "\u2581Describe", "$$Cache", "$$Cluster", "$$s(Describe", "$$Cache", "$$Cluster", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Describe", "$$Cache", "$$Cluster", "$$s", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Describe", "$$Cache", "$$Cluster", "$$s", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Describe", "$$Cache", "$$Cluster", "$$sResponse>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Describe", "$$Cache", "$$Cluster", "$$sResult", "\u2581describe", "$$Cache", "$$Cluster", "$$s(Describe", "$$Cache", "$$Cluster", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDescribe", "$$Cache", "$$Cluster", "$$s", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual IList<string> GetUnmergedPaths() {\n    return unmergedPaths;\n}\n", "java": "public List<String> getUnmergedPaths() {\n    return unmergedPaths;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581IList<", "$$string>", "\u2581Get", "$$Unm", "$$erge", "$$d", "$$Path", "$$s()", "\u2581{"], ["\u2581return", "\u2581un", "$$m", "$$erge", "$$d", "$$Path", "$$s;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581List<", "$$String>", "\u2581get", "$$Unm", "$$erge", "$$d", "$$Path", "$$s()", "\u2581{"], ["\u2581return", "\u2581un", "$$m", "$$erge", "$$d", "$$Path", "$$s;"], ["\u2581}"]]}, {"cs": "public ValueEval Evaluate(ValueEval[] args, OperationEvaluationContext ec) {\n    if (args.Length != 2) {\n        return ErrorEval.VALUE_INVALID;\n    }\n    return Evaluate(ec.RowIndex, ec.ColumnIndex, args[0], args[1]);\n}\n", "java": "public ValueEval evaluate(ValueEval[] args, OperationEvaluationContext ec) {\n    if (args.length != 2) {\n        return ErrorEval.VALUE_INVALID;\n    }\n    return evaluate(ec.getRowIndex(), ec.getColumnIndex(), args[0], args[1]);\n}\n", "cs_t": [["\u2581public", "\u2581ValueEval", "\u2581Evaluate", "$$(ValueEval", "$$[]", "\u2581args,", "\u2581", "$$Operation", "$$Evaluation", "$$Context", "\u2581", "$$ec", "$$)", "\u2581{"], ["\u2581if", "\u2581(arg", "$$s.Length", "\u2581!=", "\u25812)", "\u2581{"], ["\u2581return", "\u2581ErrorEval.VALUE_INVALID", "$$;"], ["\u2581}"], ["\u2581return", "\u2581Evaluate", "$$(", "$$ec", "$$.", "$$RowIndex,", "\u2581", "$$ec", "$$.", "$$Column", "$$Index,", "\u2581args[", "$$0]", "$$,", "\u2581args[", "$$1", "$$]", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581ValueEval", "\u2581evaluate", "$$(ValueEval", "$$[]", "\u2581args,", "\u2581", "$$Operation", "$$Evaluation", "$$Context", "\u2581", "$$ec", "$$)", "\u2581{"], ["\u2581if", "\u2581(arg", "$$s.length", "\u2581!=", "\u25812)", "\u2581{"], ["\u2581return", "\u2581ErrorEval.VALUE_INVALID", "$$;"], ["\u2581}"], ["\u2581return", "\u2581evaluate", "$$(", "$$ec", "$$.get", "$$Row", "$$Index", "$$(),", "\u2581", "$$ec", "$$.get", "$$Column", "$$Index", "$$(),", "\u2581args[", "$$0]", "$$,", "\u2581args[", "$$1", "$$]", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public int AddString(UnicodeString str) {\n    field_1_num_strings++;\n    UnicodeString ucs = (str == null) ? EMPTY_STRING: str;\n    int rval;\n    int index = field_3_strings.GetIndex(ucs);\n    if (index != -1) {\n        rval = index;\n    }\n    else {\n        rval = field_3_strings.Size;\n        field_2_num_unique_strings++;\n        SSTDeserializer.AddToStringTable(field_3_strings, ucs);\n    }\n    return rval;\n}\n", "java": "public int addString(UnicodeString string) {\n    field_1_num_strings++;\n    UnicodeString ucs = ( string == null ) ? EMPTY_STRING: string;\n    int rval;\n    int index = field_3_strings.getIndex(ucs);\n    if ( index != -1 ) {\n        rval = index;\n    }\n    else {\n        rval = field_3_strings.size();\n        field_2_num_unique_strings++;\n        SSTDeserializer.addToStringTable( field_3_strings, ucs );\n    }\n    return rval;\n}\n", "cs_t": [["\u2581public", "\u2581int", "\u2581Add", "$$String(", "$$Unicode", "$$String", "\u2581str", "$$)", "\u2581{"], ["\u2581field_1_", "$$num", "$$_", "$$string", "$$s", "$$++", "$$;"], ["\u2581", "$$Unicode", "$$String", "\u2581u", "$$c", "$$s", "\u2581=", "\u2581(", "$$str", "\u2581==", "\u2581null)", "\u2581?", "\u2581E", "$$MPTY", "$$_", "$$ST", "$$R", "$$ING", "$$:", "\u2581str", "$$;"], ["\u2581int", "\u2581rval", "$$;"], ["\u2581int", "\u2581index", "\u2581=", "\u2581field_3_", "$$string", "$$s.Get", "$$Index(", "$$uc", "$$s)", "$$;"], ["\u2581if", "\u2581(index", "\u2581!=", "\u2581-1)", "\u2581{"], ["\u2581rval", "\u2581=", "\u2581index", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581rval", "\u2581=", "\u2581field_3_", "$$string", "$$s.", "$$Size", "$$;"], ["\u2581field_2_", "$$num", "$$_", "$$un", "$$i", "$$qu", "$$e", "$$_", "$$string", "$$s", "$$++", "$$;"], ["\u2581S", "$$ST", "$$D", "$$es", "$$erial", "$$izer", "$$.Add", "$$To", "$$String", "$$Table", "$$(", "$$field_3_", "$$string", "$$s,", "\u2581u", "$$c", "$$s)", "$$;"], ["\u2581}"], ["\u2581return", "\u2581rval", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581int", "\u2581add", "$$String(", "$$Unicode", "$$String", "\u2581string", "$$)", "\u2581{"], ["\u2581field_1_", "$$num", "$$_", "$$string", "$$s", "$$++", "$$;"], ["\u2581", "$$Unicode", "$$String", "\u2581u", "$$c", "$$s", "\u2581=", "\u2581(", "\u2581string", "\u2581==", "\u2581null", "\u2581)", "\u2581?", "\u2581E", "$$MPTY", "$$_", "$$ST", "$$R", "$$ING", "$$:", "\u2581string", "$$;"], ["\u2581int", "\u2581rval", "$$;"], ["\u2581int", "\u2581index", "\u2581=", "\u2581field_3_", "$$string", "$$s.get", "$$Index(", "$$uc", "$$s)", "$$;"], ["\u2581if", "\u2581(", "\u2581index", "\u2581!=", "\u2581-1", "\u2581)", "\u2581{"], ["\u2581rval", "\u2581=", "\u2581index", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581rval", "\u2581=", "\u2581field_3_", "$$string", "$$s.size()", "$$;"], ["\u2581field_2_", "$$num", "$$_", "$$un", "$$i", "$$qu", "$$e", "$$_", "$$string", "$$s", "$$++", "$$;"], ["\u2581S", "$$ST", "$$D", "$$es", "$$erial", "$$iz", "$$er.", "$$add", "$$To", "$$String", "$$Table", "$$(", "\u2581field_3_", "$$string", "$$s,", "\u2581u", "$$c", "$$s", "\u2581)", "$$;"], ["\u2581}"], ["\u2581return", "\u2581rval", "$$;"], ["\u2581}"]]}, {"cs": "public virtual long GetDeltaSearchMemoryLimit() {\n    return deltaSearchMemoryLimit;\n}\n", "java": "public long getDeltaSearchMemoryLimit() {\n    return deltaSearchMemoryLimit;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581long", "\u2581Get", "$$Delta", "$$Search", "$$Mem", "$$ory", "$$Limit", "$$()", "\u2581{"], ["\u2581return", "\u2581delta", "$$Search", "$$Mem", "$$ory", "$$Limit", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581long", "\u2581get", "$$Delta", "$$Search", "$$Mem", "$$ory", "$$Limit", "$$()", "\u2581{"], ["\u2581return", "\u2581delta", "$$Search", "$$Mem", "$$ory", "$$Limit", "$$;"], ["\u2581}"]]}, {"cs": "public override string ToString() {\n    return \"Token(\\\"\" + new string(surfaceForm, offset, length) + \"\\\" pos=\" + position + \" length=\" + length +\" posLen=\" + positionLength + \" type=\" + type + \" wordId=\" + wordId +\" leftID=\" + dictionary.GetLeftId(wordId) + \")\";\n}\n", "java": "public String toString() {\n    return \"Token(\\\"\" + new String(surfaceForm, offset, length) + \"\\\" pos=\" + position + \" length=\" + length +\" posLen=\" + positionLength + \" type=\" + type + \" wordId=\" + wordId +\" leftID=\" + dictionary.getLeftId(wordId) + \")\";\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581string", "\u2581ToString()", "\u2581{"], ["\u2581return", "\u2581\"", "$$Token", "$$(", "$$\\\"", "$$\"", "\u2581+", "\u2581new", "\u2581string", "$$(s", "$$ur", "$$face", "$$Form", "$$,", "\u2581offset,", "\u2581length)", "\u2581+", "\u2581\"", "$$\\\"", "\u2581pos", "$$=\"", "\u2581+", "\u2581position", "\u2581+", "\u2581\"", "\u2581length", "$$=\"", "\u2581+", "\u2581length", "\u2581+\"", "\u2581pos", "$$Len", "$$=\"", "\u2581+", "\u2581position", "$$Length", "\u2581+", "\u2581\"", "\u2581type", "$$=\"", "\u2581+", "\u2581type", "\u2581+", "\u2581\"", "\u2581word", "$$Id", "$$=\"", "\u2581+", "\u2581word", "$$Id", "\u2581+\"", "\u2581le", "$$ft", "$$ID", "$$=\"", "\u2581+", "\u2581d", "$$ictionary", "$$.Get", "$$Left", "$$Id(", "$$word", "$$Id)", "\u2581+", "\u2581\")", "$$\"", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581String", "\u2581toString()", "\u2581{"], ["\u2581return", "\u2581\"", "$$Token", "$$(", "$$\\\"", "$$\"", "\u2581+", "\u2581new", "\u2581String", "$$(s", "$$ur", "$$face", "$$Form", "$$,", "\u2581offset,", "\u2581length)", "\u2581+", "\u2581\"", "$$\\\"", "\u2581pos", "$$=\"", "\u2581+", "\u2581position", "\u2581+", "\u2581\"", "\u2581length", "$$=\"", "\u2581+", "\u2581length", "\u2581+\"", "\u2581pos", "$$Len", "$$=\"", "\u2581+", "\u2581position", "$$Length", "\u2581+", "\u2581\"", "\u2581type", "$$=\"", "\u2581+", "\u2581type", "\u2581+", "\u2581\"", "\u2581word", "$$Id", "$$=\"", "\u2581+", "\u2581word", "$$Id", "\u2581+\"", "\u2581le", "$$ft", "$$ID", "$$=\"", "\u2581+", "\u2581d", "$$ictionary", "$$.get", "$$Left", "$$Id(", "$$word", "$$Id)", "\u2581+", "\u2581\")", "$$\"", "$$;"], ["\u2581}"]]}, {"cs": "public String ToFormulaString(IFormulaRenderingWorkbook book) {\n    return ExternSheetNameResolver.PrependSheetName(book, field_1_index_extern_sheet, FormatReferenceAsString());\n}\n", "java": "public String toFormulaString(FormulaRenderingWorkbook book) {\n    return ExternSheetNameResolver.prependSheetName(book, field_1_index_extern_sheet, formatReferenceAsString());\n}\n", "cs_t": [["\u2581public", "\u2581String", "\u2581To", "$$Formula", "$$String(", "$$I", "$$Formula", "$$R", "$$ender", "$$ing", "$$Workbook", "\u2581bo", "$$ok", "$$)", "\u2581{"], ["\u2581return", "\u2581Ex", "$$ternSheet", "$$Name", "$$Resolver", "$$.", "$$Pre", "$$pend", "$$SheetName", "$$(bo", "$$ok", "$$,", "\u2581field_1_", "$$index", "$$_", "$$ex", "$$tern", "$$_", "$$sheet", "$$,", "\u2581Format", "$$Reference", "$$As", "$$String()", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581String", "\u2581to", "$$Formula", "$$String(", "$$Formula", "$$R", "$$ender", "$$ing", "$$Workbook", "\u2581bo", "$$ok", "$$)", "\u2581{"], ["\u2581return", "\u2581Ex", "$$ternSheet", "$$Name", "$$Resolver", "$$.", "$$pre", "$$pend", "$$SheetName", "$$(bo", "$$ok", "$$,", "\u2581field_1_", "$$index", "$$_", "$$ex", "$$tern", "$$_", "$$sheet", "$$,", "\u2581format", "$$Reference", "$$As", "$$String()", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual E get(int index) {\n    return (E)elements[index];\n}\n", "java": "public E get(int index) {\n    return (E) elements[index];\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581E", "\u2581get(int", "\u2581index)", "\u2581{"], ["\u2581return", "\u2581(", "$$E", "$$)", "$$e", "$$lement", "$$s[index", "$$]", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581E", "\u2581get(int", "\u2581index)", "\u2581{"], ["\u2581return", "\u2581(", "$$E", "$$)", "\u2581element", "$$s[index", "$$]", "$$;"], ["\u2581}"]]}, {"cs": "public override byte[] GetCachedBytes() {\n    return data;\n}\n", "java": "public byte[] getCachedBytes() {\n    return data;\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581byte[]", "\u2581Get", "$$Cached", "$$Bytes", "$$()", "\u2581{"], ["\u2581return", "\u2581data", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581byte[]", "\u2581get", "$$Cached", "$$Bytes", "$$()", "\u2581{"], ["\u2581return", "\u2581data", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DescribeConnectionsResponse DescribeConnections() {\n    return DescribeConnections(new DescribeConnectionsRequest());\n}\n", "java": "public DescribeConnectionsResult describeConnections() {\n    return describeConnections(new DescribeConnectionsRequest());\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Describe", "$$Connection", "$$sResponse", "\u2581Describe", "$$Connection", "$$s()", "\u2581{"], ["\u2581return", "\u2581Describe", "$$Connection", "$$s(new", "\u2581Describe", "$$Connection", "$$sRequest", "$$())", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Describe", "$$Connection", "$$sResult", "\u2581describe", "$$Connection", "$$s()", "\u2581{"], ["\u2581return", "\u2581describe", "$$Connection", "$$s(new", "\u2581Describe", "$$Connection", "$$sRequest", "$$())", "$$;"], ["\u2581}"]]}, {"cs": "public virtual void ensureCapacity(int minimumCapacity) {\n    object[] a = array;\n    if (a.Length < minimumCapacity) {\n        object[] newArray = new object[minimumCapacity];\n        System.Array.Copy(a, 0, newArray, 0, _size);\n        array = newArray;\n        modCount++;\n    }\n}\n", "java": "public void ensureCapacity(int minimumCapacity) {\n    Object[] a = array;\n    if (a.length < minimumCapacity) {\n        Object[] newArray = new Object[minimumCapacity];\n        System.arraycopy(a, 0, newArray, 0, size);\n        array = newArray;\n        modCount++;\n    }\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581void", "\u2581en", "$$sure", "$$Capacity", "$$(int", "\u2581min", "$$im", "$$um", "$$Capacity", "$$)", "\u2581{"], ["\u2581object", "$$[]", "\u2581a", "\u2581=", "\u2581array", "$$;"], ["\u2581if", "\u2581(a", "$$.Length", "\u2581<", "\u2581min", "$$im", "$$um", "$$Capacity", "$$)", "\u2581{"], ["\u2581object", "$$[]", "\u2581newArray", "\u2581=", "\u2581new", "\u2581object", "$$[", "$$min", "$$im", "$$um", "$$Capacity", "$$]", "$$;"], ["\u2581System.Array.Copy", "$$(a", "$$,", "\u25810,", "\u2581newArray", "$$,", "\u25810,", "\u2581_", "$$size", "$$)", "$$;"], ["\u2581array", "\u2581=", "\u2581newArray", "$$;"], ["\u2581mod", "$$Count", "$$++", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581en", "$$sure", "$$Capacity", "$$(int", "\u2581min", "$$im", "$$um", "$$Capacity", "$$)", "\u2581{"], ["\u2581Object", "$$[]", "\u2581a", "\u2581=", "\u2581array", "$$;"], ["\u2581if", "\u2581(a", "$$.length", "\u2581<", "\u2581min", "$$im", "$$um", "$$Capacity", "$$)", "\u2581{"], ["\u2581Object", "$$[]", "\u2581newArray", "\u2581=", "\u2581new", "\u2581Object", "$$[", "$$min", "$$im", "$$um", "$$Capacity", "$$]", "$$;"], ["\u2581System.arraycopy", "$$(a", "$$,", "\u25810,", "\u2581newArray", "$$,", "\u25810,", "\u2581size)", "$$;"], ["\u2581array", "\u2581=", "\u2581newArray", "$$;"], ["\u2581mod", "$$Count", "$$++", "$$;"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public virtual DeleteLifecycleHookResponse DeleteLifecycleHook(DeleteLifecycleHookRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DeleteLifecycleHookRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DeleteLifecycleHookResponseUnmarshaller.Instance;\n    return Invoke<DeleteLifecycleHookResponse>(request, options);\n}\n", "java": "public DeleteLifecycleHookResult deleteLifecycleHook(DeleteLifecycleHookRequest request) {\n    request = beforeClientExecution(request);\n    return executeDeleteLifecycleHook(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Delete", "$$Lifecycle", "$$H", "$$o", "$$ok", "$$Response", "\u2581Delete", "$$Lifecycle", "$$H", "$$o", "$$ok", "$$(Delete", "$$Lifecycle", "$$H", "$$o", "$$ok", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Delete", "$$Lifecycle", "$$H", "$$o", "$$ok", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Delete", "$$Lifecycle", "$$H", "$$o", "$$ok", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Delete", "$$Lifecycle", "$$H", "$$o", "$$ok", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Delete", "$$Lifecycle", "$$H", "$$o", "$$ok", "$$Result", "\u2581delete", "$$Lifecycle", "$$H", "$$o", "$$ok", "$$(Delete", "$$Lifecycle", "$$H", "$$o", "$$ok", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDelete", "$$Lifecycle", "$$H", "$$o", "$$ok", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public float maxBytesPerChar() {\n    return _maxBytesPerChar;\n}\n", "java": "public final float maxBytesPerChar() {\n    return maxBytesPerChar;\n}\n", "cs_t": [["\u2581public", "\u2581float", "\u2581max", "$$Bytes", "$$Per", "$$Char", "$$()", "\u2581{"], ["\u2581return", "\u2581_", "$$max", "$$Bytes", "$$Per", "$$Char", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581final", "\u2581float", "\u2581max", "$$Bytes", "$$Per", "$$Char", "$$()", "\u2581{"], ["\u2581return", "\u2581max", "$$Bytes", "$$Per", "$$Char", "$$;"], ["\u2581}"]]}, {"cs": "public BlankCellRectangleGroup(int firstRowIndex, int firstColumnIndex, int lastColumnIndex) {\n    _firstRowIndex = firstRowIndex;\n    _firstColumnIndex = firstColumnIndex;\n    _lastColumnIndex = lastColumnIndex;\n    _lastRowIndex = firstRowIndex;\n}\n", "java": "public BlankCellRectangleGroup(int firstRowIndex, int firstColumnIndex, int lastColumnIndex) {\n    _firstRowIndex = firstRowIndex;\n    _firstColumnIndex = firstColumnIndex;\n    _lastColumnIndex = lastColumnIndex;\n    _lastRowIndex = firstRowIndex;\n}\n", "cs_t": [["\u2581public", "\u2581B", "$$lank", "$$Cell", "$$Rect", "$$ang", "$$le", "$$Group", "$$(int", "\u2581first", "$$RowIndex,", "\u2581int", "\u2581first", "$$Column", "$$Index,", "\u2581int", "\u2581last", "$$Column", "$$Index)", "\u2581{"], ["\u2581_first", "$$Row", "$$Index", "\u2581=", "\u2581first", "$$Row", "$$Index", "$$;"], ["\u2581_first", "$$Column", "$$Index", "\u2581=", "\u2581first", "$$Column", "$$Index", "$$;"], ["\u2581_last", "$$Column", "$$Index", "\u2581=", "\u2581last", "$$Column", "$$Index", "$$;"], ["\u2581_last", "$$Row", "$$Index", "\u2581=", "\u2581first", "$$Row", "$$Index", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581B", "$$lank", "$$Cell", "$$Rect", "$$ang", "$$le", "$$Group", "$$(int", "\u2581first", "$$RowIndex,", "\u2581int", "\u2581first", "$$Column", "$$Index,", "\u2581int", "\u2581last", "$$Column", "$$Index)", "\u2581{"], ["\u2581_first", "$$Row", "$$Index", "\u2581=", "\u2581first", "$$Row", "$$Index", "$$;"], ["\u2581_first", "$$Column", "$$Index", "\u2581=", "\u2581first", "$$Column", "$$Index", "$$;"], ["\u2581_last", "$$Column", "$$Index", "\u2581=", "\u2581last", "$$Column", "$$Index", "$$;"], ["\u2581_last", "$$Row", "$$Index", "\u2581=", "\u2581first", "$$Row", "$$Index", "$$;"], ["\u2581}"]]}, {"cs": "public int FindEndOfRowOutlineGroup(int row) {\n    int level = GetRow(row).OutlineLevel;\n    int currentRow;\n    for (currentRow = row; currentRow < this.LastRowNum; currentRow++) {\n        if (GetRow(currentRow) == null || GetRow(currentRow).OutlineLevel < level) {\n            break;\n        }\n    }\n    return currentRow - 1;\n}\n", "java": "public int findEndOfRowOutlineGroup(int row) {\n    int level = getRow( row ).getOutlineLevel();\n    int currentRow;\n    for (currentRow = row; currentRow < getLastRowNum(); currentRow++) {\n        if (getRow(currentRow) == null || getRow(currentRow).getOutlineLevel() < level) {\n            break;\n        }\n    }\n    return currentRow-1;\n}\n", "cs_t": [["\u2581public", "\u2581int", "\u2581F", "$$ind", "$$End", "$$Of", "$$Row", "$$Out", "$$line", "$$Group", "$$(int", "\u2581row", "$$)", "\u2581{"], ["\u2581int", "\u2581level", "\u2581=", "\u2581Get", "$$Row", "$$(", "$$row", "$$).", "$$Out", "$$line", "$$Level", "$$;"], ["\u2581int", "\u2581current", "$$Row", "$$;"], ["\u2581for", "\u2581(c", "$$urrent", "$$Row", "\u2581=", "\u2581row", "$$;", "\u2581current", "$$Row", "\u2581<", "\u2581this.", "$$LastRow", "$$Num", "$$;", "\u2581current", "$$Row", "$$++)", "\u2581{"], ["\u2581if", "\u2581(", "$$Get", "$$Row", "$$(c", "$$urrent", "$$Row", "$$)", "\u2581==", "\u2581null", "\u2581||", "\u2581Get", "$$Row", "$$(c", "$$urrent", "$$Row", "$$).", "$$Out", "$$line", "$$Level", "\u2581<", "\u2581level", "$$)", "\u2581{"], ["\u2581break", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581return", "\u2581current", "$$Row", "\u2581-", "\u25811", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581int", "\u2581find", "$$End", "$$Of", "$$Row", "$$Out", "$$line", "$$Group", "$$(int", "\u2581row", "$$)", "\u2581{"], ["\u2581int", "\u2581level", "\u2581=", "\u2581get", "$$Row", "$$(", "\u2581row", "\u2581)", "$$.get", "$$Out", "$$line", "$$Level", "$$()", "$$;"], ["\u2581int", "\u2581current", "$$Row", "$$;"], ["\u2581for", "\u2581(c", "$$urrent", "$$Row", "\u2581=", "\u2581row", "$$;", "\u2581current", "$$Row", "\u2581<", "\u2581get", "$$LastRow", "$$Num", "$$()", "$$;", "\u2581current", "$$Row", "$$++)", "\u2581{"], ["\u2581if", "\u2581(get", "$$Row", "$$(c", "$$urrent", "$$Row", "$$)", "\u2581==", "\u2581null", "\u2581||", "\u2581get", "$$Row", "$$(c", "$$urrent", "$$Row", "$$)", "$$.get", "$$Out", "$$line", "$$Level", "$$()", "\u2581<", "\u2581level", "$$)", "\u2581{"], ["\u2581break", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581return", "\u2581current", "$$Row", "$$-1", "$$;"], ["\u2581}"]]}, {"cs": "public virtual string getEncoding() {\n    if (encoder == null) {\n        return null;\n    }\n    return java.io.HistoricalCharsetNames.get(encoder.charset());\n}\n", "java": "public String getEncoding() {\n    if (encoder == null) {\n        return null;\n    }\n    return HistoricalCharsetNames.get(encoder.charset());\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581string", "\u2581get", "$$Encoding", "$$()", "\u2581{"], ["\u2581if", "\u2581(", "$$enc", "$$od", "$$er", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581return", "\u2581null", "$$;"], ["\u2581}"], ["\u2581return", "\u2581java.", "$$io.", "$$H", "$$ist", "$$or", "$$ical", "$$Char", "$$set", "$$Names", "$$.get(", "$$enc", "$$od", "$$er.", "$$char", "$$set", "$$())", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581String", "\u2581get", "$$Encoding", "$$()", "\u2581{"], ["\u2581if", "\u2581(", "$$enc", "$$od", "$$er", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581return", "\u2581null", "$$;"], ["\u2581}"], ["\u2581return", "\u2581H", "$$ist", "$$or", "$$ical", "$$Char", "$$set", "$$Names", "$$.get(", "$$enc", "$$od", "$$er.", "$$char", "$$set", "$$())", "$$;"], ["\u2581}"]]}, {"cs": "public void ClearAllCachedResultValues() {\n    _cache.Clear();\n    _sheetIndexesBySheet.Clear();\n}\n", "java": "public void clearAllCachedResultValues() {\n    _cache.clear();\n    _sheetIndexesBySheet.clear();\n    _workbook.clearAllCachedResultValues();\n}\n", "cs_t": [["\u2581public", "\u2581void", "\u2581C", "$$lear", "$$All", "$$Cached", "$$Result", "$$Values", "$$()", "\u2581{"], ["\u2581_c", "$$ache", "$$.C", "$$lear()", "$$;"], ["\u2581_", "$$sheet", "$$Index", "$$es", "$$By", "$$Sheet", "$$.C", "$$lear()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581c", "$$lear", "$$All", "$$Cached", "$$Result", "$$Values", "$$()", "\u2581{"], ["\u2581_c", "$$ache", "$$.c", "$$lear()", "$$;"], ["\u2581_", "$$sheet", "$$Index", "$$es", "$$By", "$$Sheet", "$$.c", "$$lear()", "$$;"], ["\u2581_", "$$workbook", "$$.c", "$$lear", "$$All", "$$Cached", "$$Result", "$$Values", "$$()", "$$;"], ["\u2581}"]]}, {"cs": "public override String ToString() {\n    StringBuilder sb = new StringBuilder();\n    String recordName = this.RecordName;\n    sb.Append(\"[\").Append(recordName).Append(\"]\\n\");\n    sb.Append(\"    .row    = \").Append(HexDump.ShortToHex(Row)).Append(\"\\n\");\n    sb.Append(\"    .col    = \").Append(HexDump.ShortToHex(Column)).Append(\"\\n\");\n    if (IsBiff2) {\n        sb.Append(\"    .cellattrs = \").Append(HexDump.ShortToHex(CellAttrs)).Append(\"\\n\");\n    }\n    else {\n        sb.Append(\"    .xFindex   = \").Append(HexDump.ShortToHex(XFIndex)).Append(\"\\n\");\n    }\n    AppendValueText(sb);\n    sb.Append(\"\\n\");\n    sb.Append(\"[/\").Append(recordName).Append(\"]\\n\");\n    return sb.ToString();\n}\n", "java": "public final String toString() {\n    StringBuilder sb = new StringBuilder();\n    String recordName = getRecordName();\n    sb.append(\"[\").append(recordName).append(\"]\\n\");\n    sb.append(\"    .row    = \").append(HexDump.shortToHex(getRow())).append(\"\\n\");\n    sb.append(\"    .col    = \").append(HexDump.shortToHex(getColumn())).append(\"\\n\");\n    if (isBiff2()) {\n        sb.append(\"    .cellattrs = \").append(HexDump.shortToHex(getCellAttrs())).append(\"\\n\");\n    }\n    else {\n        sb.append(\"    .xfindex   = \").append(HexDump.shortToHex(getXFIndex())).append(\"\\n\");\n    }\n    appendValueText(sb);\n    sb.append(\"\\n\");\n    sb.append(\"[/\").append(recordName).append(\"]\\n\");\n    return sb.toString();\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581String", "\u2581ToString()", "\u2581{"], ["\u2581StringBuilder", "\u2581sb", "\u2581=", "\u2581new", "\u2581StringBuilder", "$$()", "$$;"], ["\u2581String", "\u2581record", "$$Name", "\u2581=", "\u2581this.", "$$Record", "$$Name", "$$;"], ["\u2581sb.Append(\"", "$$[", "$$\")", "$$.Ap", "$$pend", "$$(re", "$$cord", "$$Name)", "$$.Append(\"", "$$]", "$$\\n", "$$\")", "$$;"], ["\u2581sb.Append(\"", "\u2581", "\u2581", "\u2581", "\u2581.", "$$row", "\u2581", "\u2581", "\u2581", "\u2581=", "\u2581\").Append(", "$$HexDump.Short", "$$ToHex(", "$$Row", "$$))", "$$.Append(\"", "$$\\n", "$$\")", "$$;"], ["\u2581sb.Append(\"", "\u2581", "\u2581", "\u2581", "\u2581", "$$.c", "$$ol", "\u2581", "\u2581", "\u2581", "\u2581=", "\u2581\").Append(", "$$HexDump.Short", "$$ToHex(", "$$Column", "$$))", "$$.Append(\"", "$$\\n", "$$\")", "$$;"], ["\u2581if", "\u2581(", "$$Is", "$$B", "$$iff", "$$2)", "\u2581{"], ["\u2581sb.Append(\"", "\u2581", "\u2581", "\u2581", "\u2581.", "$$cell", "$$at", "$$tr", "$$s", "\u2581=", "\u2581\").Append(", "$$HexDump.Short", "$$ToHex(", "$$Cell", "$$At", "$$tr", "$$s", "$$))", "$$.Append(\"", "$$\\n", "$$\")", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581sb.Append(\"", "\u2581", "\u2581", "\u2581", "\u2581.", "$$x", "$$F", "$$index", "\u2581", "\u2581", "\u2581=", "\u2581\").Append(", "$$HexDump.Short", "$$ToHex(", "$$X", "$$F", "$$Index", "$$))", "$$.Append(\"", "$$\\n", "$$\")", "$$;"], ["\u2581}"], ["\u2581Ap", "$$pend", "$$Value", "$$Text", "$$(s", "$$b", "$$)", "$$;"], ["\u2581sb.Append(\"", "$$\\n", "$$\")", "$$;"], ["\u2581sb.Append(\"", "$$[/", "$$\")", "$$.Ap", "$$pend", "$$(re", "$$cord", "$$Name)", "$$.Append(\"", "$$]", "$$\\n", "$$\")", "$$;"], ["\u2581return", "\u2581sb", "$$.ToString()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581final", "\u2581String", "\u2581toString()", "\u2581{"], ["\u2581StringBuilder", "\u2581sb", "\u2581=", "\u2581new", "\u2581StringBuilder", "$$()", "$$;"], ["\u2581String", "\u2581record", "$$Name", "\u2581=", "\u2581getRecord", "$$Name()", "$$;"], ["\u2581sb.append(\"", "$$[", "$$\")", "$$.ap", "$$pend", "$$(re", "$$cord", "$$Name)", "$$.append(\"", "$$]", "$$\\n", "$$\")", "$$;"], ["\u2581sb.append(\"", "\u2581", "\u2581", "\u2581", "\u2581.", "$$row", "\u2581", "\u2581", "\u2581", "\u2581=", "\u2581\").append(", "$$HexDump.short", "$$ToHex(", "$$get", "$$Row", "$$()))", "$$.append(\"", "$$\\n", "$$\")", "$$;"], ["\u2581sb.append(\"", "\u2581", "\u2581", "\u2581", "\u2581", "$$.c", "$$ol", "\u2581", "\u2581", "\u2581", "\u2581=", "\u2581\").append(", "$$HexDump.short", "$$ToHex(", "$$get", "$$Column", "$$()))", "$$.append(\"", "$$\\n", "$$\")", "$$;"], ["\u2581if", "\u2581(is", "$$B", "$$iff", "$$2", "$$())", "\u2581{"], ["\u2581sb.append(\"", "\u2581", "\u2581", "\u2581", "\u2581.", "$$cell", "$$at", "$$tr", "$$s", "\u2581=", "\u2581\").append(", "$$HexDump.short", "$$ToHex(", "$$get", "$$Cell", "$$At", "$$tr", "$$s()", "$$))", "$$.append(\"", "$$\\n", "$$\")", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581sb.append(\"", "\u2581", "\u2581", "\u2581", "\u2581.", "$$x", "$$f", "$$index", "\u2581", "\u2581", "\u2581=", "\u2581\").append(", "$$HexDump.short", "$$ToHex(", "$$get", "$$X", "$$F", "$$Index", "$$()))", "$$.append(\"", "$$\\n", "$$\")", "$$;"], ["\u2581}"], ["\u2581append", "$$Value", "$$Text", "$$(s", "$$b", "$$)", "$$;"], ["\u2581sb.append(\"", "$$\\n", "$$\")", "$$;"], ["\u2581sb.append(\"", "$$[/", "$$\")", "$$.ap", "$$pend", "$$(re", "$$cord", "$$Name)", "$$.append(\"", "$$]", "$$\\n", "$$\")", "$$;"], ["\u2581return", "\u2581sb", "$$.toString()", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DescribeDBClusterEndpointsResponse DescribeDBClusterEndpoints(DescribeDBClusterEndpointsRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DescribeDBClusterEndpointsRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DescribeDBClusterEndpointsResponseUnmarshaller.Instance;\n    return Invoke<DescribeDBClusterEndpointsResponse>(request, options);\n}\n", "java": "public DescribeDBClusterEndpointsResult describeDBClusterEndpoints(DescribeDBClusterEndpointsRequest request) {\n    request = beforeClientExecution(request);\n    return executeDescribeDBClusterEndpoints(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Describe", "$$DBCluster", "$$Endpoint", "$$sResponse", "\u2581Describe", "$$DBCluster", "$$Endpoint", "$$s(Describe", "$$DBCluster", "$$Endpoint", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Describe", "$$DBCluster", "$$Endpoint", "$$s", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Describe", "$$DBCluster", "$$Endpoint", "$$s", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Describe", "$$DBCluster", "$$Endpoint", "$$sResponse>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Describe", "$$DBCluster", "$$Endpoint", "$$sResult", "\u2581describe", "$$DBCluster", "$$Endpoint", "$$s(Describe", "$$DBCluster", "$$Endpoint", "$$sRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDescribe", "$$DBCluster", "$$Endpoint", "$$s", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public bool RenameTo(String newName) {\n    bool rval = false;\n    if (!IsRoot) {\n        rval = _parent.ChangeName(Name, newName);\n    }\n    return rval;\n}\n", "java": "public boolean renameTo(final String newName) {\n    boolean rval = false;\n    if (!isRoot()) {\n        rval = _parent.changeName(getName(), newName);\n    }\n    return rval;\n}\n", "cs_t": [["\u2581public", "\u2581bool", "\u2581R", "$$en", "$$ame", "$$To", "$$(String", "\u2581new", "$$Name)", "\u2581{"], ["\u2581bool", "\u2581rval", "\u2581=", "\u2581false", "$$;"], ["\u2581if", "\u2581(!", "$$Is", "$$Ro", "$$ot", "$$)", "\u2581{"], ["\u2581rval", "\u2581=", "\u2581_", "$$parent", "$$.", "$$Change", "$$Name(", "$$Name,", "\u2581new", "$$Name)", "$$;"], ["\u2581}"], ["\u2581return", "\u2581rval", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581boolean", "\u2581re", "$$name", "$$To", "$$(f", "$$inal", "\u2581String", "\u2581new", "$$Name)", "\u2581{"], ["\u2581boolean", "\u2581rval", "\u2581=", "\u2581false", "$$;"], ["\u2581if", "\u2581(!", "$$is", "$$Ro", "$$ot", "$$())", "\u2581{"], ["\u2581rval", "\u2581=", "\u2581_", "$$parent", "$$.", "$$change", "$$Name(", "$$get", "$$Name", "$$(),", "\u2581new", "$$Name)", "$$;"], ["\u2581}"], ["\u2581return", "\u2581rval", "$$;"], ["\u2581}"]]}, {"cs": "public override Explanation Explain(int doc, Explanation freq) {\n    Explanation expl = new Explanation(Score(doc, freq.Value), \"sum of:\");\n    foreach (SimScorer subScorer in subScorers) {\n        expl.AddDetail(subScorer.Explain(doc, freq));\n    }\n    return expl;\n}\n", "java": "public Explanation explain(Explanation freq, long norm) {\n    List<Explanation> subs = new ArrayList<>();\n    for (SimScorer subScorer : subScorers) {\n        subs.add(subScorer.explain(freq, norm));\n    }\n    return Explanation.match(score(freq.getValue().floatValue(), norm), \"sum of:\", subs);\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581Exp", "$$lanation", "\u2581Exp", "$$la", "$$in", "$$(int", "\u2581doc", "$$,", "\u2581Exp", "$$lanation", "\u2581f", "$$req", "$$)", "\u2581{"], ["\u2581Exp", "$$lanation", "\u2581exp", "$$l", "\u2581=", "\u2581new", "\u2581Exp", "$$lanation", "$$(", "$$Score", "$$(d", "$$oc", "$$,", "\u2581f", "$$req", "$$.", "$$Value", "$$),", "\u2581\"", "$$sum", "\u2581of", "$$:", "$$\")", "$$;"], ["\u2581foreach", "\u2581(", "$$S", "$$im", "$$Score", "$$r", "\u2581sub", "$$Score", "$$r", "\u2581in", "\u2581sub", "$$Score", "$$r", "$$s)", "\u2581{"], ["\u2581exp", "$$l", "$$.Add", "$$Detail", "$$(s", "$$ub", "$$Score", "$$r", "$$.", "$$Exp", "$$la", "$$in", "$$(d", "$$oc", "$$,", "\u2581f", "$$req", "$$))", "$$;"], ["\u2581}"], ["\u2581return", "\u2581exp", "$$l", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Exp", "$$lanation", "\u2581exp", "$$la", "$$in", "$$(", "$$Exp", "$$lanation", "\u2581f", "$$req", "$$,", "\u2581long", "\u2581n", "$$orm", "$$)", "\u2581{"], ["\u2581List<", "$$Exp", "$$lanation", "$$>", "\u2581sub", "$$s", "\u2581=", "\u2581new", "\u2581ArrayList<", "$$>", "$$()", "$$;"], ["\u2581for", "\u2581(", "$$S", "$$im", "$$Score", "$$r", "\u2581sub", "$$Score", "$$r", "\u2581:", "\u2581sub", "$$Score", "$$r", "$$s)", "\u2581{"], ["\u2581sub", "$$s.add(", "$$sub", "$$Score", "$$r", "$$.", "$$exp", "$$la", "$$in", "$$(f", "$$req", "$$,", "\u2581n", "$$orm", "$$))", "$$;"], ["\u2581}"], ["\u2581return", "\u2581Exp", "$$lanation", "$$.", "$$match", "$$(", "$$sc", "$$ore", "$$(f", "$$req", "$$.get", "$$Value", "$$().", "$$f", "$$loat", "$$Value", "$$(),", "\u2581n", "$$orm", "$$),", "\u2581\"", "$$sum", "\u2581of", "$$:", "$$\",", "\u2581sub", "$$s)", "$$;"], ["\u2581}"]]}, {"cs": "public DocTermsIndexDocValues(ValueSource vs, AtomicReaderContext context, string field) {\n    try {\n        m_termsIndex = FieldCache.DEFAULT.GetTermsIndex(context.AtomicReader, field);\n    }\n    catch (Exception e) {\n        throw new DocTermsIndexException(field, e);\n    }\n    this.m_vs = vs;\n}\n", "java": "public DocTermsIndexDocValues(ValueSource vs, LeafReaderContext context, String field) throws IOException {\n    this(vs, open(context, field));\n}\n", "cs_t": [["\u2581public", "\u2581Doc", "$$Terms", "$$Index", "$$Doc", "$$Values", "$$(", "$$ValueSource", "\u2581v", "$$s,", "\u2581", "$$At", "$$om", "$$ic", "$$Reader", "$$Context", "\u2581context", "$$,", "\u2581string", "\u2581field)", "\u2581{"], ["\u2581try", "\u2581{"], ["\u2581m_", "$$term", "$$s", "$$Index", "\u2581=", "\u2581Field", "$$Cache", "$$.", "$$DE", "$$FAUL", "$$T", "$$.Get", "$$Terms", "$$Index(", "$$con", "$$text", "$$.A", "$$to", "$$m", "$$ic", "$$Reader", "$$,", "\u2581field)", "$$;"], ["\u2581}"], ["\u2581catch", "\u2581(", "$$Exception", "\u2581e)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581Doc", "$$Terms", "$$Index", "$$Exception(", "$$field", "$$,", "\u2581e)", "$$;"], ["\u2581}"], ["\u2581this.m_", "$$v", "$$s", "\u2581=", "\u2581v", "$$s;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Doc", "$$Terms", "$$Index", "$$Doc", "$$Values", "$$(", "$$ValueSource", "\u2581v", "$$s,", "\u2581L", "$$e", "$$af", "$$Reader", "$$Context", "\u2581context", "$$,", "\u2581String", "\u2581field)", "\u2581throws", "\u2581IOException", "\u2581{"], ["\u2581this", "$$(", "$$v", "$$s,", "\u2581o", "$$pen", "$$(", "$$con", "$$text", "$$,", "\u2581field", "$$))", "$$;"], ["\u2581}"]]}, {"cs": "public static int CompareTo(Ref o1, string o2) {\n    return Sharpen.Runtime.CompareOrdinal(o1.GetName(), o2);\n}\n", "java": "public static int compareTo(Ref o1, Ref o2) {\n    return o1.getName().compareTo(o2.getName());\n}\n", "cs_t": [["\u2581public", "\u2581static", "\u2581int", "\u2581Compare", "$$To(", "$$Ref", "\u2581o", "$$1,", "\u2581string", "\u2581o", "$$2)", "\u2581{"], ["\u2581return", "\u2581Sharpen.", "$$Runtime", "$$.Compare", "$$Ordinal", "$$(o", "$$1.", "$$Get", "$$Name", "$$(),", "\u2581o", "$$2)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581static", "\u2581int", "\u2581compare", "$$To(", "$$Ref", "\u2581o", "$$1,", "\u2581Ref", "\u2581o", "$$2)", "\u2581{"], ["\u2581return", "\u2581o", "$$1", "$$.get", "$$Name", "$$().", "$$compare", "$$To", "$$(o", "$$2", "$$.get", "$$Name", "$$())", "$$;"], ["\u2581}"]]}, {"cs": "public Size GetImageDimension() {\n    InternalWorkbook iwb = (_patriarch.Sheet.Workbook as HSSFWorkbook).Workbook;\n    EscherBSERecord bse = iwb.GetBSERecord(PictureIndex);\n    byte[] data = bse.BlipRecord.PictureData;\n    using (MemoryStream ms = new MemoryStream(data)) {\n        using (Image img = Image.FromStream(ms)) {\n            return img.Size;\n        }\n    }\n}\n", "java": "public Dimension getImageDimension() {\n    InternalWorkbook iwb = getPatriarch().getSheet().getWorkbook().getWorkbook();\n    EscherBSERecord bse = iwb.getBSERecord(getPictureIndex());\n    byte[] data = bse.getBlipRecord().getPicturedata();\n    int type = bse.getBlipTypeWin32();\n    return ImageUtils.getImageDimension(new ByteArrayInputStream(data), type);\n}\n", "cs_t": [["\u2581public", "\u2581Size", "\u2581Get", "$$Image", "$$D", "$$im", "$$en", "$$sion", "$$()", "\u2581{"], ["\u2581In", "$$ternal", "$$Workbook", "\u2581i", "$$w", "$$b", "\u2581=", "\u2581(_", "$$p", "$$at", "$$ri", "$$arch", "$$.", "$$Sheet", "$$.", "$$Workbook", "\u2581as", "\u2581HSSF", "$$Workbook", "$$).", "$$Workbook", "$$;"], ["\u2581Escher", "$$B", "$$SE", "$$Record", "\u2581b", "$$se", "\u2581=", "\u2581i", "$$w", "$$b", "$$.Get", "$$B", "$$SE", "$$Record(", "$$P", "$$icture", "$$Index)", "$$;"], ["\u2581byte[]", "\u2581data", "\u2581=", "\u2581b", "$$se", "$$.B", "$$lip", "$$Record.", "$$P", "$$icture", "$$Data", "$$;"], ["\u2581u", "$$sing", "\u2581(", "$$Mem", "$$ory", "$$Stream", "\u2581m", "$$s", "\u2581=", "\u2581new", "\u2581M", "$$em", "$$ory", "$$Stream", "$$(d", "$$ata", "$$))", "\u2581{"], ["\u2581u", "$$sing", "\u2581(", "$$Image", "\u2581i", "$$m", "$$g", "\u2581=", "\u2581I", "$$ma", "$$ge", "$$.", "$$From", "$$Stream", "$$(m", "$$s", "$$))", "\u2581{"], ["\u2581return", "\u2581i", "$$m", "$$g.", "$$Size", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581D", "$$im", "$$en", "$$sion", "\u2581get", "$$Image", "$$D", "$$im", "$$en", "$$sion", "$$()", "\u2581{"], ["\u2581In", "$$ternal", "$$Workbook", "\u2581i", "$$w", "$$b", "\u2581=", "\u2581get", "$$P", "$$at", "$$ri", "$$arch", "$$().get", "$$Sheet", "$$().get", "$$Workbook", "$$().get", "$$Workbook", "$$()", "$$;"], ["\u2581Escher", "$$B", "$$SE", "$$Record", "\u2581b", "$$se", "\u2581=", "\u2581i", "$$w", "$$b", "$$.get", "$$B", "$$SE", "$$Record(", "$$get", "$$P", "$$icture", "$$Index", "$$())", "$$;"], ["\u2581byte[]", "\u2581data", "\u2581=", "\u2581b", "$$se", "$$.get", "$$B", "$$lip", "$$Record", "$$().get", "$$P", "$$ic", "$$tu", "$$red", "$$ata", "$$()", "$$;"], ["\u2581int", "\u2581type", "\u2581=", "\u2581b", "$$se", "$$.get", "$$B", "$$lip", "$$Type", "$$W", "$$in", "$$32", "$$()", "$$;"], ["\u2581return", "\u2581I", "$$ma", "$$ge", "$$Utils.", "$$get", "$$Image", "$$D", "$$im", "$$en", "$$sion", "$$(new", "\u2581Byte", "$$Array", "$$InputStream", "$$(d", "$$ata", "$$),", "\u2581type", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public static double var(double[] v) {\n    double r = Double.NaN;\n    if (v != null && v.Length > 1) {\n        r = devsq(v) / (v.Length - 1);\n    }\n    return r;\n}\n", "java": "public static double var(double[] v) {\n    double r = Double.NaN;\n    if (v!=null && v.length > 1) {\n        r = devsq(v) / (v.length - 1);\n    }\n    return r;\n}\n", "cs_t": [["\u2581public", "\u2581static", "\u2581double", "\u2581var", "$$(double", "$$[]", "\u2581v)", "\u2581{"], ["\u2581double", "\u2581r", "\u2581=", "\u2581Double", "$$.N", "$$a", "$$N", "$$;"], ["\u2581if", "\u2581(v", "\u2581!=", "\u2581null", "\u2581&&", "\u2581v", "$$.Length", "\u2581>", "\u25811)", "\u2581{"], ["\u2581r", "\u2581=", "\u2581de", "$$v", "$$sq", "$$(", "$$v", "$$)", "\u2581/", "\u2581(v", "$$.Length", "\u2581-", "\u25811)", "$$;"], ["\u2581}"], ["\u2581return", "\u2581r", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581static", "\u2581double", "\u2581var", "$$(double", "$$[]", "\u2581v)", "\u2581{"], ["\u2581double", "\u2581r", "\u2581=", "\u2581Double", "$$.N", "$$a", "$$N", "$$;"], ["\u2581if", "\u2581(v", "$$!", "$$=", "$$null", "\u2581&&", "\u2581v", "$$.length", "\u2581>", "\u25811)", "\u2581{"], ["\u2581r", "\u2581=", "\u2581de", "$$v", "$$sq", "$$(", "$$v", "$$)", "\u2581/", "\u2581(v", "$$.length", "\u2581-", "\u25811)", "$$;"], ["\u2581}"], ["\u2581return", "\u2581r", "$$;"], ["\u2581}"]]}, {"cs": "public UpdateCloudFrontOriginAccessIdentityRequest(string id, string ifMatch, CloudFrontOriginAccessIdentityConfig cloudFrontOriginAccessIdentityConfig) {\n    _id = id;\n    _ifMatch = ifMatch;\n    _cloudFrontOriginAccessIdentityConfig = cloudFrontOriginAccessIdentityConfig;\n}\n", "java": "public UpdateCloudFrontOriginAccessIdentityRequest(CloudFrontOriginAccessIdentityConfig cloudFrontOriginAccessIdentityConfig, String id, String ifMatch) {\n    setCloudFrontOriginAccessIdentityConfig(cloudFrontOriginAccessIdentityConfig);\n    setId(id);\n    setIfMatch(ifMatch);\n}\n", "cs_t": [["\u2581public", "\u2581Update", "$$Cloud", "$$Fr", "$$ont", "$$Origin", "$$Access", "$$Identity", "$$Request(string", "\u2581id", "$$,", "\u2581string", "\u2581if", "$$Match", "$$,", "\u2581C", "$$loud", "$$Fr", "$$ont", "$$Origin", "$$Access", "$$Identity", "$$Config", "\u2581c", "$$loud", "$$Fr", "$$ont", "$$Origin", "$$Access", "$$Identity", "$$Config", "$$)", "\u2581{"], ["\u2581_", "$$id", "\u2581=", "\u2581id", "$$;"], ["\u2581_", "$$if", "$$Match", "\u2581=", "\u2581if", "$$Match", "$$;"], ["\u2581_c", "$$loud", "$$Fr", "$$ont", "$$Origin", "$$Access", "$$Identity", "$$Config", "\u2581=", "\u2581c", "$$loud", "$$Fr", "$$ont", "$$Origin", "$$Access", "$$Identity", "$$Config", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Update", "$$Cloud", "$$Fr", "$$ont", "$$Origin", "$$Access", "$$Identity", "$$Request", "$$(", "$$Cloud", "$$Fr", "$$ont", "$$Origin", "$$Access", "$$Identity", "$$Config", "\u2581c", "$$loud", "$$Fr", "$$ont", "$$Origin", "$$Access", "$$Identity", "$$Config", "$$,", "\u2581String", "\u2581id", "$$,", "\u2581String", "\u2581if", "$$Match", "$$)", "\u2581{"], ["\u2581set", "$$Cloud", "$$Fr", "$$ont", "$$Origin", "$$Access", "$$Identity", "$$Config", "$$(c", "$$loud", "$$Fr", "$$ont", "$$Origin", "$$Access", "$$Identity", "$$Config", "$$)", "$$;"], ["\u2581set", "$$Id(", "$$id", "$$)", "$$;"], ["\u2581set", "$$If", "$$Match", "$$(", "$$if", "$$Match", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual NGit.Api.DiffCommand SetDestinationPrefix(string destinationPrefix) {\n    this.destinationPrefix = destinationPrefix;\n    return this;\n}\n", "java": "public DiffCommand setDestinationPrefix(String destinationPrefix) {\n    this.destinationPrefix = destinationPrefix;\n    return this;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581NGit.Ap", "$$i", "$$.D", "$$iff", "$$Command", "\u2581Set", "$$Destination", "$$Prefix", "$$(string", "\u2581d", "$$estination", "$$Prefix", "$$)", "\u2581{"], ["\u2581this.d", "$$estination", "$$Prefix", "\u2581=", "\u2581d", "$$estination", "$$Prefix", "$$;"], ["\u2581return", "\u2581this", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581D", "$$iff", "$$Command", "\u2581set", "$$Destination", "$$Prefix", "$$(String", "\u2581d", "$$estination", "$$Prefix", "$$)", "\u2581{"], ["\u2581this.d", "$$estination", "$$Prefix", "\u2581=", "\u2581d", "$$estination", "$$Prefix", "$$;"], ["\u2581return", "\u2581this", "$$;"], ["\u2581}"]]}, {"cs": "public override int available() {\n    throw new System.NotImplementedException();\n}\n", "java": "public int available() throws IOException {\n    return IoBridge.available(fd);\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581int", "\u2581avail", "$$able", "$$()", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581System.NotImplemented", "$$Exception", "$$()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581int", "\u2581avail", "$$able", "$$()", "\u2581throws", "\u2581IOException", "\u2581{"], ["\u2581return", "\u2581I", "$$o", "$$B", "$$ri", "$$d", "$$ge", "$$.", "$$avail", "$$able", "$$(f", "$$d", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public SrndQuery NotQuery() {\n    SrndQuery q;\n    IList<SrndQuery> queries = null;\n    Token oprt = null;\n    q = NQuery();\n    while (true) {\n        switch ((jj_ntk == -1) ? Jj_ntk() : jj_ntk) {\n        case RegexpToken.NOT:\n            ;\n            break;\n        default:\n            jj_la1[2] = jj_gen;\n            goto label_4;\n        }\n        oprt = Jj_consume_token(RegexpToken.NOT);\n        if (queries == null) {\n            queries = new List<SrndQuery>();\n            queries.Add(q);\n        }\n        q = NQuery();\n        queries.Add(q);\n    }\n    label_4: {\n        if (true) return (queries == null) ? q : GetNotQuery(queries, oprt);\n    }\n    throw new Exception(\"Missing return statement in function\");\n}\n", "java": "final public SrndQuery NotQuery() throws ParseException {\n    SrndQuery q;\n    ArrayList<SrndQuery> queries = null;\n    Token oprt = null;\n    q = NQuery();\n    label_4:while (true) {\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case NOT:\n            ;\n            break;\n        default:\n            jj_la1[2] = jj_gen;\n            break label_4;\n        }\n        oprt = jj_consume_token(NOT);\n        if (queries == null) {\n            queries = new ArrayList<SrndQuery>();\n            queries.add(q);\n        }\n        q = NQuery();\n        queries.add(q);\n    }{\n        if (true) return (queries == null) ? q : getNotQuery(queries, oprt);\n    }\n    throw new Error(\"Missing return statement in function\");\n}\n", "cs_t": [["\u2581public", "\u2581S", "$$rndQuery", "\u2581Not", "$$Query", "$$()", "\u2581{"], ["\u2581S", "$$rndQuery", "\u2581q", "$$;"], ["\u2581IList<", "$$S", "$$rndQuery", "$$>", "\u2581qu", "$$eries", "\u2581=", "\u2581null", "$$;"], ["\u2581Token", "\u2581op", "$$rt", "\u2581=", "\u2581null", "$$;"], ["\u2581q", "\u2581=", "\u2581N", "$$Query", "$$()", "$$;"], ["\u2581while", "\u2581(true)", "\u2581{"], ["\u2581switch", "\u2581((", "$$jj_", "$$ntk", "\u2581==", "\u2581-1)", "\u2581?", "\u2581J", "$$j_", "$$ntk", "$$()", "\u2581:", "\u2581jj_", "$$ntk", "$$)", "\u2581{"], ["\u2581case", "\u2581Re", "$$g", "$$exp", "$$Token", "$$.N", "$$O", "$$T", "$$:"], ["\u2581", "$$;"], ["\u2581break", "$$;"], ["\u2581default", "$$:"], ["\u2581jj_", "$$la", "$$1", "$$[", "$$2", "$$]", "\u2581=", "\u2581jj_gen", "$$;"], ["\u2581g", "$$oto", "\u2581label", "$$_", "$$4", "$$;"], ["\u2581}"], ["\u2581op", "$$rt", "\u2581=", "\u2581J", "$$j_", "$$con", "$$sume", "$$_token", "$$(Re", "$$g", "$$exp", "$$Token", "$$.N", "$$O", "$$T", "$$)", "$$;"], ["\u2581if", "\u2581(", "$$qu", "$$eries", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581qu", "$$eries", "\u2581=", "\u2581new", "\u2581List<", "$$S", "$$rndQuery", "$$>", "$$()", "$$;"], ["\u2581qu", "$$eries", "$$.Add(", "$$q", "$$)", "$$;"], ["\u2581}"], ["\u2581q", "\u2581=", "\u2581N", "$$Query", "$$()", "$$;"], ["\u2581qu", "$$eries", "$$.Add(", "$$q", "$$)", "$$;"], ["\u2581}"], ["\u2581label", "$$_", "$$4", "$$:", "\u2581{"], ["\u2581if", "\u2581(true)", "\u2581return", "\u2581(", "$$qu", "$$eries", "\u2581==", "\u2581null)", "\u2581?", "\u2581q", "\u2581:", "\u2581Get", "$$Not", "$$Query(", "$$qu", "$$eries", "$$,", "\u2581op", "$$rt", "$$)", "$$;"], ["\u2581}"], ["\u2581throw", "\u2581new", "\u2581Exception(\"", "$$M", "$$issing", "\u2581return", "\u2581state", "$$ment", "\u2581in", "\u2581function", "$$\")", "$$;"], ["\u2581}"]], "java_t": [["\u2581final", "\u2581public", "\u2581S", "$$rndQuery", "\u2581Not", "$$Query", "$$()", "\u2581throws", "\u2581Parse", "$$Exception", "\u2581{"], ["\u2581S", "$$rndQuery", "\u2581q", "$$;"], ["\u2581ArrayList<", "$$S", "$$rndQuery", "$$>", "\u2581qu", "$$eries", "\u2581=", "\u2581null", "$$;"], ["\u2581Token", "\u2581op", "$$rt", "\u2581=", "\u2581null", "$$;"], ["\u2581q", "\u2581=", "\u2581N", "$$Query", "$$()", "$$;"], ["\u2581label", "$$_", "$$4", "$$:", "$$w", "$$hile", "\u2581(true)", "\u2581{"], ["\u2581switch", "\u2581((", "$$jj_", "$$ntk", "$$==", "$$-", "$$1)", "$$?", "$$jj_", "$$ntk", "$$():", "$$jj_", "$$ntk", "$$)", "\u2581{"], ["\u2581case", "\u2581N", "$$O", "$$T", "$$:"], ["\u2581", "$$;"], ["\u2581break", "$$;"], ["\u2581default", "$$:"], ["\u2581jj_", "$$la", "$$1", "$$[", "$$2", "$$]", "\u2581=", "\u2581jj_gen", "$$;"], ["\u2581break", "\u2581label", "$$_", "$$4", "$$;"], ["\u2581}"], ["\u2581op", "$$rt", "\u2581=", "\u2581jj_", "$$con", "$$sume", "$$_token", "$$(", "$$NO", "$$T", "$$)", "$$;"], ["\u2581if", "\u2581(", "$$qu", "$$eries", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581qu", "$$eries", "\u2581=", "\u2581new", "\u2581ArrayList<", "$$S", "$$rndQuery", "$$>", "$$()", "$$;"], ["\u2581qu", "$$eries", "$$.add(", "$$q", "$$)", "$$;"], ["\u2581}"], ["\u2581q", "\u2581=", "\u2581N", "$$Query", "$$()", "$$;"], ["\u2581qu", "$$eries", "$$.add(", "$$q", "$$)", "$$;"], ["\u2581}", "$${"], ["\u2581if", "\u2581(true)", "\u2581return", "\u2581(", "$$qu", "$$eries", "\u2581==", "\u2581null)", "\u2581?", "\u2581q", "\u2581:", "\u2581get", "$$Not", "$$Query(", "$$qu", "$$eries", "$$,", "\u2581op", "$$rt", "$$)", "$$;"], ["\u2581}"], ["\u2581throw", "\u2581new", "\u2581Error", "$$(\"", "$$M", "$$issing", "\u2581return", "\u2581state", "$$ment", "\u2581in", "\u2581function", "$$\")", "$$;"], ["\u2581}"]]}, {"cs": "public override String ToString() {\n    StringBuilder sb = new StringBuilder();\n    sb.Append(\"[\").Append(\"USERSVIEWEND\").Append(\"] (0x\");\n    sb.Append(StringUtil.ToHexString(sid).ToUpper() + \")\\n\");\n    sb.Append(\"  rawData=\").Append(HexDump.ToHex(_rawData)).Append(\"\\n\");\n    sb.Append(\"[/\").Append(\"USERSVIEWEND\").Append(\"]\\n\");\n    return sb.ToString();\n}\n", "java": "public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append('[').append(\"USERSVIEWEND\").append(\"] (0x\");\n    sb.append(Integer.toHexString(sid).toUpperCase(Locale.ROOT)).append(\")\\n\");\n    sb.append(\"  rawData=\").append(HexDump.toHex(_rawData)).append(\"\\n\");\n    sb.append(\"[/\").append(\"USERSVIEWEND\").append(\"]\\n\");\n    return sb.toString();\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581String", "\u2581ToString()", "\u2581{"], ["\u2581StringBuilder", "\u2581sb", "\u2581=", "\u2581new", "\u2581StringBuilder", "$$()", "$$;"], ["\u2581sb.Append(\"", "$$[", "$$\")", "$$.Append(\"", "$$U", "$$S", "$$ER", "$$S", "$$V", "$$I", "$$E", "$$W", "$$EN", "$$D", "$$\")", "$$.Append(\"", "$$]", "\u2581(", "$$0x", "$$\")", "$$;"], ["\u2581sb.Append(", "$$String", "$$Util", "$$.To", "$$HexString(", "$$sid", "$$)", "$$.To", "$$Up", "$$per", "$$()", "\u2581+", "\u2581\")", "$$\\n", "$$\")", "$$;"], ["\u2581sb.Append(\"", "\u2581", "\u2581raw", "$$Data", "$$=", "$$\").Append(", "$$HexDump", "$$.To", "$$Hex", "$$(_", "$$raw", "$$Data", "$$))", "$$.Append(\"", "$$\\n", "$$\")", "$$;"], ["\u2581sb.Append(\"", "$$[/", "$$\")", "$$.Append(\"", "$$U", "$$S", "$$ER", "$$S", "$$V", "$$I", "$$E", "$$W", "$$EN", "$$D", "$$\")", "$$.Append(\"", "$$]", "$$\\n", "$$\")", "$$;"], ["\u2581return", "\u2581sb", "$$.ToString()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581String", "\u2581toString()", "\u2581{"], ["\u2581StringBuilder", "\u2581sb", "\u2581=", "\u2581new", "\u2581StringBuilder", "$$()", "$$;"], ["\u2581sb", "$$.append('", "$$[", "$$')", "$$.append(\"", "$$U", "$$S", "$$ER", "$$S", "$$V", "$$I", "$$E", "$$W", "$$EN", "$$D", "$$\")", "$$.append(\"", "$$]", "\u2581(", "$$0x", "$$\")", "$$;"], ["\u2581sb.append(", "$$Integ", "$$er.", "$$to", "$$HexString(", "$$sid", "$$)", "$$.to", "$$Up", "$$per", "$$Case", "$$(", "$$Local", "$$e", "$$.", "$$RO", "$$O", "$$T", "$$))", "$$.append(\"", "$$)", "$$\\n", "$$\")", "$$;"], ["\u2581sb.append(\"", "\u2581", "\u2581raw", "$$Data", "$$=\").append(", "$$HexDump", "$$.to", "$$Hex", "$$(_", "$$raw", "$$Data", "$$))", "$$.append(\"", "$$\\n", "$$\")", "$$;"], ["\u2581sb.append(\"", "$$[/", "$$\")", "$$.append(\"", "$$U", "$$S", "$$ER", "$$S", "$$V", "$$I", "$$E", "$$W", "$$EN", "$$D", "$$\")", "$$.append(\"", "$$]", "$$\\n", "$$\")", "$$;"], ["\u2581return", "\u2581sb", "$$.toString()", "$$;"], ["\u2581}"]]}, {"cs": "public override java.nio.FloatBuffer asReadOnlyBuffer() {\n    java.nio.FloatToByteBufferAdapter buf = new java.nio.FloatToByteBufferAdapter(byteBuffer.asReadOnlyBuffer());\n    buf._limit = _limit;\n    buf._position = _position;\n    buf._mark = _mark;\n    buf.byteBuffer._order = byteBuffer._order;\n    return buf;\n}\n", "java": "public FloatBuffer asReadOnlyBuffer() {\n    FloatToByteBufferAdapter buf = new FloatToByteBufferAdapter(byteBuffer.asReadOnlyBuffer());\n    buf.limit = limit;\n    buf.position = position;\n    buf.mark = mark;\n    buf.byteBuffer.order = byteBuffer.order;\n    return buf;\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581java.nio.", "$$Float", "$$Buffer", "\u2581as", "$$Read", "$$OnlyBuffer", "$$()", "\u2581{"], ["\u2581java.nio.", "$$Float", "$$To", "$$ByteBuffer", "$$Adapter", "\u2581buf", "\u2581=", "\u2581new", "\u2581java.nio.", "$$Float", "$$To", "$$ByteBuffer", "$$Adapter", "$$(byte", "$$Buffer.", "$$as", "$$Read", "$$OnlyBuffer", "$$())", "$$;"], ["\u2581buf", "$$._", "$$limit", "\u2581=", "\u2581_limit", "$$;"], ["\u2581buf", "$$._", "$$position", "\u2581=", "\u2581_position", "$$;"], ["\u2581buf", "$$._", "$$mark", "\u2581=", "\u2581_", "$$mark", "$$;"], ["\u2581buf", "$$.", "$$byte", "$$Buffer.", "$$_", "$$order", "\u2581=", "\u2581byteBuffer.", "$$_", "$$order", "$$;"], ["\u2581return", "\u2581buf", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581F", "$$loat", "$$Buffer", "\u2581as", "$$Read", "$$OnlyBuffer", "$$()", "\u2581{"], ["\u2581F", "$$loat", "$$To", "$$ByteBuffer", "$$Adapter", "\u2581buf", "\u2581=", "\u2581new", "\u2581F", "$$loat", "$$To", "$$ByteBuffer", "$$Adapter", "$$(byte", "$$Buffer.", "$$as", "$$Read", "$$OnlyBuffer", "$$())", "$$;"], ["\u2581buf", "$$.", "$$limit", "\u2581=", "\u2581limit", "$$;"], ["\u2581buf", "$$.", "$$position", "\u2581=", "\u2581position", "$$;"], ["\u2581buf", "$$.", "$$mark", "\u2581=", "\u2581mark", "$$;"], ["\u2581buf", "$$.", "$$byte", "$$Buffer.", "$$order", "\u2581=", "\u2581byteBuffer.", "$$order", "$$;"], ["\u2581return", "\u2581buf", "$$;"], ["\u2581}"]]}, {"cs": "public virtual LogCommand Log() {\n    return new LogCommand(repo);\n}\n", "java": "public LogCommand log() {\n    return new LogCommand(repo);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581", "$$Log", "$$Command", "\u2581", "$$Log", "$$()", "\u2581{"], ["\u2581return", "\u2581new", "\u2581", "$$Log", "$$Command", "$$(repo", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581", "$$Log", "$$Command", "\u2581log", "$$()", "\u2581{"], ["\u2581return", "\u2581new", "\u2581", "$$Log", "$$Command", "$$(repo", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual CreateDomainResponse CreateDomain(CreateDomainRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = CreateDomainRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = CreateDomainResponseUnmarshaller.Instance;\n    return Invoke<CreateDomainResponse>(request, options);\n}\n", "java": "public CreateDomainResult createDomain(CreateDomainRequest request) {\n    request = beforeClientExecution(request);\n    return executeCreateDomain(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Create", "$$Domain", "$$Response", "\u2581Create", "$$Domain", "$$(Create", "$$Domain", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Create", "$$Domain", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Create", "$$Domain", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Create", "$$Domain", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Create", "$$Domain", "$$Result", "\u2581create", "$$Domain", "$$(Create", "$$Domain", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeCreate", "$$Domain", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual int GetWeight() {\n    return WEIGHT_UNKNOWN;\n}\n", "java": "public int getWeight() {\n    return WEIGHT_UNKNOWN;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581int", "\u2581Get", "$$Weight", "$$()", "\u2581{"], ["\u2581return", "\u2581W", "$$E", "$$I", "$$G", "$$H", "$$T_", "$$UN", "$$K", "$$NO", "$$W", "$$N", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581int", "\u2581get", "$$Weight", "$$()", "\u2581{"], ["\u2581return", "\u2581W", "$$E", "$$I", "$$G", "$$H", "$$T_", "$$UN", "$$K", "$$NO", "$$W", "$$N", "$$;"], ["\u2581}"]]}, {"cs": "public ChartStartObjectRecord(RecordInputStream in1) {\n    rt = in1.ReadShort();\n    grbitFrt = in1.ReadShort();\n    iObjectKind = in1.ReadShort();\n    iObjectContext = in1.ReadShort();\n    iObjectInstance1 = in1.ReadShort();\n    iObjectInstance2 = in1.ReadShort();\n}\n", "java": "public ChartStartObjectRecord(RecordInputStream in) {\n    rt = in.readShort();\n    grbitFrt = in.readShort();\n    iObjectKind = in.readShort();\n    iObjectContext = in.readShort();\n    iObjectInstance1 = in.readShort();\n    iObjectInstance2 = in.readShort();\n}\n", "cs_t": [["\u2581public", "\u2581Ch", "$$art", "$$Start", "$$Object", "$$Record(RecordInputStream", "\u2581in1)", "\u2581{"], ["\u2581r", "$$t", "\u2581=", "\u2581in1.Read", "$$Short", "$$()", "$$;"], ["\u2581g", "$$r", "$$bit", "$$F", "$$rt", "\u2581=", "\u2581in1.Read", "$$Short", "$$()", "$$;"], ["\u2581i", "$$Object", "$$K", "$$ind", "\u2581=", "\u2581in1.Read", "$$Short", "$$()", "$$;"], ["\u2581i", "$$Object", "$$Context", "\u2581=", "\u2581in1.Read", "$$Short", "$$()", "$$;"], ["\u2581i", "$$Object", "$$Instance", "$$1", "\u2581=", "\u2581in1.Read", "$$Short", "$$()", "$$;"], ["\u2581i", "$$Object", "$$Instance", "$$2", "\u2581=", "\u2581in1.Read", "$$Short", "$$()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Ch", "$$art", "$$Start", "$$Object", "$$Record(RecordInputStream", "\u2581in)", "\u2581{"], ["\u2581r", "$$t", "\u2581=", "\u2581in.read", "$$Short", "$$()", "$$;"], ["\u2581g", "$$r", "$$bit", "$$F", "$$rt", "\u2581=", "\u2581in.read", "$$Short", "$$()", "$$;"], ["\u2581i", "$$Object", "$$K", "$$ind", "\u2581=", "\u2581in.read", "$$Short", "$$()", "$$;"], ["\u2581i", "$$Object", "$$Context", "\u2581=", "\u2581in.read", "$$Short", "$$()", "$$;"], ["\u2581i", "$$Object", "$$Instance", "$$1", "\u2581=", "\u2581in.read", "$$Short", "$$()", "$$;"], ["\u2581i", "$$Object", "$$Instance", "$$2", "\u2581=", "\u2581in.read", "$$Short", "$$()", "$$;"], ["\u2581}"]]}, {"cs": "public virtual void remove() {\n    if (this.lastEntryReturned == null) {\n        throw new System.InvalidOperationException();\n    }\n    if (this._enclosing.modCount != this.expectedModCount) {\n        throw new java.util.ConcurrentModificationException();\n    }\n    this._enclosing.remove(this.lastEntryReturned.key);\n    this.lastEntryReturned = null;\n    this.expectedModCount = this._enclosing.modCount;\n}\n", "java": "public void remove() {\n    if (lastReturned == null)throw new IllegalStateException();\n    ConcurrentHashMap.this.remove(lastReturned.key);\n    lastReturned = null;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581void", "\u2581remove", "$$()", "\u2581{"], ["\u2581if", "\u2581(this", "$$.", "$$last", "$$Entry", "$$Ret", "$$urn", "$$ed", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581System.", "$$Invalid", "$$Operation", "$$Exception", "$$()", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(this", "$$._", "$$enclosing", "$$.", "$$mod", "$$Count", "\u2581!=", "\u2581this.", "$$expected", "$$Mod", "$$Count)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581java.util.", "$$Con", "$$current", "$$Modification", "$$Exception", "$$()", "$$;"], ["\u2581}"], ["\u2581this._enclosing", "$$.remove", "$$(this", "$$.", "$$last", "$$Entry", "$$Ret", "$$urn", "$$ed", "$$.", "$$key", "$$)", "$$;"], ["\u2581this.", "$$last", "$$Entry", "$$Ret", "$$urn", "$$ed", "\u2581=", "\u2581null", "$$;"], ["\u2581this.", "$$expected", "$$Mod", "$$Count", "\u2581=", "\u2581this._enclosing", "$$.", "$$mod", "$$Count", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581remove", "$$()", "\u2581{"], ["\u2581if", "\u2581(", "$$last", "$$Ret", "$$urn", "$$ed", "\u2581==", "\u2581null)", "$$throw", "\u2581new", "\u2581IllegalState", "$$Exception", "$$()", "$$;"], ["\u2581Con", "$$current", "$$Hash", "$$Map.", "$$this", "$$.remove", "$$(", "$$last", "$$Ret", "$$urn", "$$ed", "$$.", "$$key", "$$)", "$$;"], ["\u2581last", "$$Ret", "$$urn", "$$ed", "\u2581=", "\u2581null", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DescribeMetricCollectionTypesResponse DescribeMetricCollectionTypes(DescribeMetricCollectionTypesRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DescribeMetricCollectionTypesRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DescribeMetricCollectionTypesResponseUnmarshaller.Instance;\n    return Invoke<DescribeMetricCollectionTypesResponse>(request, options);\n}\n", "java": "public DescribeMetricCollectionTypesResult describeMetricCollectionTypes(DescribeMetricCollectionTypesRequest request) {\n    request = beforeClientExecution(request);\n    return executeDescribeMetricCollectionTypes(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Describe", "$$Metric", "$$Collection", "$$Types", "$$Response", "\u2581Describe", "$$Metric", "$$Collection", "$$Types", "$$(Describe", "$$Metric", "$$Collection", "$$Types", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Describe", "$$Metric", "$$Collection", "$$Types", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Describe", "$$Metric", "$$Collection", "$$Types", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Describe", "$$Metric", "$$Collection", "$$Types", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Describe", "$$Metric", "$$Collection", "$$Types", "$$Result", "\u2581describe", "$$Metric", "$$Collection", "$$Types", "$$(Describe", "$$Metric", "$$Collection", "$$Types", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDescribe", "$$Metric", "$$Collection", "$$Types", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual UpdateFieldLevelEncryptionProfileResponse UpdateFieldLevelEncryptionProfile(UpdateFieldLevelEncryptionProfileRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = UpdateFieldLevelEncryptionProfileRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = UpdateFieldLevelEncryptionProfileResponseUnmarshaller.Instance;\n    return Invoke<UpdateFieldLevelEncryptionProfileResponse>(request, options);\n}\n", "java": "public UpdateFieldLevelEncryptionProfileResult updateFieldLevelEncryptionProfile(UpdateFieldLevelEncryptionProfileRequest request) {\n    request = beforeClientExecution(request);\n    return executeUpdateFieldLevelEncryptionProfile(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Update", "$$FieldLevelEncryption", "$$Profile", "$$Response", "\u2581Update", "$$FieldLevelEncryption", "$$Profile", "$$(Update", "$$FieldLevelEncryption", "$$Profile", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Update", "$$FieldLevelEncryption", "$$Profile", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Update", "$$FieldLevelEncryption", "$$Profile", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Update", "$$FieldLevelEncryption", "$$Profile", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Update", "$$FieldLevelEncryption", "$$Profile", "$$Result", "\u2581update", "$$FieldLevelEncryption", "$$Profile", "$$(Update", "$$FieldLevelEncryption", "$$Profile", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeUpdate", "$$FieldLevelEncryption", "$$Profile", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual Ref GetLeaf() {\n    return this;\n}\n", "java": "public Ref getLeaf() {\n    return this;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Ref", "\u2581Get", "$$Le", "$$af", "$$()", "\u2581{"], ["\u2581return", "\u2581this", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Ref", "\u2581get", "$$Le", "$$af", "$$()", "\u2581{"], ["\u2581return", "\u2581this", "$$;"], ["\u2581}"]]}, {"cs": "public override int lastIndexOf(object @object) {\n    if (@object != null) {\n        {\n            for (int i = a.Length - 1; i >= 0; i--) {\n                if (@object.Equals(a[i])) {\n                    return i;\n                }\n            }\n        }\n    }\n    else {\n        {\n            for (int i = a.Length - 1; i >= 0; i--) {\n                if ((object)a[i] == null) {\n                    return i;\n                }\n            }\n        }\n    }\n    return -1;\n}\n", "java": "public int lastIndexOf(Object object) {\n    if (object != null) {\n        for (int i = a.length - 1; i >= 0; i--) {\n            if (object.equals(a[i])) {\n                return i;\n            }\n        }\n    }\n    else {\n        for (int i = a.length - 1; i >= 0; i--) {\n            if (a[i] == null) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581int", "\u2581last", "$$Index", "$$Of", "$$(object", "\u2581@object)", "\u2581{"], ["\u2581if", "\u2581(@", "$$object", "\u2581!=", "\u2581null)", "\u2581{"], ["\u2581{"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u2581a", "$$.Length", "\u2581-", "\u25811", "$$;", "\u2581i", "\u2581>=", "\u25810;", "\u2581i", "$$--", "$$)", "\u2581{"], ["\u2581if", "\u2581(@", "$$object", "$$.Equals(", "$$a", "$$[i]", "$$))", "\u2581{"], ["\u2581return", "\u2581i", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581}"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581{"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u2581a", "$$.Length", "\u2581-", "\u25811", "$$;", "\u2581i", "\u2581>=", "\u25810;", "\u2581i", "$$--", "$$)", "\u2581{"], ["\u2581if", "\u2581(", "$$(object", "$$)", "$$a", "$$[i]", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581return", "\u2581i", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581}"], ["\u2581}"], ["\u2581return", "\u2581-1", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581int", "\u2581last", "$$Index", "$$Of(", "$$Object", "\u2581object)", "\u2581{"], ["\u2581if", "\u2581(", "$$object", "\u2581!=", "\u2581null)", "\u2581{"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u2581a", "$$.length", "\u2581-", "\u25811", "$$;", "\u2581i", "\u2581>=", "\u25810;", "\u2581i", "$$--", "$$)", "\u2581{"], ["\u2581if", "\u2581(", "$$object", "$$.equals(", "$$a", "$$[i]", "$$))", "\u2581{"], ["\u2581return", "\u2581i", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u2581a", "$$.length", "\u2581-", "\u25811", "$$;", "\u2581i", "\u2581>=", "\u25810;", "\u2581i", "$$--", "$$)", "\u2581{"], ["\u2581if", "\u2581(a", "$$[i]", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581return", "\u2581i", "$$;"], ["\u2581}"], ["\u2581}"], ["\u2581}"], ["\u2581return", "\u2581-1", "$$;"], ["\u2581}"]]}, {"cs": "public DefaultBulkScorer(Scorer scorer) {\n    if (scorer == null) {\n        throw new System.NullReferenceException();\n    }\n    this.scorer = scorer;\n}\n", "java": "public DefaultBulkScorer(Scorer scorer) {\n    if (scorer == null) {\n        throw new NullPointerException();\n    }\n    this.scorer = scorer;\n    this.iterator = scorer.iterator();\n    this.twoPhase = scorer.twoPhaseIterator();\n}\n", "cs_t": [["\u2581public", "\u2581De", "$$fault", "$$B", "$$ul", "$$k", "$$Score", "$$r", "$$(", "$$Score", "$$r", "\u2581s", "$$core", "$$r", "$$)", "\u2581{"], ["\u2581if", "\u2581(", "$$sc", "$$ore", "$$r", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581System", "$$.N", "$$ull", "$$Reference", "$$Exception", "$$()", "$$;"], ["\u2581}"], ["\u2581this.", "$$sc", "$$ore", "$$r", "\u2581=", "\u2581s", "$$core", "$$r", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581De", "$$fault", "$$B", "$$ul", "$$k", "$$Score", "$$r", "$$(", "$$Score", "$$r", "\u2581s", "$$core", "$$r", "$$)", "\u2581{"], ["\u2581if", "\u2581(", "$$sc", "$$ore", "$$r", "\u2581==", "\u2581null)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581Null", "$$Pointer", "$$Exception", "$$()", "$$;"], ["\u2581}"], ["\u2581this.", "$$sc", "$$ore", "$$r", "\u2581=", "\u2581s", "$$core", "$$r", "$$;"], ["\u2581this.", "$$iterator", "\u2581=", "\u2581s", "$$core", "$$r", "$$.", "$$iterator", "$$()", "$$;"], ["\u2581this.", "$$t", "$$wo", "$$Ph", "$$ase", "\u2581=", "\u2581s", "$$core", "$$r", "$$.", "$$t", "$$wo", "$$Ph", "$$ase", "$$Iterator", "$$()", "$$;"], ["\u2581}"]]}, {"cs": "public CreateRepoAuthorizationRequest(): base(\"cr\", \"2016-06-07\", \"CreateRepoAuthorization\", \"cr\", \"openAPI\") {\n    UriPattern = \"/repos/[RepoNamespace]/[RepoName]/authorizations\";\n    Method = MethodType.PUT;\n}\n", "java": "public CreateRepoAuthorizationRequest() {\n    super(\"cr\", \"2016-06-07\", \"CreateRepoAuthorization\", \"cr\");\n    setUriPattern(\"/repos/[RepoNamespace]/[RepoName]/authorizations\");\n    setMethod(MethodType.PUT);\n}\n", "cs_t": [["\u2581public", "\u2581Create", "$$Repo", "$$Authorization", "$$Request():", "\u2581base(\"", "$$cr\",", "\u2581\"2016-06-07\",", "\u2581\"", "$$Create", "$$Repo", "$$Authorization", "$$\",", "\u2581\"", "$$cr\",", "\u2581\"openAPI\")", "\u2581{"], ["\u2581", "$$UriPattern", "\u2581=", "\u2581\"/", "$$re", "$$pos", "$$/[Repo", "$$Namespace", "$$]", "$$/[Repo", "$$Name", "$$]/", "$$a", "$$uthor", "$$ization", "$$s", "$$\"", "$$;"], ["\u2581Method", "\u2581=", "\u2581Method", "$$Type.", "$$P", "$$UT", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Create", "$$Repo", "$$Authorization", "$$Request()", "\u2581{"], ["\u2581super(\"", "$$cr\",", "\u2581\"2016-06-07\",", "\u2581\"", "$$Create", "$$Repo", "$$Authorization", "$$\",", "\u2581\"", "$$cr", "$$\")", "$$;"], ["\u2581set", "$$UriPattern", "$$(\"/", "$$re", "$$pos", "$$/[Repo", "$$Namespace", "$$]", "$$/[Repo", "$$Name", "$$]/", "$$a", "$$uthor", "$$ization", "$$s", "$$\")", "$$;"], ["\u2581setMethod(Method", "$$Type.", "$$P", "$$UT", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override TokenStream Create(TokenStream input) {\n    return new PortugueseLightStemFilter(input);\n}\n", "java": "public TokenStream create(TokenStream input) {\n    return new PortugueseLightStemFilter(input);\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581TokenStream", "\u2581Create(TokenStream", "\u2581input)", "\u2581{"], ["\u2581return", "\u2581new", "\u2581P", "$$or", "$$tu", "$$g", "$$ues", "$$e", "$$L", "$$ight", "$$Stem", "$$Filter(input", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581TokenStream", "\u2581create(TokenStream", "\u2581input)", "\u2581{"], ["\u2581return", "\u2581new", "\u2581P", "$$or", "$$tu", "$$g", "$$ues", "$$e", "$$L", "$$ight", "$$Stem", "$$Filter(input", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override String ToString() {\n    StringBuilder buffer = new StringBuilder();\n    buffer.Append(\"[TABLESTYLES]\\n\");\n    buffer.Append(\"    .rt      =\").Append(HexDump.ShortToHex(rt)).Append('\\n');\n    buffer.Append(\"    .grbitFrt=\").Append(HexDump.ShortToHex(grbitFrt)).Append('\\n');\n    buffer.Append(\"    .unused  =\").Append(HexDump.ToHex(unused)).Append('\\n');\n    buffer.Append(\"    .cts=\").Append(HexDump.IntToHex(cts)).Append('\\n');\n    buffer.Append(\"    .rgchDefListStyle=\").Append(rgchDefListStyle).Append('\\n');\n    buffer.Append(\"    .rgchDefPivotStyle=\").Append(rgchDefPivotStyle).Append('\\n');\n    buffer.Append(\"[/TABLESTYLES]\\n\");\n    return buffer.ToString();\n}\n", "java": "public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"[TABLESTYLES]\\n\");\n    buffer.append(\"    .rt      =\").append(HexDump.shortToHex(rt)).append('\\n');\n    buffer.append(\"    .grbitFrt=\").append(HexDump.shortToHex(grbitFrt)).append('\\n');\n    buffer.append(\"    .unused  =\").append(HexDump.toHex(unused)).append('\\n');\n    buffer.append(\"    .cts=\").append(HexDump.intToHex(cts)).append('\\n');\n    buffer.append(\"    .rgchDefListStyle=\").append(rgchDefListStyle).append('\\n');\n    buffer.append(\"    .rgchDefPivotStyle=\").append(rgchDefPivotStyle).append('\\n');\n    buffer.append(\"[/TABLESTYLES]\\n\");\n    return buffer.toString();\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581String", "\u2581ToString()", "\u2581{"], ["\u2581StringBuilder", "\u2581buffer", "\u2581=", "\u2581new", "\u2581StringBuilder", "$$()", "$$;"], ["\u2581buffer.Append(\"[", "$$TA", "$$BLE", "$$ST", "$$Y", "$$LE", "$$S", "$$]", "$$\\n", "$$\")", "$$;"], ["\u2581buffer.Append(\"", "\u2581", "\u2581", "\u2581", "\u2581.", "$$rt", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581=", "$$\").Append(", "$$HexDump.Short", "$$ToHex(", "$$rt", "$$))", "$$.Append('", "$$\\n", "$$')", "$$;"], ["\u2581buffer.Append(\"", "\u2581", "\u2581", "\u2581", "\u2581.", "$$gr", "$$bit", "$$F", "$$rt", "$$=", "$$\").Append(", "$$HexDump.Short", "$$ToHex(", "$$gr", "$$bit", "$$F", "$$rt", "$$))", "$$.Append('", "$$\\n", "$$')", "$$;"], ["\u2581buffer.Append(\"", "\u2581", "\u2581", "\u2581", "\u2581.", "$$un", "$$used", "\u2581", "\u2581=", "$$\").Append(", "$$HexDump", "$$.To", "$$Hex", "$$(", "$$un", "$$used", "$$))", "$$.Append('", "$$\\n", "$$')", "$$;"], ["\u2581buffer.Append(\"", "\u2581", "\u2581", "\u2581", "\u2581.", "$$ct", "$$s", "$$=", "$$\").Append(", "$$HexDump.", "$$Int", "$$ToHex(", "$$ct", "$$s", "$$))", "$$.Append('", "$$\\n", "$$')", "$$;"], ["\u2581buffer.Append(\"", "\u2581", "\u2581", "\u2581", "\u2581.", "$$r", "$$g", "$$ch", "$$De", "$$f", "$$List", "$$Style", "$$=", "$$\").Append(", "$$r", "$$g", "$$ch", "$$De", "$$f", "$$List", "$$Style", "$$)", "$$.Append('", "$$\\n", "$$')", "$$;"], ["\u2581buffer.Append(\"", "\u2581", "\u2581", "\u2581", "\u2581.", "$$r", "$$g", "$$ch", "$$De", "$$f", "$$P", "$$i", "$$v", "$$ot", "$$Style", "$$=", "$$\").Append(", "$$r", "$$g", "$$ch", "$$De", "$$f", "$$P", "$$i", "$$v", "$$ot", "$$Style", "$$)", "$$.Append('", "$$\\n", "$$')", "$$;"], ["\u2581buffer.Append(\"[/", "$$TA", "$$BLE", "$$ST", "$$Y", "$$LE", "$$S", "$$]", "$$\\n", "$$\")", "$$;"], ["\u2581return", "\u2581buffer", "$$.ToString()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581String", "\u2581toString()", "\u2581{"], ["\u2581StringBuilder", "\u2581buffer", "\u2581=", "\u2581new", "\u2581StringBuilder", "$$()", "$$;"], ["\u2581buffer.append(\"[", "$$TA", "$$BLE", "$$ST", "$$Y", "$$LE", "$$S", "$$]", "$$\\n", "$$\")", "$$;"], ["\u2581buffer.append(\"", "\u2581", "\u2581", "\u2581", "\u2581.", "$$rt", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581=", "$$\").append(", "$$HexDump.short", "$$ToHex(", "$$rt", "$$))", "$$.append('", "$$\\n", "$$')", "$$;"], ["\u2581buffer.append(\"", "\u2581", "\u2581", "\u2581", "\u2581.", "$$gr", "$$bit", "$$F", "$$rt", "$$=\").append(", "$$HexDump.short", "$$ToHex(", "$$gr", "$$bit", "$$F", "$$rt", "$$))", "$$.append('", "$$\\n", "$$')", "$$;"], ["\u2581buffer.append(\"", "\u2581", "\u2581", "\u2581", "\u2581.", "$$un", "$$used", "\u2581", "\u2581=", "$$\").append(", "$$HexDump", "$$.to", "$$Hex", "$$(", "$$un", "$$used", "$$))", "$$.append('", "$$\\n", "$$')", "$$;"], ["\u2581buffer.append(\"", "\u2581", "\u2581", "\u2581", "\u2581.", "$$ct", "$$s", "$$=\").append(", "$$HexDump.", "$$int", "$$ToHex(", "$$ct", "$$s", "$$))", "$$.append('", "$$\\n", "$$')", "$$;"], ["\u2581buffer.append(\"", "\u2581", "\u2581", "\u2581", "\u2581.", "$$r", "$$g", "$$ch", "$$De", "$$f", "$$List", "$$Style", "$$=\").append(", "$$r", "$$g", "$$ch", "$$De", "$$f", "$$List", "$$Style", "$$)", "$$.append('", "$$\\n", "$$')", "$$;"], ["\u2581buffer.append(\"", "\u2581", "\u2581", "\u2581", "\u2581.", "$$r", "$$g", "$$ch", "$$De", "$$f", "$$P", "$$i", "$$v", "$$ot", "$$Style", "$$=\").append(", "$$r", "$$g", "$$ch", "$$De", "$$f", "$$P", "$$i", "$$v", "$$ot", "$$Style", "$$)", "$$.append('", "$$\\n", "$$')", "$$;"], ["\u2581buffer.append(\"[/", "$$TA", "$$BLE", "$$ST", "$$Y", "$$LE", "$$S", "$$]", "$$\\n", "$$\")", "$$;"], ["\u2581return", "\u2581buffer", "$$.toString()", "$$;"], ["\u2581}"]]}, {"cs": "public override java.util.Enumeration<K> keys() {\n    lock (this) {\n        return new java.util.Hashtable<K, V>.KeyEnumeration(this);\n    }\n}\n", "java": "public synchronized Enumeration<K> keys() {\n    return new KeyEnumeration();\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581java.util.", "$$Enum", "$$eration", "$$<", "$$K", "$$>", "\u2581key", "$$s()", "\u2581{"], ["\u2581lock", "\u2581(this)", "\u2581{"], ["\u2581return", "\u2581new", "\u2581java.util.", "$$Hashtable", "$$<", "$$K,", "\u2581V>", "$$.", "$$Key", "$$Enum", "$$eration", "$$(this", "$$)", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581synchronized", "\u2581", "$$Enum", "$$eration", "$$<", "$$K", "$$>", "\u2581key", "$$s()", "\u2581{"], ["\u2581return", "\u2581new", "\u2581", "$$Key", "$$Enum", "$$eration", "$$()", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DescribeInstanceTypesResponse DescribeInstanceTypes(DescribeInstanceTypesRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DescribeInstanceTypesRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DescribeInstanceTypesResponseUnmarshaller.Instance;\n    return Invoke<DescribeInstanceTypesResponse>(request, options);\n}\n", "java": "public DescribeInstanceTypesResult describeInstanceTypes(DescribeInstanceTypesRequest request) {\n    request = beforeClientExecution(request);\n    return executeDescribeInstanceTypes(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Describe", "$$Instance", "$$Types", "$$Response", "\u2581Describe", "$$Instance", "$$Types", "$$(Describe", "$$Instance", "$$Types", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Describe", "$$Instance", "$$Types", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Describe", "$$Instance", "$$Types", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Describe", "$$Instance", "$$Types", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Describe", "$$Instance", "$$Types", "$$Result", "\u2581describe", "$$Instance", "$$Types", "$$(Describe", "$$Instance", "$$Types", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDescribe", "$$Instance", "$$Types", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual RefUpdate.Result GetResult() {\n    return rc;\n}\n", "java": "public RefUpdate.Result getResult() {\n    return rc;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Ref", "$$Update", "$$.", "$$Result", "\u2581Get", "$$Result", "$$()", "\u2581{"], ["\u2581return", "\u2581r", "$$c", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Ref", "$$Update", "$$.", "$$Result", "\u2581get", "$$Result", "$$()", "\u2581{"], ["\u2581return", "\u2581r", "$$c", "$$;"], ["\u2581}"]]}, {"cs": "public virtual UpdateBasePathMappingResponse UpdateBasePathMapping(UpdateBasePathMappingRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = UpdateBasePathMappingRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = UpdateBasePathMappingResponseUnmarshaller.Instance;\n    return Invoke<UpdateBasePathMappingResponse>(request, options);\n}\n", "java": "public UpdateBasePathMappingResult updateBasePathMapping(UpdateBasePathMappingRequest request) {\n    request = beforeClientExecution(request);\n    return executeUpdateBasePathMapping(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Update", "$$Base", "$$Path", "$$Mapping", "$$Response", "\u2581Update", "$$Base", "$$Path", "$$Mapping", "$$(Update", "$$Base", "$$Path", "$$Mapping", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Update", "$$Base", "$$Path", "$$Mapping", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Update", "$$Base", "$$Path", "$$Mapping", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Update", "$$Base", "$$Path", "$$Mapping", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Update", "$$Base", "$$Path", "$$Mapping", "$$Result", "\u2581update", "$$Base", "$$Path", "$$Mapping", "$$(Update", "$$Base", "$$Path", "$$Mapping", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeUpdate", "$$Base", "$$Path", "$$Mapping", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual UpdateDocumentResponse UpdateDocument(UpdateDocumentRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = UpdateDocumentRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = UpdateDocumentResponseUnmarshaller.Instance;\n    return Invoke<UpdateDocumentResponse>(request, options);\n}\n", "java": "public UpdateDocumentResult updateDocument(UpdateDocumentRequest request) {\n    request = beforeClientExecution(request);\n    return executeUpdateDocument(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Update", "$$Document", "$$Response", "\u2581Update", "$$Document", "$$(Update", "$$Document", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Update", "$$Document", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Update", "$$Document", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Update", "$$Document", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Update", "$$Document", "$$Result", "\u2581update", "$$Document", "$$(Update", "$$Document", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeUpdate", "$$Document", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual void SetStreamFileThreshold(int newLimit) {\n    streamFileThreshold = newLimit;\n}\n", "java": "public void setStreamFileThreshold(int newLimit) {\n    streamFileThreshold = newLimit;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581void", "\u2581Set", "$$Stream", "$$File", "$$Th", "$$resh", "$$ol", "$$d(", "$$int", "\u2581new", "$$Limit", "$$)", "\u2581{"], ["\u2581stream", "$$File", "$$Th", "$$resh", "$$old", "\u2581=", "\u2581new", "$$Limit", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581set", "$$Stream", "$$File", "$$Th", "$$resh", "$$ol", "$$d(", "$$int", "\u2581new", "$$Limit", "$$)", "\u2581{"], ["\u2581stream", "$$File", "$$Th", "$$resh", "$$old", "\u2581=", "\u2581new", "$$Limit", "$$;"], ["\u2581}"]]}, {"cs": "public override String ToString() {\n    StringBuilder buffer = new StringBuilder();\n    buffer.Append(\"[EXTSST]\\n\");\n    buffer.Append(\"    .streampos      = \").Append(StringUtil.ToHexString(StreamPos)).Append(\"\\n\");\n    buffer.Append(\"    .bucketsstoffset= \").Append(StringUtil.ToHexString(BucketSSTOffset)).Append(\"\\n\");\n    buffer.Append(\"    .zero           = \").Append(StringUtil.ToHexString(field_3_zero)).Append(\"\\n\");\n    buffer.Append(\"[/EXTSST]\\n\");\n    return buffer.ToString();\n}\n", "java": "public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"[EXTSST]\\n\");\n    buffer.append(\"    .dsst           = \").append(Integer.toHexString(_stringsPerBucket)).append(\"\\n\");\n    buffer.append(\"    .numInfoRecords = \").append(_sstInfos.length).append(\"\\n\");\n    for (int k = 0; k < _sstInfos.length; k++) {\n        buffer.append(\"    .inforecord     = \").append(k).append(\"\\n\");\n        buffer.append(\"    .streampos      = \").append(Integer.toHexString(_sstInfos[k].getStreamPos())).append(\"\\n\");\n        buffer.append(\"    .sstoffset      = \").append(Integer.toHexString(_sstInfos[k].getBucketSSTOffset())).append(\"\\n\");\n    }\n    buffer.append(\"[/EXTSST]\\n\");\n    return buffer.toString();\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581String", "\u2581ToString()", "\u2581{"], ["\u2581StringBuilder", "\u2581buffer", "\u2581=", "\u2581new", "\u2581StringBuilder", "$$()", "$$;"], ["\u2581buffer.Append(\"[", "$$E", "$$X", "$$T", "$$SS", "$$T", "$$]", "$$\\n", "$$\")", "$$;"], ["\u2581buffer.Append(\"", "\u2581", "\u2581", "\u2581", "\u2581.", "$$stream", "$$pos", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581=", "\u2581\").Append(", "$$String", "$$Util", "$$.To", "$$HexString(", "$$Stream", "$$Pos", "$$))", "$$.Append(\"", "$$\\n", "$$\")", "$$;"], ["\u2581buffer.Append(\"", "\u2581", "\u2581", "\u2581", "\u2581.", "$$bu", "$$cket", "$$s", "$$st", "$$offset", "$$=", "\u2581\").Append(", "$$String", "$$Util", "$$.To", "$$HexString(", "$$Bu", "$$cket", "$$SS", "$$T", "$$Offset", "$$))", "$$.Append(\"", "$$\\n", "$$\")", "$$;"], ["\u2581buffer.Append(\"", "\u2581", "\u2581", "\u2581", "\u2581.", "$$zero", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581=", "\u2581\").Append(", "$$String", "$$Util", "$$.To", "$$HexString(", "$$field_3_", "$$zero", "$$))", "$$.Append(\"", "$$\\n", "$$\")", "$$;"], ["\u2581buffer.Append(\"[/", "$$E", "$$X", "$$T", "$$SS", "$$T", "$$]", "$$\\n", "$$\")", "$$;"], ["\u2581return", "\u2581buffer", "$$.ToString()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581String", "\u2581toString()", "\u2581{"], ["\u2581StringBuilder", "\u2581buffer", "\u2581=", "\u2581new", "\u2581StringBuilder", "$$()", "$$;"], ["\u2581buffer.append(\"[", "$$E", "$$X", "$$T", "$$SS", "$$T", "$$]", "$$\\n", "$$\")", "$$;"], ["\u2581buffer.append(\"", "\u2581", "\u2581", "\u2581", "\u2581.", "$$d", "$$s", "$$st", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581=", "\u2581\").append(", "$$Integ", "$$er.", "$$to", "$$HexString(", "$$_", "$$string", "$$s", "$$Per", "$$Bu", "$$cket", "$$))", "$$.append(\"", "$$\\n", "$$\")", "$$;"], ["\u2581buffer.append(\"", "\u2581", "\u2581", "\u2581", "\u2581.", "$$num", "$$Info", "$$Records", "\u2581=", "\u2581\").append(", "$$_", "$$s", "$$st", "$$Info", "$$s.length", "$$)", "$$.append(\"", "$$\\n", "$$\")", "$$;"], ["\u2581for", "\u2581(int", "\u2581k", "\u2581=", "\u25810;", "\u2581k", "\u2581<", "\u2581_", "$$s", "$$st", "$$Info", "$$s.length;", "\u2581k", "$$++)", "\u2581{"], ["\u2581buffer.append(\"", "\u2581", "\u2581", "\u2581", "\u2581.", "$$in", "$$fore", "$$cord", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581=", "\u2581\").append(", "$$k", "$$)", "$$.append(\"", "$$\\n", "$$\")", "$$;"], ["\u2581buffer.append(\"", "\u2581", "\u2581", "\u2581", "\u2581.", "$$stream", "$$pos", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581=", "\u2581\").append(", "$$Integ", "$$er.", "$$to", "$$HexString(", "$$_", "$$s", "$$st", "$$Info", "$$s[", "$$k", "$$]", "$$.get", "$$Stream", "$$Po", "$$s()", "$$))", "$$.append(\"", "$$\\n", "$$\")", "$$;"], ["\u2581buffer.append(\"", "\u2581", "\u2581", "\u2581", "\u2581.", "$$s", "$$st", "$$offset", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581", "\u2581=", "\u2581\").append(", "$$Integ", "$$er.", "$$to", "$$HexString(", "$$_", "$$s", "$$st", "$$Info", "$$s[", "$$k", "$$]", "$$.get", "$$Bu", "$$cket", "$$SS", "$$T", "$$Offset", "$$()))", "$$.append(\"", "$$\\n", "$$\")", "$$;"], ["\u2581}"], ["\u2581buffer.append(\"[/", "$$E", "$$X", "$$T", "$$SS", "$$T", "$$]", "$$\\n", "$$\")", "$$;"], ["\u2581return", "\u2581buffer", "$$.toString()", "$$;"], ["\u2581}"]]}, {"cs": "public virtual void SetCRC(int crc) {\n    this.crc = crc;\n}\n", "java": "public void setCRC(int crc) {\n    this.crc = crc;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581void", "\u2581Set", "$$C", "$$R", "$$C", "$$(int", "\u2581c", "$$rc", "$$)", "\u2581{"], ["\u2581this.", "$$c", "$$rc", "\u2581=", "\u2581c", "$$rc", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581set", "$$C", "$$R", "$$C", "$$(int", "\u2581c", "$$rc", "$$)", "\u2581{"], ["\u2581this.", "$$c", "$$rc", "\u2581=", "\u2581c", "$$rc", "$$;"], ["\u2581}"]]}, {"cs": "public virtual RevFilter GetRevFilter() {\n    return filter;\n}\n", "java": "public RevFilter getRevFilter() {\n    return filter;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581RevFilter", "\u2581Get", "$$RevFilter", "$$()", "\u2581{"], ["\u2581return", "\u2581filter", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581RevFilter", "\u2581get", "$$RevFilter", "$$()", "\u2581{"], ["\u2581return", "\u2581filter", "$$;"], ["\u2581}"]]}, {"cs": "public SrndPrefixQuery(string prefix, bool quoted, char truncator): base(quoted) {\n    this.prefix = prefix;\n    prefixRef = new BytesRef(prefix);\n    this.truncator = truncator;\n}\n", "java": "public SrndPrefixQuery(String prefix, boolean quoted, char truncator) {\n    super(quoted);\n    this.prefix = prefix;\n    prefixRef = new BytesRef(prefix);\n    this.truncator = truncator;\n}\n", "cs_t": [["\u2581public", "\u2581S", "$$rn", "$$d", "$$Prefix", "$$Query", "$$(string", "\u2581prefix", "$$,", "\u2581bool", "\u2581qu", "$$o", "$$ted", "$$,", "\u2581char", "\u2581t", "$$r", "$$unc", "$$ator", "$$):", "\u2581base", "$$(", "$$qu", "$$o", "$$ted", "$$)", "\u2581{"], ["\u2581this.", "$$pre", "$$fix", "\u2581=", "\u2581prefix", "$$;"], ["\u2581prefix", "$$Ref", "\u2581=", "\u2581new", "\u2581BytesRef", "$$(p", "$$re", "$$fix", "$$)", "$$;"], ["\u2581this.", "$$tr", "$$unc", "$$ator", "\u2581=", "\u2581t", "$$r", "$$unc", "$$ator", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581S", "$$rn", "$$d", "$$Prefix", "$$Query", "$$(String", "\u2581prefix", "$$,", "\u2581boolean", "\u2581qu", "$$o", "$$ted", "$$,", "\u2581char", "\u2581t", "$$r", "$$unc", "$$ator", "$$)", "\u2581{"], ["\u2581super(", "$$qu", "$$o", "$$ted", "$$)", "$$;"], ["\u2581this.", "$$pre", "$$fix", "\u2581=", "\u2581prefix", "$$;"], ["\u2581prefix", "$$Ref", "\u2581=", "\u2581new", "\u2581BytesRef", "$$(p", "$$re", "$$fix", "$$)", "$$;"], ["\u2581this.", "$$tr", "$$unc", "$$ator", "\u2581=", "\u2581t", "$$r", "$$unc", "$$ator", "$$;"], ["\u2581}"]]}, {"cs": "public override byte ReadByte() {\n    int v = _reader.ReadByte();\n    if (v == -1) {\n        throw new EndOfStreamException();\n    }\n    return (byte)v;\n}\n", "java": "public byte readByte() throws IOException {\n    int v = is.read();\n    if (v == -1) throw new EOFException();\n    return (byte) v;\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581byte", "\u2581Read", "$$Byte", "$$()", "\u2581{"], ["\u2581int", "\u2581v", "\u2581=", "\u2581_", "$$read", "$$er.", "$$Read", "$$Byte", "$$()", "$$;"], ["\u2581if", "\u2581(v", "\u2581==", "\u2581-1)", "\u2581{"], ["\u2581throw", "\u2581new", "\u2581", "$$End", "$$Of", "$$Stream", "$$Exception", "$$()", "$$;"], ["\u2581}"], ["\u2581return", "\u2581(byte)", "$$v", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581byte", "\u2581read", "$$Byte", "$$()", "\u2581throws", "\u2581IOException", "\u2581{"], ["\u2581int", "\u2581v", "\u2581=", "\u2581i", "$$s.", "$$read", "$$()", "$$;"], ["\u2581if", "\u2581(v", "\u2581==", "\u2581-1)", "\u2581throw", "\u2581new", "\u2581E", "$$OF", "$$Exception", "$$()", "$$;"], ["\u2581return", "\u2581(byte)", "\u2581v", "$$;"], ["\u2581}"]]}, {"cs": "public virtual GetWorkGroupResponse GetWorkGroup(GetWorkGroupRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = GetWorkGroupRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = GetWorkGroupResponseUnmarshaller.Instance;\n    return Invoke<GetWorkGroupResponse>(request, options);\n}\n", "java": "public GetWorkGroupResult getWorkGroup(GetWorkGroupRequest request) {\n    request = beforeClientExecution(request);\n    return executeGetWorkGroup(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Get", "$$Work", "$$Group", "$$Response", "\u2581Get", "$$Work", "$$Group", "$$(Get", "$$Work", "$$GroupRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Get", "$$Work", "$$Group", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Get", "$$Work", "$$Group", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Get", "$$Work", "$$Group", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Get", "$$Work", "$$Group", "$$Result", "\u2581get", "$$Work", "$$Group", "$$(Get", "$$Work", "$$GroupRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeGet", "$$Work", "$$Group", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual PutBlockPublicAccessConfigurationResponse PutBlockPublicAccessConfiguration(PutBlockPublicAccessConfigurationRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = PutBlockPublicAccessConfigurationRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = PutBlockPublicAccessConfigurationResponseUnmarshaller.Instance;\n    return Invoke<PutBlockPublicAccessConfigurationResponse>(request, options);\n}\n", "java": "public PutBlockPublicAccessConfigurationResult putBlockPublicAccessConfiguration(PutBlockPublicAccessConfigurationRequest request) {\n    request = beforeClientExecution(request);\n    return executePutBlockPublicAccessConfiguration(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Put", "$$Block", "$$Public", "$$Access", "$$Configuration", "$$Response", "\u2581Put", "$$Block", "$$Public", "$$Access", "$$Configuration", "$$(Put", "$$Block", "$$Public", "$$Access", "$$ConfigurationRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Put", "$$Block", "$$Public", "$$Access", "$$Configuration", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Put", "$$Block", "$$Public", "$$Access", "$$Configuration", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Put", "$$Block", "$$Public", "$$Access", "$$Configuration", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Put", "$$Block", "$$Public", "$$Access", "$$Configuration", "$$Result", "\u2581put", "$$Block", "$$Public", "$$Access", "$$Configuration", "$$(Put", "$$Block", "$$Public", "$$Access", "$$ConfigurationRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executePut", "$$Block", "$$Public", "$$Access", "$$Configuration", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override string ToString() {\n    StringBuilder r = new StringBuilder();\n    r.Append('[');\n    for (int i = 0; i < count; i++) {\n        if (i > 0) {\n            r.Append(\", \");\n        }\n        r.Append(entries[i]);\n    }\n    r.Append(']');\n    return r.ToString();\n}\n", "java": "public String toString() {\n    final StringBuilder r = new StringBuilder();\n    r.append('[');\n    for (int i = 0; i < count; i++) {\n        if (i > 0)r.append(\", \");\n        r.append(entries[i]);\n    }\n    r.append(']');\n    return r.toString();\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581string", "\u2581ToString()", "\u2581{"], ["\u2581StringBuilder", "\u2581r", "\u2581=", "\u2581new", "\u2581StringBuilder", "$$()", "$$;"], ["\u2581r", "$$.Append('", "$$[", "$$')", "$$;"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810;", "\u2581i", "\u2581<", "\u2581count", "$$;", "\u2581i++)", "\u2581{"], ["\u2581if", "\u2581(i", "\u2581>", "\u25810)", "\u2581{"], ["\u2581r", "$$.Append(\"", "$$,", "\u2581\")", "$$;"], ["\u2581}"], ["\u2581r", "$$.Append(", "$$entries", "$$[i]", "$$)", "$$;"], ["\u2581}"], ["\u2581r", "$$.Append('", "$$]", "$$')", "$$;"], ["\u2581return", "\u2581r", "$$.ToString()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581String", "\u2581toString()", "\u2581{"], ["\u2581final", "\u2581StringBuilder", "\u2581r", "\u2581=", "\u2581new", "\u2581StringBuilder", "$$()", "$$;"], ["\u2581r", "$$.append('", "$$[", "$$')", "$$;"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810;", "\u2581i", "\u2581<", "\u2581count", "$$;", "\u2581i++)", "\u2581{"], ["\u2581if", "\u2581(i", "\u2581>", "\u25810)", "$$r", "$$.append(\"", "$$,", "\u2581\")", "$$;"], ["\u2581r", "$$.append(", "$$entries", "$$[i]", "$$)", "$$;"], ["\u2581}"], ["\u2581r", "$$.append('", "$$]", "$$')", "$$;"], ["\u2581return", "\u2581r", "$$.toString()", "$$;"], ["\u2581}"]]}, {"cs": "public override int get(int index) {\n    checkIndex(index);\n    return byteBuffer.getInt(index * libcore.io.SizeOf.INT);\n}\n", "java": "public int get(int index) {\n    checkIndex(index);\n    return byteBuffer.getInt(index * SizeOf.INT);\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581int", "\u2581get(int", "\u2581index)", "\u2581{"], ["\u2581check", "$$Index(index", "$$)", "$$;"], ["\u2581return", "\u2581byteBuffer", "$$.get", "$$Int", "$$(index", "\u2581*", "\u2581libcore.io.SizeOf", "$$.IN", "$$T", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581int", "\u2581get(int", "\u2581index)", "\u2581{"], ["\u2581check", "$$Index(index", "$$)", "$$;"], ["\u2581return", "\u2581byteBuffer", "$$.get", "$$Int", "$$(index", "\u2581*", "\u2581SizeOf", "$$.IN", "$$T", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public CreateAlbumRequest(): base(\"CloudPhoto\", \"2017-07-11\", \"CreateAlbum\", \"cloudphoto\", \"openAPI\") {\n    Protocol = ProtocolType.HTTPS;\n}\n", "java": "public CreateAlbumRequest() {\n    super(\"CloudPhoto\", \"2017-07-11\", \"CreateAlbum\", \"cloudphoto\");\n    setProtocol(ProtocolType.HTTPS);\n}\n", "cs_t": [["\u2581public", "\u2581Create", "$$Al", "$$b", "$$um", "$$Request():", "\u2581base(\"", "$$CloudPhoto\",", "\u2581\"2017-07-11\",", "\u2581\"", "$$Create", "$$Al", "$$b", "$$um", "$$\",", "\u2581\"cloudphoto", "$$\",", "\u2581\"openAPI\")", "\u2581{"], ["\u2581Protocol", "\u2581=", "\u2581ProtocolType.HTTPS", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Create", "$$Al", "$$b", "$$um", "$$Request()", "\u2581{"], ["\u2581super(\"", "$$CloudPhoto\",", "\u2581\"2017-07-11\",", "\u2581\"", "$$Create", "$$Al", "$$b", "$$um", "$$\",", "\u2581\"cloudphoto", "$$\")", "$$;"], ["\u2581setProtocol(ProtocolType.HTTPS", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public FileTreeIterator(FilePath root, FS fs, WorkingTreeOptions options) : base(options) {\n    directory = root;\n    this.fs = fs;\n    Init(Entries());\n}\n", "java": "public FileTreeIterator(File root, FS fs, WorkingTreeOptions options) {\n    this(root, fs, options, DefaultFileModeStrategy.INSTANCE);\n}\n", "cs_t": [["\u2581public", "\u2581File", "$$Tree", "$$Iterator", "$$(", "$$File", "$$Path", "\u2581", "$$root", "$$,", "\u2581F", "$$S", "\u2581f", "$$s,", "\u2581", "$$Work", "$$ing", "$$Tree", "$$Options", "\u2581options", "$$)", "\u2581:", "\u2581base", "$$(o", "$$ptions", "$$)", "\u2581{"], ["\u2581directory", "\u2581=", "\u2581", "$$root", "$$;"], ["\u2581this.f", "$$s", "\u2581=", "\u2581f", "$$s;"], ["\u2581In", "$$it", "$$(", "$$Ent", "$$ries", "$$())", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581File", "$$Tree", "$$Iterator", "$$(", "$$File", "\u2581", "$$root", "$$,", "\u2581F", "$$S", "\u2581f", "$$s,", "\u2581", "$$Work", "$$ing", "$$Tree", "$$Options", "\u2581options", "$$)", "\u2581{"], ["\u2581this", "$$(", "$$root", "$$,", "\u2581f", "$$s,", "\u2581options", "$$,", "\u2581De", "$$fault", "$$File", "$$Mode", "$$Strategy", "$$.IN", "$$ST", "$$AN", "$$CE", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual int ByteAt(int idx) {\n    return bytes[idx].Value;\n}\n", "java": "public int byteAt(int idx) {\n    return bytes[idx].value;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581int", "\u2581Byte", "$$At", "$$(int", "\u2581idx", "$$)", "\u2581{"], ["\u2581return", "\u2581bytes", "$$[", "$$idx", "$$]", "$$.", "$$Value", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581int", "\u2581byte", "$$At", "$$(int", "\u2581idx", "$$)", "\u2581{"], ["\u2581return", "\u2581bytes", "$$[", "$$idx", "$$]", "$$.value", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DescribeTypeRegistrationResponse DescribeTypeRegistration(DescribeTypeRegistrationRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DescribeTypeRegistrationRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DescribeTypeRegistrationResponseUnmarshaller.Instance;\n    return Invoke<DescribeTypeRegistrationResponse>(request, options);\n}\n", "java": "public DescribeTypeRegistrationResult describeTypeRegistration(DescribeTypeRegistrationRequest request) {\n    request = beforeClientExecution(request);\n    return executeDescribeTypeRegistration(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Describe", "$$Type", "$$Re", "$$gist", "$$ration", "$$Response", "\u2581Describe", "$$Type", "$$Re", "$$gist", "$$ration", "$$(Describe", "$$Type", "$$Re", "$$gist", "$$ration", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Describe", "$$Type", "$$Re", "$$gist", "$$ration", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Describe", "$$Type", "$$Re", "$$gist", "$$ration", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Describe", "$$Type", "$$Re", "$$gist", "$$ration", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Describe", "$$Type", "$$Re", "$$gist", "$$ration", "$$Result", "\u2581describe", "$$Type", "$$Re", "$$gist", "$$ration", "$$(Describe", "$$Type", "$$Re", "$$gist", "$$ration", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDescribe", "$$Type", "$$Re", "$$gist", "$$ration", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual TerminateInstancesResponse TerminateInstances(TerminateInstancesRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = TerminateInstancesRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = TerminateInstancesResponseUnmarshaller.Instance;\n    return Invoke<TerminateInstancesResponse>(request, options);\n}\n", "java": "public TerminateInstancesResult terminateInstances(TerminateInstancesRequest request) {\n    request = beforeClientExecution(request);\n    return executeTerminateInstances(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Term", "$$inate", "$$Instances", "$$Response", "\u2581Term", "$$inate", "$$Instances", "$$(", "$$Term", "$$inate", "$$InstancesRequest", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Term", "$$inate", "$$Instances", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Term", "$$inate", "$$Instances", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<", "$$Term", "$$inate", "$$Instances", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Term", "$$inate", "$$Instances", "$$Result", "\u2581term", "$$inate", "$$Instances", "$$(", "$$Term", "$$inate", "$$InstancesRequest", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581execute", "$$Term", "$$inate", "$$Instances", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override java.nio.DoubleBuffer duplicate() {\n    java.nio.ByteBuffer bb = byteBuffer.duplicate().order(byteBuffer.order());\n    java.nio.DoubleToByteBufferAdapter buf = new java.nio.DoubleToByteBufferAdapter(bb);\n    buf._limit = _limit;\n    buf._position = _position;\n    buf._mark = _mark;\n    return buf;\n}\n", "java": "public DoubleBuffer duplicate() {\n    ByteBuffer bb = byteBuffer.duplicate().order(byteBuffer.order());\n    DoubleToByteBufferAdapter buf = new DoubleToByteBufferAdapter(bb);\n    buf.limit = limit;\n    buf.position = position;\n    buf.mark = mark;\n    return buf;\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581java.nio.", "$$Double", "$$Buffer", "\u2581d", "$$uplicate", "$$()", "\u2581{"], ["\u2581java.nio.ByteBuffer", "\u2581b", "$$b", "\u2581=", "\u2581byteBuffer.", "$$d", "$$uplicate", "$$().", "$$order", "$$(byte", "$$Buffer.", "$$order", "$$())", "$$;"], ["\u2581java.nio.", "$$Double", "$$To", "$$ByteBuffer", "$$Adapter", "\u2581buf", "\u2581=", "\u2581new", "\u2581java.nio.", "$$Double", "$$To", "$$ByteBuffer", "$$Adapter", "$$(b", "$$b", "$$)", "$$;"], ["\u2581buf", "$$._", "$$limit", "\u2581=", "\u2581_limit", "$$;"], ["\u2581buf", "$$._", "$$position", "\u2581=", "\u2581_position", "$$;"], ["\u2581buf", "$$._", "$$mark", "\u2581=", "\u2581_", "$$mark", "$$;"], ["\u2581return", "\u2581buf", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Double", "$$Buffer", "\u2581d", "$$uplicate", "$$()", "\u2581{"], ["\u2581ByteBuffer", "\u2581b", "$$b", "\u2581=", "\u2581byteBuffer.", "$$d", "$$uplicate", "$$().", "$$order", "$$(byte", "$$Buffer.", "$$order", "$$())", "$$;"], ["\u2581Double", "$$To", "$$ByteBuffer", "$$Adapter", "\u2581buf", "\u2581=", "\u2581new", "\u2581Double", "$$To", "$$ByteBuffer", "$$Adapter", "$$(b", "$$b", "$$)", "$$;"], ["\u2581buf", "$$.", "$$limit", "\u2581=", "\u2581limit", "$$;"], ["\u2581buf", "$$.", "$$position", "\u2581=", "\u2581position", "$$;"], ["\u2581buf", "$$.", "$$mark", "\u2581=", "\u2581mark", "$$;"], ["\u2581return", "\u2581buf", "$$;"], ["\u2581}"]]}, {"cs": "public OR(SemanticContext a, SemanticContext b) {\n    HashSet<SemanticContext> operands = new HashSet<SemanticContext>();\n    if (a is SemanticContext.OR) {\n        operands.UnionWith(((OR)a).opnds);\n    }\n    else {\n        operands.Add(a);\n    }\n    if (b is SemanticContext.OR) {\n        operands.UnionWith(((OR)b).opnds);\n    }\n    else {\n        operands.Add(b);\n    }\n    IList<SemanticContext.PrecedencePredicate> precedencePredicates = FilterPrecedencePredicates(operands);\n    if (precedencePredicates.Count > 0) {\n        SemanticContext.PrecedencePredicate reduced = precedencePredicates.Max();\n        operands.Add(reduced);\n    }\n    this.opnds = operands.ToArray();\n}\n", "java": "public OR(SemanticContext a, SemanticContext b) {\n    Set<SemanticContext> operands = new HashSet<SemanticContext>();\n    if ( a instanceof OR ) operands.addAll(Arrays.asList(((OR)a).opnds));\n    else operands.add(a);\n    if ( b instanceof OR ) operands.addAll(Arrays.asList(((OR)b).opnds));\n    else operands.add(b);\n    List<PrecedencePredicate> precedencePredicates = filterPrecedencePredicates(operands);\n    if (!precedencePredicates.isEmpty()) {\n        PrecedencePredicate reduced = Collections.max(precedencePredicates);\n        operands.add(reduced);\n    }\n    this.opnds = operands.toArray(new SemanticContext[operands.size()]);\n}\n", "cs_t": [["\u2581public", "\u2581", "$$OR", "$$(", "$$Se", "$$manticContext", "\u2581a", "$$,", "\u2581S", "$$em", "$$anticContext", "\u2581b)", "\u2581{"], ["\u2581Hash", "$$Set<", "$$Se", "$$manticContext", "$$>", "\u2581operand", "$$s", "\u2581=", "\u2581new", "\u2581Hash", "$$Set<", "$$Se", "$$manticContext", "$$>", "$$()", "$$;"], ["\u2581if", "\u2581(a", "\u2581is", "\u2581S", "$$em", "$$anticContext", "$$.", "$$OR", "$$)", "\u2581{"], ["\u2581operand", "$$s.", "$$Un", "$$ion", "$$With", "$$((", "$$(", "$$OR", "$$)", "$$a", "$$).", "$$op", "$$n", "$$d", "$$s)", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581operand", "$$s.Add(", "$$a", "$$)", "$$;"], ["\u2581}"], ["\u2581if", "\u2581(b", "\u2581is", "\u2581S", "$$em", "$$anticContext", "$$.", "$$OR", "$$)", "\u2581{"], ["\u2581operand", "$$s.", "$$Un", "$$ion", "$$With", "$$((", "$$(", "$$OR", "$$)", "$$b", "$$).", "$$op", "$$n", "$$d", "$$s)", "$$;"], ["\u2581}"], ["\u2581else", "\u2581{"], ["\u2581operand", "$$s.Add(", "$$b", "$$)", "$$;"], ["\u2581}"], ["\u2581IList<", "$$Se", "$$manticContext", "$$.", "$$Pre", "$$cedence", "$$Predicate", "$$>", "\u2581precedence", "$$Pred", "$$ic", "$$ates", "\u2581=", "\u2581", "$$Filter", "$$Pre", "$$cedence", "$$Pred", "$$ic", "$$ates", "$$(o", "$$perand", "$$s)", "$$;"], ["\u2581if", "\u2581(", "$$pre", "$$cedence", "$$Pred", "$$ic", "$$ates", "$$.Count", "\u2581>", "\u25810)", "\u2581{"], ["\u2581S", "$$em", "$$anticContext", "$$.", "$$Pre", "$$cedence", "$$Predicate", "\u2581re", "$$du", "$$ced", "\u2581=", "\u2581precedence", "$$Pred", "$$ic", "$$ates", "$$.", "$$Max", "$$()", "$$;"], ["\u2581operand", "$$s", "$$.Add", "$$(re", "$$du", "$$ced", "$$)", "$$;"], ["\u2581}"], ["\u2581this.", "$$op", "$$n", "$$d", "$$s", "\u2581=", "\u2581operand", "$$s.", "$$To", "$$Array", "$$()", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581", "$$OR", "$$(", "$$Se", "$$manticContext", "\u2581a", "$$,", "\u2581S", "$$em", "$$anticContext", "\u2581b)", "\u2581{"], ["\u2581Set", "$$<", "$$Se", "$$manticContext", "$$>", "\u2581operand", "$$s", "\u2581=", "\u2581new", "\u2581Hash", "$$Set<", "$$Se", "$$manticContext", "$$>", "$$()", "$$;"], ["\u2581if", "\u2581(", "\u2581a", "\u2581instanceof", "\u2581", "$$OR", "\u2581)", "\u2581operand", "$$s.", "$$add", "$$All", "$$(", "$$Array", "$$s.", "$$as", "$$List", "$$((", "$$(", "$$OR", "$$)", "$$a", "$$).", "$$op", "$$n", "$$d", "$$s", "$$))", "$$;"], ["\u2581else", "\u2581operand", "$$s.add(", "$$a", "$$)", "$$;"], ["\u2581if", "\u2581(", "\u2581b", "\u2581instanceof", "\u2581", "$$OR", "\u2581)", "\u2581operand", "$$s.", "$$add", "$$All", "$$(", "$$Array", "$$s.", "$$as", "$$List", "$$((", "$$(", "$$OR", "$$)", "$$b", "$$).", "$$op", "$$n", "$$d", "$$s", "$$))", "$$;"], ["\u2581else", "\u2581operand", "$$s.add(", "$$b", "$$)", "$$;"], ["\u2581List<", "$$Pre", "$$cedence", "$$Predicate", "$$>", "\u2581precedence", "$$Pred", "$$ic", "$$ates", "\u2581=", "\u2581filter", "$$Pre", "$$cedence", "$$Pred", "$$ic", "$$ates", "$$(o", "$$perand", "$$s)", "$$;"], ["\u2581if", "\u2581(!", "$$pre", "$$cedence", "$$Pred", "$$ic", "$$ates", "$$.", "$$isEmpty())", "\u2581{"], ["\u2581P", "$$re", "$$cedence", "$$Predicate", "\u2581re", "$$du", "$$ced", "\u2581=", "\u2581", "$$Collections.", "$$max", "$$(p", "$$re", "$$cedence", "$$Pred", "$$ic", "$$ates", "$$)", "$$;"], ["\u2581operand", "$$s.", "$$add", "$$(re", "$$du", "$$ced", "$$)", "$$;"], ["\u2581}"], ["\u2581this.", "$$op", "$$n", "$$d", "$$s", "\u2581=", "\u2581operand", "$$s.", "$$to", "$$Array", "$$(new", "\u2581S", "$$em", "$$anticContext", "$$[", "$$operand", "$$s.size()", "$$]", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public override void Serialize(ILittleEndianOutput out1) {\n    out1.WriteShort(m_formats.Count);\n    for (int i = 0; i < m_formats.Count; i++) {\n        ((CTFormat)m_formats[i]).Serialize(out1);\n    }\n}\n", "java": "public void serialize(LittleEndianOutput out) {\n    out.writeShort(_formats.length);\n    for(int i=0; i<_formats.length; i++) {\n        _formats[i].serialize(out);\n    }\n}\n", "cs_t": [["\u2581public", "\u2581override", "\u2581void", "\u2581Serialize(ILittleEndianOutput", "\u2581out1)", "\u2581{"], ["\u2581out1.WriteShort(", "$$m_", "$$format", "$$s.", "$$Count)", "$$;"], ["\u2581for", "\u2581(int", "\u2581i", "\u2581=", "\u25810;", "\u2581i", "\u2581<", "\u2581m_", "$$format", "$$s.Count", "$$;", "\u2581i++)", "\u2581{"], ["\u2581((", "$$CT", "$$Format", "$$)", "$$m_", "$$format", "$$s[i]", "$$).", "$$S", "$$erialize", "$$(out", "$$1)", "$$;"], ["\u2581}"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581void", "\u2581serialize(LittleEndianOutput", "\u2581out)", "\u2581{"], ["\u2581out.writeShort(", "$$_", "$$format", "$$s.length", "$$)", "$$;"], ["\u2581for", "$$(int", "\u2581i", "$$=0", "$$;", "\u2581i", "$$<", "$$_", "$$format", "$$s.length;", "\u2581i++)", "\u2581{"], ["\u2581_", "$$format", "$$s[i].", "$$ser", "$$ial", "$$ize", "$$(out", "$$)", "$$;"], ["\u2581}"], ["\u2581}"]]}, {"cs": "public virtual DescribeAvailabilityOptionsResponse DescribeAvailabilityOptions(DescribeAvailabilityOptionsRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DescribeAvailabilityOptionsRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DescribeAvailabilityOptionsResponseUnmarshaller.Instance;\n    return Invoke<DescribeAvailabilityOptionsResponse>(request, options);\n}\n", "java": "public DescribeAvailabilityOptionsResult describeAvailabilityOptions(DescribeAvailabilityOptionsRequest request) {\n    request = beforeClientExecution(request);\n    return executeDescribeAvailabilityOptions(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Describe", "$$Availability", "$$Options", "$$Response", "\u2581Describe", "$$Availability", "$$Options", "$$(Describe", "$$Availability", "$$Options", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Describe", "$$Availability", "$$Options", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Describe", "$$Availability", "$$Options", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Describe", "$$Availability", "$$Options", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Describe", "$$Availability", "$$Options", "$$Result", "\u2581describe", "$$Availability", "$$Options", "$$(Describe", "$$Availability", "$$Options", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDescribe", "$$Availability", "$$Options", "$$(request", "$$)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual int GetOffset() {\n    return offset;\n}\n", "java": "public int getOffset() {\n    return offset;\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581int", "\u2581Get", "$$Offset", "$$()", "\u2581{"], ["\u2581return", "\u2581offset", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581int", "\u2581get", "$$Offset", "$$()", "\u2581{"], ["\u2581return", "\u2581offset", "$$;"], ["\u2581}"]]}, {"cs": "public static float[] Grow(float[] array) {\n    return Grow(array, 1 + array.Length);\n}\n", "java": "public static float[] grow(float[] array) {\n    return grow(array, 1 + array.length);\n}\n", "cs_t": [["\u2581public", "\u2581static", "\u2581float", "$$[]", "\u2581Grow", "$$(float", "$$[]", "\u2581array", "$$)", "\u2581{"], ["\u2581return", "\u2581Grow", "$$(array,", "\u25811", "\u2581+", "\u2581array", "$$.Length)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581static", "\u2581float", "$$[]", "\u2581grow", "$$(float", "$$[]", "\u2581array", "$$)", "\u2581{"], ["\u2581return", "\u2581grow", "$$(array,", "\u25811", "\u2581+", "\u2581array", "$$.length)", "$$;"], ["\u2581}"]]}, {"cs": "public virtual ListMetricsResponse ListMetrics() {\n    return ListMetrics(new ListMetricsRequest());\n}\n", "java": "public ListMetricsResult listMetrics() {\n    return listMetrics(new ListMetricsRequest());\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581List", "$$Metric", "$$sResponse", "\u2581List", "$$Metric", "$$s()", "\u2581{"], ["\u2581return", "\u2581List", "$$Metric", "$$s(new", "\u2581List", "$$Metric", "$$sRequest", "$$())", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581List", "$$Metric", "$$sResult", "\u2581list", "$$Metric", "$$s()", "\u2581{"], ["\u2581return", "\u2581list", "$$Metric", "$$s(new", "\u2581List", "$$Metric", "$$sRequest", "$$())", "$$;"], ["\u2581}"]]}, {"cs": "public int FindFirstRecordLocBySid(short sid) {\n    int index = 0;\n    for (IEnumerator iterator = records.GetEnumerator(); iterator.MoveNext(); ) {\n        Record record = (Record)iterator.Current;\n        if (record.Sid == sid) {\n            return index;\n        }\n        index++;\n    }\n    return -1;\n}\n", "java": "public int findFirstRecordLocBySid(short sid) {\n    int index = 0;\n    for (org.apache.poi.hssf.record.Record record : records.getRecords() ) {\n        if (record.getSid() == sid) {\n            return index;\n        }\n        index ++;\n    }\n    return -1;\n}\n", "cs_t": [["\u2581public", "\u2581int", "\u2581F", "$$ind", "$$First", "$$Record", "$$Loc", "$$By", "$$S", "$$i", "$$d(", "$$short", "\u2581s", "$$id", "$$)", "\u2581{"], ["\u2581int", "\u2581index", "\u2581=", "\u25810;"], ["\u2581for", "\u2581(I", "$$Enumerator", "\u2581iterator", "\u2581=", "\u2581record", "$$s.Get", "$$Enumerator", "$$()", "$$;", "\u2581iterator", "$$.", "$$Mo", "$$ve", "$$Next()", "$$;", "\u2581)", "\u2581{"], ["\u2581Record", "\u2581record", "\u2581=", "\u2581(", "$$Record)", "$$iterator", "$$.C", "$$urrent", "$$;"], ["\u2581if", "\u2581(re", "$$cord", "$$.S", "$$id", "\u2581==", "\u2581s", "$$id", "$$)", "\u2581{"], ["\u2581return", "\u2581index", "$$;"], ["\u2581}"], ["\u2581index", "$$++", "$$;"], ["\u2581}"], ["\u2581return", "\u2581-1", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581int", "\u2581find", "$$First", "$$Record", "$$Loc", "$$By", "$$S", "$$i", "$$d(", "$$short", "\u2581s", "$$id", "$$)", "\u2581{"], ["\u2581int", "\u2581index", "\u2581=", "\u25810;"], ["\u2581for", "\u2581(", "$$or", "$$g", "$$.ap", "$$ache", "$$.", "$$po", "$$i.", "$$h", "$$ss", "$$f", "$$.re", "$$cord", "$$.", "$$Record", "\u2581record", "\u2581:", "\u2581record", "$$s.get", "$$Record", "$$s()", "\u2581)", "\u2581{"], ["\u2581if", "\u2581(re", "$$cord", "$$.get", "$$S", "$$id", "$$()", "\u2581==", "\u2581s", "$$id", "$$)", "\u2581{"], ["\u2581return", "\u2581index", "$$;"], ["\u2581}"], ["\u2581index", "\u2581++", "$$;"], ["\u2581}"], ["\u2581return", "\u2581-1", "$$;"], ["\u2581}"]]}, {"cs": "public virtual DeleteVpnConnectionRouteResponse DeleteVpnConnectionRoute(DeleteVpnConnectionRouteRequest request) {\n    var options = new InvokeOptions();\n    options.RequestMarshaller = DeleteVpnConnectionRouteRequestMarshaller.Instance;\n    options.ResponseUnmarshaller = DeleteVpnConnectionRouteResponseUnmarshaller.Instance;\n    return Invoke<DeleteVpnConnectionRouteResponse>(request, options);\n}\n", "java": "public DeleteVpnConnectionRouteResult deleteVpnConnectionRoute(DeleteVpnConnectionRouteRequest request) {\n    request = beforeClientExecution(request);\n    return executeDeleteVpnConnectionRoute(request);\n}\n", "cs_t": [["\u2581public", "\u2581virtual", "\u2581Delete", "$$Vpn", "$$Connection", "$$Route", "$$Response", "\u2581Delete", "$$Vpn", "$$Connection", "$$Route", "$$(Delete", "$$Vpn", "$$Connection", "$$Route", "$$Request", "\u2581request)", "\u2581{"], ["\u2581var", "\u2581options", "\u2581=", "\u2581new", "\u2581Invoke", "$$Options", "$$()", "$$;"], ["\u2581options.RequestMarshaller", "\u2581=", "\u2581Delete", "$$Vpn", "$$Connection", "$$Route", "$$RequestMarshaller", "$$.", "$$Instance", "$$;"], ["\u2581options.ResponseUnmarshaller", "\u2581=", "\u2581Delete", "$$Vpn", "$$Connection", "$$Route", "$$ResponseUnmarshaller", "$$.", "$$Instance", "$$;"], ["\u2581return", "\u2581Invoke<Delete", "$$Vpn", "$$Connection", "$$Route", "$$Response>(request,", "\u2581options", "$$)", "$$;"], ["\u2581}"]], "java_t": [["\u2581public", "\u2581Delete", "$$Vpn", "$$Connection", "$$Route", "$$Result", "\u2581delete", "$$Vpn", "$$Connection", "$$Route", "$$(Delete", "$$Vpn", "$$Connection", "$$Route", "$$Request", "\u2581request)", "\u2581{"], ["\u2581request", "\u2581=", "\u2581beforeClientEx", "$$ecution", "$$(request", "$$)", "$$;"], ["\u2581return", "\u2581executeDelete", "$$Vpn", "$$Connection", "$$Route", "$$(request", "$$)", "$$;"], ["\u2581}"]]}]