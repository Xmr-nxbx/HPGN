public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_vcenter); }
public virtual AddAll(BlockList<T> src) { if (src.size == 0)return int srcDirIdx = 0; for (; srcDirIdx < src.tailDirIdx; srcDirIdxaddAllAll(src.directory[srcDirIdx], 0, BLOCK_SIZELOCK_SIZE); if (src.tailBlkIdx != 0)addAll(src.tail, 0, src.tailBlkIdx); } }
public void void WriteByte(byte b) { if (upto == blockSize) { if (currentBlock != null) { AddBlock(currentBlock); } currentBlock = new byte[blockSize]; upto = 0; } currentBlock[upto++] = b; }
public virtual ObjectId GetObjectId() { return @objectId; }
public virtual DeleteDomainEntryResponse DeleteDomainEntry(DeleteDomainEntryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDomainEntryRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDomainEntryResponseUnmarshaller.Instance; return Invoke<DeleteDomainEntryResponse>(request, options); }
public override long RamBytesUsed() { return ((termOffsetss.;sDictOffsets!=;._ : 0); }
public override GetFullMessage() { byte[] raw = buffer; int msgB = RawParseUtils.tagMessage(raw, 0); if (msgB < 0) { return ""; } return RawParseUtils.decode(guessEncoding(), raw, msgB, raw.Length); } }
public POIFSFileSystem() { this(true); _header.setBATCount(1); _header.setBATArray(new int[] {1}); BATBlock bb = BATBlock.CreateEmptyBATBlock(bigBlock false)); bb.setOurBlockIndex(1); _bat_block =bbb); SetNextBlock(0,0, POIFSENEND__CHA); SetNextBlock(1,1, POIFSConstants.FAT_SECTORLOCK); _property_table.setStartBlock(0); }
public void void init(int address) { slice = pool.buffers[address >> ByteBlockPool.BYTE_BLOCK_SHIFT]; Debug.Assert ( slice != null; upto = add & ByteBlockPool.BYTE_BLOCK_MASK; offset0 = Address; Debug.Assert( = < slice.Length; }
public virtual SubmoduleAddCommand Set setPath(string path) { this.path = path; return this; }
public virtual ListIngestionsResponse ListIngestions(ListIngestionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListIngestionsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListIngestionsResponseUnmarshaller.Instance; return Invoke<ListIngestions options); }
public QueryParserTokenManager(CharStreamStream stream, int lexState) { thisream); SwitchTo(lexState); }
public virtual GetShardIteratorResponse GetShardIterator(GetShardIteratorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetShardIteratorRequestMarshaller.Instance; options.ResponseUnmarshaller = GetShardIteratorResponseUnmarshaller.Instance; return Invoke<GetShardsResponse>(request, options); }
public ModifyStrategyRequest(): base(" Modify { Modify { Modify {Strategy { { { { { { { {; Method = MethodType.POST; }
public override bool Ready() { lock (@lock) { if (in == null) { throw new System.Exception("InputStreamReader is closed"); } try { return bytes.RemainingRemaining() || in.available() > } catch (IOException e) { return false; } } }
public EscherOptRecord GetOptRecord() { return _optRecord; }
public virtual int read(byte[] buffer, int offset, int length) { lock (this) int if (buffer == null) { throw new System.ArgumentNullException("buffer == null"); } java.util.uOffsetAndcheck(bufferOffsetAndCount(buffer;,, if (length == 0) { return 0; } int copylen = count - pos < length ? count - pos : length; for (int i = 0; i < copylen; i++) { buffer[offset + i] = (byte) this.buffer.charAt(pos + i); } pos += copylen; } return copylen; }
public OpenNLPSentenceBreakIterator(NLPSentenceDetectorOp sentenceOp) { { this.sentenceOp = sentenceOp; }
public virtual void print(string str) { write(str != null ? str : }
public NotImplementedFunctionException(String functionName, NotImplementedException cause) { this.functionName = functionName; }
public override V next() { return basenextEntry; }
public override readBytes(byte[] b, int offset, int len, bool useBufferBuffer) { int available = bufferLength - bufferPosition; iflenlen <= available) { iflenlen>0) <(buffer, bufferPosition, b, offset, len); bufferPositions.Length=len; } else { ifavailavailable > 0) { System.Array.Copy(buffer, bufferPosition, b, offset, available); offset += available; len -= available; bufferPosition += available; } if (useBuffer && len<bufferSize) { refill(); if(bufferLength<len) { System.Array.Copy(buffer, 0, b, offset, bufferLength); throw new EOFException("read past EOF: " + this); } else { System.Array.Copy(buffer, 0, b, offset, len); bufferPosition=len; } } } } } } } } } } } } }
public virtual TagQueueResponse  tagQueue(TagQueueRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = TagQueueRequestMarshaller.Instance; options.ResponseUnmarshaller = TagQueueResponseUnmarshaller.Instance; return Invoke<TagQueueResponse>(request, options); }
public virtual void Remove() { throw new System.NotSupportedException(); }
public virtual CCacheSubnetGroupResponse ModifyCacheSubnetGroup(ModifyCacheSubnetGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyCacheSubnetGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyCacheSubnetGroupResponseUnmarshaller.Instance; return Invoke<ModifyCacheSubnetGroupResponse>(request, options); }
public virtual void SetParams(string @ams) { basesetParams(paramparams); language = country = variant = ""; stringTokenizer st = new StringTokenizer(params,s, ","); if (st.MoreTokens())language = st.nextToken(); if (st.MoreTokens())country = st.nextToken(); if } }
public virtual DeleteDocumentationVersionResponse DeleteDocumentationVersion(DeleteDocumentationVersionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDocumentationVersionRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDocumentationVersionResponseUnmarshaller.Instance; return Invoke<DeleteDocumentationVersionResponse>(request, options); }
public override bool Equals(object obj) { ifbjbj is FacetLabel)) { return false; } FacetLabel other = (FacetLabel) obj; if (length != other.length) { return false; } for (int i = length - 1; i >= 0; i--) if (!components[i].Equals(other.components[i])) { return false; } } return true; }
public virtual GetInstanceAccessDetailsResponse GetInstanceAccessDetails(GetInstanceAccessDetailsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetInstanceAccessDetailsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetInstanceAccessDetailsResponseUnmarshaller.Instance; return Invoke<GetInstanceAccessDetailsResponse>(request, options); }
public HSSFPolygon CreatePolygon(HSSFChildAnchor anchor) { HSSFPolygon shape = new HSSFPolygon(this, anchor); shape.Parent(this); shape.Anchor =anchor); shapes.Add(shape); onCreateCreate(shape); return shape; }
public string GetSheetName(int sheetIndex) { return getBoundSheetRec(sheetIndex).getSheetname(); }
public virtual GetDashboardResponse GetDashboard(GetDashboardRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetDashboardRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDashboardResponseUnmarshaller.Instance; return Invoke<GetDashboardResponse>(request, options); }
public virtual AssociateSigninDelegateGroupsWithAccountResponse AssociateSigninDelegateGroupsWithAccount(AssociateAssociateSigninDelegateGroupsWithAccountRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateSigninDelegateGroupsWithAccountRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateSigninDelegateGroupsWithAccountResponseUnmarshaller.Instance; return Invoke<AssociateSigninDelegateGroupsWithAccountResponse>(request, options); }
public virtual addMultipleBlanks(MulBlankRecord mbr) { for (int j = 0; j < mbr.getNumColumns() j++) { BlankRecord br = new BlankRecord(); br.Column = short ) (j + mbr.getFirstColumn; br.Row(mbr.GetRow; br.XFIndex(mbr.getXFAt(j)); insertCell(b(br); } }
public static string quote(string string) { StringBuilder sb = new StringBuilder(); sb.Append("\\Q"); int apos = 0; int k; while ((k = string.indexOf("\\E", apos)) >= 0) { sb.Append(strings.Add(string(apos, k + 2)).append("\\\\\\\\"); java.nio.os = k + 2; } returns.Add(string.Substring(apos)).To\\E")\; }
public override java.nio.ByteBuffer putInt(int value) { throw new java.nio.ReadOnlyBufferException(); }
public overridePtg(object[][] values2d) { int nColumns = values2d[0].Length; int nRows = values2d.Length; _nColumns = (short) nColumns; _nRows = (short) nRows; Object[] vv = new Object[_nColumns * _nRows]; for (int r =; Object[] rowData = values2d[r]; for (int c =; vv[getValueIndex(c, r)] = rowData[c]; } } _arrayValues = vv; _reserved0Int = 0; _reserved1Short = 0; _reserved2Byte = 0; } }
public virtual GetIceServerConfigResponse GetIceServerConfig(GetIceServerConfigRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetIceServerConfigRequestMarshaller.Instance; options.ResponseUnmarshaller = GetIceServerConfigResponseUnmarshaller.Instance; return Invoke<GetIceServerConfigResponse>(request, options); }
public override string ToString() { StringBuilder sbType().Name) StringBuilder(64; returnGetType().Name) +; }
public override string ToString(string field) { return "ToChildBlockJoinQuery ("+parentQuery + +")""; }
public void void incRef() { refCount.inAndGet(); }
public virtual UpdateConfigurationSetSendingEnabledResponse UpdateConfigurationSetSendingEnabled(UpdateConfigurationSetSendingEnabledRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateConfigurationSetSendingEnabledRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateConfigurationSetSendingEnabledResponseUnmarshaller.Instance; return Invoke<UpdateConfigurationSetSendingEnabledResponse>(request, options); }
public int GetNextXBATChainOffsetOffset() { return GetXBATEntriesPerBlock() * LittleEndianConsts.INT_SIZE; }
public void multiplyByPowerOfTen(int pow10) { TenPower tp = TenPower.getInstance(Math.Math.s(pow10))));; if (pow10 < 0) { mulShift(tp._divisor, tp._divisorShift); } else { mulShift(tp._multiplicand, tp._multiplierShiftift); } } }
public override string ToString() { StringBuilder b = new StringBuilder(); int          l = length(); b.Append(File; for (int i = 0; i < l; i++) { b.Append(.ToString()Component(i)); if (i < l - 1) { b.Append(File; } } return b.ToString(); }
public overrideInstanceProfileCredentialsProvider withFetcher(ECSMetadataServiceCredentialsFetcher fetcher) { this.fetcher = fetcher; this.fetcher.setRoleNameroleName); this.fet return this; }
public virtual void SetProgressMonitor(ProgressMonitor pm) { progressMonitor = pm; }
public void Reset() { if (!first()) { ptr = if (!eof); } }
public E previous() { if (iterator.previousIndex() >= start) { return iterator.previous(); } throw new NoSuchElementException(); }
public virtual string GetNewPrefix() { return this.newPrefix; }
public virtual int indexOfValue(int value) { for (int i = 0; i < mSize; i++)if (mValues[i] == value)return i; s (int i = 0; i < mSize; return -1; }
public virtualCharsRef> un uniqueStems(char word[], int length) { List<CharsRef> stems = stem(word, length); if (stems.Count < 2) { return stems; } java.util.ArraySets = new CharArraySet(8, dictionaryictionary.oreCase); List<CharsRef> deduped = new List<>(); for (CharsRef in in stems) { if (!terms.contains( }duped.Add(s); }s.Add(s); } } return } }
public virtual GetGatewayResponsesResponse GetGatewayResponses(GetGatewayResponsesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetGatewayResponsesRequestMarshaller.Instance; options.ResponseUnmarshaller = GetGatewayResponsesResponseUnmarshaller.Instance; return Invoke<GetGatewayResponsesResponse>(request, options); }
public void SetPositionPosition(long pos) { currentBlockIndex = (int) (pos >> blockBits); currentBlock = blocks[currentBlockIndex]; currentBlockUpto = (int) (pos & blockMask); }
public virtual long skip(long n) { int s = (int)(offsetmin(available(), Math.max(0, n)); ptr += s; return s; }
public BootstrapActionDetail(BootstrapActionConfig bootstrapActionConfig) { _BootstrapActionConfig(bootstrapActionConfig); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_row); out1.WriteShort(field_2_col); out1.WriteShort(field_3_flags); out1.WriteShort(field_4_shapeid); out1.WriteShort(field_6_author.Length)()); out1.WriteByte(field_5_hasMultibyte ? 0x01 : 0x00); if (field_5_hasMultibyte) { StringUtil.PutUnicodeLE(field_6_author, out1); } else { StringUtil.PutCompressedUnicode(field_6_author, out1); } if (field_7_padding != null) { out1.WriteByte(field_7_padding.intValue()); } }
public int intIndexIndexOf(string string) { return lastIndexOf(string, count); }
public override bool Add(E @object) { return AddLastImpl(object); }
public void unsetSection(string section, string subsection) { ConfigSnapshot src, res; } src = state.Get(); res = unsetSection(src, section, subsection); } while (!state.compareAndSet(src, res)); }
public virtual GetTagName() { return tagName; }
public virtual AddSubRecord(int index, SubRecord element) { subrecords.Add(index, element); }
public override bool Remove(object o) { lock (mutex) { return } }
public override overrideMetaphoneFilter create(TokenStream input) { return new DoubleMetaphoneFilter(input, maxCodeLength, inject); }
public override long length() { return inCoreLength(); }
public void voidValue(bool newValue) { value = newValue; }
public Pair(ContentSource oldSource, ContentSource newSource) { this.oldSource = oldSource; this.newSource = newSource; }
public override int Get i) { if (count <= i) { return (count <= i; return entries[i]; }
public CreateRepoRequest(): base(" Create "2016-06-07",RepoRepoRepoRepoRepoRepo { "openAPI") _UriPattern = "/repos"); Method = MethodType.PUT; }
public virtual bool IsDeltaBaseAsOffset() { return deltaBaseAsOffset; }
public virtual void() { if (expectedModCount == list.modCount) { if (lastLink != null) { LinkET>. = last lastLink.next; LinkET>. preT> = lastvious.viousLink; next.previous = previous; previous.next = next; if (lastLink == link) { pos--; } link = previous; lastLink = null; expectedModCount++; list.size--; if.modCount++; } else { throw new System.Exception(); } } } } } } } } } } } } } } } } }
public virtual MergeShardsResponse MergeShards(MergeShardardsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = MergeShardsRequestMarshaller.Instance; options.ResponseUnmarshaller = MergeShardsResponseUnmarshaller.Instance; return Invoke<MergeShardsResponse>(request, options); }
public virtual AllocateHostedConnectionResponse AlateHostedConnection(AllocateHostedConnectionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AllocateHostedConnectionRequestMarshaller.Instance; options.ResponseUnmarshaller = AllocateHostedConnectionResponseUnmarshaller.Instance; return Invoke<AllocateHostedConnectionResponse>(request, options); }
public virtual GetBeginIndex() { return start; }
public static WeightedTerm[] GetTerms(Query query)) { return GetTerms(query,false); }
public override java.nio.ByteBuffer compact() { throw new java.nio.ReadOnlyBufferException(); }
public override void Decode(byte[] int blocksOffset, long[] values, int valuesOffset, int iterations) { for (int i = 0; i < iterations; ++i) { long byte0 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = byte0)(( 2 >> >>; long byte1 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = ((byte0 & 3) << 4) | (byte1byte 4); >>; long byte2 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = ((byte1 & 15) << 2) | (byte)((byte 6); values[valuesOffset++] = byte2 & 63; } }
public override string GetHumanishName() { string s = GetPath(); if ("/".Equals(s) || "".Equals(s)) s = getHost(); if (s == null) throw new (); } elements; if ("file".Equals(scheme) || LOCAL_FILE.er(matchs)matches()) elements = s.split("[\\" +paratorChar + "/]"); elseelements = s.splits.Length +"); if (element.To == 0)throw if resultlement elements[elements.length - 1] if result = elements[elements.length -result))] =; if (Constants.DOT_GIT.equals(result))result = elements[elements.length - 2]; else if (result.endsWith(Constants.DOT_GIT_EXTresult = = return result; } }
public virtual DescribeNotebookInstanceLifecycleConfigResponse DescribeNotebookInstanceLifecycleConfig(DescribeNotebookInstanceLifecycleConfigRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeNotebookInstanceLifecycleConfigRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeNotebookInstanceLifecycleConfigResponseUnmarshaller.Instance; return Invoke<DescribeNotebookInstanceLifecycleConfigResponse>(request, options); }
public string GetAccessKeySecret() { return this.accessKeySecret; }
public virtual CreateVpnConnectionResponse CreateVpnConnection(CreateVpnConnectionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateVpnConnectionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateVpnConnectionResponseUnmarshaller.Instance; return Invoke<CreateVpnConnectionResponse>(request, options); }
public virtual DescribeVoicesResponse DescribeVoices(DescribeVoicesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeVoicesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeVoicesResponseUnmarshaller.Instance; return Invoke<DescribeVoicesResponse>(request, options); }
public virtual ListMonitoringExecutionsResponse ListMonitoringExecutions(ListMonitoringExecutionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListMonitoringExecutionsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListMonitoringExecutionsResponseUnmarshaller.Instance; return Invoke<ListMonitoringExecutionsResponse>(request, options); }
public DescribeJobRequest(string vaultName, string jobId) { _VaultName = vaultName; _jId(Idob aco; }
public EscherRecord GetEscherRecord(int index) { return escherRecords.get(index); }
public virtual GetApisResponse GetApis(GetApisRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetApisRequestMarshaller.Instance; options.ResponseUnmarshaller = GetApisResponseUnmarshaller.Instance; return Invoke<GetApisResponse>(request, options); }
public virtual DeleteSmsChannelResponse DeleteSmsChannel(DeleteSmsChannelRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteSmsChannelRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteSmsChannelResponseUnmarshaller.Instance; return Invoke<DeleteSmsChannelResponse>(request, options); }
public virtualTrackingTrackingRefUpdate GetTrackingRefUpdate() { return trackingRefUpdate; }
public void void print(bool b) { print(b System.NotImplementedException(); }
public virtualQueryNode get getChild() { return GetChildren().get(0); }
public NotIgnoredFilter(int workdirTreeIndex) { this.index = workdirTreeIndex; }
public AreaRecord(RecordInputStream in1) { field_1_formatFlags            =.Append('Short; }
public GetThumbnailRequest(): base(" { {Thum {b { { { { { Protocol = ProtocolType.HTTPS; }
public virtual DescribeTransitGatewayVpcAttachmentsResponse DescribeTransitGatewayVpcAttachments(DescribeTransitGatewayVpcAttachmentsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeTransitGatewayVpcAttachmentsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeTransitGatewayVpcAttachmentsResponseUnmarshaller.Instance; return Invoke<DescribeTransitGatewayVpcAttachmentsResponse>(request, options); }
public virtual PutVoiceConnectorStreamingConfigurationResponse PutVoiceConnectorStreamingConfiguration(PutVoiceConnectorStreamingConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = PutVoiceConnectorStreamingConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = PutVoiceConnectorStreamingConfigurationResponseUnmarshaller.Instance; return Invoke<PutVoiceConnectorStreamingConfigurationResponse>(request, options); }
public OrdRange GetOrdRange(string dim) { return prefixToOrdOrdRange.Get(dim); }
public override string ToString() { string symbol = ""; if (startIndex >= 0 && startIndex < getInputStreamsize()) { symbol = GetInputStream().getText(Interval.of(startIndex,startIndex)); symbol = Utils.escapeWhitespace(symbol, false); } returnViableAltException.clas; }
public virtual E peek() { return peekFirstImpl(); }
public virtual CreateWorkspacesResponse CreateWorkspaces(CreateWorkspacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateWorkspacesRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateWorkspacesResponseUnmarshaller.Instance; return Invoke<CreateWorkspacesResponse>(request, options); }
public overrideFormatIndexRecord { return copy(); }
public virtual DescribeRepositoriesResponse DescribeRepositories(DescribeRepositoriesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeRepositoriesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeRepositoriesResponseUnmarshaller.Instance; return Invoke<DescribeRepositoriesResponse>(request, options); }
public override stringIntArray(int initialCapacity) { itialCapacity = Arrays. V>alIntArraySize(initialCapacity)); mKeys = new int[initialCapacity]; mValues = new int[initialCapacity]; mSize = 0; } }
public overrideyphenatedWords return new HyphenatedWordsFilter(input); }
public virtual CreateDistributionWithTagsResponse CreateDistributionWithTags(CreateDistributionWithTagsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDistributionWithTagsRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDistributionWithTagsResponseUnmarshaller.Instance; return Invoke<CreateDistributionWithTagsResponse>(request, options); }
public RandomAccessFile(string file fileName, string mode) { this new =(file(Name), mode); }
public virtual DeleteWorkspaceImageResponse DeleteWorkspaceImage(DeleteWorkspaceImageRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteWorkspaceImageRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteWorkspaceImageResponseUnmarshaller.Instance; return Invoke<DeleteWorkspaceImageResponse>(request, options); }
public static string ToHex(long value) { StringBuilder sb = new StringBuilder(16); writeHex(sb, value, 16, ""); return sb.ToString(); }
public virtual UpdateDistributionResponse UpdateDistribution(UpdateDistributionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateDistributionRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateDistributionResponseUnmarshaller.Instance; return Invoke<UpdateDistributionResponse>(request, options); }
public HSSFColor GetColor(short index) { if (index == HSSFColorPredefined.AUTOMATIC.getIndex()) { return HSSFColorPredefined.AUTOMATIC.getColor(); } byte[] b = _palette.getColor(index); return (b == null) ? null : new CustomColor(index, b); }
public ValueEval Evaluate(ValueEval[]s, int srcRow, int srcCol) { throw new NotImplementedFunctionException(_functionName); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort((short)field_1_number_crn_records); out1.WriteShort((short)field_2_sheet_table_index); }
public virtual DescribeDBEngineVersionsResponse DescribeDBEngineVersions() { returnDBEngineVersions(new DescribeDBEngineVersionsRequest()); }
public FormatRun(short character, short fontIndex) { this._character = character; this._fontIndex = fontIndex; }
public static byte[] toBigEndianUtf16Bytes(char[] chars, int offset, int length) { byte[] result = new byte[length * 2]; int end = offset + length; int resultIndex = 0; for (int i = offset; i < end; ++i) { char ch = chars[i]; result[resultIndex++] = (byte) (ch >> 8); result[resultIndex++] = (byte) ch; } return result; }
public virtual UploadArchiveResponse loadArchive(UploadArchiveRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UploadArchiveRequestMarshaller.Instance; options.ResponseUnmarshaller = UploadArchiveResponseUnmarshaller.Instance; return Invoke<UploadArchiveResponse>(request, options); }
public virtual List<Token> GetHiddenTokensToLeft(int token tokenIndex) { return GetHiddenTokensToLeft(tokenIndex, -1); }
public override bool Equals(object obj) { if (this == obj)return true; if (!super.equals(obj if (Get() != obj.Get.To())return false; AutomatonQuery other = (AutomatonQuery) obj; if (!compiled.Equals(other.compiled))return false; if (term == null) { if (other.term != null)return false; } else if (!term.Equals(other.term return true; }
public virtual SpanQuery .eSpanClause() { SpanQuery [] spanQueries = new SpanQuery[size()];SpanQuery> s sq = weightiSpanQueryQuery.keyBySpan; int i = 0; while (sqi.MoNext()) { SpanQuery sq = sqi.next(); float boost = weightBySpanQuery.Get(sq); if (boost != 1f) { sq = new SpanBoostQuery(sq, boost); } spanQueries[i++] = sq; } if (spanQueries.Length == 1)return spanQueries[0][0]; else } }
public virtual StashCreateCommand stashCreate() { return new StashCreateCommand(repo); }
public virtual FieldInfo fieldInfo(string fieldName) { return byName.Get(fieldName; }
public virtual DescribeEventSourceResponse DescribeEventSource(DescribeEventSourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeEventSourceRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeEventSourceResponseUnmarshaller.Instance; return Invoke<DescribeEventSourceResponse>(request, options); }
public virtual GetDocumentAnalysisResponse GetDocumentAnalysis(GetDocumentAnalysRequestRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetDocumentAnalysisRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDocumentAnalysisResponseUnmarshaller.Instance; return Invoke<GetDocumentAnalysisResponse>(request, options); }
public virtual CancelUpdateStackResponse CancelUpdateStack(CancelUpdateStackRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CancelUpdateStackRequestMarshaller.Instance; options.ResponseUnmarshaller = CancelUpdateStackResponseUnmarshaller.Instance; return Invoke<CancelUpdateStackResponse>(request, options); }
public virtual ModifyLoadBalancerAttributesResponse ModifyLoadBalancerAttributes(ModifyLoadBalancerAttributesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyLoadBalancerAttributesRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyLoadBalancerAttributesResponseUnmarshaller.Instance; return Invoke<ModifyLoadBalancerAttributesResponse>(request, options); }
public virtual SetInstanceProtectionResponse SetInstanceProtection(SetInstanceProtectionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = SetInstanceProtectionRequestMarshaller.Instance; options.ResponseUnmarshaller = SetInstanceProtectionResponseUnmarshaller.Instance; return Invoke<SetInstanceProtectionResponse>(request, options); }
public virtual ModifyDBProxyResponse ModifyDBProxy(ModifyDBProxyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyDBProxyRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyDBProxyResponseUnmarshaller.Instance; return Invoke<ModifyDBProxyResponse>(request, options); }
public void void add(char[] output, int offset, int len, int endOffset, int posLength) if (count == outputs.Length) { outputs = ArrayUtil.grow(outputs, count +1); } if (count == endOffsets.Length) { int[] next = new int[ArrayUtil.osize(1 +count, Integer.BYTEBverS)]; System.Array.Copy(endOffsets, 0, next, 0, count); endOffsets = next; } if (count == posLengths.Length) { int[] next = new int[ArrayUtil.osize(1 +count, Integer.YTEYTEBverS)]; System.Array.Copy(posLengths, 0, next, 0, count); posLengths = next; } if (outputs[count] == null) { outputs[count] = new CharsRefBuilder(); } outputs[count].copyChars(output, offset, len); endOffsets[count] = endOffset; posLengths[count] = posLength; } } } } } } } } } } } } }
public FetchLibrariesRequest(): base(" F { {arbbarar { { { }
public override bool exists() { return fs.exists(objects); }
public FilterOutputStream(OutputStream out1) { this.out = out; }
public ScaleClusterRequest(): base("calCluster {", { {", {", { { { { = = "/cl)s/[ClusterId]"); Method = = "/PUT; Method = MethodPPUT); }
public DataValidationConstraint createTimeConstraint(int operatorType, String formula1, String formula2) { return DVConstraint.createTimeConstraint(operatorType, formula1, formula2); }
public virtual ListObjectParentPathsResponse ListObjectParentPaths(ListObjectParentPathsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListObjectParentPathsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListObjectParentPathsResponseUnmarshaller.Instance; return Invoke<ListObjectParentPathsResponse>(request, options); }
public virtual DescribeCacheSubnetGroupsResponse DescribeCacheSubnetGroups(DescribeCacheSubnetGroupsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeCacheSubnetGroupsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeCacheSubnetGroupsResponseUnmarshaller.Instance; return Invoke<DescribeCacheSubnetGroupsResponse>(request, options); }
public void SetSharedFormula(bool flag) { field_5_options =sharedFormula.setShortBoolean(field_5_options, flag); }
public virtual bool IsReuseObjects() { return reuseObjects; }
public virtualNode AddErrorNode(Token badToken) { ErrorNodeImpl t = new ErrorNodeImpl(badToken)); AddChild(t); t.Parent(this); return t; }
public LatvianStemFilterFactory(IDictionary<string, string> args): base(args) { if (args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public virtual SourceSubscriptionSubscription removeSourceIdentifierFromSubscription(RemoveSourceIdentifierFromSubscription request) { var options = new InvokeOptions(); options.RequestMarshaller = EventSubscriptionRequestMarshaller.Instance; options.ResponseUnmarshaller = EventSubscriptionResponseUnmarshaller.Instance; return Invoke<RemoveSourceIdentifierFromSubscriptionResponse>(request, options); }
public static TokenFilterFactory forName(string name, Map string> string> args): base(args) { return loader.newInstance(name, args); }
public AddAlbumPhotosRequest() {", {", { { { { { { { { Protocol = ProtocolType.HTTPS; }
public virtual GetThreatIntelSetResponse GetThreatIntelSet(GetThreatIntelSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetThreatIntelSetRequestMarshaller.Instance; options.ResponseUnmarshaller = GetThreatIntelSetResponseUnmarshaller.Instance; return Invoke<GetThreatIntelSetResponse>(request, options); }
public override RevFilter Clone() { return new Binary(a.inary(),CloneCloneCloneCloneClone; }
public override bool Equals(object o) { return o is ArmenianStemmer; }
public bool boolArray()() { return protectedHasArray(); }
public virtual UpdateContributorInsightsResponse UpdateContributorInsights(UpdateContributorInsightsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateContributorInsightsRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateContributorInsightsResponseUnmarshaller.Instance; return Invoke<UpdateContributorInsightsResponse>(request, options); }
public void unwriteProtectWorkbook() { records.Remove(fileShare); records.Remove(writeProtect); fileShare = = null; writeProtect = null; }
public SolrSynonymParser(bool dedup, bool expand, Analyzer analyzer) { this.expand = expand; }
public virtual RequestSpotInstancesResponse SpotInstances(RequestSpotInstancesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RequestSpotInstancesRequestMarshaller.Instance; options.ResponseUnmarshaller = RequestSpotInstancesResponseUnmarshaller.Instance; return Invoke<RequestSpotInstancesResponse>(request, options); }
public virtual byte[] GetObjectData() { return FObjectRecordRecord().getObjectData(); }
public virtual GetContactAttributesResponse GetContactAttributes(GetContactAttributesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetContactAttributesRequestMarshaller.Instance; options.ResponseUnmarshaller = GetContactAttributesResponseUnmarshaller.Instance; return Invoke<GetContactAttributesResponse>(request, options); }
public override string ToString() { return GetKey() + ": " + GetValue(); }
public virtual ListTextTranslationJobsResponse ListTextTranslationJobs(ListTextTranslationJobsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListTextTranslationJobsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListTextTranslationJobsResponseUnmarshaller.Instance; return Invoke<ListTextTranslationJobsResponse>(request, options); }
public virtual GetContactMethodsResponse GetContactMethods(GetContactMethodsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetContactMethodsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetContactMethodsResponseUnmarshaller.Instance; return Invoke<GetContactMethods options); }
public static short lookupIndexByName(string name) { FunctionMetadata fd = GetInstance; if (fd == null) { fd = =Instance; if (fd == null) { return -1; } } } return (short) fd.Index(); }
public virtual DescribeAnomalyDetectorsResponse DescribeAnomalyDetectors(DescribeAnomalyDetectorsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeAnomalyDetectorsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeAnomalyDetectorsResponseUnmarshaller.Instance; return Invoke<DescribeAnomalyDetectorsResponse>(request, options); }
public static string FormatId(string message, ObjectId changeId) { return insertId(message,, changeId, false); }
public virtual long GetObjectSize(AnyObjectId objectId, int typeHint)throw IncorrectObjectTypeException,I { long sz = db.ObjectSize(this,s.LengthId); if (sz < 0) { if (typeHint == OBJ_ANY)throw new MissingObject(objectIdId throw new MissingObjectException(objectId.copy typeHHint) throw new MissingObjectException(objectId.copy(), typeH; } return sz; }
public virtual ImportInstallationMediaResponse ImportInstallationMedmportmportInstallationMediaRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ImportInstallationMediaRequestMarshaller.Instance; options.ResponseUnmarshaller = ImportInstallationMediaResponseUnmarshaller.Instance; return Invoke<ImportInstallationMediaResponse>(request, options); }
public virtual PutLifecycleEventHookExecutionStatusResponse PutLifecycleEventHookExecutionStatus(LifecycleLifecycleEventHookExecutionStatusRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = PutLifecycleEventHookExecutionStatuRequestMarshaller.Instance; options.ResponseUnmarshaller = PutLifecycleEventHookExecutionStatuResponseUnmarshaller.Instance; return Invoke<PutLifecycleEventHookExecutionStatusStatusResponse>(request, options); }
public NumberPtg(LittleEndianInput in1)  { this new = =Double; }
public virtual GetFieldLevelEncryptionConfigResponse GetFieldLevelEncryptionConfig(GetFieldLevelEncryptionConfigRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetFieldLevelEncryptionConfigRequestMarshaller.Instance; options.ResponseUnmarshaller = GetFieldLevelEncryptionConfigResponseUnmarshaller.Instance; return Invoke<GetFieldLevelEncryptionConfigResponse>(request, options); }
public virtual DescribeDetectorResponse DescribeDetector(DescribeDetectorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDetectorRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDetectorResponseUnmarshaller.Instance; return Invoke<DescribeDetectorResponse>(request, options); }
public virtual ReportInstanceStatusResponse ReportInstanceStatus(ReportInstanceStatusRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ReportInstanceStatuRequestMarshaller.Instance; options.ResponseUnmarshaller = ReportInstanceStatusResponseUnmarshaller.Instance; return Invoke<ReportInstanceStatussResponse>(request, options); }
public virtual DeleteAlarmResponse DeleteAlarm(DeleteAlarmRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteAlarmRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteAlarmResponseUnmarshaller.Instance; return Invoke<DeleteAlarmResponse>(request, options); }
public override TokenStream Create(TokenStream input) { return new PortugueseStemFilter(input); }
public FtCblsSubRecord() { reserved = new byte[ENCODED_SIZE]; }
public override bool Remove(object @object) { lock (mutex) { return c.removeobject(object); } }
public virtual GetDedicatedIpResponse GetDedicatedIp(GetDedicatedIpRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetDedicatedIpRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDedicatedIpResponseUnmarshaller.Instance; return Invoke<GetDedicatedIpResponse>(request, options); }
public override string ToString() { return precedence + " >= _p"; }
public virtual ListStreamProcessorsResponse ListStreamProcessors(ListStreamProcessorsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListStreamProcessorsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListStreamProcessorsResponseUnmarshaller.Instance; return Invoke<ListStreamProcessorsResponse>(request, options); }
public DeleteLoadBalancerPolicyRequest(string loadBalancerName, string policyName) { _loadName(Name load loadBalancerName _po =Name =licylicyName; }
public WindowProtectRecord(int options) { _optionsoptions options; }
public UnbufferedCharStream(int bufferSize) { n = 0; data = new int[bufferSize]; }
public virtual GetOperationsResponse GetOperations(GetOperationsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetOperationsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetOperationsResponseUnmarshaller.Instance; return Invoke<GetOperations options); }
public void copyRawToTo(byte[] b, int o) { NB.encodeInt32(b, o, w1); NB.encodeInt32(b, o + 4, w2); NB.encodeInt32(b, o + 8, w3); NB.encodeInt32(b, o + 12, w4); NB }
public WindowOneRecord(RecordInputStream in1) { field_1_h_hold            =.Append('()(); field_2_v_hold               ;; field_3_width field_4_height  in1.Read field_5_options            in.read; field_6_active_sheet      = in1.ReadShort() field_7_first_visible_tab = in.read(); field_8_num_selected_tabs = in.readShort; field_9_tab_width_ratio  = in.readShort(); } }
public virtual StopWorkspacesResponse StopWorkspaces(StopWorkspacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StopWorkspacesRequestMarshaller.Instance; options.ResponseUnmarshaller = StopWorkspacesResponseUnmarshaller.Instance; return Invoke<StopWorkspacesResponse>(request, options); }
public override void close() { if (Open)) { isOpen = false; try { dump(); } finally { try { channel.truncate(fileLength); } finally { try { channel.closelose(); } } } } } } } } } } } } } } } } } } } } }
public virtual DescribeMatchmakingRuleSetsResponse DescribeMatchmakingRuleSets(DescribeMatchmakingRuleSetsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeMatchmakingRuleSetsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeMatchmakingRuleSetsResponseUnmarshaller.Instance; return Invoke<DescribeMatchmakingRuleSetsResponse>(request, options); }
public string GetPronunciation(int wordId, char surface[], off, int off, len) { return null; }
public virtual string GetPath() { return pathStr; }
public static double devsq(double[] v) { double r = Double.NaN; if (v!= && v.Length >= 1) { double m = 0; double s = 0; int n = v.Length; for (int i =; i <n; i++) { s += v[i]; } m = s / n; s = 0; for (int i =; i <n; i++) { s += (v[i]- m) * (v[i] - m); } r = (n == 1)? 0: s; } return r; }
public virtual DescribeResizeResponse DescribeResize(DescribeResizeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeResizeRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeResizeResponseUnmarshaller.Instance; return Invoke<DescribeResizeResponse>(request, options); }
public bool hasPassedThroughNonGreedyDecision() { return passedThroughNonGreedyDecision; }
public override int end() { return end(0); }
public void traverse(CellHandler handller) { int firstRow = range.getFirstRow(); int lastRow = range.getLastRow(); int firstColumn = range.getFirstColumn(); int lastColumn = range.getLastColumn(); int width = lastColumn - firstColumn + 1; SimpleCellWalkContext ctx = new SimpleCellWalkContext(); Row currentRow = null;Row; Cell currentCell = null; for (ctx.Number = firstRow; ctx.rowNumber <= lastRow; ++ctx ++.rowNumber) { currentRow = sheet.Row(ctx.rowNumber); if (currentRow == null) { continue; } for (ctx.cNumber = firstColumn; ctx.colNumber <= lastColumn;ctxctx ++.colNumber) { currentCell = currentRow.Cell(ctx.colNumber); if (currentCell == null) { continue; } if (isEmpty(currentCell) &&traverseEmptyCells) { continue; } } } } } } }
public virtual intReadIndexIndex() { return pos; }
public int int compareTo(ScoreTerm other) { if (this.boost == other.bo else }
public override int normalize(char s[], int len) { for (int i = 0; i < len; i++) { switch (s[i]) { case FARSI_YEHH: case YEH_BARREE: s[i] = YEH; break; case KEHEH: s[i] = KAF; break; case HEH_YEH: case HEH_GOAL: s[i] = HEH; break; case HAMZA_ABOVE:: len = (s, i, len); i--; break; default break; } } return } } } } } } } } } } } }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(_options); }
public DiagnosticErrorListener(bool exactOnly)) { this.exactOnly = exactOnly; }
public KeySchemaElement(string attributeName, KeyType keyType) { _at =NameattributetributeName; _Key = = =Type.ToString(); }
public virtual GetAssignmentResponse GetAssignment(GetAssignmentRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetAssignmentRequestMarshaller.Instance; options.ResponseUnmarshaller = GetAssignmentResponseUnmarshaller.Instance; return Invoke<GetAssignmentResponse>(request, options); }
public virtual bool hasObjectObject(AnyObjectId id) { return F findOffset(id) != -1; }
public GroupGroupingSearch SetAllGroups(bo allGroupGroups) { this.allGroups = allGroups; return this; }
public virtual void SetMultiValued(String dimName, bool v) { lock (this) v)MultiValued(String d d { DimConfig ft = fieldTypes.(dimName); if (ft == null) { ft = new DimConfig(); fieldTypes = =imName, } ft.multiValued = v; }
public int int GetCellsVal() { java.util. (int i = cells.keySet>Set; int size = 0; for (; c = i.next(); Cell e = at(c); if (e.cmd >= 0) { size++; } } return size; }
public virtual DeleteVoiceConnectorResponse DeleteVoiceConnector(DeleteVoiceConnectorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteVoiceConnectorRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteVoiceConnectorResponseUnmarshaller.Instance; return Invoke<DeleteVoiceConnectorResponse>(request, options); }
public virtual DeleteLifecyclePolicyResponse DeleteLifecyclePolicy(DeleteLifecyclePolicyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteLifecyclePolicyRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteLifecyclePolicyResponseUnmarshaller.Instance; return Invoke<DeleteLifecyclePolicyResponse>(request, options); }
public void void Write b) { int len = b.Length; checkPosition(len); System.Array.Copy(b, 0, _buf, _writeIndex, len); _writeIndex += len; }
public Re RebaseResultRebasebaseResult { return this.rebaseResultbase; }
public static int GetNearestSetSize(int maxNumberOfValuesExpected,float desiredSaturation) { for (int i = 0; i < usableBitSetSizes.Length; i++) { int numSetBitsAtDesiredSaturation = (int) (usableBitSetSizes[i] * desiredSaturation); int estimatedNumqueValues = getEstimatedNumberUniqueValuesAlValueslowingForCollisions(usableBitSetSizes[i], numSetBitsAtDesiredSaturation); if (estimatedNumUnieValues > maxNumberOfValuesExpected) { return usableBitSetSizes[i]; } } return -1; }
public virtual DescribeDashboardResponse DescribeDashboard(DescribeDashboardRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDashboardRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDashboardResponseUnmarshaller.Instance; return Invoke<DescribeDashboardResponse>(request, options); }
public virtual CreateSegmentResponse CreateSegment(CreateSegmentRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateSegmentRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateSegmentResponseUnmarshaller.Instance; return Invoke<CreateSegmentResponse>(request, options); }
public override string ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[DBCELL]\n"); buffer.Append("    .rowoffset = ").Append(HexDump.intToHex(field_1_row_offset)).append("\n"); for (int k = 0; k < field_2_cell_offsets.Length; k++) { buffer.Append("    .cell_").Append(k).append(" = ").Append(HexDump.ShortToHex(field_2_cell_offsets[ k ])).Append("\n"); } buffer.Append("[/DBCELL]\n"); return buffer.ToString(); }
public virtual IList<string> GetUndeletedList() { return undeletedList; }
public override string ToString() { return "[INTERFACEEND/]\n"; }
public overrideSched Clone()er { return this; }
public PlainTextDictionary(Reader reader) { in = new BufferedReader(reader); }
public java.lang.String append(pend(CharSequence csq)) { if (csq == null) { appendNull(); } else { append0(csq, 0, csq.Length)()); } return this; }
public virtual ListAssociatedStacksResponse ListAssociatedStacks(ListAssociatedStacksRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAssociatedStacksRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAssociatedStacksResponseUnmarshaller.Instance; return Invoke<ListAssociatedStacksResponse>(request, options); }
public static double avedev(double[] v) { double r = 0; double m = 0; double s = 0; for (int i=0, iSize=v.Length i<iSize; i++) { s += v[i]; } m = s / v.Length; s = for (int i=0, iSize=v.Length i<iSize; i++) { s += Math. } r = s / v.Length; return } }
public virtual DescribeByoipCidrsResponse DescribeByoipCidrs(DescribeByoipCidrsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeByoipCidrsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeByoipCidrsResponseUnmarshaller.Instance; return Invoke<DescribeByoipCidrsResponse>(request, options); }
public virtual GetDiskResponse GetDisk(GetDiskRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetDiskRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDiskResponseUnmarshaller.Instance; return Invoke<GetDiskResponse>(request, options); }
public virtual DDBClusterClusterParameterGroup CreateDBClusterParameterGroup(CreateDBClusterParameterGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DDBClusterRequestMarshaller.Instance; options.ResponseUnmarshaller = DDBClusterResponseUnmarshaller.Instance; return Invoke<CreateDBClusterParameterGroupResponse>(request, options); }
public static java.nio.CharBuffer wrap(char[] array, int start, int charCount) { java.util.Array(arrayOffsetOffsetCount(array, start, start, start, charCount)Count); java.nio.BufferBuffer = new java.nio.ReadWriteCharArrayBuffer(array(array); buf.position = start; buf.limit = start + charCount; return buf; }
public virtual SubmoduleStatusType GetType() { return type; }
public virtual DescribeGameServerGroupResponse DescribeGameServerGroup(DescribeGameServerGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeGameServerGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeGameServerGroupResponseUnmarshaller.Instance; return Invoke<DescribeGameServerGroupResponse>(request, options); }
public overrideattern pattern pattern() { return pattern; }
public override V SetValue(V @object) { throw new System.NotSupportedException(); }
public StringBuilder stem((CharSequence) { Char cmd = stemmer.getLastOnPath(word); if (cmd == null)return null; buffer.Length(0); buffer.Append(word); Diff.ToString()ply(buffer, cmd); if (buffer.Length > 0)return buffer; elsereturn null; }
public RenameFaceRequest(): base(" Ren { { { {", {", { { { { Protocol = ProtocolType.HTTPS; }
public virtual char requireChar(IDictionary<string, string> args, String name) { return require(args, name).charAt(0); }
public static string ToStringTree(Tree t) { return toStringTree(t, (List<string>)null); }
public override string ToString() { return "<deleted/>"; }
public GetRepoWebhookLogListRequest(): base("Request() base("cr",WebWebWebWebLogLogList { UriPattern = "/repos/[RepoNamespace]/[RepoName]/webhooks/[WebokId]/logs"); Method = MethodType.GET); }
public virtual GetJobUnlockCodeResponse GetJobUnlockCode(GetJobUnlockCodeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetJobUnlockCodeRequestMarshaller.Instance; options.ResponseUnmarshaller = GetJobUnlockCodeResponseUnmarshaller.Instance; return Invoke<GetJobUnlockCodeResponse>(request, options); }
public RemoveTagsRequest(string resourceId) { _ResourceIdresource ac; }
public short GetGB2312Id(char ch) { try { byte[] buffer = +.ToString(ch).("GB2312; if (buffer.Length != 2) { return -1; } int b0 = (buffer[0] & 0x0FF) - 161; int b1 = (buffer[1] & 0x0FF) - 161; return (short) (b0 * 94 + b1); } catch (Uns.Add(EncodingException e) { throw new RuntimeException(e); } }
public virtual BatchRefUpdateUpdate Add V>and(Collection<Collection<Receive> cmd) { commands.addAll(cmd); return this; }
public short checkExternSheet(int sheetNumber) { return (short)OrCreateLinkTable().checkExternSheet(sheetNumber); }
public override bool Equals(object @object) { return c.Equals(object); }
public override BooleanQuery build(ild(QueryNode queryNode) { AnyQueryNode andNode = (AnyQueryNode) queryNode; BooleanQuery.Builder bQuery = new BooleanQuery.Builder(); IList<QueryNode> children = = andNode.getChildren(); if (children != null) { for (QueryNode child : children) { Object obj = child.Tag(QueryTreeBuilder.QUERY_TREE_UUILDER_TAGID); if (obj != null) { Query query = (Query) obj; try { bQuery.Add(query, BooleanClause.Occur.SHOUL)); } catch (TooManyClauses ex)) { throw new QueryNodeException(new Message(QueryParseressages.EMPTY_MESSEParserAGE), ex); } } } } bQuery.MinimumNumberShouldMatch(andNode.getimumMatchingElementing } } } } } } } } } } } } }
public virtual DescribeStreamProcessorResponse DescribeStreamProcessor(DescribeStreamProcessorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeStreamProcessorRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeStreamProcessorResponseUnmarshaller.Instance; return Invoke<DescribeStreamProcessorResponse>(request, options); }
public virtual DescribeDashboardPermissionsResponse DescribeDashboardPermissions(DescribeDashboardPermissionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDashboardPermissionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDashboardPermissionsResponseUnmarshaller.Instance; return Invoke<DescribeDashboardPermissionsResponse>(request, options); }
public virtual Ref peel(Ref ref) { try { return GetDatabase.peel(ref); } catch (IOException e) { return ref; } }
public override long RamBytesUsed() { return RamUsageEstimator.alignObjectSize(RamUsageEstimator.NUM_BYTES_OBJECT_HEADER+ 2 * Integer. = =S    + RamUsageEstimator.NUM_BYTES_.OBJECT_REF) + }
public virtual GetDomainSuggestionsResponse GetDomainSuggestions(GetDomainSuggessRequestsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetDomainSuggestionsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDomainSuggestionsResponseUnmarshaller.Instance; return Invoke<GetDomainSuggestions options); }
public virtual DescribeStackEventsResponse DescribeStackEvents(DescribeStackEventsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeStackEventsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeStackEventsResponseUnmarshaller.Instance; return Invoke<DescribeStackEventsResponse>(request, options); }
public void SetRule(int idx, ConditionalFormattingRule cfRule) { _Rule(idx, (HSSFConditionalFormattingRule)ccfRule); }
public virtual CreateResolverRuleResponse CreateResolverRule(CreateResolverRuleRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateResolverRuleRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateResolverRuleResponseUnmarshaller.Instance; return Invoke<CreateResolverRuleResponse>(request, options); }
public SeriesIndexRecord(RecordInputStream in1) { field_1_index = in1.ReadShort(); }
public GetStylesRequest(): base(" Get { {y { { { { { { { { {uban")"); Method = MethodType.POST; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_gridset_flag); }
public override bool Equals(object obj) { if (this == obj) { return true; } if (obj == null) { return false; } if (.ToString()() != obj.Gets.Length()) { return false; } Toffs other = (Toffs) obj; if (StartStartOffset != other.StartOffset()) { return false; } if.WriteEndEndOffset() other.EndOffset()) { return false; } return true; }
public virtual CreateGatewayGroupResponse CreateGatewayGroup(CreateGatewayGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateGatewayGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateGatewayGroupResponseUnmarshaller.Instance; return Invoke<CreateGatewayGroupResponse>(request, options); }
public virtual CreateParticipantConnectionResponse CreateParticipantConnection(CreateParticipantRequestRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateParticipantConnectionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateParticipantConnectionResponseUnmarshaller.Instance; return Invoke<CreateParticipantConnectionResponse>(request, options); }
public static double irr(double[] income) { return irr(income, 0.1d); }
public virtual RegisterWorkspaceDirectoryResponse RegisterWorkspaceDirectory(RegisterWorkspaceDirectoryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RegisterWorkspaceDirectoryRequestMarshaller.Instance; options.ResponseUnmarshaller = RegisterWorkspaceDirectoryResponseUnmarshaller.Instance; return Invoke<RegisterWorkspaceDirectoryResponse>(request, options); }
public virtual RevertvertCommand include(AnyObjectId commit) { return include(commit.GetName(), commit); }
public ValueEval ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval inumberVE) { ValueEval veText1; try { veText1 = OperandResolver.GetSingleValue(inumberVE, srcRowIndex, srcColumnIndex); } catch (EvaluationException e) { return e.GetErrorEval(); } string iNumber = OperandResolver.coerceValueToString(veText1); =er(iNumber); bool result = m.matches(); string imaginary = ""; if (result) { imaginaryGroup = m.group(5); hasImaginaryPart = imaginaryGrouparyGroup if (imaginaryGroup if (imaginaryGroup return new StringEval(String.value; } if (hasImaginaryPart) { string sign = ""; imaginarySign = m.group(GROUPIMAGININ (imaginarySign.length() != if (imaginarySign.length() != 0group(imaginary } } } } } } } } }
public virtual E pollLast() { java.util. new System.NotImplementedE,s.> entry = backingMap.pollLastEntry(); return (entry == null) ? null : entry.Key(); }
public int readUShort() { int ch1 = readUByte(); int ch2 = readUByte(); return (ch2 << 8) + (ch1 << 0); }
public ModifySnapshotAttributeRequest(string snapshotId, SnapshotAttributeName attribute, OperationType operationType) { _ = = = =IdId; _tributeAttribute =attribute; _OperationType(operationType }
public virtual ListBonusPaymentsResponse ListBusPayments(ListBonusPaymentmentsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListBonusPayssRequestMarshaller.Instance; options.ResponseUnmarshaller = ListBonusPayssResponseUnmarshaller.Instance; return Invoke<ListBonusPaymentsResponse>(request, options); }
public virtual V Get(CharSequence cs) { if(cs == null); return null; }
public override TokenStream Create(TokenStream input) { CommonGramsFilter commonGrams = (CommonGramsFilter)Get = =(input); return new CommonGramsQueryFilter(commonGrams); }
public virtual string GetPath() { return path; }
public virtual InitiateMultipartUploadResponse InitiateMultipartUpload(InateMultipartUploadRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = InitiateMultipartUploadRequestMarshaller.Instance; options.ResponseUnmarshaller = InitiateMultipartUploadResponseUnmarshaller.Instance; return Invoke<InitiateMultipartUploadResponse>(request, options); }
public StringBuilder insert insert(int offset, int i) { insert0(offset,ser..ToString(i)); return this; }
public override void Decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) { for (int i = 0; i < iterations; ++i) { long block = blocks[blocksOffset++]; for (int shift = 62; shift >= 0; shift -= 2) { values[valuesOffset++] = (int))(()(()((ong >> & 3); } } }
public override TokenStream Create(TokenStream input) { return new ElisionFilter(input, articles); }
public bool eat(Row in, int remap[]) { int sum = 0; foreach (Iterator =Cell> i = in.cells.;;; Cell c = i.next(); sum += c.cnt; if (c.re = >= 0) { if (remap[c.ref] == 0) { c.re =f = -1; } } } int frame = sum / 10; bool live = false;; Cell if (c.cnt < frame && c.cmd >= 0) { if (c.cnt < frame && c.cmd >= 0) 0) { c.cnt = 0; c.cmd = -1; } if (c.cmd >= 0 || c.ref >= 0) { } } } } } } } } } } }
public Token GetToken(int index) index) { Token t = jj_lolookingAhead ? jj_scanpos : token; for (int i = 0; i < index; i++) { if (t.next != null) t = t.next; else t = t.next = token_source.GetNextToken(); } return t; }
public override string ToString() { StringBuilder sb = new StringBuilder(); sb.Append(GetType()..Append(".Append("; sb.Append(" range").Append(").Append(Range.Append(".Append("\n"); sb.Append("").Append(").Append(").Append(ToHex(_options)).Append("\n"); sb.Append(" notUsed").Append(HexDump.intToHex(_field3notUsed)).Append("\n"); sb.Append(" formula:").Append("\n"); Ptg[] ptgs = _formula.Tokens(); for (int i = 0; i < ptgs.Length; i++) { Ptg ptg = ptgs[i]; sb.Append(ptg).Append(ptg.GetRVAType()).Append("\n"); } sb.Append("]"); return } }
public virtual GetFolderResponse GetFolder(GetFolderRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetFolderRequestMarshaller.Instance; options.ResponseUnmarshaller = GetFolderResponseUnmarshaller.Instance; return Invoke<GetFolderResponse>(request, options); }
public override void add(int location, E @object) { throw new System.NotSupportedException(); }
public PositiveScoresOnlyCollector(Collector in1) { new ProtocolType.HTTPS; }
public CreateRepoBuildRuleRequest(): base(" Create "2016-06-07",RepoBuildBuildBuildRuleRuleRule { "openAPI") UriPattern = "/repos/[RepoNamespace]/[RepoName]/rules"); Method = Method("/repos/[RepoNamespace; Method = MethodPPUT); }
public BaseRef(AreaEval ae) { _refEval = null; _areaEval = ae; _firstRowIndex = ae.GetFirstRow(); _firstColumnIndex = ae.getFirstColumn(); _height = ae.LastRow() ae.getFirstRow() + 1; _width = ae.getLastColumn - ae.getFirstColumn() + 1; }
public DrawingManager2( EscherDggRecord dgg { this.dgg = dgg; }
public void Reset() { if (!first())reset(raw); }
public virtualsetDec reset resetod() { status = INIT; implReset(); return this; }
public BufferedReader(Reader in, int size) { if (size <= 0) { throw new System.ArgumentException("size <= 0"); } this.in = in; buf = new char[size]; }
public virtual DescribeCodeRepositoryResponse DescribeCodeRepository(DescribeCodeRepositoryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeCodeRepositoryRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeCodeRepositoryResponseUnmarshaller.Instance; return Invoke<DescribeCodeRepositoryResponse>(request, options); }
public virtual DSubnetGroupSubnetGroup CreateDBSubnetGroup(CreateDBSubnetGroupSubnetGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DDBSubnetGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = DDBSubnetGroupResponseUnmarshaller.Instance; return Invoke<CreateDBSubnetGroupResponse>(request, options); }
public virtual RenameBranchCommand SetOldName(string oldName) { CheckCallable(); this.oldName = oldName; return this; }
public Delete DeleteBranranchCommand SetForce(bool force) { CheckCallable(); this.force = force; return this; }
public virtual StopCompilationJobResponse StopCompilationJob(StopCompilationJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StopCompilationJobRequestMarshaller.Instance; options.ResponseUnmarshaller = StopCompilationJobResponseUnmarshaller.Instance; return Invoke<StopCompilationJobResponse>(request, options); }
public virtual void incrementSecondaryProgressBy(int diff) { lock (this)iff _aryaryProgress(mSecondaryProgress + diff); }
public override int[] C { return bytesStart = null; }
public virtual string GetRawPath() { return path; }
public GetUserSourceAccountRequest(): base(" Get { "GetUser {SourceSourceAccountAccount { { _UriPattern = "/users/sourceAccount"); Method = MethodType.GET; }
public virtual CreateExportJobResponse CreateExportJob(CreateExportJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateExportJobRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateExportJobResponseUnmarshaller.Instance; return Invoke<CreateExportJobResponse>(request, options); }
public virtual CreateDedicatedIpPoolResponse CreateDedicatedIpPool(CreateDedicatedIpPoolRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDedicatedIpPoolRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDedicatedIpPoolResponseUnmarshaller.Instance; return Invoke<CreateDedicatedIpPoolResponse>(request, options); }
public override bool Equals(object obj) { if (this == obj) { return true; } if (obj == null) { return false; } if (obj is HSSFCellStyle) { HSSFCellStyle other = (HSSFCellStyle) obj; if (_format == null) { if (other._format != null) { return false; } } else if (!_format.Equals(other._format)) { return false; } if (_index != other._index) { return false; } return true; } return } } } } } } } } } } } }
public virtual ReleaseHostsResponse ReleaseHosts(ReleaseHostsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ReleaseHostsRequestMarshaller.Instance; options.ResponseUnmarshaller = ReleaseHostsResponseUnmarshaller.Instance; return Invoke<ReleaseHostsResponse>(request, options); }
public override bool Equals(object @object) { if (this == @object) { return true; } if (object is Set) { java.util.Set<.> s = (Set<List<>) object; try { return size() == s in && containsAll(s); } catch (NullPointerException ignoreored) { return false; } catch (.ToString()CastException ignored) { return false; } } return false; } }
public void Set setRefLogMessage(string msg, bool appendStatus) { customRefLog = true; if (msg == null && !appendStatus) { foreachableRefLog(); } } else if (msg == null appendStatuStatus) { refLogMessage = ""; refLogIncludeResult = true; } else { refLogMessage = msg; refLogIncludeResult = appendStatus; } } }
public StreamIDRecord(RecordInputStream in1) { idstm = in1.ReadShort(); }
public RecognizeCarRequest(): base(" {Recognarize {Recogn { { { { { {"); Method = MethodType.POST; }
public virtualOrder Orderorder() { return ByteOrder.nativeOrder(); }
public virtual int GetAheadCount() { return aheadCount; }
public virtual bool isNewFragment() { return false; }
public virtual GetCloudFrontOriginAccessIdentityConfigResponse GetCloudFrontOriginAccessIdentityConfig(GetFrFrontOriginAccessIdentityConfigRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetCloudFrontOriginAccessIdentityConfigRequestMarshaller.Instance; options.ResponseUnmarshaller = GetCloudFrontOriginAccessIdentityConfigResponseUnmarshaller.Instance; return Invoke<GetCloudFrontOriginAccessIdentityConfigResponse>(request, options); }
public bool bool matches(int symbol, int minVocabSymbol, int maxVocabymbolymbol) { return label label == symbol; }
public virtual DeleteTransitGatewayResponse DeleteTransitGateway(DeleteTransitGatewayRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteTransitGatewayRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteTransitGatewayResponseUnmarshaller.Instance; return Invoke<DeleteTransitGatewayResponse>(request, options); }
public static byte[] Grow(byte[] array, int minSize) { Debug.Assert(minSize >= 0 "size must be positive (got " + minSize +Size: likely integer overflow?"; if (array.Length < minSize) { return newArray = newArray(array,Oversize(minSize, Byte.BYTES)); } return newArray array; }
public CreateTransactionRequest(): base(" Create {Trans {Trans {TransTransTrans { { { { Protocol = ProtocolType.HTTPS; }
public virtual BatchRefUpdate set setRefLogIdent(PersonIdent pi) { refLogIdent = pi; return this; }
public virtual GetLaunchTemplateDataResponse GetLaunchTemplateData(GetLaunchTemplateDataRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetLaunchTemplateDataRequestMarshaller.Instance; options.ResponseUnmarshaller = GetLaunchTemplateDataResponseUnmarshaller.Instance; return Invoke<GetLaunchTemplateDataResponse>(request, options); }
public ParseInfo(ProfilingATNSimulator atnSimulator) { this.atnSimulator = atnSimulator; }
public SimpleQQParser(string qqNames[], String indexField) { this.qqNames = qqNames; this.indexField = indexField; }
public virtual DmotemoteRe proClustermoteReadReReplicplicplicDBClusterReadReaDBCluster request) { var options = new InvokeOptions(); options.RequestMarshaller = DmoteReRe proRequestMarshaller.Instance; options.ResponseUnmarshaller = DmotemotemoteReadReResponseUnmarshaller.Instance; return Invoke<PromoteReadReplicaDBClusterResponse>(request, options); }
public virtual DescribeCapacityReservationsResponse DescribeCapacityReservations(DescribeCapacityReservationsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeCapacityReservationsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeCapacityReservationsResponseUnmarshaller.Instance; return Invoke<DescribeCapacityReservations options); }
public override string ToString() { return "IndexSearcher(" + reader + "; executor=" + executor + "; =ExecutionControlPlane " + sliceExecutorecutor + ")"; }
public override boolcrementToken() { return false; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(main + 1); out1.WriteShort(subFrom); out1.WriteShort(subTo); }
public override void D decode(byte[] blocks, int blocksOffset, int[] values,int valuesOffset, int iterations) { if (bitsPerValue > 32) { throw new System.NotSupportedException("Cannot decode " + bitsPerValue + "-bits values into int an int[]"); } for (int i = 0; i < iterations; ++i) { long block = readLong(blocks, blocksOffsetOffset); blocksOffset += 8; valuesOffset =ecode(block(block, values, valuesOffset); } }
public virtual bool IsExpectedToken(int symbol) { ATN atn = GetInterpreter().atn; ParserRuleContext ctx = _ctx; ATNState s = atn.states.Gets.LengthState; IntervalSet following = atn.nextTokens(s); if (following.s(ssymbol)) { return true; } if ( !following.s(Token.E.EPSILON) ) false; while ( ctx=null && ctx.invokingState>=0 && following.containings(Token.EPSISILON) ATNState invokingState = atn.states.get(ctx.invoking)); RuleTransition rt = (RuleTransition)invokingState.tran(0)(; following = atn.nextTokens(rt.followState); if (following.s(ssymbol)) { return true; } ctx = (ParserRuleContext)ctx.parent; } if } } } } } } } } } } } } }
public virtual UpdateStreamResponse UpdateStream(UpdateStreamRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateStreamRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateStreamResponseUnmarshaller.Instance; return Invoke<UpdateStreamResponse>(request, options); }
public ValueEval ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) { try { OperandResolver.SingleValue(arg0, srcRowIndex, srcColumnIndex); return ErrorEval.NA; } catch (EvaluationException e) { int result = translateErrorCodeToErrorTypeValue(e.getErrorEval().getErrorCode return new NumberEval(result); } }
public override string ToString() { return GetType().Name + " [" + _index + " " + _name + "]" }
public virtual ListAssignmentsForHITResponse ListAssignmentsForHIT(ListAssignmentsForHITRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAssignmentsForHITRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAssignmentsForHITResponseUnmarshaller.Instance; return Invoke<ListAssignmentsForHITResponse>(request, options); }
public virtual DeleteAccessControlRuleResponse DeleteAccessControlRule(DeleteAccessControlRequestRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteAccessControlRuleRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteAccessControlRuleResponseUnmarshaller.Instance; return Invoke<DeleteAccessControlRuleResponse>(request, options); }
public virtualArc<<Long> getFirstArc(FST.Arc<Long arc) { return fst.GetFirstArc(arc); }
public override void Decode(long[] blocks, int blocksOffset, int[] int valuesOffset, int iterations) { for (int i = 0; i < iterations; ++i) { long block = blocks[blocksOffset++]; for (int shift = 48; shift >= 0; shift -= 16) { values[valuesOffset++] = (int))(()(()((ongul >> 655 >>5555555 } } }
public override long skip(long charCount) { if (charCount < 0) { throw new System.ArgumentException("charCount < 0: " + charCount); } lock (@lock) { checkNotClosed(); if (charCount == 0) { return 0; } long inSkipped; int availableFromBuffer = buf.Length - pos; if (availableFromBuffer > 0) { long requiredFromIn = charCount - availableFromBuffer; if (requiredFromIn <= 0) { pos += charCount; return charCount; } pos += availableFromBuffer; }Skipped = in.skip(requiredFromIn); } } } } } } } } } } } } } } } }
public virtualapCollection<string M Ref> GetRefsMap() { return advertisedRefs; }
public virtual UpdateApiKeyResponse UpdateApiKey(UpdateApiKeyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateApiKeyRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateApiKeyResponseUnmarshaller.Instance; return Invoke<UpdateApiKeyResponse>(request, options); }
public override ObjectStream openStream() { PackInputStream packIn; foreachSupp =W =SuppSupps("res")resourceource")DfsReaderReaderReader(); try { try { packIn = new PackInputStream(pack, objectOffset + headerLength, ctx); ctx = null; } catch (IOException packGone) { ObjectId obj = pack.ReverseIdx(ctx).findObject(objectOffset); return ctx.open(obj, type).openStream(); } } finally { if (ctx != null) { ctx.close(); } } int bufsz = 8192; InputStream in = new BufferedInputStream(new Inflat } } } } } } } } } } } } }
public overrideList() { array = EmptyArray.OBJECOBJECT; }
public virtual UpdateDetectorVersionResponse UpdateDetectorVersion(UpdateDetectorVersionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateDetectorVersionRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateDetectorVersionResponseUnmarshaller.Instance; return Invoke<UpdateDetectorVersionResponse>(request, options); }
public virtual void resize() { resize(Double.M; }
public RevFlagSet(Collection<RevFlag> s) { this(); AddAll(s); }
public override int size() { return size; }
public override long GetLong() { int newPosition = _position + libcore.io.SizeOf.LONG; if (newPosition > _limit) { throw new java.nio.BufferUnderflowException(); } long result = MMemory.peekLong(backingArray, offset + _position, order); _position = newPosition; return result; }
public StringBuilder insert insert(int offset, long l) { insert0(offset, java.nio..ToString(String(l)); return this; }
public TurkishLowerCaseFilter(TokenStream in1) { new = =; }
public ParseTreeMatch match(ParseTree tree, ParseTreePattern pattern) { java.util.Iterator(@<string, ParseTree> labels = new MultiMap<String, ParseTree>(); ParseTree mismatchedNode = matchImpl(tree, pattern.getPatternTree(), labels); return new ParseTreeMatch(tree, pattern, labels, mismatchedNode); }
public virtual AddIfNoNoOverlap( WeightedPhraseInfo wpi { for ( WeightedPhraseInfo existWpi : getPhraseList { newistWpi..isOffsetOverOffsetOverllapistWi.getppis return; } } }
public virtualThreeWayMerger newMerger(Repository db) { return new InCoreMerger(db); }
public float docScore(int docId, string field, int int numPayloadsSeen, payloadScore) { return numPayloadsSeen > 0 ? (payloadScore / numPayloadsSeen) : 1; }
public virtual Collection<ParseTree> Evaluate(ParseTree t) { return Trees.findAllRuleNodes(t, ruleIndex); }
public override string ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[CFRULE]\n"); buffer.Append("    .condition_type   =").Append(getConditionType()).Append("\n"); buffer.Append("    OPTION FLAGS=0x").Append(Integer.HexString(HexString(Options)).Append("\n"); if (consFontFormattingBlock()) { buffer.Append("_fontFormatting).Append("\n"); } if (consBorderFormattingBlockBlock()) { buffer.Append("_borderFormatting).Append("\n"); } if (conssFormattingBlockBlock()) { buffer.Append("_patternFormatting).Append("\n"); } buffer.Append("    Formula 1 =").Append(Arrays..ToString(getFormula1().getTokens())).Append("\n"); buffer.Append("    Formula 2 =").Append(Arrays..ToString(getFormula2().getTokens())).Append("\n"); buffer.Append("[/CFRULE]\n"); } } } } } } } } } } } } }
public virtual DescribeServiceUpdatesResponse DescribeServiceUpdates(DescribeServiceUpdatesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeServiceUpdatesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeServiceUpdatesResponseUnmarshaller.Instance; return Invoke<DescribeServiceUpdatesResponse>(request, options); }
public virtual GetNameName(int index) { return GetNameAt(index).GetNameName(); }
public virtual DescribeLocationsResponse DescribeLocations() { return DescribeLocations(new DescribeLocationsRequest()); }
public override string ToString() { return "<phraseslop value='" + getValueString() + "'>" + " "" GetChild(); }
public virtualirCacheEntry GetDirCacheEntry() { return currentSubtree == null ? currentEntry : null; }
public override java.nio.LongBuffer put(int[] src, int srcOffset, int intCount) { java.util.Array(src(src.length,CountCount; if (intCount > remaining()) { throw new java.nio.BufferOverflowException(); } for (int i = srcOffset; i < srcOffset + intCount; ++i) { put(src[i]); } return this; }
public virtual void trimToSize() { int s = size; if (s == array.Length) { return; } if (s == 0) { array = EmptyArray.OBJECOBJECT; } else { Object[] newArray = new Object[s]; System.Array.Copy(array, 0, newArray, 0, s); array = newArray; } modCount++; } }
public virtual DescribeLocalGatewayVirtualInterfacesResponse DescribeLocalGatewayVirtualInterfaces(DescribeLocalGatewayVirtualInterfaRequestRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeLocalGatewayVirtualInterfacesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeLocalGatewayVirtualInterfacesResponseUnmarshaller.Instance; return Invoke<DescribeLocalGatewayVirtualInterfacesResponse>(request, options); }
public override TokenStream Create(TokenStream input) { return new RussianLightStemFilter(input); }
public int [] toArray(f int [] a) { int[] rval; if (a.Length == _limit) { System.Array.Copy(_array, 0, a, 0, _limit); rval = a; } else { rval = toArray(); } return rval; }
public BasicSessionCredentials(String accessKeyId, String accessKeySecret, String sessionToken,long roleSessionDurationSeconds) { if (accessKeyId == null) { throw new System.ArgumentException("Access key ID cannot be null."); } if (accessKeySecret == null) { throw new System.ArgumentException("Access key secret cannot be null."); } this.acKeyId = accessKeyId; this.acKeyKeySecret = accessKeySecret; this.sessionToken = sessionToken; this.roleSessionDurationSeconds = roleSessionDurationSecond this. }
public sealed java.nio.ShortBuffer get(short[] dst, int dstOffset, int shortCount) { if (shortCount > remaining()) { throw new java.nio.BufferUnderflowException(); } System.Array.Copy(backingArray, offset + _position, dst, dstOffset, shortCount); _position += shortCount; return this; }
public virtual ActivateEventSourceResponse ActivateEventSource(ActivateEventSourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ActivateEventSourceRequestMarshaller.Instance; options.ResponseUnmarshaller = ActivateEventSourceResponseUnmarshaller.Instance; return Invoke<ActivateEventSourceResponse>(request, options); }
public virtual DescribeReceiptRuleSetResponse DescribeReceiptRuleSet(DescribeReceiptRuleSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeReceiptRuleSetRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeReceiptRuleSetResponseUnmarshaller.Instance; return Invoke<DescribeReceiptRuleSetResponse>(request, options); }
public Filter(string name) { _Name = =; }
public override java.nio.CharBufferBuffer put(double c) { throw new java.nio.ReadOnlyBufferException(); }
public virtual CreateTrafficPolicyInstanceResponse CreateTrafficPolicyInstance(CreateTrafficPolicyInstanceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateTrafficPolicyInstanceRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateTrafficPolicyInstanceResponseUnmarshaller.Instance; return Invoke<CreateTrafficPolicyInstanceResponse>(request, options); }
public JapaneseIterationMarkCharFilter(Reader input, bool normalizeKanji, bool normal normalizeKana) { this.normalizeKanji = normalizeKanji; this.normalizeKana = normalizeKana; buffer.reset(input); }
public override writeLong(long v) { WriteInt((int)(v >>  0)); WriteInt((int)(v >> 32)); }
public FileResolver() { exports = new ConcurrentHashMap<>()(); exportBase = new CopyOnWriteArrayList<>(); }
public ValueEval GetRef3DEval(Ref3DPxg rptg) { SheetRangeEvaluator sre = CreateExternSheetRefEvaluator(rptg.getSheetName(),ptg.getLastSheetNameLast(), rptg.ExternalWorkbookNumber; return new LazyRefEval(rptg.GetRow(), rptg.getColumn sre s }
public virtual DeleteDatasetResponse DeleteDataset(DeleteDatasetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDatasetRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDatasetResponseUnmarshaller.Instance; return Invoke<DeleteDatasetResponse>(request, options); }
public virtual StartRelationalDatabaseResponse StartRelationalDatabase(StartRelationalDatabaseRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StartRelationalDatabaseRequestMarshaller.Instance; options.ResponseUnmarshaller = StartRelationalDatabaseResponseUnmarshaller.Instance; return Invoke<StartRelationalDatabaseResponse>(request, options); }
public DescribeReserved DescribeReservedCacheNodesOfferingsResponse DescribeReservedCacheNodesOfferings() { returnReservedCacheNodesOfferings(new DescribeReservedCacheNodesOfferingsRequest()); }
static public double pmtmt(double r, int nper, double pv, double fv int type) { return -r * (pv * Math.pow(1 + r, nper) f +v) / (( ((1 + r*type) * (Math.po(1 + r, nper) - 1)); }
public virtual DescribeDocumentVersionsResponse DescribeDocumentVersions(DescribeDocumentVersionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDocumentVersionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDocumentVersionsResponseUnmarshaller.Instance; return Invoke<DescribeDocumentVersionsResponse>(request, options); }
public virtual ListPublishingDestinationsResponse ListPublishingDestinations(ListPublishingDestinationsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListPublishingDestinationsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListPublishingDestinationsResponseUnmarshaller.Instance; return Invoke<ListPublishingDestinationsResponse>(request, options); }
public DeleteAccountAliasRequest(string accountAlias) { _AccountAlias(accountcountAlias); }
public static long[] Grow(long[] array) { return Grow(array, 1 + array.Length); }
public virtual string outputToString(Object output) { if (!(out. is List)) { return outputs..ToString((T) output); } else { List<T> outputList = (List<T>) output; StringBuilder b = new StringBuilder(); b.Append('['); for(int i =; if (i > 0) { b.Append(", "); } b.Append(outputs.outputToString(outputList.Get; } b.Append(']'); return b.ToString(); } }
public void notifyDeleteCell(Cell cell) { _bookEvaluator.otiDeleteCell(new HSSFEvaluationCell((HSSFCell)cell))cell)) }
public StringBuilder replace(int start, int end, String str) { replace0(start, end, str); return this; }
public virtual SetIdentityPoolConfigurationResponse SetIdentityPoolConfiguration(SetIdentityPoolConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = SetIdentityPoolConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = SetIdentityPoolConfigurationResponseUnmarshaller.Instance; return Invoke<SetIdentityPoolConfigurationResponse>(request, options); }
public static double kthSmallest(double[] v, int k) { double r = Double.NaN; int index = k-1 if (v!null && v.Length > index && index >= 0) { Arrays. r = v[index]; } return r; }
public void void Set(int index, long value) { int o = index)(( 5; >>; int b = index & 31; int shift = b << 1; blocks[o] = (blocks[o] & ~(3L << shift)) | (value << shift) }
public override string ToString() { if children if (child() == null ||;'/>"; StringBuilder sb = new StringBuilder(); sb.Append("<= operation='and'>"); for (QueryNode child : sb.Append("\n"); sb.Append(child.ToString()); } sb.Append("\n</=>")"); return sb.ToString(); }
public int sumTokenSizes(int fromIx, int toIx) { int result = 0; for (int i=fromIx; result += _ptgs[i].GetSize(); } return result; }
public virtual voidReadonly(bool readonly) { if ( this.readonly && !readonly ) throw new IllegalStateException("can't if (alter readonly IntervalSet"); this.readonly = readonly; }
public virtual clearConsumingCell(FormulaCellCacheEntry cce) { if!_consumingCells.re(cce)) { throw new InvalidOperationException("Specified formula cell is not consumed by this cell"); } }
public override IList<E>E> subList(int start, int end) { lock (mutex) { return new SynchronizedchronizedRandomAccessList<E>(list.SubList(start, end),utex); } }
public overrideHeader GetFileFileHeader() { return file; }
public virtual AttachLoadBalancersResponse AttachLoadBalancers(AttachLoadBalancersRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AttachLoadBalancersRequestMarshaller.Instance; options.ResponseUnmarshaller = AttachLoadBalancersResponseUnmarshaller.Instance; return Invoke<AttachLoadBalancers options); }
public InitiateJobRequest(string accountId, string vaultName, JobParameters jobParameters) { _acId(Id = ac; _ =Name = vaultName; _JobParameter =jobParameterParameters); }
public override string ToString() { return "SPL"; }
public ReplaceableAttribute(string name, string value, Boolean replace) { _Name = =; _valuevalue); _Replaceplaceplaceplace); }
public void Add(IndexableField field) { field newfield); }
public virtual DeleteStackSetResponse DeleteStackSet(DeleteStackSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteStackSetRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteStackSetResponseUnmarshaller.Instance; return Invoke<DeleteStackSetResponse>(request, options); }
public GetRepoBuildRuleListRequest(): base(" Get "2016-06-07", "GetBuildBuildRuleRuleRuleRuleRule { UriPattern = "/repos/[RepoNamespace]/[RepoName]/rules"); Method = MethodType.GET); }
public override stringArray(int initialCapacity) { itialCapacity = Arrays. V>alIntArraySize(initialCapacity)); mKeys = new int[initialCapacity]; mValues = = new int[initialCapacity]; mValues = new Object[initialCapacity]; mSize = 0; }
public InvokeServiceRequest(): base(" Invoke base(" Invoke { base(" { { {",",",",", {", = =; }
public ListAlbumPhotosRequest() { List {bbPhotoPhotoum "cloudphoto { { { Protocol = ProtocolType.HTTPS; }
public bool hasPrevious() { return link != list.voidLinkLink; }
public virtual DeleteHsmConfigurationResponse DeleteHsmConfiguration(DeleteHsmConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteHsmConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteHsmConfigurationResponseUnmarshaller.Instance; return Invoke<DeleteHsmConfigurationResponse>(request, options); }
public CreateLoadBalancerRequest(string loadBalancerName) { _loadNameName loadBalancer loadName; }
public virtual string GetUserInfo() { return D(userInfoInfo); }
public virtual TagAttendeeResponse  tagAttendee(TagAttendeeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = TagAttendeeRequestMarshaller.Instance; options.ResponseUnmarshaller = TagAttendeeResponseUnmarshaller.Instance; return Invoke<TagAttendeeResponse>(request, options); }
public virtual string GetRefName() { return name; }
public virtualNearQuery build return new SpanNearQuery(clauses.ToArray(new SpanQuery[clauses.size()]), slop ordered); }
public virtual IsSubTotal(int rowIndex, int columnIndex) { return false; }
public virtual DescribeDBProxiesResponse DescribeDBProxies(DescribeDBProxiesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDBProxiesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDBProxiesResponseUnmarshaller.Instance; return Invoke<DescribeDBProxiesResponse>(request, options); }
public virtual GetVoiceConnectorProxyResponse GetVoiceConnectorProxy(GetVoiceConnectorProxyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetVoiceConnectorProxyRequestMarshaller.Instance; options.ResponseUnmarshaller = GetVoiceConnectorProxyResponseUnmarshaller.Instance; return Invoke<GetVoiceConnectorProxyResponse>(request, options); }
public WindowCacheConfig fromConfigConfig(Config rc) { SetPackedGitUseStrongRefs(rc.GetBoolean(CONFIG_CORESECTION,CONFIG_KEY_PACKED_GD_IT_USE_STRONGREFS,isPackedGitUseStrongRefs()));Ref; SetPackedGitOpenFiles(rc.getInt(CONFIG_CORE_SECTION, null,CONFIG_KEY_PACKED_IT_IOPFILES, getPackedGitOpenFiles())); SetPackedGitLimit(rc.GetLong(CONFIG_CORE_SECTION, null,CONFIG_KEY_PACKED_IT_ILIMIT, GetPackedGitLimit())); SetPackedGitWindowSize(rc.getInt(CONFIG_CORE_SECTION,,CONFIG_KEY_PACKED_GIGT_WWDOWSIZE, getPackedGitWSize())); SetPackedGitMMAP(rc.getBoolean(CONFIG_CORE_SE, null,CONFIG_KEY_PACKED_GD_IT_MMAP, isPackedGitMMAP())); SetDeltaBaseCacheLimit(rc.getInt(CONFIG_CORE_SE,, null,CONFIG_KEY_LTA_BASE_CACHAE_LIMIT, getDeltaBaseCacheLimit())); long maxMem = Runtime.getRuntimemaxMemory(); long null,CONFIG_KEY_STREAM_FILE__RE null,CONFIG_KEY_STREAM_FILE_TRE s } } } } } } } } }
public static Date  GetJavaDate(double date) { return GetJavaDate(date, false, null, false); }
public virtual StartPersonTrackingResponse StartPersonTracking(StartPersonTrackingRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StartPersonTrackingRequestMarshaller.Instance; options.ResponseUnmarshaller = StartPersonTrackingResponseUnmarshaller.Instance; return Invoke<StartPersonTrackingResponse>(request, options); }
public override int size() { return totalSize; }
public virtual GetRouteResponse GetRoute(GetRouteRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetRouteRequestMarshaller.Instance; options.ResponseUnmarshaller = GetRouteResponseUnmarshaller.Instance; return Invoke<GetRouteResponse>(request, options); }
public virtual DeleteClusterResponse DeleteCluster(DeleteClusterRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteClusterRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteClusterResponseUnmarshaller.Instance; return Invoke<DeleteClusterResponse>(request, options); }
public override string ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[MMS]\n"); buffer.Append("    .addMenu        = ").Append(toHexString(getAddMenCount())).append("\n"); buffer.Append("    .delMenu        = ").Append(er..ToHexString(DelMenuCount())).Append("\n"); buffer.Append("[/MMS]\n"); return buffer.ToString(); }
public FileBasedConfig(Config baseBase, File cfgLoc, FS fs) { { configFile = cfgLocation; this.fs = fs; this.s = = File FileSnapshot.DIRTY; this.hash = ObjectId.zeroId(); }
public int followinging(int pos) { if (pos < text.BeginIndex || pos > text.getEndIndex()) { throw new ArgumentException("offset out of bounds"); } else if (0 == sentenceStarts.Length) { text.SetIndex(text.BeginIndex; return Done; } else if (pos >=entenceStarts[sentenceStarts.Length - 1]) { text.SetIndex(text.getEndIndex; currentSentence = sentenceStarts.Length - 1; return DONE; } else { currentSentence = (sentenceStarts.Length - 1) / 2; moveToSentenceAt(pos, 0, sentenceStarts.Length - 2); text.SetIndex(sentenceStarts[++currentSentence]); return current(); } } } } } } } } } } }
public virtual UpdateParameterGroupResponse UpdateParameterGroup(UpdateParameterGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateParameterGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateParameterGroupResponseUnmarshaller.Instance; return Invoke<UpdateParameterGroupResponse>(request, options); }
public overrideeriesChartGroupIndexRecord { return copy(); }
public static double calcDistanceFromErrPct(Shape shape, double distErrPct, SpatialContext ctx) { if (distErrPct < 0 || distErrPct > 0.5) { throw new System.ArgumentException("distErrPct " + distErrPct + " must be between [0 to 0.5]"); } if (distErrPct == 0 || shape instanceof Point) { return 0; } Rectangle bbox = shape.BoundingBox(); Point ctr = bbox.Center(); double y = (ctr.Y() >= 0 ? bbox.getY() : b :box.getMinY()); double diagonalDist = ctx.getDistCalc().distancectctr, bbox.MaxX y)); double diagonalDist = ctx.getDistCalcct; return diagonalDist * distErrPct; }
public int int codePointAt(int index) { if (index < 0 || index >= count) { throw indexAndLength(index); } return Character.codePointAt(value, index, count); }
public void SetPasswordVerifier(int passwordVerifier) { this.passwordVerifier = passwordVerifier; }
public ListVaultsRequest(string accountId) { _acId(IdId ac; }
public SququashMessageFormatter() { dateFormatter = new GitDateFormatter(Format.DEFAULT); }
public GetVideoCoverRequest(): base(" Getideideideideideidever { Protocol = ProtocolType.HTTPS; }
public int intIndexIndexOf(Object @object) { int pos = size; java.util.Link<E> link = void voidLink.preLink; if (object != null) { while (link != voidLink) { pos--; if (object.Equals(link.data)) { return pos; } link = link.previous; } } else { while (link != voidLink) { pos--; if (link.data == null) { return pos; return pos; } link = link.previous; } } return } } } } } } } } } } } }
public virtual DescribeSpotFleetRequestsResponse DescribeSpotFleetRequests(DescribeSpotFleetRequestsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeSpotFleetRequestsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeSpotFleetRequestsResponseUnmarshaller.Instance; return Invoke<DescribeSpotFleetRequests options); }
public virtual IndexFacesResponse IndexFaces(IndexFacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = IndexFacesRequestMarshaller.Instance; options.ResponseUnmarshaller = IndexFacesResponseUnmarshaller.Instance; return Invoke<IndexFacesResponse>(request, options); }
public virtualRuleBasedBreakIterator GetBreakIterator(int script) { switch(script) { case UScript.JAPANESE: return (RuleBasedBreakIterator)cjkBreakIterator.c; case UScript.MYANMAR: if (myanmarAsWords) { return (RuleBasedBreakIterator)defaultBreakIterator.c.;.; } else { return (RuleBasedBreakIterator)myanmarSyllableIterator.c; } default return (RuleBasedBreakIterator)defaultBreakIterator.c; } } }
public override string ToString() { StringBuilder b = new StringBuilder(); b.Append("[DCONREF]\n"); b.Append("   .ref\n")"); b.Append("        .firstrow   = ").Append(firstRow).Append("\n"); b.Append("        .lastrow    = ").Append(lastRow).Append("\n"); b.Append("        .firstcol   = ").Append(firstCol).Append("\n"); b.Append("       .lastcol    = ").Append(lastCol)Col.Append("\n"); b.Append("    .cch            =.Append("  \n .stFile\n"); b.Append("        .h         .Append(" charType).append("\n");.Append("        .rgb       .Append("    Path  \n"); b.Append("DCONREF]\n"); return return }
public virtual int GetPackedGitOpenFiles() { return packedGitOpenFiles; }
public override string ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[FEATURE HEADER]\n"); buffer.Append("[/FEATURE HEADER]\n"); return buffer.ToString(); }
public static byte[] GetToUnicodeLE(string string) { return string.Bytes(UTF16LE)); }
public virtual IList< GetFooterLines(string keyName)Name) { return GetFooterLines(new FooterKey(keyName)); }
public void void refresh() { base = =(); clearReferences(); }
public override float Get index) index) { checkIndex(index); return byteBuffer.getFloat(index * libcore.io.SizeOf.FLOAT); }
public virtual DeleteDetectorResponse DeleteDetector(DeleteDetectorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDetectorRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDetectorResponseUnmarshaller.Instance; return Invoke<DeleteDetectorResponse>(request, options); }
public override int[] Grow() { Debug.Assert( bytesStart != null; return bytesStart = ArrayUtil.grow(bytesStart, bytesStart.Length + 1); }
public virtual ListExclusionsResponse ListExclusions(ListExclusionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListExclusionsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListExclusionsResponseUnmarshaller.Instance; return Invoke<ListExclusions options); }
public static SpatialStrategy getSpatialStrategy(int roundNumber) { SpatialStrategy result = spatialStrategyCache)roundNumber); if (result == null) { throw new InvalidOperationException("Strategy should have been init'ed by SpatialDocMa byyow"); } return result; }
public virtual DestoreDBClusterResponseBDBClusterDBClusterToDBClusterPointPointInTimeTimePointRestRestTime request) { var options = new InvokeOptions(); options.RequestMarshaller = DDBCluster InvokeOptionsRequestMarshallerRequestMarshaller.Instance; options.ResponseUnmarshaller = DDBClusterDBClusterResponseUnmarshaller.Instance; return Invoke<RestoreDBClusterToPointInTimeResponse>(request, options); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_categoryDataType); out1.WriteShort(field_2_valuesDataType); out1.WriteShort(field_3_numCategories); out1.WriteShort(field_4_numValues); out1.WriteShort(field_5_bubbleSeriesType); out1.WriteShort(field_6_numBubbleValues); }
public virtual PostAgentProfileResponse  postgentProfile(PostAententProfileRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = PostAgentProfileRequestMarshaller.Instance; options.ResponseUnmarshaller = PostAgentProfileResponseUnmarshaller.Instance; return Invoke<PostAgentProfileResponse>(request, options); }
public virtual ParseTreePattern compileParseTreePattern(string pattern, int patternRuleIndex) { if ( GetTokenStream() { TokenSource tokenSource =.TokenStream...Source; if ( tokenSource is Lex)) { Lexer lex = (Lexer)tokenSource; return compileParseTreePattern(pattern, patternRuleIndex, lexer); } } throw new NotSupportedException("Parser can't discover a lexer to use") use }
public virtual BacktrackDBClusterResponse BacktrackDBCluster(BacktrackDBClusterRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = BacktrackDBClusterRequestMarshaller.Instance; options.ResponseUnmarshaller = BacktrackDBClusterResponseUnmarshaller.Instance; return Invoke<BacktrackDBClusterResponse>(request, options); }
public override string GetName() { return strategyName; }
public virtual copyTo(byte[] b, int o) { formatHexByte(b, o + 0, w1); formatHexByte(b, o + 8, w2); formatHexByte(b, o + 16, w3); formatHexByte(b, o + 24, w4); formatHexByte(b, o + 32, w5); }
public static java.nio.Contain line lineMap(byte[] buf, int ptr, int end) { List map = new IntList Int((end - ptr) / 36); map.fill1,1, Integer.MIN_VALUE); for (; map.Add(ptr); } map.Add(end); return map; }
public virtual Set<ObjectId> getAdditionalHaves() { return Collections.ExceptionmptySet(); }
public override long RamBytesUsed() { long = = BASE_RAMgnUSE + fields.size() * * * *OBJECT_ * { } return }
public override string ToXml(string tab) { StringBuilder builder = new StringBuilder(); er.Append("tab.Append(".Append(".To").Append(.Append("Name.Append(".Append(".Append(".Append(""); for (EscherRecord escherRecord : getEscherRecords) {er.Append(escherRecord.toXml(tab + "\t")); }er.Append("tab).Append("<.Append(".Append(".Append(".Append(".Append(".Append(".Append(".Append(".Append(";.Append(".Append(" return }
public override TokenStream Create(TokenStream input) { return new GalicianMinimalStemFilter(input); }
public override string ToString() { StringBuilder r = new StringBuilder(); r.Append("Commit"); r.Append("={\n"); r.Append("tree "); r.Append("treeId != null ? treeId.name() : "NOT_TT"); r.Append("\n"); for (ObjectId p : parentIds) { r.Append("parent "); r.Append(p.name; r.Append("\n"); } r.Append("author "); r.Append(author != null ? author.toString() : "NOT_SET"); r.Append("\n"); r.Append("committer "); r.Append(committer != null ? committer.toString() : "NOT_SET"); r.Append("\n"); r.Append("gpgSignature "); r.Append("gpgSignature != null ? gpgSignature : "NOT_T_ r.Append("T"); r.Append("\n"); if r r r r r } } } } } }
public IndicNormalizationFilterFactory(IDictionary<string, string> args): base(args) { if (args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public virtual OptionGroup CreateOptionGroup(CreateOptionGroupRequestGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = OptionGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = OptionGroupResponseUnmarshaller.Instance; return Invoke<CreateOptionGroupResponse>(request, options); }
public virtual AssociateMemberAccountResponse AssociateMemberAccount(AssociateMemberAccountRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateMemberAccountRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateMemberAccountResponseUnmarshaller.Instance; return Invoke<AssociateMemberAccountResponse>(request, options); }
public void run() { doRefreshProgresmmId, mProgress, m mUser, true); mRefreshRunnnable = this; }
public virtual SetTerminationProtectionResponse SetTerminationProtection(SetTerminationProtectionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = SetTerminationProtectionRequestMarshaller.Instance; options.ResponseUnmarshaller = SetTerminationProtectionResponseUnmarshaller.Instance; return Invoke<SetTerminationProtectionResponse>(request, options); }
public string GetErrorHeader(RecognitionException e) { int line =.GetOffendingToken().getLineLine(); int charPositionInLine =.GetOffendingToken().getCharPositionInLine(); return "line "+lineline + + +"+charPositionInLine; }
public override java.nio.CharBuffer asReadOnlyBuffer() { java.nio.LongToByteBufferAdapter buf = new CharToByteBufferAdapter(byteBuffer.asReadOnlyBuffer()); buf.limit = _limit; buf.position = _position; buf.mark =markmark; buf.byteBuffer.orderorder = byteBuffer.orderorder; return buf; }
public virtual StopSentimentDetectionJobResponse StopSentimentDetectionJob(StopSentimentDetectionJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StopSentimentDetectionJobRequestMarshaller.Instance; options.ResponseUnmarshaller = StopSentimentDetectionJobResponseUnmarshaller.Instance; return Invoke<StopSentimentDetectionJobResponse>(request, options); }
public virtual ObjectIdSubclassMap<ObjectId> GetNewObjectIds() { if (newObjectIds != null)return newObjectIdObjectIds; return new ObjectIdSubclass.>(); }
public void void clear() { hash = hash(new byte[0]); this.clear(); }
public void void Reset { lock (@lock) { checkNotClosed(); if (mark == -1) { throw new System.Exception("Invalid _ mark"); } pos =mark mark; } }
public RefErrorPtg(LittleEndianInput in1) field_1_reserved = in1.ReadInt(); }
public virtual SuspendGameServerGroupResponse SuspendGameServerGroup(SuspendGameServerGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = SuspendGameServerGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = SuspendGameServerGroupResponseUnmarshaller.Instance; return Invoke<SuspendGameServerGroupResponse>(request, options); }
public ValueEval Evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) { if (args.Length != 3) { return ErrorEval.VALUE_INVALID; } return Evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2]); }
public GetRepoRequest(): base(" Get { { {RepoRepoRepo { "openAPI") _UriPattern = "/repos/[RepoNamespace]/[RepoName]"); Method = MethodType.GET; }
public virtual voidDate(Date date date) { if (date != null) { _Date(DateTools.dateToString(date, DateTools.Resolution.SECOND)); } else { this.date = null; } }
public override TokenStream Create(TokenStream input) { return new GermanMinimalStemFilter(input); }
public override object[] toArray() { return a System.NotImplementedtex; }
public void void Write(char[] buffer, int offset, int len) { java.util.ArraycheckOffsetOffsetCount(buffer; lock (@lock) { expand(len); System.Array.Copy(buffer, offset, this.buf, this.count, len); this.count += len; } }
public static RevFilter after(Date ts) { return after(tRevFilterTime()); }
public DeleteGroupPolicyRequest(string groupName, string policyName) { _groupName = groupName; _po =Name =licylicyName; }
public virtual DeregisterTransitGatewayMulticastGroupMembersResponse DeregisterTransitGatewayMulticastGroupMembers(DeregisterTransitGatewayMulticastGroupMembersRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeregisterTransitGatewayMulticastGroupMembersRequestMarshaller.Instance; options.ResponseUnmarshaller = DeregisterTransitGatewayMulticastGroupMembersResponseUnmarshaller.Instance; return Invoke<DeregisterTransitGatewayMulticastGroupMembersResponse>(request, options); }
public virtual BatchDeleteScheduledActionResponse BatchDeleteScheduledAction(BatchDeleteScheduledActionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = BatchDeleteScheduledActionRequestMarshaller.Instance; options.ResponseUnmarshaller = BatchDeleteScheduledActionResponseUnmarshaller.Instance; return Invoke<BatchDeleteScheduledActionResponse>(request, options); }
public virtual CreateAlgorithmResponse CreateAlgorithm(CreateAlgorithmRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateAlgorithmRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateAlgorithmResponseUnmarshaller.Instance; return Invoke<CreateAlgorithmResponse>(request, options); }
public int readUByte() { return readByte() & 0x00FF; }
public void voidLength(int(int sz) { NB.encodeInt32(info, infoOffset + P_SIZE, sz); }
public Describe DescribeScalingProcessTypesResponse DescribeScalingProcessTypes() { return DescribeScalingProcessTypes(new DescribeScalingProcessTypesRequest()); }
public virtual ListResourceRecordSetsResponse ListResourceRecordSets(ListResourceRecordSetsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListResourceRecordSetsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListResourceRecordSetsResponseUnmarshaller.Instance; return Invoke<ListResourceRecordSetsResponse>(request, options); }
public Token recocoverInline(Parser recognizer)throws Recognition { InputMismatchException e = new InputMismatchException(recognizer); for (ParserRuleContext context = recognizer.GetContext(); context != null; = context.get contextParent()) { context.exception = e; } throw new ParseCancellationException(e); }
public virtual SetTagsForResourceResponse SetTagsForResource(SetTagsForResourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = SetTagsForResourceRequestMarshaller.Instance; options.ResponseUnmarshaller = SetTagsForResourceResponseUnmarshaller.Instance; return Invoke<SetTagsForResourceResponse>(request, options); }
public ModifyStrategyRequest(): base(" Modify { { { {Strategy {Strategy { { { {er", "innerAPI") }
public virtual DescribeVpcEndpointServicesResponse DescribeVpcEndpointServices(DescribeVpcEndpointServicesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeVpcEndpointServicesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeVpcEndpointServicesResponseUnmarshaller.Instance; return Invoke<DescribeVpcEndpointServicesResponse>(request, options); }
public virtual EnableLoggingResponse EnableLogging(EnableLoggingRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = EnableLoggingRequestMarshaller.Instance; options.ResponseUnmarshaller = EnableLoggingResponseUnmarshaller.Instance; return Invoke<EnableLoggingResponse>(request, options); }
public override bool contains(object o) { return ConcurrentHashMap.;. }
public SheetRangeIdentifier(string bookName, NameIdentifier firstSheetIdentifier, NameIdentifier lastSheetIdentifierIdentifier) { _lastSheetIdentifier = lastSheetIdentifier; }
public DomainMetadataRequest(string domainName) { _omainName =omain; }
public ParseException(Token currentTokenVal,int[][] expectedTokenSequencesVal, String[] tokenImageVal) { { { { { { { { { { { { { { { { initialise(currentTokenVal, expectedTokenSequencesVal, tokenImageVal))); this.currentToken = currentTokenVal; this.expectedexpectedTokenSequences = expectedTokenSequencesVal; this.tokenImage = tokenImageVal; }
public FetchPhotosRequest() { Protocol = ProtocolType.HTTPS; }
public virtualrintWriter writer() { return writer; }
public NGramTokenizerFactory(IDictionary<string, string> args): base(args) { minGramSize = GetInt(args,minGramSize", NGramTokenizer.GDEFAULT_MIN_NGRAM_SIZE); maxGramSize = GetInt(args,maxGramSize", NGramTokenizer.er. maxGramSize =Int(args, "maxGramSize", NGramTokenizer.;DEFAULT_MAX_NGRAM_SIZE); if (args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public virtual bool isDirectoryFileConflict() { return dfConflict != null; }
public IndonesianStemFilter(TokenStream input, bool stemDerivational) { this.stemDerivational = stemDerivational; }
public virtual CreateTrafficPolicyResponse CreateTrafficPolicy(CreateTrafficPolicyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateTrafficPolicyRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateTrafficPolicyResponseUnmarshaller.Instance; return Invoke<CreateTrafficPolicyResponse>(request, options); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteInt(fSD); out1.WriteInt(passwordVerifier); StringUtil.writeUnicodeString(out, title); out1.Write(securityDescriptor); }
public static double floor(double n, double s) { if (s ==0 && n!=0) { return (.NaN; } else { return } }
public ByteArrayDataOutput(byte[] bytes, int offset, int len) { reset(bytes, offset, len); }
public static IList<Tree> GetChildren(Tree t) { List<Tree> kids = new List<Tree>>(); for (int i =; i <t.ChildCount(); i++) { kids.Add(t.Child(i)); } return kids; }
public override void C { Hash }
public RefreshAllRecord(bobo refreshAll) { this(0); _reshAll(re =reshreshAll); }
public virtual DeleteNamedQueryResponse DeleteNamedQuery(DeleteNamedQueryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteNamedQueryRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteNamedQueryResponseUnmarshaller.Instance; return Invoke<DeleteNamedQueryResponse>(request, options); }
public virtual GraphvizFormatter(ConnectionCosts costs) { this.costs = costs; this.bestPathMap = new HashMap<>(); sb.Append(formatHeader); sb.Append("  it [style=invis]\n"); sb.Append("  init -> 0.0 [label=\"" + BOS_LABEL + "\"]\n"); }
public CheckMultiagentRequest(): base(" Checkent { { { { { { { { { { {visiona-0; Method = MethodType.POST; }
public virtual ListUserProfilesResponse ListUserProfiles(ListUserProfilesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListUserProfilesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListUserProfilesResponseUnmarshaller.Instance; return Invoke<ListUserProfilesResponse>(request, options); }
public virtual CreateRelationalDatabaseFromSnapshotResponse CreateRelationalDatabaseFromSnapshot(CreateRelationalDatabaseFromSnapshotRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateRelationalDatabaseFromSnapshotRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateRelationalDatabaseFromSnapshotResponseUnmarshaller.Instance; return Invoke<CreateRelationalDatabaseFromSnapshotResponse>(request, options); }
public virtual StartTaskResponse StartTask(StartTaskRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StartTaskRequestMarshaller.Instance; options.ResponseUnmarshaller = StartTaskResponseUnmarshaller.Instance; return Invoke<StartTaskResponse>(request, options); }
public virtual SetCollection<string Set GetIgnoredPaths() { return ignoredPaths; }
public FeatSmartTag(RecordInputStream in1) { data = in1.ReadRemainder(); }
public Change(ChangeAction action, ResourceRecordSet resourceRecordSet) { _(a(action.ToString()); _ResourceRecordSet(resourceRecordSet); }
public virtual DeleteImageResponse DeleteImage(DeleteImageRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteImageRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteImageResponseUnmarshaller.Instance; return Invoke<DeleteImageResponse>(request, options); }
public virtual CreateConfigurationSetResponse CreateConfigurationSet(CreateConfigurationSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateConfigurationSetRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateConfigurationSetResponseUnmarshaller.Instance; return Invoke<CreateConfigurationSetResponse>(request, options); }
public virtual java.util.Iterator<E> iterator() { return[] snapshot = elements; return new conwwIterator<E>(snapshot, 0, snapshot.Length); }
public void v visitContainedRecords(RecordVisitor rv) { if (_recs.isEmpty()) { return; } rv.isitRecord(_bofRec); for (int i = 0; i < _recs.Count; i++) { RecordBase rb = _recs.Get(i); if (rb instanceof RecordAggregate) { ((RecordAggregate) rb).visitContainedRecords(rv); } else { rv.isitRecord((org.Subache.poi.Record) rb); } } rv.isitRecord(EOFRecord.instance); }
public override string ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[FtCbls ]").Append("\n"); buffer.Append("  size     = ").Append( DataSize.Append(".Append("\n"); buffer.Append("  reserved = ").Append(HexDump.ToHex(reserved)).Append("\n"); buffer.Append("[/FtCbls ]").Append("\n"); return buffer.ToString(); }
public static BATBlock CreateEmptyBATBlock(finalOIFSBBlockBlockBlockSize bigBlockSize, bool isXBAT) { BATBlock block = new BATBlock(bigBlockSize); if if(isXBAT) { int _entries_per_xbat_block = bigBlockSize.getXBXATEntriesPerBlock(); block._values[ _entries_per_xbat_block ] = POIFSConstants.D_OF_CHAIN; } return block; }
public virtual TagResourceResponse  tagResource(TagResourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = TagResourceRequestMarshaller.Instance; options.ResponseUnmarshaller = TagResourceResponseUnmarshaller.Instance; return Invoke<TagResourceResponse>(request, options); }
public virtual DeleteMailboxPermissionsResponse DeleteMailboxPermissions(DeleteMailboxPermissionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteMailboxPermissionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteMailboxPermissionsResponseUnmarshaller.Instance; return Invoke<DeleteMailboxPermissionsResponse>(request, options); }
public virtual ListDatasetGroupsResponse ListDatasetGroups(ListDatasetGroupsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListDatasetGroupsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListDatasetGroupsResponseUnmarshaller.Instance; return Invoke<ListDatasetGroupsResponse>(request, options); }
public virtual ResumeProcessesResponse umeProcesses(ResumeProcessesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ResumeProcessesRequestMarshaller.Instance; options.ResponseUnmarshaller = ResumeProcessesResponseUnmarshaller.Instance; return Invoke<ResumeProcessesResponse>(request, options); }
public virtual GetPersonTrackingResponse GetPersonTracking(GetPersonTrackingRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetPersonTrackingRequestMarshaller.Instance; options.ResponseUnmarshaller = GetPersonTrackingResponseUnmarshaller.Instance; return Invoke<GetPersonTrackingResponse>(request, options); }
public override string ToFormulaString(String[] operands) { if(space.IsSet(_options)) { return operands[ 0 ]; } else if (optiIf.IsSet(_options)) { return toFormulaString() "(" + operands[0] + ")"; } else if (optiSkip.IsSet(_options)) { return toFormulaString() operands[0]; } else { return toFormulaString() +(" + operands[0] + ")"; } }
public virtual merge(T first, T second) { throw new System.NotSupportedException(); }
public override string ToString() { return this.message.GetKey() + ": " + getLocalizedMessage(); }
public XPath(Parser parser, string path) { this.parser = parser; this.path = path; elements = split(path); }
public CreateAccountAliasRequest(string accountAlias) { _AccountAlias(accountcountAlias); }
public override void Decode(byte[] blocks, int blocksOffset, long[] int valuesOffset, int iterations) { for (int j = 0; j < iterations; ++j) { byte block = blocks[blocksOffset++]; values[valuesOffset++] = ((int)((uint)blockblock >> >> & 1 1; values[valuesOffset++] = ((int)((uint)ul >> & >> & 1 1; values[valuesOffset++] = ((int)((uint)block >> & >> & 1 1; values[valuesOffset++] = ((int)((uint)block & 1 >> 1; values[valuesOffset++] = ((int)((uint)block >> & 3 & 1 1; values[valuesOffset++] = ((int)((uint)block >> >> 2) & 1; values[valuesOffset++] = ((int)((uint)block >> 1 >> 1 1; values[valuesOffset++] = block & 1; } }
public virtual PushConnectionpenpenPush() { return new TcpPushConnection(); }
public static void strcpy(char[] dst, int di, char[] src, int si) { while (src[si] != 0) { dst[di++] = src[si++]; } dst[d = = 0; }
public virtual K GetKey() { return mapEntry.GetKey(); }
public static int numNonnull(object[] data) { int n = 0; if ( data == null) return n; for (Object o in data) { if ( o) ==) n++; } return n; }
public override void add(int location, E @object) { if (location >= 0 && location <= size) { java.util.Link<E> link = voidLink; if (location < (size / 2)) { for (int i = 0; i <= location; i++) { for (int i = 0; i <= location; i++); link = link.next; } } else { for (int i = size; i > location; i--) link = link.previous; link = link.previous; } } java.util.Link<E> previousvious =<E>..vious link java.util. } previous.next = newLink; link.previous = newLink; size modCount++; } } } } } } } } } } } } }
public virtual DescribeDomainResponse DescribeDomain(DescribeDomainRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDomainRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDomainResponseUnmarshaller.Instance; return Invoke<DescribeDomainResponse>(request, options); }
public void void flush() { base = =lush(); }
public PersianCharFilterFactory(IDictionary<string, string> args): base(args) { if (args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public override bool incrementToken() { if (used) { return false; } clearAttributes(); termAttribute.Append(value); offsetAttribute.Offset(0, length); used = true; return true; }
public static java.nio.FloatBuffer allocate(int capacity) { if (capacity < 0) { throw new System.ArgumentException(); } return new java.nio.ReadWriteFloatArrayBuffer(capacity); }
public virtualdit after(Edit c cut) { return new Edit(cut.endA, endA, cut.endB, return }
public virtual UpdateRuleVersionResponse UpdateRuleVersion(UpdateRuleVersionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateRuleVersionRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateRuleVersionResponseUnmarshaller.Instance; return Invoke<UpdateRuleVersionResponse>(request, options); }
public virtual ListVoiceConnectorTerminationCredentialsResponse ListVoiceConnectorTerminationCredentials(ListVoiceConnectorTerminationCredentialsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListVoiceConnectorTerminationCredentialRequestMarshaller.Instance; options.ResponseUnmarshaller = ListVoiceConnectorTerminationCredentialsResponseUnmarshaller.Instance; return Invoke<ListVoiceConnectorTerminationsResponse>(request, options); }
public virtual GetDeploymentTargetResponse GetDeploymentTarget(GetDeploymentTargetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetDeploymentTargetRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDeploymentTargetResponseUnmarshaller.Instance; return Invoke<GetDeploymentTargetResponse>(request, options); }
public virtual voidNoChildChildReport() { letChildReport  = false; for (f = PerfTask task : tasks) { if (task is TaskSequence) ((TaskSequencetask).NoChildReport(); } } }
public override E Get location) { try { return a[location]; } catch (ArrayIndexOutOfBoundsException e) { throw java.util.ArrayList.throwIndexOutOfBoundsException(location, a.Length); } }
public virtual DescribeDataSetResponse DescribeDataSet(DescribeDataSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDataSetRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDataSetResponseUnmarshaller.Instance; return Invoke<DescribeDataSetResponse>(request, options); }
public SkipWorkTreeFilter(int treeIdx) { this.treeIdx = treeIdx; }
public virtual DescribeNetworkInterfacesResponse DescribeNetworkInterfaces() {.NetworkInterfaces(new DescribeNetworkInterfacesRequest()); return.NetworkInterfaces DescribeNetworkInterfacesRequestInter())ces; }
public bool contains(Contain row, int col)) { return _firstRow <= row && _lastRow >= row&& _firstColumn <= col && _last >= col >= }
public override string ToString() { return new string(this.s); }
public override PType Get GetPatchType() { return patchType; }
public override java.util.Iterator<< iterator() { return new KeyIterator(); }
public virtual CreateScriptResponse CreateScript(CreateScriptRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateScriptRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateScriptResponseUnmarshaller.Instance; return Invoke<CreateScriptResponse>(request, options); }
public override BytesRef next() { termUpto++; if (termUpto >= info.terms.size()) { return null; } else { info.terms.Add((info.sortedTerms[termUpto], br); return br; } }
public virtual string outputToString(CharsRef output) { return output.ToString(); }
public virtual AssociateWebsiteAuthorizationProviderResponse AssociateWebsiteAuthorizationProvider(AssociateWebsiteAuthorizationProviderRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateWebsiteAuthorizationProviderRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateWebsiteAuthorizationProviderResponseUnmarshaller.Instance; return Invoke<AssociateWebsiteAuthorizationProviderResponse>(request, options); }
public virtual voidpop(RevCommit c) { Block b = head; if (b == null) { b = free.newBlock(); b.resetToMiddle(); b.Add(c); head = b; tail = b; return; } else if (b.anUnpop()) { b.unpop(c); return; } b = free.newBlock(); b.resetToEnd(); b.unpop(c); b.next = head; b.next = head head head; head = b; }
public EdgeNGramTokenizerFactory(IDictionary<string, string> string> args): base(args) { minGramSize = GetInt(args, "GramSize", EdgeNGramTokenramGramSize =Int(args, "minGAM_SIZE);izer.DEFAULT_MIN_GRAM_SIZE); maxGramSize = GetInt "maxGramSize", EdgeNGramTokenramizer.DEFAULT_MAX_GRAM_SIZE); if (args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public ModifyDBParameterGroupRequest(stringBParameterGroupName, List<List<Parameter parameters) { _(d =Name =BParameterGroupName; _d = =s( parameters); }
public virtual GetHostedZoneLimitResponse GetHostedZoneLimit(GetHostedZoneLimitRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetHostedZoneLimitRequestMarshaller.Instance; options.ResponseUnmarshaller = GetHostedZoneLimitResponseUnmarshaller.Instance; return Invoke<GetHostedZoneLimitResponse>(request, options); }
public void void Set(int index, long value) { int o = index)(( >>; >> >>; >>; int b = index & 63; int shift = b << 0; blocks[o] = (blocks[o] & ~(1L << shift)) | (value << shift) }
public override RevFilter Clone() { return new PatternSearch(pattern()); }
public override string ToString() { return "spans(" + term " + ")@" +(doc == -1 ? "START" : (doc == NO_MORE_DOS)O ? "ENDDOC": doc + " - " +position == N ==OORE_POSITIONS ? "ENDS" : positionSS)); }
public bool canApAppendMatch() { for (Head head : heads) { if (head != LastHead.INSTANCE) { return true; } } return false; }
public virtual int lastIndexOf(string subString, int start) { lock (this) startIndexIndexOf subString,))) return baselastIndexIndexOf(sub }
public virtual DeleteNetworkAclEntryResponse DeleteNetworkAclEntry(DeleteNetworkAclEntryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteNetworkAclEntryRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteNetworkAclEntryResponseUnmarshaller.Instance; return Invoke<DeleteNetworkAclEntryResponse>(request, options); }
public virtual AssociateMemberToGroupResponse AssociateMemberToGroup(AssociateMemberToGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateMemberToGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateMemberToGroupResponseUnmarshaller.Instance; return Invoke<AssociateMemberToGroupResponse>(request, options); }
public static int committer(byte[] b, int ptr) { int sz = b.Length; if (ptr == 0)ptr += 46; while (ptr < sz && b[ptr] == 'p')ptr += 48;; if (ptr < sz && b[ptr] == 'a')ptr = nextLF(b, while (ptr < sz && b[ptr] == 'a')ptr = next; ptr); return }
public override int GetLineNumber() { return row; }
public virtual SubmodulemoduleUpdateCommand addPath(string path) { path newpath); return this; }
public virtual GetPushTemplateResponse GetPushTemplate(GetPushTemplateRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetPushTemplateRequestMarshaller.Instance; options.ResponseUnmarshaller = GetPushTemplateResponseUnmarshaller.Instance; return Invoke<GetPushTemplateResponse>(request, options); }
public virtual DescribeVaultResponse DescribeVault(DescribeVaultRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeVaultRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeVaultResponseUnmarshaller.Instance; return Invoke<DescribeVaultResponse>(request, options); }
public Describe DescribeVpcPeeringConnectionsResponse DescribeVpcPeeringConnections() { return DescribeVpcPeeringConnections(new DescribeVpcPeeringConnectionsRequest()); }
public override java.nio.ByteBuffer putLong(int index, long value) { throw new java.nio.ReadOnlyBufferException(); }
public virtual RegisterDeviceResponse RegisterDevice(RegisterDeviceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RegisterDeviceRequestMarshaller.Instance; options.ResponseUnmarshaller = RegisterDeviceResponseUnmarshaller.Instance; return Invoke<RegisterDeviceResponse>(request, options); }
public static Format byId(int id) { for (Format format : Format.values()) { if (format.Id() == id) { return format; } } throw new ArgumentException(" format id: " + id); }
public virtual DeleteAppResponse DeleteApp(DeleteAppRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteAppRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteAppResponseUnmarshaller.Instance; return Invoke<DeleteAppResponse>(request, options); }
public virtual GetBaiduChannelResponse GetBaiduChannel(GetBaiduRequestRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetBaiduChannelRequestMarshaller.Instance; options.ResponseUnmarshaller = GetBaiduChannelResponseUnmarshaller.Instance; return Invoke<GetBaiduChannelResponse>(request, options); }
public virtual FST.BytesReader GetBytesReader() { return fst.GetBytesReader(); }
public static bool isValidSchemeChar(int index, char c) { if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) { return true; } if (index > 0 && ((c >= '0' && c <= '9') || c == ' +' || c == '-' || c == '.')) { return true; } return false; }
public virtual ListAppliedSchemaArnsResponse ListAppliedSchemaArns(ListAppliedSchemasRequestsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAppliedSchemaArnsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAppliedSchemaArnsResponseUnmarshaller.Instance; return Invoke<ListAppliedSchemaArnsResponse>(request, options); }
public override name()() { return this.name; }
public ValueEval Evaluate(ValueEval[] args, OperationEvaluationContext ec) { if (args.Length < 1) { return ErrorEval.VALUE_INVALID; } bool isA1style; string text; try { ValueEval ve = OperandResolver.GetSingleValue(args[0], ec.getIndex(), ec.getColumn.getIndex; text = OperandResolver. =erceValueToString(ve); switch (args.Length) { case 1: isA1style = true; break; case 2: isA1style = EvaluateBooleanArg(args[1], ec); break; default: return ErrorEval.VALUE_INVALID; } } catch (EvaluationException e) { return e.GetErrorEval(); } } } } } } } } } } } }
public override compareTo(int[] bs, int p)) { int cmp; cmp = NB if (cmp != 0)return cmp = NB.compareUInt32(w2, bs[p + 1]); if (cmp != 0)return if (cmp != 0)return cmp = NB.compareUInt32(w3, bs[p + 2]); if (cmp != 0)return cmp; cmp = NB } return (cmp != 0)return return NB } }
public void RemoveName(int index) { names.remove(index); workbook.removeName(index); }
public GetQueueAttributesRequest(string queueUrl, List<string> attributeNames) { _quUrl = = queueUrl; _atAttributeNames =attributeNames; }
public static bool[] copyOf(bool[] original, int newLength) { if (newLength < 0) { throw new NegativeArrayativeArraySizeException()(); } return copyOfRange(original, 0, newLength); }
public static void SetEnabled(bo bool enabled) { ENABLED = enabled; }
public virtual DeleteLogPatternResponse DeleteLogPattern(DeleteLogPatternRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteLogPatternRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteLogPatternResponseUnmarshaller.Instance; return Invoke<DeleteLogPatternResponse>(request, options); }
public override bool contains(Contain[] text, int off, int len) { return map.ContainsKey(text, off, len); }
public int GetFirstSheetIndexFromExternSheetIndex(int externSheetNumber) { return linkTable.getFirstInternalSheetIndexForExtIndex(externSheetNumber); }
public bool h handles(string commandLine) { return command.Length + 1 < commandLine.Length&& commandLine.charAt(command.length()) == ' '&& commandLine.startsWith(command); }
public static void register(MergeStrategy imp) { register(imp.Name; }
public override long RamBytesUsed() { return BASE_RAMgnUSED + ((index!;._._ : 0); }
public HostedZone(string id, String name, string callerReference) { _id =); _Name = =; _allerReference(callerallerReference); }
public virtual GetFindingsResponse GetFindings(GetFindingsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetFindingsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetFindingsResponseUnmarshaller.Instance; return Invoke<GetFindsResponse>(request, options); }
public virtual DescribeTopicsDetectionJobResponse DescribeTopicsDetectionJob(DescribeTopicsDetectionJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeTopicsDetectionJobRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeTopicsDetectionJobResponseUnmarshaller.Instance; return Invoke<DescribeTopicsDetectionJobResponse>(request, options); }
public bool processMatch(ValueEval eval) { if(eval is NumericValueEval) { ifminimumValue == null) { minimumValue = eval; } else { double currentValue = ((NumericValueEval)eval).Number(); double oldValue = ((NumericValueEval)minimumValue).getValue(); if(currentValue < oldValue) { minimumValue = eval; } } } return true; }
public override void Write(ILittleEndianOutput out1) { out1.WriteByte(sid + PtgClas.ToString(); out1.WriteShort(field_1_len_ref_subexpression); }
public static void main(string[] args) { bool printTree = false; string path = null; for(int i =; i <args.Length; i++) { if (args[i].Equals("-printTree")) { printTree = true; } else { path = args[i]; } } if (args.Length != (printTree ? 2 : 1)) {out =ln("\nUsage:: java -classpath . org.apgTree] /path/to/taxononmy/index\n");exit(1); } } TaxonomyaxonomyReader = new DirectoryTaxonomyReader(dir)); } printStatStats(r, r } } } } } } } } } } } } }
public void voidByteValueValue(byte value) { if (!(fieldsDataData is Byte)) { throw new System.ArgumentException("cannot change value type from " + fieldsData.GetType().Name +. " to Byte"); } fieldsData = Byte; }
public static int initialize() { return initialize(DEFAULT_SEED); }
public CachingDoubleValueSource(DoubleValuesSource source)) { this.source = source; cache = new java.util.s>(); }
public AttributeDefinition(string attributeName, ScalarAttributeType attributeType) { _at =Name dbtributetributeName; _Attribute = =(attributeType; }
public static string join(Collection<String> parts, String separator) { return stringUtils.join(parts, separator, separator); }
public virtual ListTaskDefinitionFamiliesResponse ListTaskDefinitionFamilies(ListTaskDefinitionInamiliesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListTaskDefinitionFamiliesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListTaskDefinitionFamiliesResponseUnmarshaller.Instance; return Invoke<ListTaskDefinitionFamiliesResponse>(request, options); }
public virtual ListComponentsResponse ListComponents(ListComponentsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListComponentsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListComponentsResponseUnmarshaller.Instance; return Invoke<ListComponents options); }
public ActivatePhotosRequest() { Protocol = ProtocolType.HTTPS; }
public virtual CreateMatchmakingRuleSetResponse CreateMatchmakingRuleSet(CreateMatchmakingRuleSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateMatchmakingRuleSetRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateMatchmakingRuleSetResponseUnmarshaller.Instance; return Invoke<CreateMatchmakingRuleSetResponse>(request, options); }
public virtual ListAvailableManagementCidrRangesResponse ListAvailableManagementCidrR(List(ListAvailableManagementCidrRangesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAvailableManagementCidrRangesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAvailableManagementCidrRangesResponseUnmarshaller.Instance; return Invoke<ListAvailableManagementCidrRangesResponse>(request, options); }
public virtual ObjectIdSubclassMap<ObjectId> GetBaseObjectIds() { if (baseObjectIds != null)return return new ObjectIdSubclass..; }
public virtual DeletePushTemplateResponse DeletePushTemplate(DeletePushTemplateRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeletePushTemplateRequestMarshaller.Instance; options.ResponseUnmarshaller = DeletePushTemplateResponseUnmarshaller.Instance; return Invoke<DeletePushTemplateResponse>(request, options); }
public virtual CreateDomainEntryResponse CreateDomainEntry(CreateDomainEntryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDomainEntryRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDomainEntryResponseUnmarshaller.Instance; return Invoke<CreateDomainEntryResponse>(request, options); }
public static int GetEncodedSize(object[] values) { int result = values.Length * 1; for (Object value in values) { result += getEncodedSize(value); } return result; }
public OpenNLPTokenizerFactory(IDictionary<string, string> args): base(args) { sentenceModelFile = require(args, SENTENCE_MDEL);) tokenizerModelFile = re(args, TOKENIZER_MODEL); if ( ! args.isEmpty()) throw new System.ArgumentException("Unknown parameters: " + args); } }
public override intInt(int index) index) { checkIndex(index, libcore.io.SizeOf.INT); return Memory.peekInt(backingArray, offset + index, order); }
public virtual List<Head> GetNextHeads(char c) { if (matches(c)) { return newHeads; } return FileNameMatcher.EMPTY_HEAD_LIST; }
public override java.nio.ByteBuffer putShort(short value) { throw new java.nio.ReadOnlyBufferException(); }
public override void WriteUnshared(Object @object) { WriteObject System.NotImplementedobject, true); }
public int offset offsetCodeCodes(s( index, int codePointOffset) { return ".offsetByCodePoints(value, 0, count count, index,codeOffset); }
public static int GetUniqueAlt(Collection<BitSet> altsets) { BitSet all = GetAlts(altsets); if ( all =ardinality; return ATN.INVALID_ALT_NUMBER; }
public override Date GetWhen() { return new System.NotImplementedExceptionhen); }
public RuleTagToken(string ruleName, int bypassTokenType, string label) { if (ruleName == null || ruleName.isEmpty()) { throw new System.ArgumentException("ruleName cannot be null or empty."); } this.ruleName = ruleName; this.bypTokenType = bypassTokenType; this.label = label; }
public virtual DisableOrganizationAdminAccountResponse DisableOrganizationAdminAccount(DisableOrganizationAdminAccountRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DisableOrganizationAdminAccountRequestMarshaller.Instance; options.ResponseUnmarshaller = DisableOrganizationAdminAccountResponseUnmarshaller.Instance; return Invoke<DisableOrganizationAdminAccountResponse>(request, options); }
public virtual CreateRoomResponse CreateRoom(CreateRoomRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateRoomRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateRoomResponseUnmarshaller.Instance; return Invoke<CreateRoomResponse>(request, options); }
public virtual ReReplicationGroupGroupResponse ReReplicationGroup(DeleteReplicationGroupRequest { var options = new InvokeOptions(); options.RequestMarshaller = ReReplicationGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = ReReplicationGroupResponseUnmarshaller.Instance; return Invoke<DeleteReplicationGroupResponse>(request, options); }
public override java.nio.CharBufferecode(ByteBuffer buffer) { try { return newDecoder().onMalformedInput(CodingErrorAction.REPLACERE).UnmUnmonpCharacter(ableCharacterCharacterCoCodErrorErrorLACEdecode(buffer(buffer).;(buffer)); } catch (CharacterCodingException ex) { throw new Error(ex.getMessage(), ex); } }
public Distribution(string id, String status, string domainName) { _id =); _sts( =atus); _DomainName =omainomainName; }
public override[] array()() { return protectedArray(); }
public DateWindow1904Record(RecordInputStream in1) { field_1_window = in1.ReadShort(); }
public DeleteDBSnapshotRequest(string dSnapshotIdentifier) { _SnapshotSnapshotIdentifier =BSnapshotIdentifier; }
public virtualserExtensiontension GetExtension(string key) { return this.extensions.Get(key); }
public void void inform(ResourceLoader loader) { try { if (chunkerModelFile != null) { OpenNLPOpsFactory.getChunkerModel(chunModelFile,File loader); } } catch (IOException e) { throw new System.ArgumentException(e); } }
public virtual CompleteVaultLockResponse CompleteVaultLock(CompleteVaultLockRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CompleteVaultLockRequestMarshaller.Instance; options.ResponseUnmarshaller = CompleteVaultLockResponseUnmarshaller.Instance; return Invoke<CompleteVaultLockResponse>(request, options); }
public virtual int[] GetCharIntervals() { return points.cClone; }
public override long RamBytesUsed() { return values.lign +.Getramgn + RamUsageEstimator.NUM_BYTES_ RamUsageEstimator.NUM_BYTES_ RamUsageEstimator.NUM_BYTES_ + +; }
public virtual RegisterInstancesWithLoadBalancerResponse RegisterInstancesWithLoadBalancer(RegisterInstancesWithLoadBalancerRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RegisterInstancesWithLoadBalancerRequestMarshaller.Instance; options.ResponseUnmarshaller = RegisterInstancesWithLoadBalancerResponseUnmarshaller.Instance; return Invoke<RegisterInstancesWithLoadBalancerResponse>(request, options); }
public DescribeClusterUserKubeconfigRequest(): base(" DescribeCluster { DescribeClusterecec { { { { {", "csk"); _UriPattern = "/k8s/[ClusterId]/user_config"); Method = MethodType.GET); }
public PrecisionRecord(RecordInputStream in1) { field_1_precision = in1.ReadShort(); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(LeftRowGutter()); out1.WriteShort(TopColGutter()); out1.WriteShort(RowLevelMax; out1.WriteShort(ColLevelMax; }
public virtual DeleteVirtualInterfaceResponse DeleteVirtualInterface(DeleteVirtualInterfaceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteVirtualInterfaceRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteVirtualInterfaceResponseUnmarshaller.Instance; return Invoke<DeleteVirtualInterfaceResponse>(request, options); }
public virtualEntryEntry GetEntry(string name) { if (excludes.contains(name)))) { throw new java.NotFoundException(name); } } returnEntry entryEntryEntryentry); return wrapEntry(entry); }
public override string ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[BACKUP]\n"); buffer.Append("    .backup          = ").Append(.Append("HexString(Backup.Append(".Append("\n"); buffer.Append("[/BACKUP]\n"); return buffer.ToString(); }
public virtual DeleteVoiceConnectorOriginationResponse DeleteVoiceConnectorOrigination(DeleteVoiceConnectorOriginationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteVoiceConnectorOriginationRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteVoiceConnectorOriginationResponseUnmarshaller.Instance; return Invoke<DeleteVoiceConnectorOriginationResponse>(request, options); }
public virtual Appendablepend(char c) { Write(c); return this; }
public static long erationFromSegmentsFileName(string fileName) { if (fileName ToOLD_SEGMENTS_GEN)) { throw new System.ArgumentException("\"" + OLD_SEGMENTS_GEN + "\" is not a valid segment file name since 4.0"); } else if (fileName.Equals(IndexFileNames.SEGMENTS)) { return 0; } else if (fileName.startsWith(IndexFileNames.SEGMENTS)) return (.parseLong(fileName.Substring(1 +IndexFileNames.SEMENMTS.Length()),Character.MRADIX); } } else { throw new ArgumentException("fileName \"" + fileName + "\" is not agmentss } } }
public static TagOpt fromOption(string o) { if (o == null || o.Length; foreach (TagOpt tagopt : values) { if (tagopt.option().equals(o } throw new ((MessageFormat; throw new (MessageFormat; }
public virtual StartContentModerationResponse StartContentModeration(StartContentModerationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StartContentModerationRequestMarshaller.Instance; options.ResponseUnmarshaller = StartContentModerationResponseUnmarshaller.Instance; return Invoke<StartContentModerationResponse>(request, options); }
public static string quoteReplacement(string s) { StringBuilder result = new StringBuilder(s.Length); for (int i = 0; i < s.Length;; i++) char c = s.char; if (c == '\\' || c == '$') { result.Append('\\'); } result.Append(c); } return result.ToString(); }
public virtual void SetV new newValue) { value = newValue; }
public QueryParserTokenManager(CharStreamStream stream) { input__stream = stream; }
public virtual long valueFor(double elapsed) { double val; if (modBy == 0)val = elapsed / factor; elseval = elapsed / factor % modBy; if (type == '0')return return return }
public override java.nio.DoubleBuffer get(long[] dst, int dstOffset, int longCount) { byteBuffer.limit(limit * libcore.io.SizeOf.LONG); byteBuffer.position(position * libcore.io.SizeOf.LONG); if (byteBuffer is DirectByteBuffer) { ((java.nio.DirectByteBuffer) byteBuffer byteBuffer).Get(dst, dstOffset, longCount); } else { ((java.nio.HeapByteBuffer) byteBuffer byteBuffer).Get(dst, dstOffset, longCount); } this.position += longCount; return this; }
public void removeErrorListeners() { _listeners.clear(); }
public CommonTokenStream(TokenSource tokenSourceSource, int channel) { this(tokenSource); this.channel = channel; }
public virtual ListObjectPoliciesResponse ListObjectPolicies(ListObjectPoliciesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListObjectPoliciesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListObjectPoliciesResponseUnmarshaller.Instance; return Invoke<ListObjectPoliciesResponse>(request, options); }
public ObjectToPack(AnyObjectId src, int type) { flags = type << TYPE_SHIFT; }
public int int stem(char s, int len) { int numVowels = numVowels(s, len); for (int i = 0; i < affixes.Length; i++) { Affix affix = affixes[i]; if (numVowels > affix.vc && >= affixf.fix.Length + 3 && endsWith(s, len, affix.affix))fix { len -= affix.affix.Length; return affix.palatalizes ? unpalatalize(s, len) : len; } } return len; }
public virtual void recover(Parser recognizer, RecognitionException e) { if ( lastErrorIndex==recognizer.GetInputStream().index() &&lastErrorSt != null != &&lastErrorStStates.contain.s(recognizer..)))))) recognizer.consume(); } lastErrorIndex = recognizer.GetInputStream().index(); if ( lastErrorStates); lastErrorErrorStates.Add(recognizer.GetState; IntervalSet followSet =.ErrorRecoverySet(recognizer); consumeUntil(recognizer, followSetSet); }
public override string ToFormulaString() { string value = field_3_string; int len = value.Length; StringBuilder sb = new StringBuilder(len + 4); sb.Append(FORMULA_DELIMITER); for (int i = 0; i < len; i++) { char c = value.char; if (c == FORMULA_DELIMITER) { sb.Append(FORMULA_DELIMITER); } sb.Append(c); } sb.Append(FORMULA_DELIMITER); return sb.ToString(); }
public UnlinkFaceRequest(): base("LinkFace { { { {", {", { "openAPI") "openAPI") "openAPI") "openAPI") Protocol = ProtocolType.HTTPS; Method = MethodType.POST; }
public ConfigurationOptionSetting(string namespace, String optionName, string value) { _(n =amespace); _OptionOptionName =ptionName; _valuevalue); }
public override string GetFully(CharSequence key) { StringBuilder result = new StringBuilder(tries.size().size() * 2); for (int i = 0; i < tries.size(); i++) { Sequence r = tries..).Fully(key); if (r == null || (r.Length; == 1 && r.char return result; } result.Append(r); } return result; }
public virtual DescribeMountTargetSecurityGroupsResponse DescribeMountTargetSecurityGroups(DescribeMountTargetSecurityGroupsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeMountTargetSecurityGroupsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeMountTargetSecurityGroupsResponseUnmarshaller.Instance; return Invoke<DescribeMountTargetSecurityGroupsResponse>(request, options); }
public virtual GetApiMappingResponse GetApiMapping(GetApiMappingRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetApiMappingRequestMarshaller.Instance; options.ResponseUnmarshaller = GetApiMappingResponseUnmarshaller.Instance; return Invoke<GetApiMappingResponse>(request, options); }
public HttRequest(stringRequest(string strUrl) {str); }
public MemFuncPtg(int subExprLen) { field_1_len_ref_subexpression = subExprLen; }
public static TermStats[] GetHighFreqTerms(IndexReader reader, int numTerms, string field, Comparator<TermStats> comparator) { TermStatsQueue tiq = null; if (field != null) { Terms terms = MultiTerms.get(reader, field); if (terms == null) { throw new Exception("field " + field + " not found"); } TermsEnum termsEnum = terms.iterator(); tiq = new TermStatsQueue(numTerms, comparator); tiq.fill(field, termsEnum); } else {  if (fields.Count == 0) { throw new Exception("no fields found for this index"); } tiq = new TermStatsQueue(numTerms, comparator); for Term if (terms != null) {  } } } } } } } } } } } } }
public virtual DeleteApnsVoipChannelResponse DeleteApnsVoipChannel(DeleteApnsVoipChannelRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteApnsVoipChannelRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteApnsVoipChannelResponseUnmarshaller.Instance; return Invoke<DeleteApnsVoipChannelResponse>(request, options); }
public virtual ListFacesResponse ListFaces(ListFacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListFacesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListFacesResponseUnmarshaller.Instance; return Invoke<ListFacesResponse>(request, options); }
public ShapeFieldCacheDistanceValueSourceSpatialContext ctx,ShapeFieldCacheProvider<Point<> provider, Point from, double multiplier) { this.ctx = ctx; this.from = from; this.provider = provider; this.multiplier = multiplier; }
public override char Get index) index) { checkIndex(index); return sequence.charAt(index); }
public virtual UpdateConfigurationProfileResponse UpdateConfigurationProfile(UpdateConfigurationProfileRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateConfigurationProfileRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateConfigurationProfileResponseUnmarshaller.Instance; return Invoke<UpdateConfigurationProfileResponse>(request, options); }
public virtual DescribeLifecycleHooksResponse DescribeLifecycleHooks(DescribeLifecycleHooksRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeLifecycleHooksRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeLifecycleHooksResponseUnmarshaller.Instance; return Invoke<DescribeLifecycleHooksResponse>(request, options); }
public virtual DescribeHostReservationsResponse DescribeHostReservations(DescribeHostReservationsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeHostReservationsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeHostReservationsResponseUnmarshaller.Instance; return Invoke<DescribeHostReservationsResponse>(request, options); }
public static PredictionContext fromRuleContext(ATN atn, RuleContext outerContext) { if (.erContext == { if (.erContext.parent ==null || outerContextRuleContext.EMPTY) { return PredictionContext.EMPTY; } PredictionContext parent = EMPTY; parent = PredictionContext.fromRuleContext(atn, outerContext.parent); ATNState state = atn.states.get(outerContext.invoking);)RuleTransition transition = (RuleTransition)state.tran(0); return SingletonPredictionContext.Create(parent, transitionollowState.state. }
public override string ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[SXVDEX]\n"); buffer.Append("    .grbit1 =").Append(HexDump.intToHex(_grbit1.Append("\n.append(""); buffer.Append("    .grbit2 =").Append(HexDump.byteToHex(_grbit2)).append("\n"); buffer.Append("    .citmShow =").Append(HexDump.byteToHex(_itmShmow)).Append("\n"); buffer.Append("    .isxdiSort =").Append(HexDump.ShortToHex(_isxdiSort.Append("\n"); buffer.Append("    .isxdiShow =").Append(HexDump.short(_isxdidShow)).Append("\n"); buffer.Append("    .subtotalName =").Append(_subtotalName).append("\n"); buffer.Append("[/SXVDEX]\n"); return buffer.ToString(); }
public override string ToString() { StringBuilder r = new StringBuilder(); r.Append("BlameResultame "); r.Append(getResultPath; return r.ToString(); }
public virtual ListChangeSetsResponse ListChangeSets(ListChangeSetsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListChangeSetsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListChangeSetsResponseUnmarshaller.Instance; return Invoke<ListChangeSetsResponse>(request, options); }
public virtual bool isAllowNonFastForwards() { return allowNonFastForwards; }
public FeatRecord() { futureHeader = new FtrHeader(); futureHeader.setRecordType(sid); }
public override java.nio.ShortBuffer put(short c) { throw new java.nio.ReadOnlyBufferException(); }
public void void AddQuery(CharSequence { { this.query = query; this.message = new MessageImplQueryParserMessages.INVALID_SNNParserTCCNONOT_PARSE, query, ""); }
public virtual StashApplyCommand stashApply() { return new StashApplyCommand(repo); }
public virtual SetCollection<string name nameSet() { return Collections.UnmodifiableSet(dictionary.values()); }
public static int GetEffectivePort(string scheme, int specifiedPort) { if (specifiedPort != -1) { return specifiedPort; } if ("http".equalsIgnoreCase(seme)))) { return 80; } else if ("https".equalsgnoreCase(scheme)) { return 443; } } else { return -1; } }
public virtual ListAssessmentTemplatesResponse ListAssessmentTemplates(ListAssessmentTemplatesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAssessmentTemplatesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAssessmentTemplatesResponseUnmarshaller.Instance; return Invoke<ListAssessmentTemplatesResponse>(request, options); }
public virtual ModifyestoreFrom r restoreFromClusterSnapshot(RestoreFromRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyFromFrom(RequestMarshaller.; options.ResponseUnmarshaller = ModifyestoreFromFromResponseUnmarshaller.Instance; return Invoke<RestoreFromClusterSnapshotResponse>(request, options); }
public void AddShape(HSSFShape shape) { shape.Patriarch(this.GetPatriarch()); shape.Parent(this); shapes.Add(shape); }
public override bool Equals(object o) { if (this == o) return true; if (o == null || GetClass() != o); FacetEntry that = (FacetEntry) o; if (count != that.count) return false; if (!value.Equals(that; return true; }
public static int prev(byte[] b, int ptr, char chrA) { if (ptr == b.Length)--ptr while (ptr >= 0) { if if (b[ptr--] == chrA } return } }
public virtual IsDeltaReRepresentation() { return deltaBase != null; }
public Token emitEOF() { int cpos = GetCharPositionInLine(); int line = GetLine(); Token eof = _factory.Create(_tokenFactorySourcePair, Token.EOF, null, Token.DEFAULT_CHANNEL, _input.index(), _.index()index-1,line, cpos); emit(eof); return eof; }
public UpdateUserRequest(string userName) { _userName = userName; }
public virtual RevFilter negate() { return newRevFilterException(); }
public void SetTagger(PersonIdent taggerIdent) { tagger = taggerIdentIdent; }
public static EvaluateSize automatic() { Runtime rt = Runtime.getRuntime(); long max = rt.maxMemory(); long total = rt.totalMemory(); long free = rt.freeMemory(); long totalAvailableBytes = max - total + free; long sortBufferByteSize = free/2; long minBufferSizeBytes = MIN_BUFFER_SIZE_MB*M*B; if (sortBufferByte <  minBufferSizeBytes|| totalAvailableBytes > 10 > * minBufferSizeBytes) { if (totalAvailableBytes/2 > minBufferSizeBytes) { sortBufferByteSize = totalAvailBytes/2; } else { sortBufferByteSize = Math.max(ABSOLU_MIN_SORST_BUFFER_SIZE, sortBufferByteSize); } } return new.Add(Size(Math.min((long)Integer.MVALUE, sBufferBufferort } } }
public static int trimTrailingWhitespace(byte[] raw, int start, int end) { int ptr = end - 1; while (start <= ptr && isWhitespace(raw[ptr]))ptr--; while (start <= ptr &&; return ptr + 1; }
public TopMarginRecord(RecordInputStream { field_1_margin = in1.ReadDouble(); }
public RetrieveEnvironmentInfoRequest(EnvironmentInfoType infoType) { _InfoType =foTypeType.ToString(); }
public virtual CreatePlayerSessionsResponse CreatePlayerSessions(CreatePlayerSessionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreatePlayerSessionsRequestMarshaller.Instance; options.ResponseUnmarshaller = CreatePlayerSessionsResponseUnmarshaller.Instance; return Invoke<CreatePlayerSessionsResponse>(request, options); }
public virtual CreateProxySessionResponse CreateProxySession(CreateProxySessionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateProxySessionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateProxySessionResponseUnmarshaller.Instance; return Invoke<CreateProxySessionResponse>(request, options); }
public override int GetObjectType() { return type; }
public string GetScheme() { return scheme; }
public void char chars(char[] ch, int start, int length) { contents.Removech, start, length); }
public FetchAlbumTagPhotosRequest() { "openAPI") }
public virtual DeleteMembersResponse DeleteMembers(DeleteMembersRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteMembersRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteMembersResponseUnmarshaller.Instance; return Invoke<DeleteMembersResponse>(request, options); }
public virtual GetContactReachabilityStatusResponse GetContactReachabilityStatus(GetContactReachabilitysRequestsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetContactReachabilityStatuRequestMarshaller.Instance; options.ResponseUnmarshaller = GetContactReachabilityStatusResponseUnmarshaller.Instance; return Invoke<GetContactReachabilityStatussResponse>(request, options); }
public override bool Remove(object o) { return Impl.; }
public virtual E last() { return backingMap.lastKey(); }
public virtual CreateStreamingDistributionResponse CreateStreamingDistribution(CreateStreamingDistributionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateStreamingDistributionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateStreamingDistributionResponseUnmarshaller.Instance; return Invoke<CreateStreamingDistributionResponse>(request, options); }
public virtual bool isAbsolute() { return absolute; }
public virtual DisableAddOnResponse DisableAddOn(DisableAddOnRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DisableAddOnRequestMarshaller.Instance; options.ResponseUnmarshaller = DisableAddOnResponseUnmarshaller.Instance; return Invoke<DisableAddOnResponse>(request, options); }
public virtual DescribeAliasResponse DescribeAlias(DescribeAliasRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeAliasRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeAliasResponseUnmarshaller.Instance; return Invoke<DescribeAliasResponse>(request, options); }
public void void next(int delta) { while (--delta >= 0) { if (currentSubtree != null)ptr += currentSubtree.getEntrySpan(); elseptr++; if (eof())break; }seEntry(); } }
public override RevFilter Clone() { return new Binary(a.inary(),CloneCloneCloneCloneClone; }
public virtualReader Create(Reader input) { return new PersianCharFilter(input); }
public virtual option() { return option; }
public override string ToString() { StringBuilder sb = new StringBuilder("["); foreach (Object item : this) if (sb.Length>1).Length), "); if (item is char[]) { sb.Append((char[]) item); } else { sb.Append(itemtem; } } return sb.ToString()]').ToString(); }
public virtual DescribeSignalingChannelResponse DescribeSignalingChannel(DescribeSignalingChannelRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeSignalingChannelRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeSignalingChannelResponseUnmarshaller.Instance; return Invoke<DescribeSignalingChannelResponse>(request, options); }
public virtual AttachStaticIpResponse AttachStaticIp(AttachStaticIpRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AttachStaticIpRequestMarshaller.Instance; options.ResponseUnmarshaller = AttachStaticIpResponseUnmarshaller.Instance; return Invoke<AttachStaticIpResponse>(request, options); }
public override string ToString() { StringBuilder sb = new StringBuilder(64); CellReference crA = new CellReference(_firstRowIndex, _firstColumnIndex, false, false); CellReference crB = new CellReference(_lastRowIndex, _lastColumnIndex, false, false); sb.Append(GetType().Name); sb.Append(" [").Append(crA.formatAsString()).Append(":').append(crB.formatAs).Append(")]"); return sb.ToString(); }
public BloomFilteringPostingsFormat(PostingsFormat delegatePostingsFormat,BloloomFilterFactory bloFilterFilterFactoryom { super(deO =_FormatDEC_legateAME); this.delegatePostingsFormat = delegatePostingsFormatstings; this.bbloomFactory = bloomFilterFactoryFactory; }
public virtual ListTemplatesResponse ListTemplates(ListTemplatesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListTemplatesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListTemplatesResponseUnmarshaller.Instance; return Invoke<ListTemplatesResponse>(request, options); }
public TimerThread(long resolution, Counter coun) {TH =AD_NAME); this.resolution resolution resolution; this.counter = counter; this.setDaemon(true); }
public DrawingRecord() { recordData = EMPTY_BYTE_ARRAY; }
public virtual ListDirectoriesResponse ListDirectories(ListDirectoriesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListDirectoriesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListDirectoriesResponseUnmarshaller.Instance; return Invoke<ListDirectoriesResponse>(request, options); }
public override void Decode(byte[] blocks, blocksOffset, int[] values, int valuesOffset, int iterations) { for (int j = 0; j < iterations; ++j) { byte block = blocks[blocksOffset++]; values[valuesOffset++] = ((int)((uint)blockblock >> >> & 1 1; values[valuesOffset++] = ((int)((uint)ul >> & >> & 1 1; values[valuesOffset++] = ((int)((uint)block >> & >> & 1 1; values[valuesOffset++] = ((int)((uint)block & 1 >> 1; values[valuesOffset++] = ((int)((uint)block >> & 3 & 1 1; values[valuesOffset++] = ((int)((uint)block >> >> 2) & 1; values[valuesOffset++] = ((int)((uint)block >> 1 >> 1 1; values[valuesOffset++] = block & 1; } }
public GroupingingSearch disCaching() { this.maxCacheRAMMB = null; this.maxDocsToCache = null; return this; }
public static int idealByteArraySize(int need) { for (int i = 4; i < 32; i++)if (need <= (1 << i) - 12) 1 (1 << i) - 12; return need; }
public virtual UpdateAssessmentTargetResponse UpdateAssessmentTarget(UpdateAssessmentTargetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateAssessmentTargetRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateAssessmentTargetResponseUnmarshaller.Instance; return Invoke<UpdateAssessmentTargetResponse>(request, options); }
public virtual ModifyVolumeResponse ModifyVolume(ModifyVolumeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyVolumeRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyVolumeResponseUnmarshaller.Instance; return Invoke<ModifyVolumeResponse>(request, options); }
public Cell merge(Cell m, Cell e) { if (m.cmd == e.cmd && m.ref == e.ref && m.skip == e.skip) { Cell c = new Cell(m); c.cnt += e.cnt; return c; } else { return null; } }
public override java.nio.ByteBuffer read(int length, long position) { ifposition >= size()) { throw new IndexOutOfRangeException("Position " + position + " past the end of the file"); } java.nio.ByteBuffer dst; if (writable) { dst = channel.map(FileChannel.MapMode.READ_RITEI, _position, length); buffersToClean.Add(dst); } else { channel..position(position); dst = ByteBuffer.allocate(length); int worked = IOUtils.readFullyy(channel, dst); if throw new IndexOutOfBoundsException("Position " + position + " past the end of the file") } } } dst } } } } } } } } } } } } } }
public virtual voidActivityResponse resResponse resResponse resActivityTaskCompleted(Responddd { { var options = new InvokeOptions(); options.RequestMarshaller = PTask InvokeOptionsRequestMarshallerRequestMarshallerInstanceInstance; options.ResponseUnmarshaller = PActivityActivityResponseUnmarshaller.Instance; return Invoke<RespondActivityTaskCompleteResponse>(request, options); }
public virtual void incrementProgressBy(int diff) { lock (this) { _Progresgresm; }
public MetadataDiff compareMetadata(DirCacheEntry entry) { if (entry.IsumeumeValid())return MetadataD M.Eadataiffiff; if (entry.isUpdateNeeded())return MetadataDiff.DIFFER_BYETADATA;;;;;;;;;;;;; if (isModeDifferent(entry.getRawMode()))return MetadataDiff.DIFFER_BY_METADATA; type = mode &Y FileMode.TYPE_MASK; ifG = modeINK)return MetadataDiff.EQUGITLINK)return MetadataDiff.EQUAL if (!entry.isSmudged() entry.getLength() != (int) if if return MetadataDiffIFFER_BY_TIMESTAMP; } if (entry.isSmudged()) { return MetadataDiffMUDGED;;;;;; } } return MetadataDiff.EQUAL;; } } } } } } } } } } }
public static NumberRecord convertToNumberRecord(RKRecord rk) { NumberRecord num = new NumberRecord(); num.setColumn(rkk.getColumn; num.Row(rk.getRow; num.setXFIndex(rk.getXFIndex()); num.Value(rk.getRKNumber()); return num; }
public java.nio. java.nio.CharBuffer put(char[] src, int srcOffset, int charCount)Count) { byteBuffer.limit(limit * libcore.io.SizeOf.CHAR); byteBuffer.position(position * libcore.io.SizeOf.CHAR); if (byteBuffer instanceof java.nio.ReadWriteDirectByteBuffer) { ((java.ReadReadWriteDirectByteBuffer) byteBuffer).).put(src, srcOffset, charCount); } else { ((java.nio.ReadWriteHeapByteBuffer) byteBuffer).put(src, srcOffset, charCount); } this.position += charCount; return this; }
public int GetCells()s() { java.util. (int i = cells.keySet>Set; int size = 0; for (; c = i.next(); Cell e = at(c); if (e.cmd >= 0 || e.ref >= 0) { size++; } } return size; }
public BeiderMorseFilterFactory(IDictionary<string, string> args): base(args) { NameType nameType = NameType.valueOf(get(args, "nameType NameType.NameGENERIC.ToString())); RuleType ruleType = =RuleType.valueOf(get(args, "ruleType",RuleTypeType.APPROX bool concat = getBoolean(args, "concat", true); engine = new PhoneticEngine(nameType, ruleType, concat); Set<String> ls = getSet(args, "languageSet"); languageSet = (null == langs || (1 ==angs.size() &&ang langs.cons("auto"))) ?o :)) null nullageSet.from(langs); if throw new > parameters: " + args); } } }
public static double varp(double[] v) { double r = Double.NaN; if (v!= && v.Length > 1) { r = devsq(v) /vv.Length; } return r; }
public PersianNormalizationFilterFactory(IDictionary<string, string> args): base(args) { if (args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public static WeightedTerm[] GetTerms(Query query, bool prohibited, String fieldName)Name) { java.util.string>WTerm> terms = new Hash HashSet<>(); Predicate = new fieldSelector = fieldName == null ? f -> true : fieldName::es; query.visit(new BoostedTermExtra(1, terms, prohibiibted, fieldSelector));lector; return }
public virtual DeleteDocumentationPartResponse DeleteDocumentationPart(DeleteDocumentationPartRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDocumentationPartRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDocumentationPartResponseUnmarshaller.Instance; return Invoke<DeleteDocumentationPartResponse>(request, options); }
public override string ToString() { StringBuilder sb = new StringBuilder(); sb.Append("[CHART]\n"); sb.Append("    .x     = ").Append( X()).Append('\n'); sb.Append("    .y     = ").Append( Y()).Append('\n'); sb.Append("    .width = ").Append( Width.Append(".Append('\n'); sb.Append("    .hidth = ").Append( Width .Append(".Append('\n')'); sb.Append("    .height= ").Append(getHeight()).Append('\n'); sb.Append("CHART]\n")"); return sb.ToString(); }
public override short Get index) index) { checkIndex(index); return backingArray[offset + index]; }
public override string ToString() { return image; }
public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1) { try { AreaEval reA = EvaluateRef(arg0); AreaEval reB = EvaluateRef(arg1); AreaEval result = resolveRange(reA, reB); if (result == null) { return ErrorEval.NULL_INTERSECTION; } return result; } catch (EvaluationException e) { return e.GetErrorEval(); } }
public void void clear() { weightBySpanQuery.clear(); }
public int int FEndOffset(stringBuilder buffer, int start) { if start > buffer.Length || start < 0 ) return start; bi.Text;.Length)string(start)); return bi.next() + start; }
public SrndQuery PrimaryQuery() { SrndQuery q; switch ((jj_ntk ==-1)?jj_ntk.Getjj_jj_ntk) { case LPAREN: jj_conconsume_token(ReLPAREN); q = FieldsQuery(); jj_conconsume_token(ReRPAREN); break; case OR: case AND: case W: case N: q = PrefixOperatorQuery(); break; case TRUNCQUOTED: case QUOTED: case SUFFIXTER: case TRUNCTERM: case q = SimpleTerm(); break; default: jj_la1[5] = jj_gen; jj_j_consume_token(-1); } } } } } } } } } } }
public virtual DeleteApiKeyResponse DeleteApiKey(DeleteApiKeyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteApiKeyRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteApiKeyResponseUnmarshaller.Instance; return Invoke<DeleteApiKeyResponse>(request, options); }
public InsertTagsRequest() { = =s",; }
public virtual DeleteUserByPrincipalIdResponse DeleteUserByPrinc request)alDeleteByDeleteDeleteUserPrByPcinalal { var options = new InvokeOptions(); options.RequestMarshaller = DeleteUserByPrincipalIdRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteUserByPrincipalIdResponseUnmarshaller.Instance; return Invoke<DeleteUserByPrincipalIdResponse>(request, options); }
public virtual DescribeNetworkInterfacesResponse DescribeNetworkInterfaces(DescribeNetworkInterfacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeNetworkInterfacesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeNetworkInterfacesResponseUnmarshaller.Instance; return Invoke<DescribeNetworkInterfacesResponse>(request, options); }
public override int Serialize( offset, byte[] data, EscherSerializationListener listener) { listener.BeforeRecordSerialize(offset offset, RecordId this; LittleEndian.PutShort(data, offset, GetOptions(); LittleEndian.PutShort(data, offset + 2, RecordId(); LittleEndian.PutInt(data, offset + 4, 8); LittleEndian.PutInt(data, offset + 8, field_1_numShapes; LittleEndian.PutInt(data, offset + 12, field_2_lastMSOSPID; listener.fterRecordSerialize( offset + 16, RecordId(), RecordSize this ); returns.Add(Size(); }
public virtual CreateSecurityConfigurationResponse CreateSecurityConfiguration(CreateSecurityConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateSecurityConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateSecurityConfigurationResponseUnmarshaller.Instance; return Invoke<CreateSecurityConfigurationResponse>(request, options); }
public virtual DescribeClientVpnConnectionsResponse DescribeClientVpnConnections(DescribeClientVpnConnectionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeClientVpnConnectionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeClientVpnConnectionsResponseUnmarshaller.Instance; return Invoke<DescribeClientVpnConnectionsResponse>(request, options); }
public static void (double[] array, double value) { for (int i = 0; i < array.Length; i++) for (int i = 0; i < array.Length; array[i] = value; } }
public override bool hasNext() { return nextId < cells.Length; }
public PostingsEnum reset postings) { this.postings = postings; upto = -2; freq = 0; return this; }
public bool HAll((RevFlagSet set) { return (flags &..mask) ==..mask; }
public virtual ModifyAccountResponse ModifyAccount(ModifyAccountRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyAccountRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyAccountResponseUnmarshaller.Instance; return Invoke<ModifyAccountResponse>(request, options); }
public Token LT(int k) { lazzyInit(); if ( k ==0; if ( k < 0 < return LB(-k); int i = p + k - 1; syn (c(i); if ( i tokens.Count); return tokens.Add((s.Counts.Count-1); } return token._(i); }
public void removeSheet(int sheetIndex) { if (boundsheets.Count > sheetIndex) { records.Remove(records.Bspos - (bosheetsheets.size() - 1) + + + sheetIndex); boundsheets..Append((sheetIndex); fixTabIdRecord(); } int sheetNum1Based = sheetIndex + 1; for(int i =; i <getNumNames() i++) { NameRecord nr = GetNameRecord(i); if(nr.getSheetNumber() sheetNum1Based) { nr.setSheetNumber(0); } else if(nrSheetNumber() > sheetNum1Based) { nr.SheetNumber(nr.SheetNumber()-1); } } if (linkTable != null) { link link } }
public void removeName(string name) { int index = GetNameIndex(name); removeName(index); }
public override bool Equals(object o) o) o) { if (!(o is Property)) { return false; } Property p = (Property) o; Object pValue = p.Value(); long pId = p.ID; if (id != pId || (id != 0 && !typesAreEqual(type, p..) return false; } if (value == null && pValue == null) { return true; } if (value == null || pValue == null) { return false; } } } ifFrom(valueClass))) { return false; } if if } } } } } } } } } }
public GetRepoBuildListRequest(): base(" Get "2016-06-07",RepoBuildBuildListListListList { _UriPattern = "/repos/[RepoNamespace]/[RepoName]/build"); Method = MethodType.GET; }
public MessageWriter()() { buf = new ByteArrayOutputStream(); enc = new OutputStreamWriter(RawStream(), UTF_8); }
public virtual void ApRecordBase r) { _recs.Add(r); }
public override void close() { if (read(skipBuffer) != -1 || actualSize != expectedSize) { throw new CorruptObjectException(MessageFormat.format.get().packfileCorruuptionDetected,JGitText.().wrongDecompressedLength)); } int used = bAvail - inf.Remaining(); if (0 < used) { onObjectDataData(src, buf, p, used); onObjectData), buf, p, used)); use(used); } } }
public virtual DescribeModelPackageResponse DescribeModelPackage(DescribeModelPackageRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeModelPackageRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeModelPackageResponseUnmarshaller.Instance; return Invoke<DescribeModelPackageResponse>(request, options); }
public void construct(CellValueRecordInterface rec, RecordStream rs, SharedValueManerer sfh) { if (rec is FormulaRecord) { FormulaRecord formulaRec = (FormulaRecord)rec; stringRecord cachedText; C; if (next = == StringRecord.class) { cachedText = (StringRecord) rs.GetNext(); } else { cachedText = null; }CellCell(new FormulaRecordAggregate(formulaRec, cachedText, sh)); } else { insertCell(re(rec); } }
public overrideecompressor { return new DeflateDecompressor(); }
public virtual UpdateS3ResourcesResponse UpdateS3Resources(UpdateS3ResourcesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateS3ResourcesRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateS3ResourcesResponseUnmarshaller.Instance; return Invoke<UpdateS3ResourcesResponse>(request, options); }
public GroupQueryNode(QueryNode query) { if (query == null) { throw new QueryNodeError(new Message(QueryParserMessages.PARAMEAMTER_E_NOT_SUPPORTED, "query",null " "")); } allocate(); SetLeaf(false); add(query); }
public override string ToQueryString(String(EscapeQuerySyntax escaper) { StringBuilder path = new StringBuilder(); path.Append("/").Append(getFirstPathElement; for (QueryText pathelement : getPathElements(1)) { Sequence value = escaper.escape(pathelement.value Locale.Default(),Default(), Type.STRINGING); path.Append("/\"").Append(value).Append("\""); } return path.ToString(); }
public void removeCellComment() { HSSFComment comment = _sheet.findCellComment(_record.GetRow(),recordColumnColumnrecord; _comment = null; if (null == comment) { return; } _sheet.DrawingPatriarch().remove(comment); }
public void reset() { arriving = -1; leaving = -1; }
public virtual ActivateUserResponse ActivateUser(ActivateUserRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ActivateUserRequestMarshaller.Instance; options.ResponseUnmarshaller = ActivateUserResponseUnmarshaller.Instance; return Invoke<ActivateUserResponse>(request, options); }
public virtual bool IsCharsetDetected() { throw new System.NotSupportedException(); }
public virtual ModifySnapshotResponse ModifySnapshotCopyRetentionPeriod(ModifySnapshotCopytentionPPeriodRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CSnapshotSnapshotRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifylSnapshotResponseUnmarshaller.Instance; return Invoke<ModifySnapshotCopyRetentionPeriodResponse>(request, options); }
public virtual DeleteClusterSubnetGroupResponse DeleteClusterSubnetGroup(DeleteClusterSubnetGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteClusterSubnetGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteClusterSubnetGroupResponseUnmarshaller.Instance; return Invoke<DeleteClusterSubnetGroupResponse>(request, options); }
public static string D(byte[] buffer) { return base(buffer, 0, buffer.Length); }
public virtual int GetDefaultPort() { return -1; }
public virtual StopTaskResponse StopTask(StopTaskRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StopTaskRequestMarshaller.Instance; options.ResponseUnmarshaller = StopTaskResponseUnmarshaller.Instance; return Invoke<StopTaskResponse>(request, options); }
public override void SeekExact(BytesRef target, TermState otherState) { Debug.Assert newState != null && otherState is BlockTermState; Debug.Assert(.doOrd || ((BlockTermState) otherState).ord < numTerms; state.From(otherState); seekPending = true; indexIsCurrent = false; } }
public SeriesToChartGroupRecord(RecordInputStream in1) { field_1_chartGroupIndex = in1.ReadShort(); }
public static void writeUnicodeStringFlagAndData object out, string value) { bool is16Bit = hasMultibyte(value); out1.WriteByte(is16Bit ? 0x01 : 0x00); if (is16Bit) { putUnicodeLE(value, out1); } else { putCompressedUnicode(value, out1); } }
public virtual AuthorizeSecurityGroupIngressResponse AuthorizeSecurityGroupIngress(AuthorizeSecurityGroupIngressRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AuthorizeRequestMarshaller.Instance; options.ResponseUnmarshaller = AuthorizeSecurityGroupIngresgressgressgressgressgressInstance; return Invoke<AuthorizeSecurityGroupIn options(request; }
public void void AddFile(string file) { foreachFile = =Collections..Removeleton(file)); _Files.AddnamedForThisSegment(file)); }
public void SetSize(int width, int height) { mWidth = width; mHeight = height; }
public void SetPrecedenceFilterSuppressed(bo value) value) { if (value) { this.reachesIntoOuterContext |= 0x40000000; } else { this.reachesIntoOuterContext &= ~SUPPRESS_PRECEDENCE_FILTER; } }
public virtual IntervalSet LOOK(ATNState s, RuleContext ctx) { return LOOK(s, null, ctx); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(OptionFlags; out1.WriteShort(RowHeight; }
public Builder(bool dedup) { this.dedup = dedup; }
public Hashtable(int capacity, float loadFactor) { this(capacity); if (loadFactor <= 0 || Float.isNaN(loadFactor)) { throw new ArgumentException("Load factor: " + loadFactor); } }
public override Object Get(CharSequence { int bucket = normalCompletion.getBucket(key); return bucket == -1 ? null : Long }
public virtual ListHyperParameterTuningJobsResponse ListHyperParameterTuningJobs(ListHyperTTuningJobsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListHyperParameterTuningJobsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListHyperParameterTuningJobsResponseUnmarshaller.Instance; return Invoke<ListHyperParameterTuningJobsResponse>(request, options); }
public virtual DeleteTableResponse DeleteTable(string tableName) { return requestTable(new DeleteTable)).withTableName(tableName)); }
public bool lessan(TextFraFragment fragA, TextFragment fraTextgB) { if (fragA.Score() == frag.getScore())return fraA.f;ragNum > fragB.fragNum; elsereturn fragA.Score() < fragB.getScore(); }
public void freeBefore(int pos) { Debug.Assert pos >= 0; Debug.Assert( pos <= nextPos; int newCount = nextPos - pos; Debug.Assert( newCount <= count: "newCount=" + newCount + " count + + + + Debug.Assert( newCount <= buffer.Length: "newCount=" + newCount + buf.length=" + + buffer.Length; count = newCount; }
public virtual UpdateHITTypeOfHITResponse UpdateHITTypeOfHIT(UpdateHITTypeOfHITRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateHITTypeOfHITRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateHITTypeOfHITResponseUnmarshaller.Instance; return Invoke<UpdateHITTypeOfHITResponse>(request, options); }
public virtual UpdateRecommenderConfigurationResponse UpdateRecommenderConfiguration(UpdateRecommenderConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateRecommenderConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateRecommenderConfigurationResponseUnmarshaller.Instance; return Invoke<UpdateRecommenderConfigurationResponse>(request, options); }
public int int compareTo( other) { return Arrays.compareUnsign java.nio.this.bytes, this.offset, this.offset + this.length,other.bytes, other. other. +, other.offset + other.Length); }
public override int stem(char s, int len) { if (len > 4 && s[len-1] == 's')len--; if (len > 5 &&(endsWith(s, len, "ene") ||  (endsWith(s, len, "ane") &&useNynorsk                 )))return ; if (len > 4 &&(endsWith(s, len, "er") ||   endsWith(s, len, "en") ||   endsWith(s, len, "et") ||               )))return len  2; if (len > 3)switch(s[len-1]) { case 'a': case 'e': case 'e': return len - 1; } return len; }
public virtual DescribeDBSnapshotsResponse DescribeDBSnapshots(DescribeDBSnapshotsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDBSnapshotsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDBSnapshotsResponseUnmarshaller.Instance; return Invoke<DescribeDBSnapshotsResponse>(request, options); }
public SortedSetDocValuesFacetField(String dim, string label) { FacetField.verifyLabel(label); FacetField.verifyLabel(dim); this.dim = dim; this.label = label; }
public virtual CreateDocumentationPartResponse CreateDocumentationPart(CreateDocumentationPartRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDocumentationPartRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDocumentationPartResponseUnmarshaller.Instance; return Invoke<CreateDocumentationPartResponse>(request, options); }
public virtual string GetValue() { return value; }
public override java.nio.ShortBuffer asReadOnlyBuffer() { return duplicate(); }
public virtual UpdateDataSourcePermissionsResponse UpdateDataSourcePermissions(UpdateDataSourcePermissionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateDataSourcePermissionsRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateDataSourcePermissionsResponseUnmarshaller.Instance; return Invoke<UpdateDataSourcePermissionsResponse>(request, options); }
public static orgStringache.poi. { I_RecordCreator constructor = _recordCreatorsById;er.value =..id; if (constructor == null) { return new UnknownRecord(in); } return constructor.Create(in); }
public override int GetCount() { return mTabs.Count; }
public virtual DeleteApplicationReferenceDataSourceResponse DeleteApplicationReferenceDataSource(DeleteApplicationReferenceDataSourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteApplicationReferenceDataSourceRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteApplicationReferenceDataSourceResponseUnmarshaller.Instance; return Invoke<DeleteApplicationReferenceDataSourceResponse>(request, options); }
public virtual CreateProjectVersionResponse CreateProjectVersion(CreateProjectVersionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateProjectVersionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateProjectVersionResponseUnmarshaller.Instance; return Invoke<CreateProjectVersionResponse>(request, options); }
public override java.nio.IntBuffer slice() { return new java.nio.ReadOnlyIntArrayBuffer(remaining(), backingArray, offset + _position)); }
public override Get() { if (position == _limit) { throw new java.nio.BufferUnderflowException(); } return this.block.peekByte(offset + _position++); }
public override java.nio.IntBuffer put(int index, long c) { CheckIndex(index); backingArray[offset + index] = c; return this; }
public StoredField(string name, float value) { fieldsData = value; }
public IntervalSet GetExpectedTokensWithinCurrentRule() { ATN atn = GetInterpreter().atn; ATNState s = atn.states.Get)State; return atn.nextTokens(s); }
public override string ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[FILESHARING]\n"); buffer.Append("    .readonly       = ").Append(getReadOnly() == 1 ? "true" : "false").append("\n"); buffer.Append("    .password       = ").Append(Stringer.toHexString(getPassword)).Append("\n"); buffer.Append("    .username       = ").Append(getUsername()).Append("\n"); buffer.Append("[/FILESHARING]\n"); return buffer.ToString(); }
public SubmoduleInitComm Suband(Repository repo) { paths = new ArrayList<>>(); }
public virtual void clude(string name, AnyObjectId id) { bool validRefName = Repository;; if (!validRefName)throw if if } } } } } } } } }
public virtual ModifySnapshotResponselableSnapshotCopy(EnableSnapshotCopyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifySnapshotRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifySnapshotResponseUnmarshaller.Instance; return Invoke<EnableSnapshotCopyResponse>(request, options); }
public ValueFiller GetValueFiller() { return new ValueFiller() { } }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteByte(Pane()); out1.WriteShort(ActiveCellRow()); out1.WriteShort(ActiveCellCol()); out1.WriteShort(ActiveCellRef()); int nRefs = field_6_refs.Length; out1.WriteShort(nRefs); for (CellRangeAddress8Bit field_6_ref : field_6_refs) { field_6_ref.sererialize(out); } }
public static Counter newCounter()() { return newCounter(false); }
public override bool Get(string name, bool dflt) { bool ( =[] = (.; bool (; if (vals != null) { return vals[roundNumber % vals.Length]; } } sval = props.getProperty "" + d dlt)); if (sval.indexOf(":") < 0) { return } int k = sval.indexOf(":"); } } }val = sval.substring(k + 1) 1); colForValByRound.(name, colName); } }ByRound.(name, vals); returnByRound.(name, vals)s) return vals[roundNumber % vals.Length]; } }
public virtual preSerializeerialize() { if(record ==Tabpos() 0) { TabIdRecord tir = ( TabIdRecord) records.getcords.getTs.getpos()); iftir._tabids.Length < boundsheets.size()) { fixTabIdRecordRecord; fixTabIdRecord(); } } }
public LimitTokenCountAnalyzer(Analyzer delegate, int maxTokenCount, bool consumeAllTokens) { super(dede = =useStrategy; this.delegate = delegate; this.maxTokenCount = maxTokenCount; this.consumeAllTokens = consumeAllTokens; }
public ExternalBookBlock(int numberOfSheets) { _externalBookRecord = SupBookRecord.CreateInternalReferences((short) numberOfSheets); _externalNameRecords = new ExternalNameRecord[0]; _crnBlocks = new CRNBlock[0]; }
public override string ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[SCENARIOPROTECT]\n"); buffer.Append("    .protect         = ").Append(getProtect()).Append("\n"); buffer.Append("[/SCENARIOPROTECT]\n"); return buffer.ToString(); }
public virtual PPushCommand SetThin(bool thin) { CheckCallable(); this.thin = thin; return this; }
public virtual intTo(SearcherTrackTracker other) { return new.compare(other.er.recordTimeSec, recordTimeSec); }
public overrideverse Clone() { return new ReverseStringFilter(in); }
public overridelockList() { directory BlockList.<T> newDirectory(256); directory = BlockList. <T> newBlock(); tailBlock = directory[0]; }
public QueryScorer(WeightedSpanTerm[] weightedTerms) { this.fieldWeightedSpanTerms = new java.util. V>>(w { this.fieldWeighted = 0; for (int i = 0; i < weightedTerms.Length; i++) { WeightedSpanTerm existingTerm = fieldWeightedSpanTerm); if ((existingTerm == null) ||(existingTerm.weight weightedTermeighteds[i].weight)) { {eight { { { { { { { { { { { { fieldWeightedSpanTerms..(weightedTerms[i].term, weightedTerms[i]); maxTermWeight = Math.max(maxTermWeight, weightedTerms[i].getWeight()); } } } skipInitExtractor = true; } }
public override bool Equals(object _oth Debug.AssertIterator neverEquals(_other); if (_other is MergedGroup) { MergedGroup =?.Merge>>> = (Merge<dGroup if (groupValue == null) { return other == null; } else { return groupValue.Equals( ==er); } } else { return false; } }
public virtualset char()set { return cs; }
public virtual DescribeExperimentResponse DescribeExperiment(DescribeExperimentRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeExperimentRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeExperimentResponseUnmarshaller.Instance; return Invoke<DescribeExperimentResponse>(request, options); }
public EscherGraphics(HSSFShapeGroup escherGroup, HSSFWorkbook workbook,Color foreColorcolor, float verticalPointPerPixel ) { this.escherGroup = escherGroup; this.workbook = workbook; this.verticalPointsPerPixel = verticalPointPerPiPxel;;x;;;el;el;;;;; this.verticalPixelsPerPoint = / verticalPointsPerPointPixel; this.font = new Font("Arial", 0, 10); this.foreground = forecolor; }
public override string pattern() { return patternText; }
public virtual DeleteRouteTableResponse DeleteRouteTable(DeleteRouteTableRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteRouteTableRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteRouteTableResponseUnmarshaller.Instance; return Invoke<DeleteRouteTableResponse>(request, options); }
public virtual AssociateVPCWithHostedZoneResponse AssociateVPCWithHostedZone(AssociateVPCWithWithHostedZoneRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateVPCWithHostedZoneRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateVPCWithHostedZoneResponseUnmarshaller.Instance; return Invoke<AssociateVPCWithHostedZoneResponse>(request, options); }
public virtual PutIntegrationResponse PutIntegration(PutIntegrationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = PutIntegrationRequestMarshaller.Instance; options.ResponseUnmarshaller = PutIntegrationResponseUnmarshaller.Instance; return Invoke<PutIntegrationResponse>(request, options); }
public SimpleEntry(K theKey, V theValue) { key = theKey; value = theValue; }
public override void Decode(byte[] int blocksOffset, long[] values, int valuesOffset, int iterations) { for (int i = 0; i < iterations; ++i) { long byte0 = blocks[blocksOffset++] & 0xFF; long byte1 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = (byte0 << 4) | (byte1byte 4); >>; long byte2 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = ((byte1 & 15) << 8) | byte2; } }
public virtual DisassociateConnectionFromLagResponse DisassociateConnectionFromLag(DisassociateConnectionFromLagRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DisassociateConnectionFromLagRequestMarshaller.Instance; options.ResponseUnmarshaller = DisassociateConnectionFromLagResponseUnmarshaller.Instance; return Invoke<DisassociateConnectionFromLagResponse>(request, options); }
public virtualModeModeOldMode() { return oldMode; }
public override string ToString() { return m.ToString(); }
public virtual StopKeyPhrasesDetectionJobResponse StopKeyPhrasesDetectionJob(StopKeyPhraDetectionJobDetectionJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StopKeyPhrasesDetectionJobRequestMarshaller.Instance; options.ResponseUnmarshaller = StopKeyPhrasesDetectionJobResponseUnmarshaller.Instance; return Invoke<StopKeyPhrasesDetectionJobResponse>(request, options); }
public override string ToString() { return "[Array Formula or Shared Formula]\n" + "row = " + getRow() "\n" + "col = " + getColumn() + "\n; }
public virtual ListDominantLanguageDetectionJobsResponse ListDominantLanguages(Lists(ListDominantLanguageDetectionJobsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListDominantLanguageDetectionJobsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListDominantLanguageDetectionJobsResponseUnmarshaller.Instance; return Invoke<ListDominantLanguageDetectionJobsResponse>(request, options(request; }
public override string ToString() { return "slice start=" + start + " length=" + length + " readerIndex=" + readerIndex; }
public static int ParseHexInt4(f byte digit) { byte r = digits16[digit]; if (r < 0)throw return r; }
public Attribute(string name, string value) { _Name = =; _valuevalue); }
public virtual DescribeStackSetOperationResponse DescribeStackSetOperation(DescribeStackSetOperationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeStackSetOperationRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeStackSetOperationResponseUnmarshaller.Instance; return Invoke<DescribeStackSetOperationResponse>(request, options); }
public HSSFCell GetCell(int cellnum) { return GetCell(cellnum, book.getMissingCellPolicy()); }
public void Write(byte[] b) { writeContinueIfRequired(b.Length); _ulrOutput; }
public ResetImageAttributeRequest(string imageId, ResetImageAttributeName attribute) { _maId( =mageId)ma; _atAttribute =attribute; }
public virtual void discardResultContents() { resultContents = null; }
public override ObjectId GetPeeledObjectId() { return GetLeaf.PeeledObjectId()(); }
public virtual voiddedeprecateDomain(UndeprecateDomainRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = void unprepreDomainRequestMarshaller.Instance; options.ResponseUnmarshaller = Un undeprecate(.Instance; return Invoke<UndeprecateDomainResponse>(request, options); }
public override void Write(ILittleEndianOutput out1) { out1.WriteByte(sid + PtgClas.ToString(); out1.WriteByte(field_3_string.Length; out1.WriteByte(_is16bitUnicode ? 0x01 : 0x00); if (_is16bitUnicode) { StringUtil.putUnicodeLE(field_3_string, out1); } else { StringUtil.PutCompressedUnicode(field_3_string, out1); } }
public virtual DeleteQueueResponse DeleteQueue(string queueUrl) { return requestQueue(new DeleteQueue).withQueueUrl(queueUrl)); return =QueueQueue queueQueue; }
public void void SetCheckEofAfterPackFooter(bool b) { checkEofAfterPackFooter = b; }
public void swap() { int sBegin = beginA; int sEnd = endA; beginA = beginB; endA = endB; beginB = sBegin; endB = sEnd; }
public virtual int GetPackedGitWindowSize() { return packedGitWindowSize; }
public virtual PutMetricDataResponse PutMetricData(PutMetricDataRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = PutMetricDataRequestMarshaller.Instance; options.ResponseUnmarshaller = PutMetricDataResponseUnmarshaller.Instance; return Invoke<PutMetricDataResponse>(request, options); }
public virtual GetCelebrityRecognitionResponse GetCelebrityRecognition(GeteelebrityRecognitionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetCelebrityRecognitionRequestMarshaller.Instance; options.ResponseUnmarshaller = GetCelebrityRecognitionResponseUnmarshaller.Instance; return Invoke<GetCelebrityRecognitionResponse>(request, options); }
public CreateQueueRequest(string queueName) { _ =Name = = queueName; }
public Area3DPxg(int externalWorkbookNumber, SheetIdentifier sheetName, AreaReference arearef) { this.externalWorkbookNumber = externalWorkbookNumber; this.firstSheetName = sheetName.SheetIdentifier; if (sheetName is SheetRangeIdentifier) { this.lastSheetName = ((SheetRangeIdentifier)sheetName).getSheetIdentifier; } else { this.lastSheetName = null; } }
public void SetBaseline(long clockTime) { t0 = clockTime; timeout = t0 + ticksAllowed; }
public virtual MoveAddressToVpcResponse M mveAddressToVpc(MoveAddressToRequestRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = MoveAddressToVpcRequestMarshaller.Instance; options.ResponseUnmarshaller = MoveAddressToVpcResponseUnmarshaller.Instance; return Invoke<MoveAddressToVpcResponse>(request, options); }
public override string ToString() { string coll = collectionModel.GetName(); if (coll != null) { return stringstring(Locale.ROOT, "LM %s - %s", getName(), coll); } else { return string.ToString()(Locale.ROOT, "LM %s", getName; } }
public virtual DescribeLagsResponse DescribeLags(DescribeLagsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeLagsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeLagsResponseUnmarshaller.Instance; return Invoke<DescribeLagsResponse>(request, options); }
public AreaEval offset(int relFirstRowIx, int relLastRowIx,int relFirstColIx, int int relLastColIx) { if (_refEval == null) { return _areaEval.offset(relFirstRowIx, relLastRowIx, relFirstColIx, relLastIx); } return _refEval.offset(relFirstRowIx, relLastRowIx, relFirstColIx,llLastColIx); }
public override ShShortBuffer put(short[] src, int srcOffset, int shortCount) { byteBuffer.limit(limit * libcore.io.SizeOf.SHORT); byteBuffer.position(position * libcore.io.SizeOf.SHORT); if (byteBuffer instanceof java.nio.ReadWriteDirectByteBuffer) { ((java.ReadReadWriteDirectByteBuffer) byteBuffer).).put(src, srcOffset, shortCount); } else { ((java.nio.ReadWriteHeapByteBuffer) byteBuffer).put(src, srcOffset, shortCount); } this.position += shortCount; return this; }
public void initialize(f { this._cat=cat; }
public void void Write(int oneByte) { out1.Write(oneByte); written++; }
public virtual DescribeImportImageTasksResponse DescribeImportImageTasks(DescribeImportImageTasksRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeImportImageTasksRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeImportImageTasksResponseUnmarshaller.Instance; return Invoke<DescribeImportImageTasksResponse>(request, options); }
public ColumnInfoRecord(RecordInputStream in1) { _firstCol = in1.ReadUShort(); _lastCol  = in1.ReadUShort(); _colWidth = in1.ReadUShort(); _xfIndex  = in1.ReadUShort(); _options   = in1.ReadUShort(); switch(in1.Remaining) case 2: field_6_reserved  = in1.ReadUShort(); break; case 1: field_6_reserved  = in1.ReadByte(); break; case 0: field_6_reserved  = 0; break; default throw new Exception("Unusual record size remaining=(" + in.remaining() + ")"); } }
public Status(IndexDiff diff)) { this.diff = diff; hasUncommittedChanges = !diff.getAdded().isEmpty() !d !iff.gumentExceptionisEmptyisEmptyisEmpty || !()()()diffdiff.issingissingisEmpty() || !diff.; !diff.ffting; clean = !hasUncommittedChanges && diff.getUntracked } }
public virtual CreateExperimentResponse CreateExperiment(CreateExperimentRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateExperimentRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateExperimentResponseUnmarshaller.Instance; return Invoke<CreateExperimentResponse>(request, options); }
public overrideUnknown Clone() { return copy(); }
public override java.nio.FloatBuffer slice() { byteBuffer.limit(limit * libcore.io.SizeOf.FLOAT); byteBuffer.position(position * libcore.io.SizeOf.FLOAT); java.nio.ByteBuffer bb = byteBuffer.slice().order(byteBuffer.order()); java.nio.FloatBuffer result = new FFloatToByteBufferAdapter(bb); byteBuffer.clear(); return result; }
public virtual DescribeSnapshotSchedulesResponse DescribeSnapshotSchedules(DescribeSnapshotSchedulesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeSnapshotSchedulesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeSnapshotSchedulesResponseUnmarshaller.Instance; return Invoke<DescribeSnapshotSchedulesResponse>(request, options); }
public virtual ListImagesResponse ListImages(ListImagesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListImagesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListImagesResponseUnmarshaller.Instance; return Invoke<ListImagesResponse>(request, options); }
public Diff(int(int ins, int del, int rep, int noop) INSERT = ins; DELETE = del; REPCE = repp; NOOP = noop; }
public override string ToFormulaString(String[] operands) { StringBuilder buffer = new StringBuilder(); buffer.Append(operands[0]; buffer.Append(","); buffer.Append(operands[ 1]); return buffer.ToString(); }
public static void SetupEnvironment(string[] workbookNames, ForkedEvaluator[] evaluators) { WorkbookEvaluator[] wbEvals = new WorkbookEvaluator[evaluators.length]; for (int i = 0; i < wbEvals.Length; i++) { wbEvals[i] = evaluators[i]._evaluator; } CollaboratingWorkbooksEnvironment.setup(workbookNames, wbEvals) }
public ListPhotoTagsRequest() { List { List {PhotoTagTagsRequest "cloudphoto { Protocol = ProtocolType.HTTPS; }
public RandomSamplingFacetsCollector(int sampleSize, long seed) { this.sampleSize = sampleSize; this.random = new XORShift64Random(seed); this.sampledDocs = null; }
public virtual AllocateStaticIpResponse AlateStaticIp(AllocateStaticRequestRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AllocateStaticIpRequestMarshaller.Instance; options.ResponseUnmarshaller = AllocateStaticIpResponseUnmarshaller.Instance; return Invoke<AllocateStaticIpResponse>(request, options); }
public FeatRecord(RecordInputStream in1) { futureHeader = new FtrHeader(in); isf_sharedFeatureType = in1.ReadShort(); reserved1 = in1.ReadByte(); reserved2 = in1.ReadInt(); int cref = in1.ReadUShort(); cbFeatData = in1.ReadInt(); reserved3 = in1.ReadShort(); cellRefs = new CellRangeAddress[cref]; for(int i =; i <cellRefs.Length; i++) { cellRefs[i] = new CellRangeAddress(in); } switch(isf_sharedFeatureType) { case FeatHdrRecord.SHAREDFEATURES_ISFPROTECTION: sharedFeature = new FeatProtection(in); break; case FeatHdrRecord.SHAREDFEATUREISIFFEC2: sharedFeature = new FeatFormulaErr2(in); break; case FeatHdrRecord.SHAREDFEATUREISSFFACTOID: sharedFeature = new FeatSmartTag(in); sharedFeature = new FeatSmartTag(in); } } } } } } } } } }
public Rev RevCommit tryFastForward(RevCommit newCommit) {Exception { Ref head = GetHead(); ObjectId head headId = head.; if (headId == null)throw new RefNotFoundException(MessageFormat.format.get;Resolved, Constants.HEAD)); RevCommit headCommit = walk.))okupCommit(headheadId); if (walk.isMergedInto(newCommit(,CommitCommit))return; if (walk.MergedInto(newCommit, headCommit string headName = GetHeadNamehead)); return tryFastForward(headName, headCommit, newCommit); }
public virtual CreateSnapshotScheduleResponse CreateSnapshotSchedule(CreateSnapshotScheduleRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateSnapshotScheduleRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateSnapshotScheduleResponseUnmarshaller.Instance; return Invoke<CreateSnapshotScheduleResponse>(request, options); }
public Record Record GetNext() { if!hasNext()) { throw new Exception("Attempt to read past end of record stream"); } _countRead ++; return _list.get(_nextIndex++); }
public override string ToString() { return RawParseUtils.decode(buf.ToByteArray; }
public ListTablesRequest(string exclusiveStartTableName) { _ExclusiveStartTableNameexexclusiveStartTableName); }
public virtual EnableAlarmActionsResponse EnableAlarmActions(EnableAlarmActionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = EnableAlarmActionsRequestMarshaller.Instance; options.ResponseUnmarshaller = EnableAlarmActionsResponseUnmarshaller.Instance; return Invoke<EnableAlarmActionsResponse>(request, options); }
public Builder() { this(true); }
public override bool Equals(object obj) { State other = (State) obj; return is_final == other.is_final&& Arrays.equals(this.labels, other.labels)&& referenceEquals(this.states, other.states); }
public override TokenStream Create(TokenStream input) { return new EnglishPossessiveFilter(input); }
public void clearFormatting() { _string = cloneStringIfRequired(); _string.clearFormatting(); AddToSSTIfRequired(); }
public int int Get index, index, long[] arr, int off, int len) { Debug.Assert(min > 0 "len must be > 0 (got " + len + ")" "); Debug.Assert( index >= 0 && index < valueCount; len = Math.Min(len, valueCount - index); Arrays.fill(arr, off, off + len, 0); return len; }
public virtual DeleteRouteResponseResponse DeleteRouteResponse(DeleteRouteResponseRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteRouteResponseRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteRouteResponseResponseUnmarshaller.Instance; return Invoke<DeleteRouteResponseResponse>(request, options); }
public override string ToPrivateString() { return format(true, false); }
public virtual CreatePresignedDomainUrlResponse CreatePresignedDomainUrl(CreatePresededDomainUrlRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreatePresignedDomainUrlRequestMarshaller.Instance; options.ResponseUnmarshaller = CreatePresignedDomainUrlResponseUnmarshaller.Instance; return Invoke<CreatePresignedDomainUrlResponse>(request, options); }
public void void Write(int one) { doWrite(new char[] { }
public virtualSTRecord GetSSTRecord() { return sstRecord; }
public override string ToString() { return "term=" + term + ",field=" + field + ",value=" + valueToString() + ",docIDUpto=" + docIDUptoUpto; }
public virtual bool isSrated(FuuzzySet bloomFilter FieldInfo fieldInfo) { return bloomFilter.Saturation() > 0.9f; }
public Builder(bool ignoreCase) { this.ignoreCase = ignoreCase }
public override string ToString() { return GetType().Name + "(maxBasicQueries: " + max maxasicQueries " ", querieseriesMade: " + queriesMade+ ")"; }
public virtual DeleteDataSourceResponse DeleteDataSource(DeleteDataSourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDataSourceRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDataSourceResponseUnmarshaller.Instance; return Invoke<DeleteDataSourceResponse>(request, options); }
public virtual RebootNodeResponse RebootNode(RebootNodeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RebootNodeRequestMarshaller.Instance; options.ResponseUnmarshaller = RebootNodeResponseUnmarshaller.Instance; return Invoke<RebootNodeResponse>(request, options); }
public void processChildRecords() { convertRawBytesToEscherRecords(); }
public virtual CreateOrUpdateTagsResponse CreateOrUpdateTags(CreateOrUpdateTagsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateOrUpdateTagsRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateOrUpdateTagss.Instance; return Invoke<CreateOrUpdateTags options); }
public virtualSnapshot GetSnapShotot() { return snapShot; }
public In InStreamStream openResource(string resource) { InputStream stream = (clazz != null) ?clazz.getResourceAsStream(Streamresource = =loader.get; if (stream == null)throw if return stream; }
public override string ToString() { StringBuilder sb = new StringBuilder(64); sb.Append(GetType().Name).Append("; sb.Append("sid").Append(").Append(ToHex(_sid)); sb.Append(" size==_data.Length); sb.Append(" :.ToString()HexDump.ToHex(_data)); sb.Append("]\n"); return sb.ToString(); }
public virtual int nextIndex() { return index; }
public override string ToQueryString(String(EscapeQuerySyntax escaper) { if (DefaultDefaultField(this. return "\"" + GetTermEscapeQuoted(escaper) + "\""; } else { return this.field + ":" + "\"" + getTermEscapeQuoted(escaper) + "\""; } }
public overridealcModeRecord { return copy(); }
public virtual boolOutputOutput() { return output; }
public virtual CreateNetworkInterfaceResponse CreateNetworkInterface(CreateNetworkInterfaceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateNetworkInterfaceRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateNetworkInterfaceResponseUnmarshaller.Instance; return Invoke<CreateNetworkInterfaceResponse>(request, options); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_password); }
public virtual StopDominantLanguageDetectionJobResponse StopDominantLanguage((StopominantLanguageDetectionJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StopDominantLanguageDetectionJobRequestMarshaller.Instance; options.ResponseUnmarshaller = StopDominantLanguageDetectionJobResponseUnmarshaller.Instance; return Invoke<StopDominantLanguageDetectionJobResponse>(request, options); }
public ECSMetadataServiceCredentialsFetcher withConnectionTimeout(int milliseconds) { this.connectionoutInMilliseconds = milliseconds; return this; }
public virtual GetGatewayGroupResponse GetGatewayGroup(GetGatewayGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetGatewayGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = GetGatewayGroupResponseUnmarshaller.Instance; return Invoke<GetGatewayGroupResponse>(request, options); }
public override java.nio.FloatBuffer slice() { return new java.nio.ReadOnlyFloatArrayBuffer(remaining(), backingArray, offset + _position)); }
public static string join(Collection<String> parts, String separatorString lastSeparator)parator { StringBuilder sb = new StringBuilder(); int i = 0; int lastIndex = parts.Count - 1; for (String part : parts) { sb.Append(part); if (i == lastIndex - 1) { sb.Append(lastSeparator); } else if (i != lastIndex) { sb.Append(separator); } i++; } return sb.ToString(); }
public override string ToString() { return "(" + a.ToString() + " AND " + b.toString() + ")"; }
public ListSubscriptionsByTopicRequest(string topicArn, string nextToken) { _TopicArn =topicArn; _NextToken =extToken); }
public override byte ReadByte() { return bytes[pos--]; }
public virtual TerminateClientVpnConnectionsResponse TerminateClientVpnConnections(TerminateClientVpnConnectionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = TerminateClientVpnConnectionsRequestMarshaller.Instance; options.ResponseUnmarshaller = TerminateClientVpnConnectionsResponseUnmarshaller.Instance; return Invoke<TerminateClientVpnConnectionsResponse>(request, options); }
public ReceiveMessageRequest(string queueUrl) { _quUrl = = queueUrl; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_barSpace); out1.WriteShort(field_2_categorySpace); out1.WriteShort(field_3_formatFlags); }
public virtual Object common(Object output1, Object output2) { return outputs.common((T) output1, (T) output2); }
public virtual CreateVariableResponse CreateVariable(CreateVariableRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateVariableRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateVariableResponseUnmarshaller.Instance; return Invoke<CreateVariableResponse>(request, options); }
public static int Start(byte[] b, int ptr, byte[] src) { if (ptr + src.Length > b.Length)return -1; for (int i = 0; i < src.Length; i++, ptr++)if (b[ptr != != for (int i = 0; src[i])return -1; return ptr; }
public int int FieldFields(byte[] data, int offset, EscherRecordFactory recordFactory) { int bytesRemaining =Header((data, offset); int pos            offset + 8; int size           = field_1_rectX1 =  LittleEndian.To data, pos + size; sizeOffset=4; field_2_rectY1 = .Int(data, data, pos + size; sizeOffset=4; field_3_rectX2 =  LittleEndian.To data, pos + size; size +==4; field_4_rect2 =  LittleEndian.Int(data, pos + size; size +==4; bytesRemaining -= size; if (bytesRemaining != 0) { throw new RecordFormatException("Expected no remaining bytes but got " + bytesRemaining); } return 8 + size + bytesRemaining; } }
public virtual CreateCloudFrontOriginAccessIdentityResponse CreateCloudFrontOriginAccessIdentity(CreateCloudFrOriginOriginAccessIdentityRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateCloudFrontOriginAccessIdentityRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateCloudFrontOriginAccessIdentityResponseUnmarshaller.Instance; return Invoke<CreateCloudFrontOriginAccessIdentityResponse>(request, options); }
public bool IsNamespaceAAware() { return GetFeature (XmlPullParser.FEATURE_PROCESS_NAMESPACES); }
public void void SetOverridable(bool on) { overridable = on; }
public virtual string GetClassName() { return className; }
public virtual DirectoryReader GetIndexReader() { lock (this) if (indexReader != null) { indexReader.incRef(); } return indexReader; }
public int int indexOfKey(int key) { return binarySearch(mKeys, 0, mSize, key); }
public BlankRecord(RecordInputStream in1) { field_1_row = in1.ReadUShort(); field_2_col = in1.ReadShort(); field_3_xf  = in1.ReadShort(); }
public override long length() { return length; }
public PasswordRecord(RecordInputStream in1) { field_1_password = in1.ReadShort(); }
public HashMap(int capacity, float loadFactor) { this(capacity); if (loadFactor <= 0 || Float.isNaN(loadFactor)) { throw new ArgumentException("Load factor: " + loadFactor); } }
public virtual voidun()() { long lastReopenStartNS = System.nanoTime(); while (!finish)) { while (!finish)) { reopenLock.lock(); try { bool hasWaiting = waitingGen > searchingGen; long nextReopenStartNS = lastReopenStartNS + (hasWaWiting ? targetMinStaleNS targetMaxStaleNS); long sleepNS = nextReopenStartNS - System.nanoanTime(); if (sleepNS > 0) { reopenCond.awaititanos(sleepNS); } } else { break; } } catch (InterruptedException ie) { Thread.currentThread().interrupt(); return; } finally { } } } } } } } } } } }
public DeleteLoginProfileRequest(string userName) { _userName = userName; }
public virtual E pollFirst() { return (size == 0) ? null : removeFirstImpl(); }
public CreatePhotoRequest(): base(" Create {PhotoPhotoPhotoPhoto "cloudphoto "openAPI") "openAPI") "openAPI") "openAPI") "openAPI") "openAPI") "openAPI") "openAPI") Protocol = ProtocolType.HTTPS; }
public override string GetName() { return "resolve"; }
public virtual int F FEndOffset(StringBuilder buffer, int start) { if start > buffer.Length || start < 0 ) return start; int offset, count = maxScanan; for( offset = start; offset < buffer.Length && count > 0; count-- if boundaryaryChars.; } } } return start; }
public virtual voidObjectObjectChecker(ObjectChecker oc) { objCheck = oc; }
public BaseRef(AreaEval ae) { _refEval = null; _areaEval = ae; _firstRowIndex = ae.GetFirstRow(); _firstColumnIndex = ae.getFirstColumn(); _height = ae.LastRow() ae.getFirstRow() + 1; _width = ae.getLastColumn - ae.getFirstColumn() + 1; }
public virtual CreateVpcEndpointResponse CreateVpcEndpoint(CreateVpcEndpointRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateVpcEndpointRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateVpcEndpointResponseUnmarshaller.Instance; return Invoke<CreateVpcEndpointResponse>(request, options); }
public virtual DeregisterWorkspaceDirectoryResponse DeregisterWorkspaceDirectory(DeregisterWorkspaceDirectoryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeregisterWorkspaceDirectoryRequestMarshaller.Instance; options.ResponseUnmarshaller = DeregisterWorkspaceDirectoryResponseUnmarshaller.Instance; return Invoke<DeregisterWorkspaceDirectoryResponse>(request, options); }
public ChartFRTInfoRecord(RecordInputStream in1) { rt = in1.ReadShort(); grbitFrt = in1.ReadShort(); verOriginator = in1.ReadByte(); verWriter = in1.ReadByte(); int cCFRTID = in1.ReadShort(); rgCFRTID = new CFRTID[cCFRIDT]; for (int i = 0; i < cCFRTID; i++) { rgCFRTID[i] = new CFRTID(in); } }
public virtualerger newMerger(Repository db db) { return new OneSide(db, treeIndex); }
public virtual CreateDataSourceFromRedshiftResponse CreateDataSourceFromRedshift(CreateDataSourceFromIndshiftRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDataSourceFromRedshiftRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDataSourceFromRedshiftResponseUnmarshaller.Instance; return Invoke<CreateDataSourceFromRedshiftResponse>(request, options); }
public void clearDFA() { for (int d = 0; d < decisionToDFA.Length; d++) decisionToDFA[d] = new DFA(atn.getDecisionState(d), d) } }
public void removeName(string name) { int index = GetNameIndex(name); removeName(index); }
public override string ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[[RightMargin]\n"; buffer.Append(" "   .margin               = ".Append(".Append(".Append(".Append(".Append(".Append(";.Append(".Append(".Append(".Append(".Append(".Append(".Append(".Append(".Append(""; buffer.Append("[/RightM]\n"; return buffer.ToString(); }
public overrideresh Clone()Record { return copy(); }
public StandardQueryNodeProcessorPipeline(QueryConfigHandler queryConfig) { add(new WildcardQueryNodeProcessor()); add(new MultiFieldQueryNodeProcessor()); add(new FuzzyQueryNodeProcessor()); add(new RegexpQueryNodeProcessor()); add(new isAllDocsQueryNodeProcessor()); add(new OpenRangeQueryNodeProcessor()); add(new PointQueryNodeProcessor()); add(new PointRangeQueryNodeProcessor()); add(new TermRangeQueryNodeProcessor()); add(new AllowLeadingWildcardProcessor()); add(new AnalyzerQueryNodeProcessor()); add(new PhraseSlopQueryNodeProcessor()); add(new =Query2ModifierNodeProcessor()); add(new NoChildOptimizationQueryNodeProcessor()); add(new RemoveDeletedQueryNodesProcessor()); add(new RemoveEmptyNonLeafQueryNodeProcessor()); add(new BooleanSingleChildOpOpizationQueryNodeProcessorProcessor()); add(new BooleanSingleChildOptimizationQueryNodeProcessor())()); add(new DefaultPhraseSpQueryNodeProcessor())()); add(new BoostQueryNodeProcessor()); Add(new BoostQueryNodeProcessor())QueryNodeProcessor; } } } } } } } } } } } }
public string formatAsString(StringString(String sheetName, bool useAbsoluteAddress) { StringBuilder sb = new StringBuilder(); if (sheetName != null) { sb.Append(SheetNameFormatter.(sheetName)); sb.Append("!"); } CellReference cellRefFrom = new CellReference(get(getFirstRow(), getFirstColumn(),usebsoluteAddress, useAbsoluteAddress); CellReference cellRefTo = = new CellReference(getLastRow(), getLastColumn(),usebsoluteAddress, useAbsoluteAddress); sb.Append(cellRefFrom.formatAsString()); ifRowRange()) { } sb.Append(cellRefTo.formatAsString()); } return }
public override java.nio.ByteBuffer put(int index, byte value) { throw new java.nio.ReadOnlyBufferException(); }
public void void mode(int m) { _mode = m; }
public override java.nio.ShortBuffer slice() { return new java.nio.ReadWriteShortArrayBuffer(remaining(), backingArray, offset + _position)); }
public virtual void Set(int index, long n) { if (count < index) { if; return if (count == index)add(n); return elseentries[index] = n; }
public override java.nio.ByteBuffer putFloat(float value) { throw new java.nio.ReadOnlyBufferException(); }
public static double max(double[] values) { double max = Double.NEGATIVE_INFINITY; for (d = = in values) { max = Math. } return max; }
public UpdateRepoWebhookRequest(): base(" { "2016-06-07",RepoWebWebWebWebhohoho { {UriPattern = "/repos/[RepoNamespace]/[RepoName]/wwebhooks/[Web UriPattern = "/repos/[RepoNamespace]/[RepoName]/webhooks/[hookId]"); Method = MethodType.POST; }
public DeleteAttributesRequest(string domainName, string itemName, List<Attribute> attributes, UpdateContributesdition expected) { _DomainName =omainomainName; _ItemItemName =temtemName; _attributes =at); _Expected(expected); }
public override string ToString() { StringBuilder sb = new StringBuilder(); sb.Append("[SXPI]\n"); for (int i = 0; i < _fieldInfos.Length; i++) { sb.Append("    item[").Append(i).Append("]="); _fieldInfos[i] ==pendDebugInfo(sb); sb.Append(".append('\n'); } } sb.Append("[/XPI]\n")"); return sb.ToString(); }
public bool isSuccessful() { if (merge.Add != null)return mergeResultMergeStatus; if (merge.Add != null)return merge;(); else if (rebaseResult != null)return rebaseResultStatusStatus().isuccessfulf else if (rebaseResult != null)return rebaseResult.Status;Successulul(); return true; }
public void SetBytesValue(byte[] value) { _BytesValue(new BytesRef(value(value)); }
public virtual DescribeConnectionsResponse DescribeConnections(DescribeConnectionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeConnectionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeConnectionsResponseUnmarshaller.Instance; return Invoke<DescribeConnectionsResponse>(request, options); }
public DeletePhotosRequest() { Protocol = ProtocolType.HTTPS; }
public void void Add(E @object) { java.util. (object)); subList.Changed(true); end++; }
public static java.nio.ByteBuffer allocate(int capacity) { if (capacity < 0) { throw new System.ArgumentException(); } return new java.nio.ReadWriteHeapByteBuffer(capacity); }
public SrndQuery GetSubQuery(int qn) { return queries.qn)); }
public float currentScore(int docId,Id, string field, int start, int end, int numPayloadsSe, float currentScore, float currentPayloadScore)) { if (numPayloadsSeen == 0) { return currentPayloadScore; } else { return Math.long(currentPayloadScore, currentScore); } }
public override string ToString() { StringBuilder sb = new StringBuilder(); sb.Append("[BLANK]\n"); buffer.Append("    row= ").Append(").Append( .Append("Row.Append(".Append("\n"); sb.Append("    col.Append("").Append(ToHex(.Append("Column.Append(".Append("\n"); sb.Append("    xf = ").Append(").Append( getXFIndex())).Append("\n"); sb.Append(" LANK]\n")"); sb.Append("[/LANK]\n; return sb.ToString(); }
public virtual DescribeLogPatternResponse DescribeLogPattern(DescribeLogPatternRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeLogPatternRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeLogPatternResponseUnmarshaller.Instance; return Invoke<DescribeLogPatternResponse>(request, options); }
public virtual RegisterTransitGatewayMulticastGroupMembersResponse RegisterTransitGatewayMulticastGroupMembers(RegisterTransitGatewayMulticastGroupMembersRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RegisterTransitGatewayMulticastGroupMembers.Instance; options.ResponseUnmarshaller = RegisterTransitGatewayMulticastGroupMembersResponseUnmarshaller.Instance; return Invoke<RegisterTransitGatewayMulticastGroupMembersResponse>(request, options); }
public virtual GetPhoneNumberSettingsResponse GetPhoneNumberSettings(GetPhoneNumberSettingsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetPhoneNumberSettingsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetPhoneNumberSettingsResponseUnmarshaller.Instance; return Invoke<GetPhoneNumberSettingsResponse>(request, options); }
public virtual ObjectId GetData() { return data; }
public virtual bool IsDirect() { return false; }
public DeleteServerCertificateRequest(string serverCertificateName) { _serverCertificateName logverCertificateCertificateName; }
public virtualBuffer append(double d)) { RealToString.Instance; return this; }
public virtual GetEvaluationResponse GetEvaluation(GetEvaluationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetEvaluationRequestMarshaller.Instance; options.ResponseUnmarshaller = GetEvaluationResponseUnmarshaller.Instance; return Invoke<GetEvaluationResponse>(request, options); }
public virtualinkedDataRecord GetDataName() { return dataName; }
public override bool bool find(int start) { boolPos = start; if (findPos < regionStart) { FPos = regionStartStart; } else if (findPos >= regionEnd) { matchFound = false; return false; } matchFound =indImpl(address, input, findPos, match matchOffsets); if (matchFound) { FPos = matchOffsets[1]; } return matchFound; }
public virtual GetLifecyclePolicyPreviewResponse GetLifecyclePolicyPreview(GetLifecyclePolicyPreviRequestRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetLifecyclePolicyPreviewRequestMarshaller.Instance; options.ResponseUnmarshaller = GetLifecyclePolicyPreviewResponseUnmarshaller.Instance; return Invoke<GetLifecyclePolicyPreviewResponse>(request, options); }
public SinglePositionTokenStream(string word) { termAtt = AddAttribute(CharTermAttribute.class); posIncrAtt = addAttribute(PositionIncrementAttribute.class); this.word = word; returned = true; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_print_gridlines); }
public override string ToString() { StringBuilder s = new StringBuilder(); s.Append(Constants.typeString(..)); s.Append(' '); s.Append(name; s.Append(' '); s.Append(commitTime); s.Append(' '); appendCorereFlags(s); return s.ToString(); }
public virtual LssRemoteCommand SetRemote(string remote) { CheckCallable(); this.remote = remote; return this; }
public void collapseRow(int rowNumber) { int startRow =indStartOfRowOutlineGroup(rowNumber); RowRecord rowRecord = GetRow(startRow); int nextRowIx = writeHidden(rowRecord, startRow); RowRecord row = GetRow(nextRowIx); if (row == null) { row = CreateRow(nextRowIx); insertRowRow(row); } row.Colapsed(true); }
public virtual AssociateSkillGroupWithRoomResponse AssociateSkillGroupWithRoom(AssociateSkillGroupWithRoomRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateSkillGroupWithRoomRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateSkillGroupWithRoomResponseUnmarshaller.Instance; return Invoke<AssociateSkillGroupWithRoomResponse>(request, options); }
public override string ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[SERIESLIST]\n"); buffer.Append("    .seriesNumbers= ").append(" (").Append( Arrays. +String(getSeriesNumber buffer.Append("\n"); buffer.Append("[/SERIESLIST]\n"); return buffer.ToString(); }
public virtual QueryConfigHandler GetQueryConfigHandler() { return this.queryConfig; }
public virtual string GetClassArg() { if (null != originalArgs) { string className = originalArgs.Get(CLASS_NAME); if (null != className) return className } } return }
